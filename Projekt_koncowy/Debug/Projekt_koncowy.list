
Projekt_koncowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800d060  0800d060  0001d060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d56c  0800d56c  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800d56c  0800d56c  0001d56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d574  0800d574  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d574  0800d574  0001d574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d578  0800d578  0001d578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800d57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000248  0800d7c4  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800d7c4  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec95  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a83  00000000  00000000  0003ef0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00042990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  00043f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294f0  00000000  00000000  00045348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb87  00000000  00000000  0006e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5b50  00000000  00000000  0008a3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ff0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000730c  00000000  00000000  0017ff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d048 	.word	0x0800d048

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800d048 	.word	0x0800d048

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	b299      	uxth	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f107 020f 	add.w	r2, r7, #15
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	f001 ffe5 	bl	800301c <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8001052:	2310      	movs	r3, #16
 8001054:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	f001 ffd6 	bl	800301c <HAL_I2C_Master_Transmit>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b299      	uxth	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	f002 f8b5 	bl	8003204 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	7b7a      	ldrb	r2, [r7, #13]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010c0 <BH1750_ReadIlluminance_lux+0x48>
 80010ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	3f99999a 	.word	0x3f99999a

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f001 fefc 	bl	8002efc <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 fdad 	bl	8001c68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f002 fbe5 	bl	80038e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 fda4 	bl	8001c68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f002 fc27 	bl	8003976 <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 fd9b 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000274 	.word	0x20000274
 800113c:	40005400 	.word	0x40005400
 8001140:	20404768 	.word	0x20404768

08001144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_I2C_MspInit+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d128      	bne.n	80011b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001190:	2304      	movs	r3, #4
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_I2C_MspInit+0x84>)
 800119c:	f001 fc9e 	bl	8002adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 fe3e 	bl	8002e64 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7d9b      	ldrb	r3, [r3, #22]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d115      	bne.n	800121c <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2204      	movs	r2, #4
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f842 	bl	800128c <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2204      	movs	r2, #4
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f839 	bl	800128c <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 800121a:	e005      	b.n	8001228 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2208      	movs	r2, #8
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f832 	bl	800128c <lcd_write>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6898      	ldr	r0, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	899b      	ldrh	r3, [r3, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	f001 fe0c 	bl	8002e64 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d9b      	ldrb	r3, [r3, #22]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d111      	bne.n	8001278 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2204      	movs	r2, #4
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f814 	bl	800128c <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2204      	movs	r2, #4
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f80b 	bl	800128c <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001276:	e005      	b.n	8001284 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2208      	movs	r2, #8
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f804 	bl	800128c <lcd_write>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f001 fddc 	bl	8002e64 <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e019      	b.n	80012e6 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	8819      	ldrh	r1, [r3, #0]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	fa42 f303 	asr.w	r3, r2, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f001 fdc2 	bl	8002e64 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3e1      	bcc.n	80012b2 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6918      	ldr	r0, [r3, #16]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	8a9b      	ldrh	r3, [r3, #20]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f001 fdb3 	bl	8002e64 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 80012fe:	2132      	movs	r1, #50	; 0x32
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f804 	bl	800130e <lcd_delay_us>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fdb8 	bl	8004e9c <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 800132c:	bf00      	nop
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f8      	bhi.n	800132e <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fe1b 	bl	8004f7c <HAL_TIM_Base_Stop>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 800135c:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffd4 	bl	800130e <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7d9b      	ldrb	r3, [r3, #22]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d120      	bne.n	80013b0 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 800136e:	2103      	movs	r1, #3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff2b 	bl	80011cc <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001376:	f241 0167 	movw	r1, #4199	; 0x1067
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffc7 	bl	800130e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001380:	2103      	movs	r1, #3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff22 	bl	80011cc <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001388:	21c8      	movs	r1, #200	; 0xc8
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffbf 	bl	800130e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001390:	2103      	movs	r1, #3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff1a 	bl	80011cc <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001398:	2102      	movs	r1, #2
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff16 	bl	80011cc <lcd_write_command>

    hlcd->IsInitialized = 1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80013a6:	2128      	movs	r1, #40	; 0x28
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff0f 	bl	80011cc <lcd_write_command>
 80013ae:	e01f      	b.n	80013f0 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7d9b      	ldrb	r3, [r3, #22]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11b      	bne.n	80013f0 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013b8:	2130      	movs	r1, #48	; 0x30
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff06 	bl	80011cc <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80013c0:	f241 0167 	movw	r1, #4199	; 0x1067
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffa2 	bl	800130e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013ca:	2130      	movs	r1, #48	; 0x30
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fefd 	bl	80011cc <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80013d2:	21c8      	movs	r1, #200	; 0xc8
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff9a 	bl	800130e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013da:	2130      	movs	r1, #48	; 0x30
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fef5 	bl	80011cc <lcd_write_command>

	hlcd->IsInitialized = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 80013e8:	2138      	movs	r1, #56	; 0x38
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff feee 	bl	80011cc <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 80013f0:	2101      	movs	r1, #1
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff feea 	bl	80011cc <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 80013f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff86 	bl	800130e <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001402:	210c      	movs	r1, #12
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fee1 	bl	80011cc <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800140a:	2106      	movs	r1, #6
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fedd 	bl	80011cc <lcd_write_command>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e00a      	b.n	8001440 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fefb 	bl	8001230 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfc      	ldrb	r4, [r7, #15]
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f7fe fee4 	bl	8000210 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	429c      	cmp	r4, r3
 800144c:	d3ed      	bcc.n	800142a <LCD_printStr+0x10>
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
 8001464:	4613      	mov	r3, r2
 8001466:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <LCD_SetCursor+0x30>)
 800146c:	5cd2      	ldrb	r2, [r2, r3]
 800146e:	78bb      	ldrb	r3, [r7, #2]
 8001470:	4413      	add	r3, r2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b80      	subs	r3, #128	; 0x80
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fea6 	bl	80011cc <lcd_write_command>
  #endif
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800d088 	.word	0x0800d088

0800148c <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 800148c:	b40e      	push	{r1, r2, r3}
 800148e:	b580      	push	{r7, lr}
 8001490:	b095      	sub	sp, #84	; 0x54
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001496:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800149a:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80014a4:	4618      	mov	r0, r3
 80014a6:	f008 fb27 	bl	8009af8 <vsiprintf>
  LCD_printStr(hlcd, buffer);
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ffb2 	bl	800141a <LCD_printStr>
  va_end(args);
}
 80014b6:	bf00      	nop
 80014b8:	3754      	adds	r7, #84	; 0x54
 80014ba:	46bd      	mov	sp, r7
 80014bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014c0:	b003      	add	sp, #12
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_Btn_Pin) {
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d4:	d117      	bne.n	8001506 <HAL_GPIO_EXTI_Callback+0x42>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80014d6:	2101      	movs	r1, #1
 80014d8:	4827      	ldr	r0, [pc, #156]	; (8001578 <HAL_GPIO_EXTI_Callback+0xb4>)
 80014da:	f001 fcdc 	bl	8002e96 <HAL_GPIO_TogglePin>
		uart_flag = !uart_flag;
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_GPIO_EXTI_Callback+0xb8>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_GPIO_EXTI_Callback+0xb8>)
 80014fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*) msg_str, strlen("999"));
 80014fc:	2203      	movs	r2, #3
 80014fe:	4920      	ldr	r1, [pc, #128]	; (8001580 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001500:	4820      	ldr	r0, [pc, #128]	; (8001584 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001502:	f004 ffcc 	bl	800649e <HAL_UART_Receive_IT>
	}
	if(GPIO_Pin == GPIO_PIN_5) {
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	2b20      	cmp	r3, #32
 800150a:	d130      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0xaa>
		if((HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_4))&&set_point<641)
 800150c:	2110      	movs	r1, #16
 800150e:	481e      	ldr	r0, [pc, #120]	; (8001588 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001510:	f001 fc90 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d014      	beq.n	8001544 <HAL_GPIO_EXTI_Callback+0x80>
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001590 <HAL_GPIO_EXTI_Callback+0xcc>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d50a      	bpl.n	8001544 <HAL_GPIO_EXTI_Callback+0x80>
			set_point = set_point + 10;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
		else if(set_point>10)
			set_point = set_point - 10;
	}
}
 8001542:	e014      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xaa>
		else if(set_point>10)
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	dc00      	bgt.n	800155a <HAL_GPIO_EXTI_Callback+0x96>
}
 8001558:	e009      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xaa>
			set_point = set_point - 10;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40020400 	.word	0x40020400
 800157c:	20000064 	.word	0x20000064
 8001580:	2000084c 	.word	0x2000084c
 8001584:	2000030c 	.word	0x2000030c
 8001588:	40021400 	.word	0x40021400
 800158c:	20000060 	.word	0x20000060
 8001590:	44204000 	.word	0x44204000

08001594 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b090      	sub	sp, #64	; 0x40
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11d      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		__HAL_TIM_SET_AUTORELOAD(htim, 100);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2264      	movs	r2, #100	; 0x64
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2264      	movs	r2, #100	; 0x64
 80015b2:	60da      	str	r2, [r3, #12]

		LCD_SetCursor(&hlcd1, 0, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2100      	movs	r1, #0
 80015b8:	4844      	ldr	r0, [pc, #272]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015ba:	f7ff ff4d 	bl	8001458 <LCD_SetCursor>
		snprintf(text, MAX_LENGTH, "%.2f", light); // @suppress("Float formatting support")
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffe0 	bl	8000588 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9cd 2300 	strd	r2, r3, [sp]
 80015d0:	4a40      	ldr	r2, [pc, #256]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80015d2:	211e      	movs	r1, #30
 80015d4:	4840      	ldr	r0, [pc, #256]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015d6:	f007 fb01 	bl	8008bdc <sniprintf>
		LCD_printf(&hlcd1, text);
 80015da:	493f      	ldr	r1, [pc, #252]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015de:	f7ff ff55 	bl	800148c <LCD_printf>

	}

	if (htim->Instance == TIM2) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d168      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x12a>
		char str_buffer[32];
		int n;

		light = BH1750_ReadIlluminance_lux(hbh1750);
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x148>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fd41 	bl	8001078 <BH1750_ReadIlluminance_lux>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]

		float pwm_duty_f = (calculate_discrete_pid(&pid1, set_point, light));
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001608:	ed93 7a00 	vldr	s14, [r3]
 800160c:	eef0 0a47 	vmov.f32	s1, s14
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	4833      	ldr	r0, [pc, #204]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001616:	f000 fb2d 	bl	8001c74 <calculate_discrete_pid>
 800161a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		uint32_t pwm_duty = (int) pwm_duty_f;
 800161e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001626:	ee17 3a90 	vmov	r3, s15
 800162a:	633b      	str	r3, [r7, #48]	; 0x30

		if (pwm_duty <= 999) {
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001632:	d208      	bcs.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xb2>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_duty);
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
 8001644:	e014      	b.n	8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 999);
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty % 999);
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001658:	fba3 0302 	umull	r0, r3, r3, r2
 800165c:	1ad0      	subs	r0, r2, r3
 800165e:	0840      	lsrs	r0, r0, #1
 8001660:	4403      	add	r3, r0
 8001662:	0a5b      	lsrs	r3, r3, #9
 8001664:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001668:	fb00 f303 	mul.w	r3, r0, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	634b      	str	r3, [r1, #52]	; 0x34
		}

		n = sprintf(str_buffer, "{\"Light\":%6d}", (int) light);
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	ee17 2a90 	vmov	r2, s15
 8001682:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001684:	4618      	mov	r0, r3
 8001686:	f007 fadd 	bl	8008c44 <siprintf>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c

		str_buffer[n] = '\r';
 800168c:	f107 020c 	add.w	r2, r7, #12
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	4413      	add	r3, r2
 8001694:	220d      	movs	r2, #13
 8001696:	701a      	strb	r2, [r3, #0]
		str_buffer[n + 1] = '\n';
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	3301      	adds	r3, #1
 800169c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016a0:	4413      	add	r3, r2
 80016a2:	220a      	movs	r2, #10
 80016a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
		HAL_UART_Transmit(&huart3, (uint8_t*) str_buffer, n + 2, 1000);
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3302      	adds	r3, #2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 010c 	add.w	r1, r7, #12
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016ba:	f004 fe5d 	bl	8006378 <HAL_UART_Transmit>
	}
}
 80016be:	bf00      	nop
 80016c0:	3738      	adds	r7, #56	; 0x38
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000800 	.word	0x40000800
 80016cc:	20000024 	.word	0x20000024
 80016d0:	20000264 	.word	0x20000264
 80016d4:	0800d060 	.word	0x0800d060
 80016d8:	2000082c 	.word	0x2000082c
 80016dc:	20000044 	.word	0x20000044
 80016e0:	20000060 	.word	0x20000060
 80016e4:	20000048 	.word	0x20000048
 80016e8:	200007e0 	.word	0x200007e0
 80016ec:	06680a41 	.word	0x06680a41
 80016f0:	0800d068 	.word	0x0800d068
 80016f4:	2000030c 	.word	0x2000030c

080016f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART3) && uart_flag == 1) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_UART_RxCpltCallback+0x50>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d119      	bne.n	800173e <HAL_UART_RxCpltCallback+0x46>
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_UART_RxCpltCallback+0x54>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_UART_RxCpltCallback+0x46>

		HAL_TIM_Base_Stop_IT(&htim2);
 8001712:	480f      	ldr	r0, [pc, #60]	; (8001750 <HAL_UART_RxCpltCallback+0x58>)
 8001714:	f003 fcd2 	bl	80050bc <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <HAL_UART_RxCpltCallback+0x5c>)
 800171a:	f003 fccf 	bl	80050bc <HAL_TIM_Base_Stop_IT>

		sscanf(msg_str, "%f", &set_point); // @suppress("Float formatting support")
 800171e:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <HAL_UART_RxCpltCallback+0x60>)
 8001720:	490e      	ldr	r1, [pc, #56]	; (800175c <HAL_UART_RxCpltCallback+0x64>)
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <HAL_UART_RxCpltCallback+0x68>)
 8001724:	f007 faae 	bl	8008c84 <siscanf>
		HAL_UART_Receive_IT(&huart3, (uint8_t*) msg_str, strlen("999"));
 8001728:	2203      	movs	r2, #3
 800172a:	490d      	ldr	r1, [pc, #52]	; (8001760 <HAL_UART_RxCpltCallback+0x68>)
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 800172e:	f004 feb6 	bl	800649e <HAL_UART_Receive_IT>

		HAL_TIM_Base_Start_IT(&htim2);
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <HAL_UART_RxCpltCallback+0x58>)
 8001734:	f003 fc4a 	bl	8004fcc <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8001738:	4806      	ldr	r0, [pc, #24]	; (8001754 <HAL_UART_RxCpltCallback+0x5c>)
 800173a:	f003 fc47 	bl	8004fcc <HAL_TIM_Base_Start_IT>
	}
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40004800 	.word	0x40004800
 800174c:	20000064 	.word	0x20000064
 8001750:	2000086c 	.word	0x2000086c
 8001754:	200002c0 	.word	0x200002c0
 8001758:	20000060 	.word	0x20000060
 800175c:	0800d078 	.word	0x0800d078
 8001760:	2000084c 	.word	0x2000084c
 8001764:	2000030c 	.word	0x2000030c

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176c:	f000 ff88 	bl	8002680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001770:	f000 f83a 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001774:	f000 f928 	bl	80019c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001778:	f000 f8c8 	bl	800190c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800177c:	f000 f8f6 	bl	800196c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001780:	f000 fe50 	bl	8002424 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001784:	f7ff fc9e 	bl	80010c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001788:	f000 fdfe 	bl	8002388 <MX_TIM2_Init>
  MX_TIM5_Init();
 800178c:	f000 ff00 	bl	8002590 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001790:	f000 feb0 	bl	80024f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001794:	2108      	movs	r1, #8
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <main+0x64>)
 8001798:	f003 fd16 	bl	80051c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800179c:	2100      	movs	r1, #0
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <main+0x64>)
 80017a0:	f003 fd12 	bl	80051c8 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) msg_str, strlen("999"));
 80017a4:	2203      	movs	r2, #3
 80017a6:	490a      	ldr	r1, [pc, #40]	; (80017d0 <main+0x68>)
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <main+0x6c>)
 80017aa:	f004 fe78 	bl	800649e <HAL_UART_Receive_IT>
	BH1750_Init(hbh1750);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <main+0x70>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fc3a 	bl	800102c <BH1750_Init>
	LCD_Init(&hlcd1);
 80017b8:	4808      	ldr	r0, [pc, #32]	; (80017dc <main+0x74>)
 80017ba:	f7ff fdc8 	bl	800134e <LCD_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <main+0x78>)
 80017c0:	f003 fc04 	bl	8004fcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <main+0x7c>)
 80017c6:	f003 fc01 	bl	8004fcc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80017ca:	e7fe      	b.n	80017ca <main+0x62>
 80017cc:	200007e0 	.word	0x200007e0
 80017d0:	2000084c 	.word	0x2000084c
 80017d4:	2000030c 	.word	0x2000030c
 80017d8:	20000044 	.word	0x20000044
 80017dc:	20000024 	.word	0x20000024
 80017e0:	2000086c 	.word	0x2000086c
 80017e4:	200002c0 	.word	0x200002c0

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0b4      	sub	sp, #208	; 0xd0
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017f2:	2230      	movs	r2, #48	; 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f006 fb68 	bl	8007ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	2284      	movs	r2, #132	; 0x84
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f006 fb59 	bl	8007ecc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800181a:	f002 fa41 	bl	8003ca0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <SystemClock_Config+0x118>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a37      	ldr	r2, [pc, #220]	; (8001900 <SystemClock_Config+0x118>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <SystemClock_Config+0x118>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <SystemClock_Config+0x11c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <SystemClock_Config+0x11c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <SystemClock_Config+0x11c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001852:	2301      	movs	r3, #1
 8001854:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001858:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800185c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001860:	2302      	movs	r3, #2
 8001862:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800186a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800186e:	2304      	movs	r3, #4
 8001870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001874:	2348      	movs	r3, #72	; 0x48
 8001876:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001886:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fa18 	bl	8003cc0 <HAL_RCC_OscConfig>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001896:	f000 f9e7 	bl	8001c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800189a:	230f      	movs	r3, #15
 800189c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018be:	2102      	movs	r1, #2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fca1 	bl	8004208 <HAL_RCC_ClockConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80018cc:	f000 f9cc 	bl	8001c68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <SystemClock_Config+0x120>)
 80018d2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018d8:	2300      	movs	r3, #0
 80018da:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 fe90 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80018f2:	f000 f9b9 	bl	8001c68 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	37d0      	adds	r7, #208	; 0xd0
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000
 8001908:	00204100 	.word	0x00204100

0800190c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <MX_USART3_UART_Init+0x5c>)
 8001914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001918:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800191c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART3_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_USART3_UART_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_USART3_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_USART3_UART_Init+0x58>)
 8001950:	f004 fcc4 	bl	80062dc <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800195a:	f000 f985 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000030c 	.word	0x2000030c
 8001968:	40004800 	.word	0x40004800

0800196c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001972:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001976:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197a:	2206      	movs	r2, #6
 800197c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001980:	2202      	movs	r2, #2
 8001982:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	2202      	movs	r2, #2
 800198e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001992:	2201      	movs	r2, #1
 8001994:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b0:	f002 f82d 	bl	8003a0e <HAL_PCD_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019ba:	f000 f955 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000390 	.word	0x20000390

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08c      	sub	sp, #48	; 0x30
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	4b9b      	ldr	r3, [pc, #620]	; (8001c4c <MX_GPIO_Init+0x284>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a9a      	ldr	r2, [pc, #616]	; (8001c4c <MX_GPIO_Init+0x284>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b98      	ldr	r3, [pc, #608]	; (8001c4c <MX_GPIO_Init+0x284>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019f6:	4b95      	ldr	r3, [pc, #596]	; (8001c4c <MX_GPIO_Init+0x284>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <MX_GPIO_Init+0x284>)
 80019fc:	f043 0320 	orr.w	r3, r3, #32
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0e:	4b8f      	ldr	r3, [pc, #572]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a8e      	ldr	r2, [pc, #568]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a88      	ldr	r2, [pc, #544]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b86      	ldr	r3, [pc, #536]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a82      	ldr	r2, [pc, #520]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	4b7d      	ldr	r3, [pc, #500]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a7c      	ldr	r2, [pc, #496]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a6e:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a76      	ldr	r2, [pc, #472]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <MX_GPIO_Init+0x284>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2110      	movs	r1, #16
 8001a8a:	4871      	ldr	r0, [pc, #452]	; (8001c50 <MX_GPIO_Init+0x288>)
 8001a8c:	f001 f9ea 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LCD_RS_Pin|LCD_D4_Pin
 8001a90:	2200      	movs	r2, #0
 8001a92:	f24c 01b1 	movw	r1, #49329	; 0xc0b1
 8001a96:	486f      	ldr	r0, [pc, #444]	; (8001c54 <MX_GPIO_Init+0x28c>)
 8001a98:	f001 f9e4 	bl	8002e64 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	486d      	ldr	r0, [pc, #436]	; (8001c58 <MX_GPIO_Init+0x290>)
 8001aa2:	f001 f9df 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	21c0      	movs	r1, #192	; 0xc0
 8001aaa:	486c      	ldr	r0, [pc, #432]	; (8001c5c <MX_GPIO_Init+0x294>)
 8001aac:	f001 f9da 	bl	8002e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4865      	ldr	r0, [pc, #404]	; (8001c5c <MX_GPIO_Init+0x294>)
 8001ac8:	f001 f808 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001acc:	2310      	movs	r3, #16
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4860      	ldr	r0, [pc, #384]	; (8001c60 <MX_GPIO_Init+0x298>)
 8001ae0:	f000 fffc 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4859      	ldr	r0, [pc, #356]	; (8001c60 <MX_GPIO_Init+0x298>)
 8001afa:	f000 ffef 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001afe:	2332      	movs	r3, #50	; 0x32
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b0e:	230b      	movs	r3, #11
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4850      	ldr	r0, [pc, #320]	; (8001c5c <MX_GPIO_Init+0x294>)
 8001b1a:	f000 ffdf 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b1e:	2386      	movs	r3, #134	; 0x86
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b2e:	230b      	movs	r3, #11
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4845      	ldr	r0, [pc, #276]	; (8001c50 <MX_GPIO_Init+0x288>)
 8001b3a:	f000 ffcf 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin;
 8001b3e:	2310      	movs	r3, #16
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	483e      	ldr	r0, [pc, #248]	; (8001c50 <MX_GPIO_Init+0x288>)
 8001b56:	f000 ffc1 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LCD_RS_Pin LCD_D4_Pin
                           LCD_D6_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LCD_RS_Pin|LCD_D4_Pin
 8001b5a:	f24c 03b1 	movw	r3, #49329	; 0xc0b1
 8001b5e:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4838      	ldr	r0, [pc, #224]	; (8001c54 <MX_GPIO_Init+0x28c>)
 8001b74:	f000 ffb2 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b8a:	230b      	movs	r3, #11
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	482f      	ldr	r0, [pc, #188]	; (8001c54 <MX_GPIO_Init+0x28c>)
 8001b96:	f000 ffa1 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4829      	ldr	r0, [pc, #164]	; (8001c58 <MX_GPIO_Init+0x290>)
 8001bb2:	f000 ff93 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4823      	ldr	r0, [pc, #140]	; (8001c58 <MX_GPIO_Init+0x290>)
 8001bca:	f000 ff87 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_D7_Pin;
 8001bce:	23c0      	movs	r3, #192	; 0xc0
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	481d      	ldr	r0, [pc, #116]	; (8001c5c <MX_GPIO_Init+0x294>)
 8001be6:	f000 ff79 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001bea:	2318      	movs	r3, #24
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4819      	ldr	r0, [pc, #100]	; (8001c64 <MX_GPIO_Init+0x29c>)
 8001bfe:	f000 ff6d 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c14:	230b      	movs	r3, #11
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480e      	ldr	r0, [pc, #56]	; (8001c58 <MX_GPIO_Init+0x290>)
 8001c20:	f000 ff5c 	bl	8002adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2017      	movs	r0, #23
 8001c2a:	f000 fe8e 	bl	800294a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c2e:	2017      	movs	r0, #23
 8001c30:	f000 fea7 	bl	8002982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2028      	movs	r0, #40	; 0x28
 8001c3a:	f000 fe86 	bl	800294a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c3e:	2028      	movs	r0, #40	; 0x28
 8001c40:	f000 fe9f 	bl	8002982 <HAL_NVIC_EnableIRQ>

}
 8001c44:	bf00      	nop
 8001c46:	3730      	adds	r7, #48	; 0x30
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40021800 	.word	0x40021800
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40020c00 	.word	0x40020c00

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c70:	e7fe      	b.n	8001c70 <Error_Handler+0x8>
	...

08001c74 <calculate_discrete_pid>:
 */

#include "pid.h"


float calculate_discrete_pid(pid *pid, float setpoint, float measured) {
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c80:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0, P, I, D, error, integral, derivative;
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28

	error = setpoint - measured;
 8001c8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//proportional part
	P = pid->p.Kp * error;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca8:	edc7 7a08 	vstr	s15, [r7, #32]

	//integral part
	integral = pid->previous_integral + (error + pid->previous_error); //numerical integrator without anti-windup
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 6a04 	vldr	s13, [r3, #16]
 8001cb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->previous_integral = integral;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki * integral * (pid->p.dt / 2.0);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	ee17 0a90 	vmov	r0, s15
 8001ce0:	f7fe fc52 	bl	8000588 <__aeabi_f2d>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	460d      	mov	r5, r1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc4b 	bl	8000588 <__aeabi_f2d>
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfa:	f7fe fdc7 	bl	800088c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fc97 	bl	8000638 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe ff89 	bl	8000c28 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]

	//derivative part
	derivative = (error - pid->previous_error) / pid->p.dt; //numerical derivative without filter
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d32:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->previous_error = error;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3a:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd * derivative;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d42:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	edc7 7a04 	vstr	s15, [r7, #16]

	//sum of all parts
	u = P + I + D; //without saturation
 8001d4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d52:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float u_sat = 0;
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (u < 0)
 8001d6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	d503      	bpl.n	8001d82 <calculate_discrete_pid+0x10e>
		u_sat = 0;
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d80:	e00d      	b.n	8001d9e <calculate_discrete_pid+0x12a>
	else if (u > 1998)
 8001d82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d86:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001db0 <calculate_discrete_pid+0x13c>
 8001d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d92:	dd02      	ble.n	8001d9a <calculate_discrete_pid+0x126>
		u_sat = 1998;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <calculate_discrete_pid+0x140>)
 8001d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d98:	e001      	b.n	8001d9e <calculate_discrete_pid+0x12a>
	else
		u_sat = u;
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

	return u_sat;
 8001d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da0:	ee07 3a90 	vmov	s15, r3
}
 8001da4:	eeb0 0a67 	vmov.f32	s0, s15
 8001da8:	3730      	adds	r7, #48	; 0x30
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	44f9c000 	.word	0x44f9c000
 8001db4:	44f9c000 	.word	0x44f9c000

08001db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_MspInit+0x44>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_MspInit+0x44>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_MspInit+0x44>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_MspInit+0x44>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_MspInit+0x44>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_MspInit+0x44>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e10:	d114      	bne.n	8001e3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	201c      	movs	r0, #28
 8001e30:	f000 fd8b 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e34:	201c      	movs	r0, #28
 8001e36:	f000 fda4 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e3a:	e032      	b.n	8001ea2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d114      	bne.n	8001e70 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b16      	ldr	r3, [pc, #88]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	201e      	movs	r0, #30
 8001e64:	f000 fd71 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e68:	201e      	movs	r0, #30
 8001e6a:	f000 fd8a 	bl	8002982 <HAL_NVIC_EnableIRQ>
}
 8001e6e:	e018      	b.n	8001ea2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM5)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <HAL_TIM_Base_MspInit+0xb4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_TIM_Base_MspInit+0xac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2032      	movs	r0, #50	; 0x32
 8001e98:	f000 fd57 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e9c:	2032      	movs	r0, #50	; 0x32
 8001e9e:	f000 fd70 	bl	8002982 <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40000c00 	.word	0x40000c00

08001eb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_TIM_PWM_MspInit+0x44>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d113      	bne.n	8001ef2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_TIM_PWM_MspInit+0x48>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_TIM_PWM_MspInit+0x48>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_TIM_PWM_MspInit+0x48>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	201d      	movs	r0, #29
 8001ee8:	f000 fd2f 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001eec:	201d      	movs	r0, #29
 8001eee:	f000 fd48 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <HAL_TIM_MspPostInit+0x9c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d138      	bne.n	8001f98 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_TIM_MspPostInit+0xa0>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_TIM_MspPostInit+0xa0>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	; 0x30
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_TIM_MspPostInit+0xa0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_TIM_MspPostInit+0xa0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_MspPostInit+0xa0>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_TIM_MspPostInit+0xa0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f56:	2340      	movs	r3, #64	; 0x40
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f66:	2302      	movs	r3, #2
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <HAL_TIM_MspPostInit+0xa4>)
 8001f72:	f000 fdb3 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <HAL_TIM_MspPostInit+0xa8>)
 8001f94:	f000 fda2 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020800 	.word	0x40020800

08001fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_UART_MspInit+0x8c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d130      	bne.n	8002034 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a1a      	ldr	r2, [pc, #104]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b18      	ldr	r3, [pc, #96]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_UART_MspInit+0x90>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002014:	2307      	movs	r3, #7
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4809      	ldr	r0, [pc, #36]	; (8002044 <HAL_UART_MspInit+0x94>)
 8002020:	f000 fd5c 	bl	8002adc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	2027      	movs	r0, #39	; 0x27
 800202a:	f000 fc8e 	bl	800294a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800202e:	2027      	movs	r0, #39	; 0x27
 8002030:	f000 fca7 	bl	8002982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002034:	bf00      	nop
 8002036:	3728      	adds	r7, #40	; 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40004800 	.word	0x40004800
 8002040:	40023800 	.word	0x40023800
 8002044:	40020c00 	.word	0x40020c00

08002048 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002068:	d141      	bne.n	80020ee <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002082:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002094:	230a      	movs	r3, #10
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4817      	ldr	r0, [pc, #92]	; (80020fc <HAL_PCD_MspInit+0xb4>)
 80020a0:	f000 fd1c 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4810      	ldr	r0, [pc, #64]	; (80020fc <HAL_PCD_MspInit+0xb4>)
 80020ba:	f000 fd0f 	bl	8002adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6353      	str	r3, [r2, #52]	; 0x34
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PCD_MspInit+0xb0>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	; 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f000 fade 	bl	800270c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002158:	2020      	movs	r0, #32
 800215a:	f000 feb7 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <TIM2_IRQHandler+0x10>)
 800216a:	f003 f927 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000086c 	.word	0x2000086c

08002178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <TIM3_IRQHandler+0x10>)
 800217e:	f003 f91d 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200007e0 	.word	0x200007e0

0800218c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM4_IRQHandler+0x10>)
 8002192:	f003 f913 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200002c0 	.word	0x200002c0

080021a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <USART3_IRQHandler+0x10>)
 80021a6:	f004 f9c9 	bl	800653c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000030c 	.word	0x2000030c

080021b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021bc:	f000 fe86 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM5_IRQHandler+0x10>)
 80021ca:	f003 f8f7 	bl	80053bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000794 	.word	0x20000794

080021d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
	return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_kill>:

int _kill(int pid, int sig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021f2:	f005 fe41 	bl	8007e78 <__errno>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2216      	movs	r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
	return -1;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_exit>:

void _exit (int status)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffe7 	bl	80021e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800221a:	e7fe      	b.n	800221a <_exit+0x12>

0800221c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e00a      	b.n	8002244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800222e:	f3af 8000 	nop.w
 8002232:	4601      	mov	r1, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	b2ca      	uxtb	r2, r1
 800223c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3301      	adds	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbf0      	blt.n	800222e <_read+0x12>
	}

return len;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e009      	b.n	800227c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	60ba      	str	r2, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	dbf1      	blt.n	8002268 <_write+0x12>
	}
	return len;
 8002284:	687b      	ldr	r3, [r7, #4]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_close>:

int _close(int file)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
	return -1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b6:	605a      	str	r2, [r3, #4]
	return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_isatty>:

int _isatty(int file)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	return 1;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
	return 0;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f005 fda6 	bl	8007e78 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20050000 	.word	0x20050000
 8002358:	00000400 	.word	0x00000400
 800235c:	20000268 	.word	0x20000268
 8002360:	200008d0 	.word	0x200008d0

08002364 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <SystemInit+0x20>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <SystemInit+0x20>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

void MX_TIM2_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <MX_TIM2_Init+0x98>)
 80023a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <MX_TIM2_Init+0x98>)
 80023b0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80023b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <MX_TIM2_Init+0x98>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <MX_TIM2_Init+0x98>)
 80023be:	2263      	movs	r2, #99	; 0x63
 80023c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <MX_TIM2_Init+0x98>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <MX_TIM2_Init+0x98>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ce:	4814      	ldr	r0, [pc, #80]	; (8002420 <MX_TIM2_Init+0x98>)
 80023d0:	f002 fd0c 	bl	8004dec <HAL_TIM_Base_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023da:	f7ff fc45 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	4619      	mov	r1, r3
 80023ea:	480d      	ldr	r0, [pc, #52]	; (8002420 <MX_TIM2_Init+0x98>)
 80023ec:	f003 fa1a 	bl	8005824 <HAL_TIM_ConfigClockSource>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023f6:	f7ff fc37 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4806      	ldr	r0, [pc, #24]	; (8002420 <MX_TIM2_Init+0x98>)
 8002408:	f003 febc 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002412:	f7ff fc29 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	2000086c 	.word	0x2000086c

08002424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002436:	463b      	mov	r3, r7
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
 8002444:	615a      	str	r2, [r3, #20]
 8002446:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <MX_TIM3_Init+0xc8>)
 800244a:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <MX_TIM3_Init+0xcc>)
 800244c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800244e:	4b27      	ldr	r3, [pc, #156]	; (80024ec <MX_TIM3_Init+0xc8>)
 8002450:	2247      	movs	r2, #71	; 0x47
 8002452:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b25      	ldr	r3, [pc, #148]	; (80024ec <MX_TIM3_Init+0xc8>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <MX_TIM3_Init+0xc8>)
 800245c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <MX_TIM3_Init+0xc8>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <MX_TIM3_Init+0xc8>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800246e:	481f      	ldr	r0, [pc, #124]	; (80024ec <MX_TIM3_Init+0xc8>)
 8002470:	f002 fe53 	bl	800511a <HAL_TIM_PWM_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800247a:	f7ff fbf5 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	4817      	ldr	r0, [pc, #92]	; (80024ec <MX_TIM3_Init+0xc8>)
 800248e:	f003 fe79 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002498:	f7ff fbe6 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249c:	2360      	movs	r3, #96	; 0x60
 800249e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ac:	463b      	mov	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	4619      	mov	r1, r3
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <MX_TIM3_Init+0xc8>)
 80024b4:	f003 f8a2 	bl	80055fc <HAL_TIM_PWM_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80024be:	f7ff fbd3 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80024c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c8:	463b      	mov	r3, r7
 80024ca:	2208      	movs	r2, #8
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <MX_TIM3_Init+0xc8>)
 80024d0:	f003 f894 	bl	80055fc <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80024da:	f7ff fbc5 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_TIM3_Init+0xc8>)
 80024e0:	f7ff fd10 	bl	8001f04 <HAL_TIM_MspPostInit>

}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200007e0 	.word	0x200007e0
 80024f0:	40000400 	.word	0x40000400

080024f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <MX_TIM4_Init+0x94>)
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <MX_TIM4_Init+0x98>)
 8002516:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <MX_TIM4_Init+0x94>)
 800251a:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800251e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM4_Init+0x94>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <MX_TIM4_Init+0x94>)
 8002528:	2232      	movs	r2, #50	; 0x32
 800252a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252c:	4b16      	ldr	r3, [pc, #88]	; (8002588 <MX_TIM4_Init+0x94>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <MX_TIM4_Init+0x94>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002538:	4813      	ldr	r0, [pc, #76]	; (8002588 <MX_TIM4_Init+0x94>)
 800253a:	f002 fc57 	bl	8004dec <HAL_TIM_Base_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002544:	f7ff fb90 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_TIM4_Init+0x94>)
 8002556:	f003 f965 	bl	8005824 <HAL_TIM_ConfigClockSource>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002560:	f7ff fb82 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_TIM4_Init+0x94>)
 8002572:	f003 fe07 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800257c:	f7ff fb74 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200002c0 	.word	0x200002c0
 800258c:	40000800 	.word	0x40000800

08002590 <MX_TIM5_Init>:


void MX_TIM5_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <MX_TIM5_Init+0x94>)
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <MX_TIM5_Init+0x98>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <MX_TIM5_Init+0x94>)
 80025b6:	2247      	movs	r2, #71	; 0x47
 80025b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_TIM5_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_TIM5_Init+0x94>)
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_TIM5_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM5_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025d4:	4813      	ldr	r0, [pc, #76]	; (8002624 <MX_TIM5_Init+0x94>)
 80025d6:	f002 fc09 	bl	8004dec <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80025e0:	f7ff fb42 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	4619      	mov	r1, r3
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_TIM5_Init+0x94>)
 80025f2:	f003 f917 	bl	8005824 <HAL_TIM_ConfigClockSource>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80025fc:	f7ff fb34 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM5_Init+0x94>)
 800260e:	f003 fdb9 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002618:	f7ff fb26 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3720      	adds	r7, #32
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000794 	.word	0x20000794
 8002628:	40000c00 	.word	0x40000c00

0800262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002630:	480d      	ldr	r0, [pc, #52]	; (8002668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002632:	490e      	ldr	r1, [pc, #56]	; (800266c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002634:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002648:	4c0b      	ldr	r4, [pc, #44]	; (8002678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002656:	f7ff fe85 	bl	8002364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265a:	f005 fc13 	bl	8007e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265e:	f7ff f883 	bl	8001768 <main>
  bx  lr    
 8002662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8002670:	0800d57c 	.word	0x0800d57c
  ldr r2, =_sbss
 8002674:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002678:	200008cc 	.word	0x200008cc

0800267c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC_IRQHandler>
	...

08002680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_Init+0x28>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_Init+0x28>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f000 f94f 	bl	8002934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002696:	2000      	movs	r0, #0
 8002698:	f000 f808 	bl	80026ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269c:	f7ff fb8c 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_InitTick+0x54>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x58>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4619      	mov	r1, r3
 80026be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f967 	bl	800299e <HAL_SYSTICK_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00e      	b.n	80026f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b0f      	cmp	r3, #15
 80026de:	d80a      	bhi.n	80026f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e0:	2200      	movs	r2, #0
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f000 f92f 	bl	800294a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ec:	4a06      	ldr	r2, [pc, #24]	; (8002708 <HAL_InitTick+0x5c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000068 	.word	0x20000068
 8002704:	20000070 	.word	0x20000070
 8002708:	2000006c 	.word	0x2000006c

0800270c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_IncTick+0x20>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x24>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4413      	add	r3, r2
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_IncTick+0x24>)
 800271e:	6013      	str	r3, [r2, #0]
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000070 	.word	0x20000070
 8002730:	200008b8 	.word	0x200008b8

08002734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return uwTick;
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <HAL_GetTick+0x14>)
 800273a:	681b      	ldr	r3, [r3, #0]
}
 800273c:	4618      	mov	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200008b8 	.word	0x200008b8

0800274c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff ffee 	bl	8002734 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002764:	d005      	beq.n	8002772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_Delay+0x44>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002772:	bf00      	nop
 8002774:	f7ff ffde 	bl	8002734 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <HAL_Delay+0x28>
  {
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000070 	.word	0x20000070

08002794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <__NVIC_SetPriorityGrouping+0x40>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b0:	4013      	ands	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <__NVIC_SetPriorityGrouping+0x40>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00
 80027d8:	05fa0000 	.word	0x05fa0000

080027dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <__NVIC_GetPriorityGrouping+0x18>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	0a1b      	lsrs	r3, r3, #8
 80027e6:	f003 0307 	and.w	r3, r3, #7
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	2b00      	cmp	r3, #0
 8002808:	db0b      	blt.n	8002822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4907      	ldr	r1, [pc, #28]	; (8002830 <__NVIC_EnableIRQ+0x38>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2001      	movs	r0, #1
 800281a:	fa00 f202 	lsl.w	r2, r0, r2
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	; (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002900:	d301      	bcc.n	8002906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002902:	2301      	movs	r3, #1
 8002904:	e00f      	b.n	8002926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <SysTick_Config+0x40>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290e:	210f      	movs	r1, #15
 8002910:	f04f 30ff 	mov.w	r0, #4294967295
 8002914:	f7ff ff8e 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <SysTick_Config+0x40>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <SysTick_Config+0x40>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff29 	bl	8002794 <__NVIC_SetPriorityGrouping>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff3e 	bl	80027dc <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff8e 	bl	8002888 <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff5d 	bl	8002834 <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff31 	bl	80027f8 <__NVIC_EnableIRQ>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ffa2 	bl	80028f0 <SysTick_Config>
 80029ac:	4603      	mov	r3, r0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7ff feb6 	bl	8002734 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d008      	beq.n	80029e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e052      	b.n	8002a8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0216 	bic.w	r2, r2, #22
 80029f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <HAL_DMA_Abort+0x62>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0208 	bic.w	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a38:	e013      	b.n	8002a62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a3a:	f7ff fe7b 	bl	8002734 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d90c      	bls.n	8002a62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2203      	movs	r2, #3
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e015      	b.n	8002a8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e4      	bne.n	8002a3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	223f      	movs	r2, #63	; 0x3f
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e00c      	b.n	8002ace <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2205      	movs	r2, #5
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	e175      	b.n	8002de8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	f040 8164 	bne.w	8002de2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d005      	beq.n	8002b32 <HAL_GPIO_Init+0x56>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d130      	bne.n	8002b94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d017      	beq.n	8002bd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d123      	bne.n	8002c24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	69b9      	ldr	r1, [r7, #24]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80be 	beq.w	8002de2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b66      	ldr	r3, [pc, #408]	; (8002e00 <HAL_GPIO_Init+0x324>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_GPIO_Init+0x324>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b63      	ldr	r3, [pc, #396]	; (8002e00 <HAL_GPIO_Init+0x324>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c7e:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <HAL_GPIO_Init+0x328>)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_GPIO_Init+0x32c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d037      	beq.n	8002d1a <HAL_GPIO_Init+0x23e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <HAL_GPIO_Init+0x330>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d031      	beq.n	8002d16 <HAL_GPIO_Init+0x23a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <HAL_GPIO_Init+0x334>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d02b      	beq.n	8002d12 <HAL_GPIO_Init+0x236>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <HAL_GPIO_Init+0x338>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d025      	beq.n	8002d0e <HAL_GPIO_Init+0x232>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a54      	ldr	r2, [pc, #336]	; (8002e18 <HAL_GPIO_Init+0x33c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01f      	beq.n	8002d0a <HAL_GPIO_Init+0x22e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a53      	ldr	r2, [pc, #332]	; (8002e1c <HAL_GPIO_Init+0x340>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x22a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_GPIO_Init+0x344>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a51      	ldr	r2, [pc, #324]	; (8002e24 <HAL_GPIO_Init+0x348>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x222>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a50      	ldr	r2, [pc, #320]	; (8002e28 <HAL_GPIO_Init+0x34c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x21e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4f      	ldr	r2, [pc, #316]	; (8002e2c <HAL_GPIO_Init+0x350>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x21a>
 8002cf2:	2309      	movs	r3, #9
 8002cf4:	e012      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002cf6:	230a      	movs	r3, #10
 8002cf8:	e010      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	e00e      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002cfe:	2307      	movs	r3, #7
 8002d00:	e00c      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d02:	2306      	movs	r3, #6
 8002d04:	e00a      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d06:	2305      	movs	r3, #5
 8002d08:	e008      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	e006      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e004      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e002      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_Init+0x240>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f002 0203 	and.w	r2, r2, #3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4093      	lsls	r3, r2
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d2c:	4935      	ldr	r1, [pc, #212]	; (8002e04 <HAL_GPIO_Init+0x328>)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3302      	adds	r3, #2
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3a:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5e:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d64:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d88:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db2:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <HAL_GPIO_Init+0x354>)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	f67f ae86 	bls.w	8002afc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40013800 	.word	0x40013800
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40021400 	.word	0x40021400
 8002e20:	40021800 	.word	0x40021800
 8002e24:	40021c00 	.word	0x40021c00
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40022400 	.word	0x40022400
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea8:	887a      	ldrh	r2, [r7, #2]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe faea 	bl	80014c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40013c00 	.word	0x40013c00

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07f      	b.n	800300e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fe f90e 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e006      	b.n	8002f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d104      	bne.n	8002f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_I2C_Init+0x11c>)
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	02008000 	.word	0x02008000

0800301c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	461a      	mov	r2, r3
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
 800302c:	4613      	mov	r3, r2
 800302e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	f040 80da 	bne.w	80031f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_I2C_Master_Transmit+0x30>
 8003048:	2302      	movs	r3, #2
 800304a:	e0d3      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1d8>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003054:	f7ff fb6e 	bl	8002734 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	2319      	movs	r3, #25
 8003060:	2201      	movs	r2, #1
 8003062:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f9e6 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0be      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2221      	movs	r2, #33	; 0x21
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2210      	movs	r2, #16
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	893a      	ldrh	r2, [r7, #8]
 8003096:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2bff      	cmp	r3, #255	; 0xff
 80030a6:	d90e      	bls.n	80030c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	22ff      	movs	r2, #255	; 0xff
 80030ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	8979      	ldrh	r1, [r7, #10]
 80030b6:	4b51      	ldr	r3, [pc, #324]	; (80031fc <HAL_I2C_Master_Transmit+0x1e0>)
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fbdc 	bl	800387c <I2C_TransferConfig>
 80030c4:	e06c      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	4b48      	ldr	r3, [pc, #288]	; (80031fc <HAL_I2C_Master_Transmit+0x1e0>)
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fbcb 	bl	800387c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030e6:	e05b      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f9e3 	bl	80034b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e07b      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d034      	beq.n	80031a0 <HAL_I2C_Master_Transmit+0x184>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	2b00      	cmp	r3, #0
 800313c:	d130      	bne.n	80031a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	2200      	movs	r2, #0
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f975 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e04d      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2bff      	cmp	r3, #255	; 0xff
 8003160:	d90e      	bls.n	8003180 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	b2da      	uxtb	r2, r3
 800316e:	8979      	ldrh	r1, [r7, #10]
 8003170:	2300      	movs	r3, #0
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fb7f 	bl	800387c <I2C_TransferConfig>
 800317e:	e00f      	b.n	80031a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	b2da      	uxtb	r2, r3
 8003190:	8979      	ldrh	r1, [r7, #10]
 8003192:	2300      	movs	r3, #0
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fb6e 	bl	800387c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d19e      	bne.n	80030e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6a39      	ldr	r1, [r7, #32]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f9c2 	bl	8003538 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e01a      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2220      	movs	r2, #32
 80031c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_I2C_Master_Transmit+0x1e4>)
 80031d2:	400b      	ands	r3, r1
 80031d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	80002000 	.word	0x80002000
 8003200:	fe00e800 	.word	0xfe00e800

08003204 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	461a      	mov	r2, r3
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
 8003214:	4613      	mov	r3, r2
 8003216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 80db 	bne.w	80033dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_I2C_Master_Receive+0x30>
 8003230:	2302      	movs	r3, #2
 8003232:	e0d4      	b.n	80033de <HAL_I2C_Master_Receive+0x1da>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323c:	f7ff fa7a 	bl	8002734 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f8f2 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0bf      	b.n	80033de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2222      	movs	r2, #34	; 0x22
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2210      	movs	r2, #16
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	893a      	ldrh	r2, [r7, #8]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2bff      	cmp	r3, #255	; 0xff
 800328e:	d90e      	bls.n	80032ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	b2da      	uxtb	r2, r3
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <HAL_I2C_Master_Receive+0x1e4>)
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fae8 	bl	800387c <I2C_TransferConfig>
 80032ac:	e06d      	b.n	800338a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <HAL_I2C_Master_Receive+0x1e4>)
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fad7 	bl	800387c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032ce:	e05c      	b.n	800338a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	6a39      	ldr	r1, [r7, #32]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f96b 	bl	80035b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e07c      	b.n	80033de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d034      	beq.n	800338a <HAL_I2C_Master_Receive+0x186>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d130      	bne.n	800338a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2200      	movs	r2, #0
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f880 	bl	8003438 <I2C_WaitOnFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e04d      	b.n	80033de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	2bff      	cmp	r3, #255	; 0xff
 800334a:	d90e      	bls.n	800336a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	22ff      	movs	r2, #255	; 0xff
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	b2da      	uxtb	r2, r3
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	2300      	movs	r3, #0
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fa8a 	bl	800387c <I2C_TransferConfig>
 8003368:	e00f      	b.n	800338a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fa79 	bl	800387c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d19d      	bne.n	80032d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	6a39      	ldr	r1, [r7, #32]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f8cd 	bl	8003538 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e01a      	b.n	80033de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2220      	movs	r2, #32
 80033ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_I2C_Master_Receive+0x1e8>)
 80033bc:	400b      	ands	r3, r1
 80033be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e000      	b.n	80033de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	80002400 	.word	0x80002400
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d103      	bne.n	800340e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d007      	beq.n	800342c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0201 	orr.w	r2, r2, #1
 800342a:	619a      	str	r2, [r3, #24]
  }
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	e022      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d01e      	beq.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7ff f96f 	bl	8002734 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d113      	bne.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e00f      	b.n	80034b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d0cd      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c4:	e02c      	b.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f8ea 	bl	80036a4 <I2C_IsErrorOccurred>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e02a      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d01e      	beq.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7ff f927 	bl	8002734 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d113      	bne.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0220 	orr.w	r2, r3, #32
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e007      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d1cb      	bne.n	80034c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003544:	e028      	b.n	8003598 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8aa 	bl	80036a4 <I2C_IsErrorOccurred>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e026      	b.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7ff f8eb 	bl	8002734 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d113      	bne.n	8003598 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e007      	b.n	80035a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d1cf      	bne.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035bc:	e064      	b.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f86e 	bl	80036a4 <I2C_IsErrorOccurred>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e062      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d138      	bne.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d105      	bne.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e04e      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d107      	bne.n	8003618 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2210      	movs	r2, #16
 800360e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2204      	movs	r2, #4
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
 8003616:	e002      	b.n	800361e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2220      	movs	r2, #32
 8003624:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003632:	400b      	ands	r3, r1
 8003634:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e022      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7ff f86f 	bl	8002734 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d193      	bne.n	80035be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d075      	beq.n	80037bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2210      	movs	r2, #16
 80036d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d8:	e056      	b.n	8003788 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d052      	beq.n	8003788 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036e2:	f7ff f827 	bl	8002734 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d302      	bcc.n	80036f8 <I2C_IsErrorOccurred+0x54>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d147      	bne.n	8003788 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800370a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d12e      	bne.n	800377a <I2C_IsErrorOccurred+0xd6>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003722:	d02a      	beq.n	800377a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b20      	cmp	r3, #32
 8003728:	d027      	beq.n	800377a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003738:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800373a:	f7fe fffb 	bl	8002734 <HAL_GetTick>
 800373e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003740:	e01b      	b.n	800377a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003742:	f7fe fff7 	bl	8002734 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b19      	cmp	r3, #25
 800374e:	d914      	bls.n	800377a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d1dc      	bne.n	8003742 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b20      	cmp	r3, #32
 8003794:	d003      	beq.n	800379e <I2C_IsErrorOccurred+0xfa>
 8003796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800379a:	2b00      	cmp	r3, #0
 800379c:	d09d      	beq.n	80036da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800379e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800382a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01c      	beq.n	800386c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f7ff fddc 	bl	80033f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <I2C_IsErrorOccurred+0x1d4>)
 8003844:	400b      	ands	r3, r1
 8003846:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800386c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003870:	4618      	mov	r0, r3
 8003872:	3728      	adds	r7, #40	; 0x28
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	fe00e800 	.word	0xfe00e800

0800387c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	817b      	strh	r3, [r7, #10]
 800388a:	4613      	mov	r3, r2
 800388c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003894:	7a7b      	ldrb	r3, [r7, #9]
 8003896:	041b      	lsls	r3, r3, #16
 8003898:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800389c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	0d5b      	lsrs	r3, r3, #21
 80038b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <I2C_TransferConfig+0x60>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	43db      	mvns	r3, r3
 80038c0:	ea02 0103 	and.w	r1, r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	03ff63ff 	.word	0x03ff63ff

080038e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d138      	bne.n	8003968 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003900:	2302      	movs	r3, #2
 8003902:	e032      	b.n	800396a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b20      	cmp	r3, #32
 800398a:	d139      	bne.n	8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003996:	2302      	movs	r3, #2
 8003998:	e033      	b.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a10:	b08f      	sub	sp, #60	; 0x3c
 8003a12:	af0a      	add	r7, sp, #40	; 0x28
 8003a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e116      	b.n	8003c4e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fe fb04 	bl	8002048 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2203      	movs	r2, #3
 8003a44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f003 ff74 	bl	800794c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	687e      	ldr	r6, [r7, #4]
 8003a6c:	466d      	mov	r5, sp
 8003a6e:	f106 0410 	add.w	r4, r6, #16
 8003a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a82:	1d33      	adds	r3, r6, #4
 8003a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a86:	6838      	ldr	r0, [r7, #0]
 8003a88:	f003 ff08 	bl	800789c <USB_CoreInit>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0d7      	b.n	8003c4e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 ff62 	bl	800796e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e04a      	b.n	8003b46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ab0:	7bfa      	ldrb	r2, [r7, #15]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	333d      	adds	r3, #61	; 0x3d
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	333c      	adds	r3, #60	; 0x3c
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	b298      	uxth	r0, r3
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3342      	adds	r3, #66	; 0x42
 8003aec:	4602      	mov	r2, r0
 8003aee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	333f      	adds	r3, #63	; 0x3f
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3344      	adds	r3, #68	; 0x44
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3348      	adds	r3, #72	; 0x48
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	3350      	adds	r3, #80	; 0x50
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	3301      	adds	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d3af      	bcc.n	8003ab0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e044      	b.n	8003be0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d3b5      	bcc.n	8003b56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	687e      	ldr	r6, [r7, #4]
 8003bf2:	466d      	mov	r5, sp
 8003bf4:	f106 0410 	add.w	r4, r6, #16
 8003bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c08:	1d33      	adds	r3, r6, #4
 8003c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c0c:	6838      	ldr	r0, [r7, #0]
 8003c0e:	f003 fefb 	bl	8007a08 <USB_DevInit>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e014      	b.n	8003c4e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f80b 	bl	8003c58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 f8b5 	bl	8007db6 <USB_DevDisconnect>

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_PCDEx_ActivateLPM+0x44>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	10000003 	.word	0x10000003

08003ca0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a04      	ldr	r2, [pc, #16]	; (8003cbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e291      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8087 	beq.w	8003df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce4:	4b96      	ldr	r3, [pc, #600]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d00c      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf0:	4b93      	ldr	r3, [pc, #588]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d112      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
 8003cfc:	4b90      	ldr	r3, [pc, #576]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b8d      	ldr	r3, [pc, #564]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06c      	beq.n	8003df0 <HAL_RCC_OscConfig+0x130>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d168      	bne.n	8003df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e26b      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x7a>
 8003d2c:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a83      	ldr	r2, [pc, #524]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e02e      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x9c>
 8003d42:	4b7f      	ldr	r3, [pc, #508]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a7e      	ldr	r2, [pc, #504]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7b      	ldr	r2, [pc, #492]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a72      	ldr	r2, [pc, #456]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xd8>
 8003d80:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6e      	ldr	r2, [pc, #440]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6b      	ldr	r2, [pc, #428]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fe fcc8 	bl	8002734 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe fcc4 	bl	8002734 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e21f      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fcb4 	bl	8002734 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fcb0 	bl	8002734 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e20b      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x110>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d069      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfe:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1df      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	493d      	ldr	r1, [pc, #244]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e040      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fe fc66 	bl	8002734 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6c:	f7fe fc62 	bl	8002734 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1bd      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	4b30      	ldr	r3, [pc, #192]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8a:	4b2d      	ldr	r3, [pc, #180]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4929      	ldr	r1, [pc, #164]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	600b      	str	r3, [r1, #0]
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe fc42 	bl	8002734 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fc3e 	bl	8002734 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e199      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d038      	beq.n	8003f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fc1f 	bl	8002734 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efa:	f7fe fc1b 	bl	8002734 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e176      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0c:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x23a>
 8003f18:	e01a      	b.n	8003f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe fc05 	bl	8002734 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fc01 	bl	8002734 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d903      	bls.n	8003f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e15c      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
 8003f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b91      	ldr	r3, [pc, #580]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ee      	bne.n	8003f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a4 	beq.w	80040a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a87      	ldr	r2, [pc, #540]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f86:	4b82      	ldr	r3, [pc, #520]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d118      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f92:	4b7f      	ldr	r3, [pc, #508]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7e      	ldr	r2, [pc, #504]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fbc9 	bl	8002734 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fe fbc5 	bl	8002734 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b64      	cmp	r3, #100	; 0x64
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e120      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x4d0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x31a>
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	e02d      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCC_OscConfig+0x33c>
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	4a69      	ldr	r2, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	; 0x70
 8003fee:	4b67      	ldr	r3, [pc, #412]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a66      	ldr	r2, [pc, #408]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x35e>
 8004004:	4b61      	ldr	r3, [pc, #388]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a60      	ldr	r2, [pc, #384]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b5e      	ldr	r3, [pc, #376]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a5d      	ldr	r2, [pc, #372]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
 800401e:	4b5b      	ldr	r3, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b58      	ldr	r3, [pc, #352]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a57      	ldr	r2, [pc, #348]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe fb79 	bl	8002734 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fb75 	bl	8002734 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0ce      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b4b      	ldr	r3, [pc, #300]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x386>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fb63 	bl	8002734 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fb5f 	bl	8002734 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b3c      	ldr	r3, [pc, #240]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a3b      	ldr	r2, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80a4 	beq.w	80041f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b0:	4b36      	ldr	r3, [pc, #216]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d06b      	beq.n	8004194 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d149      	bne.n	8004158 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a30      	ldr	r2, [pc, #192]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fb30 	bl	8002734 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe fb2c 	bl	8002734 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e087      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	4313      	orrs	r3, r2
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800411e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004122:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fb00 	bl	8002734 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe fafc 	bl	8002734 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e057      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x478>
 8004156:	e04f      	b.n	80041f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0b      	ldr	r2, [pc, #44]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800415e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7fe fae6 	bl	8002734 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416c:	f7fe fae2 	bl	8002734 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e03d      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x4ac>
 800418a:	e035      	b.n	80041f8 <HAL_RCC_OscConfig+0x538>
 800418c:	40023800 	.word	0x40023800
 8004190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x544>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d111      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0d0      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b6a      	ldr	r3, [pc, #424]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d910      	bls.n	8004250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b67      	ldr	r3, [pc, #412]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 020f 	bic.w	r2, r3, #15
 8004236:	4965      	ldr	r1, [pc, #404]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a52      	ldr	r2, [pc, #328]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d040      	beq.n	800432c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d115      	bne.n	80042ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e073      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e06b      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4936      	ldr	r1, [pc, #216]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fc:	f7fe fa1a 	bl	8002734 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fe fa16 	bl	8002734 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e053      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d210      	bcs.n	800435c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 020f 	bic.w	r2, r3, #15
 8004342:	4922      	ldr	r1, [pc, #136]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f821 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x1cc>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1d0>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1d4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe f976 	bl	80026ac <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800d08c 	.word	0x0800d08c
 80043d8:	20000068 	.word	0x20000068
 80043dc:	2000006c 	.word	0x2000006c

080043e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	2300      	movs	r3, #0
 80043f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f8:	4b67      	ldr	r3, [pc, #412]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b08      	cmp	r3, #8
 8004402:	d00d      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x40>
 8004404:	2b08      	cmp	r3, #8
 8004406:	f200 80bd 	bhi.w	8004584 <HAL_RCC_GetSysClockFreq+0x1a4>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x34>
 800440e:	2b04      	cmp	r3, #4
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x3a>
 8004412:	e0b7      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b61      	ldr	r3, [pc, #388]	; (800459c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004416:	60bb      	str	r3, [r7, #8]
      break;
 8004418:	e0b7      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441a:	4b61      	ldr	r3, [pc, #388]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800441c:	60bb      	str	r3, [r7, #8]
      break;
 800441e:	e0b4      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004428:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800442a:	4b5b      	ldr	r3, [pc, #364]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d04d      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	461a      	mov	r2, r3
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	ea02 0800 	and.w	r8, r2, r0
 800444e:	ea03 0901 	and.w	r9, r3, r1
 8004452:	4640      	mov	r0, r8
 8004454:	4649      	mov	r1, r9
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	014b      	lsls	r3, r1, #5
 8004460:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004464:	0142      	lsls	r2, r0, #5
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	ebb0 0008 	subs.w	r0, r0, r8
 800446e:	eb61 0109 	sbc.w	r1, r1, r9
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004480:	0182      	lsls	r2, r0, #6
 8004482:	1a12      	subs	r2, r2, r0
 8004484:	eb63 0301 	sbc.w	r3, r3, r1
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	00d9      	lsls	r1, r3, #3
 8004492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004496:	00d0      	lsls	r0, r2, #3
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	eb12 0208 	adds.w	r2, r2, r8
 80044a0:	eb43 0309 	adc.w	r3, r3, r9
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	0259      	lsls	r1, r3, #9
 80044ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044b2:	0250      	lsls	r0, r2, #9
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	461a      	mov	r2, r3
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	f7fc fc00 	bl	8000cc8 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e04a      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	ea02 0400 	and.w	r4, r2, r0
 80044ea:	ea03 0501 	and.w	r5, r3, r1
 80044ee:	4620      	mov	r0, r4
 80044f0:	4629      	mov	r1, r5
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	014b      	lsls	r3, r1, #5
 80044fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004500:	0142      	lsls	r2, r0, #5
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	1b00      	subs	r0, r0, r4
 8004508:	eb61 0105 	sbc.w	r1, r1, r5
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	018b      	lsls	r3, r1, #6
 8004516:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800451a:	0182      	lsls	r2, r0, #6
 800451c:	1a12      	subs	r2, r2, r0
 800451e:	eb63 0301 	sbc.w	r3, r3, r1
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	00d9      	lsls	r1, r3, #3
 800452c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004530:	00d0      	lsls	r0, r2, #3
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	1912      	adds	r2, r2, r4
 8004538:	eb45 0303 	adc.w	r3, r5, r3
 800453c:	f04f 0000 	mov.w	r0, #0
 8004540:	f04f 0100 	mov.w	r1, #0
 8004544:	0299      	lsls	r1, r3, #10
 8004546:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800454a:	0290      	lsls	r0, r2, #10
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	461a      	mov	r2, r3
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f7fc fbb4 	bl	8000cc8 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	60bb      	str	r3, [r7, #8]
      break;
 8004582:	e002      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004586:	60bb      	str	r3, [r7, #8]
      break;
 8004588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458a:	68bb      	ldr	r3, [r7, #8]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000068 	.word	0x20000068

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a9b      	lsrs	r3, r3, #10
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	0800d09c 	.word	0x0800d09c

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e8:	f7ff ffdc 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0b5b      	lsrs	r3, r3, #13
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	0800d09c 	.word	0x0800d09c

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004634:	4b69      	ldr	r3, [pc, #420]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a68      	ldr	r2, [pc, #416]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800463e:	6093      	str	r3, [r2, #8]
 8004640:	4b66      	ldr	r3, [pc, #408]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	4964      	ldr	r1, [pc, #400]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004656:	2301      	movs	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d017      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004666:	4b5d      	ldr	r3, [pc, #372]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800466c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	4959      	ldr	r1, [pc, #356]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004684:	d101      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004686:	2301      	movs	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004692:	2301      	movs	r3, #1
 8004694:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d017      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046a2:	4b4e      	ldr	r3, [pc, #312]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	494a      	ldr	r1, [pc, #296]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c0:	d101      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 808b 	beq.w	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f0:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	4a39      	ldr	r2, [pc, #228]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fa:	6413      	str	r3, [r2, #64]	; 0x40
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004708:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800470e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004712:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004714:	f7fe f80e 	bl	8002734 <HAL_GetTick>
 8004718:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800471a:	e008      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fe f80a 	bl	8002734 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e357      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800472e:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800473a:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d035      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d02e      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004758:	4b20      	ldr	r3, [pc, #128]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004762:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004766:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476e:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004778:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800477a:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004780:	4b16      	ldr	r3, [pc, #88]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d114      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd ffd2 	bl	8002734 <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004792:	e00a      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd ffce 	bl	8002734 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e319      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0ee      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c2:	d111      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047d2:	400b      	ands	r3, r1
 80047d4:	4901      	ldr	r1, [pc, #4]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
 80047da:	e00b      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40007000 	.word	0x40007000
 80047e4:	0ffffcff 	.word	0x0ffffcff
 80047e8:	4bb1      	ldr	r3, [pc, #708]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4ab0      	ldr	r2, [pc, #704]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047f2:	6093      	str	r3, [r2, #8]
 80047f4:	4bae      	ldr	r3, [pc, #696]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	49ab      	ldr	r1, [pc, #684]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	d010      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004812:	4ba7      	ldr	r3, [pc, #668]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004818:	4aa5      	ldr	r2, [pc, #660]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800481a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800481e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004822:	4ba3      	ldr	r3, [pc, #652]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004824:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	49a0      	ldr	r1, [pc, #640]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004840:	4b9b      	ldr	r3, [pc, #620]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484e:	4998      	ldr	r1, [pc, #608]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004862:	4b93      	ldr	r3, [pc, #588]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004870:	498f      	ldr	r1, [pc, #572]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004884:	4b8a      	ldr	r3, [pc, #552]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004892:	4987      	ldr	r1, [pc, #540]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048a6:	4b82      	ldr	r3, [pc, #520]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	497e      	ldr	r1, [pc, #504]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048c8:	4b79      	ldr	r3, [pc, #484]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f023 0203 	bic.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4976      	ldr	r1, [pc, #472]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048ea:	4b71      	ldr	r3, [pc, #452]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f0:	f023 020c 	bic.w	r2, r3, #12
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	496d      	ldr	r1, [pc, #436]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800490c:	4b68      	ldr	r3, [pc, #416]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	4965      	ldr	r1, [pc, #404]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800492e:	4b60      	ldr	r3, [pc, #384]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004934:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	495c      	ldr	r1, [pc, #368]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004950:	4b57      	ldr	r3, [pc, #348]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	4954      	ldr	r1, [pc, #336]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004972:	4b4f      	ldr	r3, [pc, #316]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004978:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	494b      	ldr	r1, [pc, #300]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	4943      	ldr	r1, [pc, #268]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049b6:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c4:	493a      	ldr	r1, [pc, #232]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049d8:	4b35      	ldr	r3, [pc, #212]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e6:	4932      	ldr	r1, [pc, #200]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d011      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049fa:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a08:	4929      	ldr	r1, [pc, #164]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a18:	d101      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a3a:	4b1d      	ldr	r3, [pc, #116]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	4919      	ldr	r1, [pc, #100]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a6c:	4910      	ldr	r1, [pc, #64]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d006      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80d9 	beq.w	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fd fe4e 	bl	8002734 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a9c:	f7fd fe4a 	bl	8002734 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d904      	bls.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e197      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab4:	4b6c      	ldr	r3, [pc, #432]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ed      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d021      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d11d      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ad4:	4b64      	ldr	r3, [pc, #400]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ae2:	4b61      	ldr	r3, [pc, #388]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	019a      	lsls	r2, r3, #6
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	071b      	lsls	r3, r3, #28
 8004b08:	4957      	ldr	r1, [pc, #348]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d02e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3a:	d129      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b3c:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b4a:	4b47      	ldr	r3, [pc, #284]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b50:	0f1b      	lsrs	r3, r3, #28
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	019a      	lsls	r2, r3, #6
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	071b      	lsls	r3, r3, #28
 8004b70:	493d      	ldr	r1, [pc, #244]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b78:	4b3b      	ldr	r3, [pc, #236]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7e:	f023 021f 	bic.w	r2, r3, #31
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	3b01      	subs	r3, #1
 8004b88:	4937      	ldr	r1, [pc, #220]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b9c:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	0e1b      	lsrs	r3, r3, #24
 8004ba4:	f003 030f 	and.w	r3, r3, #15
 8004ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb0:	0f1b      	lsrs	r3, r3, #28
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	019a      	lsls	r2, r3, #6
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	041b      	lsls	r3, r3, #16
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	071b      	lsls	r3, r3, #28
 8004bd0:	4925      	ldr	r1, [pc, #148]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d011      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	019a      	lsls	r2, r3, #6
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	071b      	lsls	r3, r3, #28
 8004c00:	4919      	ldr	r1, [pc, #100]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fd fd8e 	bl	8002734 <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c1c:	f7fd fd8a 	bl	8002734 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e0d7      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 80cd 	bne.w	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fd71 	bl	8002734 <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c56:	f7fd fd6d 	bl	8002734 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b64      	cmp	r3, #100	; 0x64
 8004c62:	d903      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e0ba      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c6c:	4b5e      	ldr	r3, [pc, #376]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c78:	d0ed      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02e      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d12a      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ca2:	4b51      	ldr	r3, [pc, #324]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	0f1b      	lsrs	r3, r3, #28
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	019a      	lsls	r2, r3, #6
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	4944      	ldr	r1, [pc, #272]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cde:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	3b01      	subs	r3, #1
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	493d      	ldr	r1, [pc, #244]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d022      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d0c:	d11d      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d0e:	4b36      	ldr	r3, [pc, #216]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	0e1b      	lsrs	r3, r3, #24
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d1c:	4b32      	ldr	r3, [pc, #200]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d22:	0f1b      	lsrs	r3, r3, #28
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	019a      	lsls	r2, r3, #6
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	431a      	orrs	r2, r3
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	061b      	lsls	r3, r3, #24
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	071b      	lsls	r3, r3, #28
 8004d42:	4929      	ldr	r1, [pc, #164]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d028      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	0e1b      	lsrs	r3, r3, #24
 8004d5e:	f003 030f 	and.w	r3, r3, #15
 8004d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	019a      	lsls	r2, r3, #6
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	071b      	lsls	r3, r3, #28
 8004d8a:	4917      	ldr	r1, [pc, #92]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da0:	4911      	ldr	r1, [pc, #68]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db4:	f7fd fcbe 	bl	8002734 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dbc:	f7fd fcba 	bl	8002734 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e007      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dda:	d1ef      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e049      	b.n	8004e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fc fff4 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 fdec 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e04c      	b.n	8004f4e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <HAL_TIM_Base_Start+0xc0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d022      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ece:	d01d      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a22      	ldr	r2, [pc, #136]	; (8004f60 <HAL_TIM_Base_Start+0xc4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d018      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_TIM_Base_Start+0xc8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <HAL_TIM_Base_Start+0xcc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00e      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <HAL_TIM_Base_Start+0xd0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d009      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <HAL_TIM_Base_Start+0xd4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIM_Base_Start+0x70>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <HAL_TIM_Base_Start+0xd8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d115      	bne.n	8004f38 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_TIM_Base_Start+0xdc>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b06      	cmp	r3, #6
 8004f1c:	d015      	beq.n	8004f4a <HAL_TIM_Base_Start+0xae>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f24:	d011      	beq.n	8004f4a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e008      	b.n	8004f4a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40001800 	.word	0x40001800
 8004f78:	00010007 	.word	0x00010007

08004f7c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a1a      	ldr	r2, [r3, #32]
 8004f8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10f      	bne.n	8004fb4 <HAL_TIM_Base_Stop+0x38>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	f240 4344 	movw	r3, #1092	; 0x444
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_Base_Stop+0x38>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d001      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e054      	b.n	800508e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a26      	ldr	r2, [pc, #152]	; (800509c <HAL_TIM_Base_Start_IT+0xd0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d01d      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_TIM_Base_Start_IT+0xe0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIM_Base_Start_IT+0x80>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d115      	bne.n	8005078 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_TIM_Base_Start_IT+0xec>)
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b06      	cmp	r3, #6
 800505c:	d015      	beq.n	800508a <HAL_TIM_Base_Start_IT+0xbe>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005064:	d011      	beq.n	800508a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0201 	orr.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005076:	e008      	b.n	800508a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e000      	b.n	800508c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800
 80050b8:	00010007 	.word	0x00010007

080050bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6a1a      	ldr	r2, [r3, #32]
 80050da:	f241 1311 	movw	r3, #4369	; 0x1111
 80050de:	4013      	ands	r3, r2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10f      	bne.n	8005104 <HAL_TIM_Base_Stop_IT+0x48>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	f240 4344 	movw	r3, #1092	; 0x444
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d107      	bne.n	8005104 <HAL_TIM_Base_Stop_IT+0x48>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e049      	b.n	80051c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fc feb9 	bl	8001eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fc55 	bl	8005a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_TIM_PWM_Start+0x24>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	bf14      	ite	ne
 80051e4:	2301      	movne	r3, #1
 80051e6:	2300      	moveq	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e03c      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d109      	bne.n	8005206 <HAL_TIM_PWM_Start+0x3e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	bf14      	ite	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	2300      	moveq	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	e02f      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d109      	bne.n	8005220 <HAL_TIM_PWM_Start+0x58>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e022      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d109      	bne.n	800523a <HAL_TIM_PWM_Start+0x72>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b01      	cmp	r3, #1
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	e015      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2b10      	cmp	r3, #16
 800523e:	d109      	bne.n	8005254 <HAL_TIM_PWM_Start+0x8c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	e008      	b.n	8005266 <HAL_TIM_PWM_Start+0x9e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	bf14      	ite	ne
 8005260:	2301      	movne	r3, #1
 8005262:	2300      	moveq	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e092      	b.n	8005394 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_TIM_PWM_Start+0xb6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527c:	e023      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0xc6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800528c:	e01b      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0xd6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800529c:	e013      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xe6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ac:	e00b      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d104      	bne.n	80052be <HAL_TIM_PWM_Start+0xf6>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052bc:	e003      	b.n	80052c6 <HAL_TIM_PWM_Start+0xfe>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2201      	movs	r2, #1
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ff32 	bl	8006138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a30      	ldr	r2, [pc, #192]	; (800539c <HAL_TIM_PWM_Start+0x1d4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_TIM_PWM_Start+0x120>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <HAL_TIM_PWM_Start+0x1d8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_PWM_Start+0x124>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e000      	b.n	80052ee <HAL_TIM_PWM_Start+0x126>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a25      	ldr	r2, [pc, #148]	; (800539c <HAL_TIM_PWM_Start+0x1d4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d01d      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <HAL_TIM_PWM_Start+0x1dc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <HAL_TIM_PWM_Start+0x1e0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <HAL_TIM_PWM_Start+0x1e4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <HAL_TIM_PWM_Start+0x1d8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_TIM_PWM_Start+0x1e8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_TIM_PWM_Start+0x18a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a19      	ldr	r2, [pc, #100]	; (80053b4 <HAL_TIM_PWM_Start+0x1ec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d115      	bne.n	800537e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <HAL_TIM_PWM_Start+0x1f0>)
 800535a:	4013      	ands	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b06      	cmp	r3, #6
 8005362:	d015      	beq.n	8005390 <HAL_TIM_PWM_Start+0x1c8>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536a:	d011      	beq.n	8005390 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537c:	e008      	b.n	8005390 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0201 	orr.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e000      	b.n	8005392 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40001800 	.word	0x40001800
 80053b8:	00010007 	.word	0x00010007

080053bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d122      	bne.n	8005418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d11b      	bne.n	8005418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0202 	mvn.w	r2, #2
 80053e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fae4 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fad6 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fae7 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b04      	cmp	r3, #4
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0204 	mvn.w	r2, #4
 800543c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 faba 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 faac 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fabd 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b08      	cmp	r3, #8
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b08      	cmp	r3, #8
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0208 	mvn.w	r2, #8
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2204      	movs	r2, #4
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa90 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa82 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa93 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d122      	bne.n	8005514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d11b      	bne.n	8005514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0210 	mvn.w	r2, #16
 80054e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2208      	movs	r2, #8
 80054ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa66 	bl	80059cc <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa58 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa69 	bl	80059e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10e      	bne.n	8005540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d107      	bne.n	8005540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0201 	mvn.w	r2, #1
 8005538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc f82a 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d10e      	bne.n	800556c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	2b80      	cmp	r3, #128	; 0x80
 800555a:	d107      	bne.n	800556c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fea4 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d10e      	bne.n	800559a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b80      	cmp	r3, #128	; 0x80
 8005588:	d107      	bne.n	800559a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fe97 	bl	80062c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d10e      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa17 	bl	80059f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d10e      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d107      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0220 	mvn.w	r2, #32
 80055ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fe57 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005616:	2302      	movs	r3, #2
 8005618:	e0ff      	b.n	800581a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b14      	cmp	r3, #20
 8005626:	f200 80f0 	bhi.w	800580a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005685 	.word	0x08005685
 8005634:	0800580b 	.word	0x0800580b
 8005638:	0800580b 	.word	0x0800580b
 800563c:	0800580b 	.word	0x0800580b
 8005640:	080056c5 	.word	0x080056c5
 8005644:	0800580b 	.word	0x0800580b
 8005648:	0800580b 	.word	0x0800580b
 800564c:	0800580b 	.word	0x0800580b
 8005650:	08005707 	.word	0x08005707
 8005654:	0800580b 	.word	0x0800580b
 8005658:	0800580b 	.word	0x0800580b
 800565c:	0800580b 	.word	0x0800580b
 8005660:	08005747 	.word	0x08005747
 8005664:	0800580b 	.word	0x0800580b
 8005668:	0800580b 	.word	0x0800580b
 800566c:	0800580b 	.word	0x0800580b
 8005670:	08005789 	.word	0x08005789
 8005674:	0800580b 	.word	0x0800580b
 8005678:	0800580b 	.word	0x0800580b
 800567c:	0800580b 	.word	0x0800580b
 8005680:	080057c9 	.word	0x080057c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fa5c 	bl	8005b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0208 	orr.w	r2, r2, #8
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	619a      	str	r2, [r3, #24]
      break;
 80056c2:	e0a5      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 faae 	bl	8005c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	619a      	str	r2, [r3, #24]
      break;
 8005704:	e084      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fb05 	bl	8005d1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0208 	orr.w	r2, r2, #8
 8005720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0204 	bic.w	r2, r2, #4
 8005730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	61da      	str	r2, [r3, #28]
      break;
 8005744:	e064      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fb5b 	bl	8005e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	021a      	lsls	r2, r3, #8
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	61da      	str	r2, [r3, #28]
      break;
 8005786:	e043      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fb92 	bl	8005eb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0208 	orr.w	r2, r2, #8
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0204 	bic.w	r2, r2, #4
 80057b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057c6:	e023      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fbc4 	bl	8005f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005808:	e002      	b.n	8005810 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
      break;
 800580e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop

08005824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIM_ConfigClockSource+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e0b4      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x186>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <HAL_TIM_ConfigClockSource+0x190>)
 800585c:	4013      	ands	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005878:	d03e      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xd4>
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	f200 8087 	bhi.w	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	f000 8086 	beq.w	8005996 <HAL_TIM_ConfigClockSource+0x172>
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d87f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b70      	cmp	r3, #112	; 0x70
 8005892:	d01a      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xa6>
 8005894:	2b70      	cmp	r3, #112	; 0x70
 8005896:	d87b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b60      	cmp	r3, #96	; 0x60
 800589a:	d050      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x11a>
 800589c:	2b60      	cmp	r3, #96	; 0x60
 800589e:	d877      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b50      	cmp	r3, #80	; 0x50
 80058a2:	d03c      	beq.n	800591e <HAL_TIM_ConfigClockSource+0xfa>
 80058a4:	2b50      	cmp	r3, #80	; 0x50
 80058a6:	d873      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d058      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x13a>
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d86f      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b30      	cmp	r3, #48	; 0x30
 80058b2:	d064      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d86b      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d867      	bhi.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d05c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x15a>
 80058c8:	e062      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 fc0d 	bl	80060f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04f      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f000 fbf6 	bl	80060f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e03c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fb6a 	bl	8006004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fbc3 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 800593c:	e02c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fb89 	bl	8006062 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fbb3 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 800595c:	e01c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fb4a 	bl	8006004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fba3 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 800597c:	e00c      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 fb9a 	bl	80060c2 <TIM_ITRx_SetConfig>
      break;
 800598e:	e003      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
      break;
 8005994:	e000      	b.n	8005998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	fffeff88 	.word	0xfffeff88

080059b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a40      	ldr	r2, [pc, #256]	; (8005b1c <TIM_Base_SetConfig+0x114>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d013      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a26:	d00f      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3d      	ldr	r2, [pc, #244]	; (8005b20 <TIM_Base_SetConfig+0x118>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3c      	ldr	r2, [pc, #240]	; (8005b24 <TIM_Base_SetConfig+0x11c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3b      	ldr	r2, [pc, #236]	; (8005b28 <TIM_Base_SetConfig+0x120>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0x40>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a3a      	ldr	r2, [pc, #232]	; (8005b2c <TIM_Base_SetConfig+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d108      	bne.n	8005a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <TIM_Base_SetConfig+0x114>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02b      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d027      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2c      	ldr	r2, [pc, #176]	; (8005b20 <TIM_Base_SetConfig+0x118>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d023      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2b      	ldr	r2, [pc, #172]	; (8005b24 <TIM_Base_SetConfig+0x11c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01f      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <TIM_Base_SetConfig+0x120>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01b      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a29      	ldr	r2, [pc, #164]	; (8005b2c <TIM_Base_SetConfig+0x124>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d017      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a28      	ldr	r2, [pc, #160]	; (8005b30 <TIM_Base_SetConfig+0x128>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a27      	ldr	r2, [pc, #156]	; (8005b34 <TIM_Base_SetConfig+0x12c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00f      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <TIM_Base_SetConfig+0x130>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <TIM_Base_SetConfig+0x134>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d007      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <TIM_Base_SetConfig+0x138>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a23      	ldr	r2, [pc, #140]	; (8005b44 <TIM_Base_SetConfig+0x13c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d108      	bne.n	8005acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <TIM_Base_SetConfig+0x114>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_Base_SetConfig+0xf8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a0c      	ldr	r2, [pc, #48]	; (8005b2c <TIM_Base_SetConfig+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d103      	bne.n	8005b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	615a      	str	r2, [r3, #20]
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800
 8005b3c:	40001800 	.word	0x40001800
 8005b40:	40001c00 	.word	0x40001c00
 8005b44:	40002000 	.word	0x40002000

08005b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f023 0201 	bic.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <TIM_OC1_SetConfig+0xd8>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0302 	bic.w	r3, r3, #2
 8005b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <TIM_OC1_SetConfig+0xdc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_OC1_SetConfig+0x64>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <TIM_OC1_SetConfig+0xe0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10c      	bne.n	8005bc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f023 0308 	bic.w	r3, r3, #8
 8005bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f023 0304 	bic.w	r3, r3, #4
 8005bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <TIM_OC1_SetConfig+0xdc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_OC1_SetConfig+0x8e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a15      	ldr	r2, [pc, #84]	; (8005c28 <TIM_OC1_SetConfig+0xe0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d111      	bne.n	8005bfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	621a      	str	r2, [r3, #32]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	fffeff8f 	.word	0xfffeff8f
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40010400 	.word	0x40010400

08005c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0210 	bic.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4b2e      	ldr	r3, [pc, #184]	; (8005d10 <TIM_OC2_SetConfig+0xe4>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0320 	bic.w	r3, r3, #32
 8005c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <TIM_OC2_SetConfig+0xe8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_OC2_SetConfig+0x68>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a22      	ldr	r2, [pc, #136]	; (8005d18 <TIM_OC2_SetConfig+0xec>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10d      	bne.n	8005cb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <TIM_OC2_SetConfig+0xe8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC2_SetConfig+0x94>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <TIM_OC2_SetConfig+0xec>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d113      	bne.n	8005ce8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	feff8fff 	.word	0xfeff8fff
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400

08005d1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <TIM_OC3_SetConfig+0xe0>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <TIM_OC3_SetConfig+0xe4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_OC3_SetConfig+0x66>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <TIM_OC3_SetConfig+0xe8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10d      	bne.n	8005d9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a17      	ldr	r2, [pc, #92]	; (8005e00 <TIM_OC3_SetConfig+0xe4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d003      	beq.n	8005dae <TIM_OC3_SetConfig+0x92>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a16      	ldr	r2, [pc, #88]	; (8005e04 <TIM_OC3_SetConfig+0xe8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d113      	bne.n	8005dd6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	fffeff8f 	.word	0xfffeff8f
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <TIM_OC4_SetConfig+0xa4>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <TIM_OC4_SetConfig+0xa8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC4_SetConfig+0x68>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a12      	ldr	r2, [pc, #72]	; (8005eb4 <TIM_OC4_SetConfig+0xac>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d109      	bne.n	8005e84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	019b      	lsls	r3, r3, #6
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	feff8fff 	.word	0xfeff8fff
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <TIM_OC5_SetConfig+0x98>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	041b      	lsls	r3, r3, #16
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <TIM_OC5_SetConfig+0x9c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <TIM_OC5_SetConfig+0x5e>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <TIM_OC5_SetConfig+0xa0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d109      	bne.n	8005f2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	fffeff8f 	.word	0xfffeff8f
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40010400 	.word	0x40010400

08005f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <TIM_OC6_SetConfig+0x9c>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	051b      	lsls	r3, r3, #20
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <TIM_OC6_SetConfig+0xa0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC6_SetConfig+0x60>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a12      	ldr	r2, [pc, #72]	; (8006000 <TIM_OC6_SetConfig+0xa4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d109      	bne.n	8005fd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	371c      	adds	r7, #28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	feff8fff 	.word	0xfeff8fff
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400

08006004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f023 0201 	bic.w	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 030a 	bic.w	r3, r3, #10
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	621a      	str	r2, [r3, #32]
}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006062:	b480      	push	{r7}
 8006064:	b087      	sub	sp, #28
 8006066:	af00      	add	r7, sp, #0
 8006068:	60f8      	str	r0, [r7, #12]
 800606a:	60b9      	str	r1, [r7, #8]
 800606c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0210 	bic.w	r2, r3, #16
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800608c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800609e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4313      	orrs	r3, r2
 80060e0:	f043 0307 	orr.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	431a      	orrs	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	2201      	movs	r2, #1
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	43db      	mvns	r3, r3
 800615a:	401a      	ands	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	fa01 f303 	lsl.w	r3, r1, r3
 8006170:	431a      	orrs	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e06d      	b.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a30      	ldr	r2, [pc, #192]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a2f      	ldr	r2, [pc, #188]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d108      	bne.n	80061e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a20      	ldr	r2, [pc, #128]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d01d      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1c      	ldr	r2, [pc, #112]	; (8006290 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a15      	ldr	r2, [pc, #84]	; (8006288 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a16      	ldr	r2, [pc, #88]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a15      	ldr	r2, [pc, #84]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d10c      	bne.n	8006266 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006252:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40014000 	.word	0x40014000
 800629c:	40001800 	.word	0x40001800

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e040      	b.n	8006370 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb fe56 	bl	8001fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2224      	movs	r2, #36	; 0x24
 8006308:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 0201 	bic.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fbf8 	bl	8006b10 <UART_SetConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e022      	b.n	8006370 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fe4e 	bl	8006fd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006346:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006356:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fed5 	bl	8007118 <UART_CheckIdleState>
 800636e:	4603      	mov	r3, r0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800638c:	2b20      	cmp	r3, #32
 800638e:	f040 8081 	bne.w	8006494 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_UART_Transmit+0x26>
 8006398:	88fb      	ldrh	r3, [r7, #6]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e079      	b.n	8006496 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_UART_Transmit+0x38>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e072      	b.n	8006496 <HAL_UART_Transmit+0x11e>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2221      	movs	r2, #33	; 0x21
 80063c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c6:	f7fc f9b5 	bl	8002734 <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e4:	d108      	bne.n	80063f8 <HAL_UART_Transmit+0x80>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d104      	bne.n	80063f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e003      	b.n	8006400 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006408:	e02c      	b.n	8006464 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 feb2 	bl	800717e <UART_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e038      	b.n	8006496 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	461a      	mov	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006438:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	3302      	adds	r3, #2
 800643e:	61bb      	str	r3, [r7, #24]
 8006440:	e007      	b.n	8006452 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	781a      	ldrb	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1cc      	bne.n	800640a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2200      	movs	r2, #0
 8006478:	2140      	movs	r1, #64	; 0x40
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fe7f 	bl	800717e <UART_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e005      	b.n	8006496 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b08a      	sub	sp, #40	; 0x28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	4613      	mov	r3, r2
 80064aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d13d      	bne.n	8006530 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Receive_IT+0x22>
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e036      	b.n	8006532 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Receive_IT+0x34>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e02f      	b.n	8006532 <HAL_UART_Receive_IT+0x94>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	613b      	str	r3, [r7, #16]
   return(result);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	461a      	mov	r2, r3
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	6a3a      	ldr	r2, [r7, #32]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	61bb      	str	r3, [r7, #24]
   return(result);
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e6      	bne.n	80064ee <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	461a      	mov	r2, r3
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 feee 	bl	8007308 <UART_Start_Receive_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3728      	adds	r7, #40	; 0x28
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b0ba      	sub	sp, #232	; 0xe8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006566:	f640 030f 	movw	r3, #2063	; 0x80f
 800656a:	4013      	ands	r3, r2
 800656c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d115      	bne.n	80065a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d009      	beq.n	80065a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 828f 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      }
      return;
 80065a2:	e289      	b.n	8006ab8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8117 	beq.w	80067dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065be:	4b85      	ldr	r3, [pc, #532]	; (80067d4 <HAL_UART_IRQHandler+0x298>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 810a 	beq.w	80067dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d011      	beq.n	80065f8 <HAL_UART_IRQHandler+0xbc>
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2201      	movs	r2, #1
 80065e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ee:	f043 0201 	orr.w	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d011      	beq.n	8006628 <HAL_UART_IRQHandler+0xec>
 8006604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2202      	movs	r2, #2
 8006616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800661e:	f043 0204 	orr.w	r2, r3, #4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d011      	beq.n	8006658 <HAL_UART_IRQHandler+0x11c>
 8006634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2204      	movs	r2, #4
 8006646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664e:	f043 0202 	orr.w	r2, r3, #2
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006674:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2208      	movs	r2, #8
 8006682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668a:	f043 0208 	orr.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669c:	2b00      	cmp	r3, #0
 800669e:	d012      	beq.n	80066c6 <HAL_UART_IRQHandler+0x18a>
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00c      	beq.n	80066c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 81f5 	beq.w	8006abc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00d      	beq.n	80066fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d005      	beq.n	800671e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671a:	2b00      	cmp	r3, #0
 800671c:	d04f      	beq.n	80067be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 febc 	bl	800749c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d141      	bne.n	80067b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3308      	adds	r3, #8
 8006738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800674c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3308      	adds	r3, #8
 800675a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800675e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800676a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1d9      	bne.n	8006732 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006782:	2b00      	cmp	r3, #0
 8006784:	d013      	beq.n	80067ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <HAL_UART_IRQHandler+0x29c>)
 800678c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	4618      	mov	r0, r3
 8006794:	f7fc f97f 	bl	8002a96 <HAL_DMA_Abort_IT>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d017      	beq.n	80067ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067a8:	4610      	mov	r0, r2
 80067aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	e00f      	b.n	80067ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f998 	bl	8006ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	e00b      	b.n	80067ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f994 	bl	8006ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	e007      	b.n	80067ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f990 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067cc:	e176      	b.n	8006abc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ce:	bf00      	nop
    return;
 80067d0:	e174      	b.n	8006abc <HAL_UART_IRQHandler+0x580>
 80067d2:	bf00      	nop
 80067d4:	04000120 	.word	0x04000120
 80067d8:	08007563 	.word	0x08007563

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f040 8144 	bne.w	8006a6e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ea:	f003 0310 	and.w	r3, r3, #16
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 813d 	beq.w	8006a6e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 8136 	beq.w	8006a6e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2210      	movs	r2, #16
 8006808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	f040 80b2 	bne.w	800697e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006826:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 8148 	beq.w	8006ac0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800683a:	429a      	cmp	r2, r3
 800683c:	f080 8140 	bcs.w	8006ac0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006854:	f000 8085 	beq.w	8006962 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800686c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006886:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800688e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800689a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1da      	bne.n	8006858 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e1      	bne.n	80068a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006932:	f023 0310 	bic.w	r3, r3, #16
 8006936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006944:	65bb      	str	r3, [r7, #88]	; 0x58
 8006946:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800694a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e4      	bne.n	8006922 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4618      	mov	r0, r3
 800695e:	f7fc f82a 	bl	80029b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696e:	b29b      	uxth	r3, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	b29b      	uxth	r3, r3
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f8be 	bl	8006af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800697c:	e0a0      	b.n	8006ac0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800698a:	b29b      	uxth	r3, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8092 	beq.w	8006ac4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80069a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 808d 	beq.w	8006ac4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
 80069ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e4      	bne.n	80069aa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3308      	adds	r3, #8
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	e853 3f00 	ldrex	r3, [r3]
 80069ee:	623b      	str	r3, [r7, #32]
   return(result);
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	f023 0301 	bic.w	r3, r3, #1
 80069f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a04:	633a      	str	r2, [r7, #48]	; 0x30
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e3      	bne.n	80069e0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e4      	bne.n	8006a2a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f846 	bl	8006af8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a6c:	e02a      	b.n	8006ac4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d008      	beq.n	8006a98 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01c      	beq.n	8006ac8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
    }
    return;
 8006a96:	e017      	b.n	8006ac8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d012      	beq.n	8006aca <HAL_UART_IRQHandler+0x58e>
 8006aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00c      	beq.n	8006aca <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fd6c 	bl	800758e <UART_EndTransmit_IT>
    return;
 8006ab6:	e008      	b.n	8006aca <HAL_UART_IRQHandler+0x58e>
      return;
 8006ab8:	bf00      	nop
 8006aba:	e006      	b.n	8006aca <HAL_UART_IRQHandler+0x58e>
    return;
 8006abc:	bf00      	nop
 8006abe:	e004      	b.n	8006aca <HAL_UART_IRQHandler+0x58e>
      return;
 8006ac0:	bf00      	nop
 8006ac2:	e002      	b.n	8006aca <HAL_UART_IRQHandler+0x58e>
      return;
 8006ac4:	bf00      	nop
 8006ac6:	e000      	b.n	8006aca <HAL_UART_IRQHandler+0x58e>
    return;
 8006ac8:	bf00      	nop
  }

}
 8006aca:	37e8      	adds	r7, #232	; 0xe8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4ba7      	ldr	r3, [pc, #668]	; (8006dd8 <UART_SetConfig+0x2c8>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	6979      	ldr	r1, [r7, #20]
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a95      	ldr	r2, [pc, #596]	; (8006ddc <UART_SetConfig+0x2cc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d120      	bne.n	8006bce <UART_SetConfig+0xbe>
 8006b8c:	4b94      	ldr	r3, [pc, #592]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d816      	bhi.n	8006bc8 <UART_SetConfig+0xb8>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <UART_SetConfig+0x90>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bb1 	.word	0x08006bb1
 8006ba4:	08006bbd 	.word	0x08006bbd
 8006ba8:	08006bb7 	.word	0x08006bb7
 8006bac:	08006bc3 	.word	0x08006bc3
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e14f      	b.n	8006e56 <UART_SetConfig+0x346>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	e14c      	b.n	8006e56 <UART_SetConfig+0x346>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e149      	b.n	8006e56 <UART_SetConfig+0x346>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e146      	b.n	8006e56 <UART_SetConfig+0x346>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e143      	b.n	8006e56 <UART_SetConfig+0x346>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a84      	ldr	r2, [pc, #528]	; (8006de4 <UART_SetConfig+0x2d4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d132      	bne.n	8006c3e <UART_SetConfig+0x12e>
 8006bd8:	4b81      	ldr	r3, [pc, #516]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f003 030c 	and.w	r3, r3, #12
 8006be2:	2b0c      	cmp	r3, #12
 8006be4:	d828      	bhi.n	8006c38 <UART_SetConfig+0x128>
 8006be6:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0xdc>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c21 	.word	0x08006c21
 8006bf0:	08006c39 	.word	0x08006c39
 8006bf4:	08006c39 	.word	0x08006c39
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c39 	.word	0x08006c39
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c27 	.word	0x08006c27
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006c33 	.word	0x08006c33
 8006c20:	2300      	movs	r3, #0
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e117      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c26:	2302      	movs	r3, #2
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e114      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e111      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c32:	2308      	movs	r3, #8
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e10e      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e10b      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a69      	ldr	r2, [pc, #420]	; (8006de8 <UART_SetConfig+0x2d8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d120      	bne.n	8006c8a <UART_SetConfig+0x17a>
 8006c48:	4b65      	ldr	r3, [pc, #404]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c52:	2b30      	cmp	r3, #48	; 0x30
 8006c54:	d013      	beq.n	8006c7e <UART_SetConfig+0x16e>
 8006c56:	2b30      	cmp	r3, #48	; 0x30
 8006c58:	d814      	bhi.n	8006c84 <UART_SetConfig+0x174>
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d009      	beq.n	8006c72 <UART_SetConfig+0x162>
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d810      	bhi.n	8006c84 <UART_SetConfig+0x174>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <UART_SetConfig+0x15c>
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d006      	beq.n	8006c78 <UART_SetConfig+0x168>
 8006c6a:	e00b      	b.n	8006c84 <UART_SetConfig+0x174>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e0f1      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c72:	2302      	movs	r3, #2
 8006c74:	77fb      	strb	r3, [r7, #31]
 8006c76:	e0ee      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	77fb      	strb	r3, [r7, #31]
 8006c7c:	e0eb      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	77fb      	strb	r3, [r7, #31]
 8006c82:	e0e8      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c84:	2310      	movs	r3, #16
 8006c86:	77fb      	strb	r3, [r7, #31]
 8006c88:	e0e5      	b.n	8006e56 <UART_SetConfig+0x346>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a57      	ldr	r2, [pc, #348]	; (8006dec <UART_SetConfig+0x2dc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d120      	bne.n	8006cd6 <UART_SetConfig+0x1c6>
 8006c94:	4b52      	ldr	r3, [pc, #328]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca0:	d013      	beq.n	8006cca <UART_SetConfig+0x1ba>
 8006ca2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ca4:	d814      	bhi.n	8006cd0 <UART_SetConfig+0x1c0>
 8006ca6:	2b80      	cmp	r3, #128	; 0x80
 8006ca8:	d009      	beq.n	8006cbe <UART_SetConfig+0x1ae>
 8006caa:	2b80      	cmp	r3, #128	; 0x80
 8006cac:	d810      	bhi.n	8006cd0 <UART_SetConfig+0x1c0>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <UART_SetConfig+0x1a8>
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d006      	beq.n	8006cc4 <UART_SetConfig+0x1b4>
 8006cb6:	e00b      	b.n	8006cd0 <UART_SetConfig+0x1c0>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e0cb      	b.n	8006e56 <UART_SetConfig+0x346>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e0c8      	b.n	8006e56 <UART_SetConfig+0x346>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e0c5      	b.n	8006e56 <UART_SetConfig+0x346>
 8006cca:	2308      	movs	r3, #8
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e0c2      	b.n	8006e56 <UART_SetConfig+0x346>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e0bf      	b.n	8006e56 <UART_SetConfig+0x346>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a45      	ldr	r2, [pc, #276]	; (8006df0 <UART_SetConfig+0x2e0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d125      	bne.n	8006d2c <UART_SetConfig+0x21c>
 8006ce0:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cee:	d017      	beq.n	8006d20 <UART_SetConfig+0x210>
 8006cf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf4:	d817      	bhi.n	8006d26 <UART_SetConfig+0x216>
 8006cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cfa:	d00b      	beq.n	8006d14 <UART_SetConfig+0x204>
 8006cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d00:	d811      	bhi.n	8006d26 <UART_SetConfig+0x216>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <UART_SetConfig+0x1fe>
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d006      	beq.n	8006d1a <UART_SetConfig+0x20a>
 8006d0c:	e00b      	b.n	8006d26 <UART_SetConfig+0x216>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e0a0      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d14:	2302      	movs	r3, #2
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e09d      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d1a:	2304      	movs	r3, #4
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e09a      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d20:	2308      	movs	r3, #8
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e097      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d26:	2310      	movs	r3, #16
 8006d28:	77fb      	strb	r3, [r7, #31]
 8006d2a:	e094      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a30      	ldr	r2, [pc, #192]	; (8006df4 <UART_SetConfig+0x2e4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d125      	bne.n	8006d82 <UART_SetConfig+0x272>
 8006d36:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d44:	d017      	beq.n	8006d76 <UART_SetConfig+0x266>
 8006d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d4a:	d817      	bhi.n	8006d7c <UART_SetConfig+0x26c>
 8006d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d50:	d00b      	beq.n	8006d6a <UART_SetConfig+0x25a>
 8006d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d56:	d811      	bhi.n	8006d7c <UART_SetConfig+0x26c>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <UART_SetConfig+0x254>
 8006d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d60:	d006      	beq.n	8006d70 <UART_SetConfig+0x260>
 8006d62:	e00b      	b.n	8006d7c <UART_SetConfig+0x26c>
 8006d64:	2301      	movs	r3, #1
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e075      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e072      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d70:	2304      	movs	r3, #4
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e06f      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d76:	2308      	movs	r3, #8
 8006d78:	77fb      	strb	r3, [r7, #31]
 8006d7a:	e06c      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e069      	b.n	8006e56 <UART_SetConfig+0x346>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1c      	ldr	r2, [pc, #112]	; (8006df8 <UART_SetConfig+0x2e8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d137      	bne.n	8006dfc <UART_SetConfig+0x2ec>
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d9a:	d017      	beq.n	8006dcc <UART_SetConfig+0x2bc>
 8006d9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006da0:	d817      	bhi.n	8006dd2 <UART_SetConfig+0x2c2>
 8006da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da6:	d00b      	beq.n	8006dc0 <UART_SetConfig+0x2b0>
 8006da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dac:	d811      	bhi.n	8006dd2 <UART_SetConfig+0x2c2>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <UART_SetConfig+0x2aa>
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	d006      	beq.n	8006dc6 <UART_SetConfig+0x2b6>
 8006db8:	e00b      	b.n	8006dd2 <UART_SetConfig+0x2c2>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	77fb      	strb	r3, [r7, #31]
 8006dbe:	e04a      	b.n	8006e56 <UART_SetConfig+0x346>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e047      	b.n	8006e56 <UART_SetConfig+0x346>
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e044      	b.n	8006e56 <UART_SetConfig+0x346>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e041      	b.n	8006e56 <UART_SetConfig+0x346>
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e03e      	b.n	8006e56 <UART_SetConfig+0x346>
 8006dd8:	efff69f3 	.word	0xefff69f3
 8006ddc:	40011000 	.word	0x40011000
 8006de0:	40023800 	.word	0x40023800
 8006de4:	40004400 	.word	0x40004400
 8006de8:	40004800 	.word	0x40004800
 8006dec:	40004c00 	.word	0x40004c00
 8006df0:	40005000 	.word	0x40005000
 8006df4:	40011400 	.word	0x40011400
 8006df8:	40007800 	.word	0x40007800
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a71      	ldr	r2, [pc, #452]	; (8006fc8 <UART_SetConfig+0x4b8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d125      	bne.n	8006e52 <UART_SetConfig+0x342>
 8006e06:	4b71      	ldr	r3, [pc, #452]	; (8006fcc <UART_SetConfig+0x4bc>)
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e14:	d017      	beq.n	8006e46 <UART_SetConfig+0x336>
 8006e16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e1a:	d817      	bhi.n	8006e4c <UART_SetConfig+0x33c>
 8006e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e20:	d00b      	beq.n	8006e3a <UART_SetConfig+0x32a>
 8006e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e26:	d811      	bhi.n	8006e4c <UART_SetConfig+0x33c>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <UART_SetConfig+0x324>
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	d006      	beq.n	8006e40 <UART_SetConfig+0x330>
 8006e32:	e00b      	b.n	8006e4c <UART_SetConfig+0x33c>
 8006e34:	2300      	movs	r3, #0
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e00d      	b.n	8006e56 <UART_SetConfig+0x346>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e00a      	b.n	8006e56 <UART_SetConfig+0x346>
 8006e40:	2304      	movs	r3, #4
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e007      	b.n	8006e56 <UART_SetConfig+0x346>
 8006e46:	2308      	movs	r3, #8
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e004      	b.n	8006e56 <UART_SetConfig+0x346>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e001      	b.n	8006e56 <UART_SetConfig+0x346>
 8006e52:	2310      	movs	r3, #16
 8006e54:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5e:	d15a      	bne.n	8006f16 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006e60:	7ffb      	ldrb	r3, [r7, #31]
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d827      	bhi.n	8006eb6 <UART_SetConfig+0x3a6>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x35c>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	08006eb7 	.word	0x08006eb7
 8006e7c:	08006ea7 	.word	0x08006ea7
 8006e80:	08006eb7 	.word	0x08006eb7
 8006e84:	08006eb7 	.word	0x08006eb7
 8006e88:	08006eb7 	.word	0x08006eb7
 8006e8c:	08006eaf 	.word	0x08006eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e90:	f7fd fb94 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006e94:	61b8      	str	r0, [r7, #24]
        break;
 8006e96:	e013      	b.n	8006ec0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e98:	f7fd fba4 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8006e9c:	61b8      	str	r0, [r7, #24]
        break;
 8006e9e:	e00f      	b.n	8006ec0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea0:	4b4b      	ldr	r3, [pc, #300]	; (8006fd0 <UART_SetConfig+0x4c0>)
 8006ea2:	61bb      	str	r3, [r7, #24]
        break;
 8006ea4:	e00c      	b.n	8006ec0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ea6:	f7fd fa9b 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8006eaa:	61b8      	str	r0, [r7, #24]
        break;
 8006eac:	e008      	b.n	8006ec0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb2:	61bb      	str	r3, [r7, #24]
        break;
 8006eb4:	e004      	b.n	8006ec0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ebe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d074      	beq.n	8006fb0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	005a      	lsls	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	085b      	lsrs	r3, r3, #1
 8006ed0:	441a      	add	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	d916      	bls.n	8006f10 <UART_SetConfig+0x400>
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d212      	bcs.n	8006f10 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f023 030f 	bic.w	r3, r3, #15
 8006ef2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	89fb      	ldrh	r3, [r7, #14]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	89fa      	ldrh	r2, [r7, #14]
 8006f0c:	60da      	str	r2, [r3, #12]
 8006f0e:	e04f      	b.n	8006fb0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	77bb      	strb	r3, [r7, #30]
 8006f14:	e04c      	b.n	8006fb0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f16:	7ffb      	ldrb	r3, [r7, #31]
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d828      	bhi.n	8006f6e <UART_SetConfig+0x45e>
 8006f1c:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <UART_SetConfig+0x414>)
 8006f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f22:	bf00      	nop
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f59 	.word	0x08006f59
 8006f30:	08006f6f 	.word	0x08006f6f
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	08006f6f 	.word	0x08006f6f
 8006f3c:	08006f6f 	.word	0x08006f6f
 8006f40:	08006f6f 	.word	0x08006f6f
 8006f44:	08006f67 	.word	0x08006f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7fd fb38 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8006f4c:	61b8      	str	r0, [r7, #24]
        break;
 8006f4e:	e013      	b.n	8006f78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fd fb48 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 8006f54:	61b8      	str	r0, [r7, #24]
        break;
 8006f56:	e00f      	b.n	8006f78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <UART_SetConfig+0x4c0>)
 8006f5a:	61bb      	str	r3, [r7, #24]
        break;
 8006f5c:	e00c      	b.n	8006f78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5e:	f7fd fa3f 	bl	80043e0 <HAL_RCC_GetSysClockFreq>
 8006f62:	61b8      	str	r0, [r7, #24]
        break;
 8006f64:	e008      	b.n	8006f78 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6a:	61bb      	str	r3, [r7, #24]
        break;
 8006f6c:	e004      	b.n	8006f78 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	77bb      	strb	r3, [r7, #30]
        break;
 8006f76:	bf00      	nop
    }

    if (pclk != 0U)
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d018      	beq.n	8006fb0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	085a      	lsrs	r2, r3, #1
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	441a      	add	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b0f      	cmp	r3, #15
 8006f96:	d909      	bls.n	8006fac <UART_SetConfig+0x49c>
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9e:	d205      	bcs.n	8006fac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	e001      	b.n	8006fb0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006fbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3720      	adds	r7, #32
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40007c00 	.word	0x40007c00
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	00f42400 	.word	0x00f42400

08006fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01a      	beq.n	80070ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d2:	d10a      	bne.n	80070ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007128:	f7fb fb04 	bl	8002734 <HAL_GetTick>
 800712c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b08      	cmp	r3, #8
 800713a:	d10e      	bne.n	800715a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800713c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f817 	bl	800717e <UART_WaitOnFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e00d      	b.n	8007176 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b09c      	sub	sp, #112	; 0x70
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	603b      	str	r3, [r7, #0]
 800718a:	4613      	mov	r3, r2
 800718c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718e:	e0a5      	b.n	80072dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	f000 80a1 	beq.w	80072dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800719a:	f7fb facb 	bl	8002734 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d302      	bcc.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80071aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d13e      	bne.n	800722e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071c4:	667b      	str	r3, [r7, #100]	; 0x64
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e6      	bne.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	f023 0301 	bic.w	r3, r3, #1
 80071f8:	663b      	str	r3, [r7, #96]	; 0x60
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3308      	adds	r3, #8
 8007200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007202:	64ba      	str	r2, [r7, #72]	; 0x48
 8007204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e067      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	d04f      	beq.n	80072dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800724a:	d147      	bne.n	80072dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007254:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800726a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
 8007276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800727a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e6      	bne.n	8007256 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	613b      	str	r3, [r7, #16]
   return(result);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f023 0301 	bic.w	r3, r3, #1
 800729e:	66bb      	str	r3, [r7, #104]	; 0x68
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3308      	adds	r3, #8
 80072a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072a8:	623a      	str	r2, [r7, #32]
 80072aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	69f9      	ldr	r1, [r7, #28]
 80072ae:	6a3a      	ldr	r2, [r7, #32]
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e5      	bne.n	8007288 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e010      	b.n	80072fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	4013      	ands	r3, r2
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	bf0c      	ite	eq
 80072ec:	2301      	moveq	r3, #1
 80072ee:	2300      	movne	r3, #0
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	79fb      	ldrb	r3, [r7, #7]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	f43f af4a 	beq.w	8007190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3770      	adds	r7, #112	; 0x70
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007308:	b480      	push	{r7}
 800730a:	b097      	sub	sp, #92	; 0x5c
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d10e      	bne.n	800735a <UART_Start_Receive_IT+0x52>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <UART_Start_Receive_IT+0x48>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f240 12ff 	movw	r2, #511	; 0x1ff
 800734a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800734e:	e02d      	b.n	80073ac <UART_Start_Receive_IT+0xa4>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	22ff      	movs	r2, #255	; 0xff
 8007354:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007358:	e028      	b.n	80073ac <UART_Start_Receive_IT+0xa4>
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10d      	bne.n	800737e <UART_Start_Receive_IT+0x76>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d104      	bne.n	8007374 <UART_Start_Receive_IT+0x6c>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	22ff      	movs	r2, #255	; 0xff
 800736e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007372:	e01b      	b.n	80073ac <UART_Start_Receive_IT+0xa4>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	227f      	movs	r2, #127	; 0x7f
 8007378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800737c:	e016      	b.n	80073ac <UART_Start_Receive_IT+0xa4>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007386:	d10d      	bne.n	80073a4 <UART_Start_Receive_IT+0x9c>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <UART_Start_Receive_IT+0x92>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	227f      	movs	r2, #127	; 0x7f
 8007394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007398:	e008      	b.n	80073ac <UART_Start_Receive_IT+0xa4>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	223f      	movs	r2, #63	; 0x3f
 800739e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073a2:	e003      	b.n	80073ac <UART_Start_Receive_IT+0xa4>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2222      	movs	r2, #34	; 0x22
 80073b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	f043 0301 	orr.w	r3, r3, #1
 80073d0:	657b      	str	r3, [r7, #84]	; 0x54
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3308      	adds	r3, #8
 80073d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073da:	64ba      	str	r2, [r7, #72]	; 0x48
 80073dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e5      	bne.n	80073ba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f6:	d107      	bne.n	8007408 <UART_Start_Receive_IT+0x100>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d103      	bne.n	8007408 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4a24      	ldr	r2, [pc, #144]	; (8007494 <UART_Start_Receive_IT+0x18c>)
 8007404:	665a      	str	r2, [r3, #100]	; 0x64
 8007406:	e002      	b.n	800740e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4a23      	ldr	r2, [pc, #140]	; (8007498 <UART_Start_Receive_IT+0x190>)
 800740c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d019      	beq.n	8007452 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743c:	637b      	str	r3, [r7, #52]	; 0x34
 800743e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e6      	bne.n	800741e <UART_Start_Receive_IT+0x116>
 8007450:	e018      	b.n	8007484 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	613b      	str	r3, [r7, #16]
   return(result);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f043 0320 	orr.w	r3, r3, #32
 8007466:	653b      	str	r3, [r7, #80]	; 0x50
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007470:	623b      	str	r3, [r7, #32]
 8007472:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	69f9      	ldr	r1, [r7, #28]
 8007476:	6a3a      	ldr	r2, [r7, #32]
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	61bb      	str	r3, [r7, #24]
   return(result);
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	375c      	adds	r7, #92	; 0x5c
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	0800773f 	.word	0x0800773f
 8007498:	080075e3 	.word	0x080075e3

0800749c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800749c:	b480      	push	{r7}
 800749e:	b095      	sub	sp, #84	; 0x54
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c2:	643b      	str	r3, [r7, #64]	; 0x40
 80074c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074ca:	e841 2300 	strex	r3, r2, [r1]
 80074ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1e6      	bne.n	80074a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3308      	adds	r3, #8
 80074dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3308      	adds	r3, #8
 80074f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e5      	bne.n	80074d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750e:	2b01      	cmp	r3, #1
 8007510:	d118      	bne.n	8007544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	e853 3f00 	ldrex	r3, [r3]
 800751e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f023 0310 	bic.w	r3, r3, #16
 8007526:	647b      	str	r3, [r7, #68]	; 0x44
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6979      	ldr	r1, [r7, #20]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	e841 2300 	strex	r3, r2, [r1]
 800753c:	613b      	str	r3, [r7, #16]
   return(result);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1e6      	bne.n	8007512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007556:	bf00      	nop
 8007558:	3754      	adds	r7, #84	; 0x54
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff faaf 	bl	8006ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b088      	sub	sp, #32
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6979      	ldr	r1, [r7, #20]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	613b      	str	r3, [r7, #16]
   return(result);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e6      	bne.n	8007596 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fa7b 	bl	8006ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075da:	bf00      	nop
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b096      	sub	sp, #88	; 0x58
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075f8:	2b22      	cmp	r3, #34	; 0x22
 80075fa:	f040 8094 	bne.w	8007726 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007608:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800760c:	b2d9      	uxtb	r1, r3
 800760e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007612:	b2da      	uxtb	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007618:	400a      	ands	r2, r1
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d177      	bne.n	8007736 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800765a:	653b      	str	r3, [r7, #80]	; 0x50
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007664:	647b      	str	r3, [r7, #68]	; 0x44
 8007666:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800766a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	623b      	str	r3, [r7, #32]
   return(result);
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	f023 0301 	bic.w	r3, r3, #1
 800768e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3308      	adds	r3, #8
 8007696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007698:	633a      	str	r2, [r7, #48]	; 0x30
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800769e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2220      	movs	r2, #32
 80076b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d12e      	bne.n	800771e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f023 0310 	bic.w	r3, r3, #16
 80076da:	64bb      	str	r3, [r7, #72]	; 0x48
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	69b9      	ldr	r1, [r7, #24]
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	617b      	str	r3, [r7, #20]
   return(result);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b10      	cmp	r3, #16
 8007704:	d103      	bne.n	800770e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2210      	movs	r2, #16
 800770c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff f9ee 	bl	8006af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800771c:	e00b      	b.n	8007736 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7f9 ffea 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8007724:	e007      	b.n	8007736 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699a      	ldr	r2, [r3, #24]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f042 0208 	orr.w	r2, r2, #8
 8007734:	619a      	str	r2, [r3, #24]
}
 8007736:	bf00      	nop
 8007738:	3758      	adds	r7, #88	; 0x58
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b096      	sub	sp, #88	; 0x58
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800774c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007754:	2b22      	cmp	r3, #34	; 0x22
 8007756:	f040 8094 	bne.w	8007882 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007768:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800776a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800776e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007772:	4013      	ands	r3, r2
 8007774:	b29a      	uxth	r2, r3
 8007776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007778:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d177      	bne.n	8007892 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	e853 3f00 	ldrex	r3, [r3]
 80077ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c0:	643b      	str	r3, [r7, #64]	; 0x40
 80077c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e6      	bne.n	80077a2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f023 0301 	bic.w	r3, r3, #1
 80077ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e5      	bne.n	80077d4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007818:	2b01      	cmp	r3, #1
 800781a:	d12e      	bne.n	800787a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f023 0310 	bic.w	r3, r3, #16
 8007836:	647b      	str	r3, [r7, #68]	; 0x44
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6979      	ldr	r1, [r7, #20]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	613b      	str	r3, [r7, #16]
   return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b10      	cmp	r3, #16
 8007860:	d103      	bne.n	800786a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2210      	movs	r2, #16
 8007868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff f940 	bl	8006af8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007878:	e00b      	b.n	8007892 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7f9 ff3c 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8007880:	e007      	b.n	8007892 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0208 	orr.w	r2, r2, #8
 8007890:	619a      	str	r2, [r3, #24]
}
 8007892:	bf00      	nop
 8007894:	3758      	adds	r7, #88	; 0x58
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800789c:	b084      	sub	sp, #16
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	f107 001c 	add.w	r0, r7, #28
 80078aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d120      	bne.n	80078f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	4b20      	ldr	r3, [pc, #128]	; (8007948 <USB_CoreInit+0xac>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d105      	bne.n	80078ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa92 	bl	8007e14 <USB_CoreReset>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e010      	b.n	8007918 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa86 	bl	8007e14 <USB_CoreReset>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	2b01      	cmp	r3, #1
 800791c:	d10b      	bne.n	8007936 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f043 0206 	orr.w	r2, r3, #6
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f043 0220 	orr.w	r2, r3, #32
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007942:	b004      	add	sp, #16
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	ffbdffbf 	.word	0xffbdffbf

0800794c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f023 0201 	bic.w	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d115      	bne.n	80079bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800799c:	2001      	movs	r0, #1
 800799e:	f7fa fed5 	bl	800274c <HAL_Delay>
      ms++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa25 	bl	8007df8 <USB_GetMode>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d01e      	beq.n	80079f2 <USB_SetCurrentMode+0x84>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b31      	cmp	r3, #49	; 0x31
 80079b8:	d9f0      	bls.n	800799c <USB_SetCurrentMode+0x2e>
 80079ba:	e01a      	b.n	80079f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d115      	bne.n	80079ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079ce:	2001      	movs	r0, #1
 80079d0:	f7fa febc 	bl	800274c <HAL_Delay>
      ms++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa0c 	bl	8007df8 <USB_GetMode>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <USB_SetCurrentMode+0x84>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b31      	cmp	r3, #49	; 0x31
 80079ea:	d9f0      	bls.n	80079ce <USB_SetCurrentMode+0x60>
 80079ec:	e001      	b.n	80079f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e005      	b.n	80079fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b32      	cmp	r3, #50	; 0x32
 80079f6:	d101      	bne.n	80079fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a08:	b084      	sub	sp, #16
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	e009      	b.n	8007a3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3340      	adds	r3, #64	; 0x40
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b0e      	cmp	r3, #14
 8007a40:	d9f2      	bls.n	8007a28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11c      	bne.n	8007a82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a56:	f043 0302 	orr.w	r3, r3, #2
 8007a5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e005      	b.n	8007a8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a94:	461a      	mov	r2, r3
 8007a96:	2300      	movs	r3, #0
 8007a98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	680b      	ldr	r3, [r1, #0]
 8007aac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10c      	bne.n	8007ace <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d104      	bne.n	8007ac4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007aba:	2100      	movs	r1, #0
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f961 	bl	8007d84 <USB_SetDevSpeed>
 8007ac2:	e008      	b.n	8007ad6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f95c 	bl	8007d84 <USB_SetDevSpeed>
 8007acc:	e003      	b.n	8007ad6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ace:	2103      	movs	r1, #3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f957 	bl	8007d84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ad6:	2110      	movs	r1, #16
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8f3 	bl	8007cc4 <USB_FlushTxFifo>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f91d 	bl	8007d28 <USB_FlushRxFifo>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afe:	461a      	mov	r2, r3
 8007b00:	2300      	movs	r3, #0
 8007b02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b16:	461a      	mov	r2, r3
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	e043      	b.n	8007baa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b38:	d118      	bne.n	8007b6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e013      	b.n	8007b7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	461a      	mov	r2, r3
 8007b64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e008      	b.n	8007b7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ba2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d3b7      	bcc.n	8007b22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	e043      	b.n	8007c40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bce:	d118      	bne.n	8007c02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	461a      	mov	r2, r3
 8007be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e013      	b.n	8007c14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	e008      	b.n	8007c14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2300      	movs	r3, #0
 8007c12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	461a      	mov	r2, r3
 8007c22:	2300      	movs	r3, #0
 8007c24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	461a      	mov	r2, r3
 8007c34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
 8007c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d3b7      	bcc.n	8007bb8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	f043 0210 	orr.w	r2, r3, #16
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	4b0e      	ldr	r3, [pc, #56]	; (8007cbc <USB_DevInit+0x2b4>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f043 0208 	orr.w	r2, r3, #8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d105      	bne.n	8007cac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <USB_DevInit+0x2b8>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cb8:	b004      	add	sp, #16
 8007cba:	4770      	bx	lr
 8007cbc:	803c3800 	.word	0x803c3800
 8007cc0:	40000004 	.word	0x40000004

08007cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	4a12      	ldr	r2, [pc, #72]	; (8007d24 <USB_FlushTxFifo+0x60>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d901      	bls.n	8007ce2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e01a      	b.n	8007d18 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	daf3      	bge.n	8007cd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	f043 0220 	orr.w	r2, r3, #32
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	4a08      	ldr	r2, [pc, #32]	; (8007d24 <USB_FlushTxFifo+0x60>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d901      	bls.n	8007d0a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e006      	b.n	8007d18 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0320 	and.w	r3, r3, #32
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d0f1      	beq.n	8007cfa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	00030d40 	.word	0x00030d40

08007d28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3301      	adds	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <USB_FlushRxFifo+0x58>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d901      	bls.n	8007d44 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e017      	b.n	8007d74 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	daf3      	bge.n	8007d34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2210      	movs	r2, #16
 8007d54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	4a08      	ldr	r2, [pc, #32]	; (8007d80 <USB_FlushRxFifo+0x58>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d901      	bls.n	8007d66 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e006      	b.n	8007d74 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d0f1      	beq.n	8007d56 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	00030d40 	.word	0x00030d40

08007d84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	78fb      	ldrb	r3, [r7, #3]
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007da4:	4313      	orrs	r3, r2
 8007da6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dd0:	f023 0303 	bic.w	r3, r3, #3
 8007dd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de4:	f043 0302 	orr.w	r3, r3, #2
 8007de8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	f003 0301 	and.w	r3, r3, #1
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	4a13      	ldr	r2, [pc, #76]	; (8007e74 <USB_CoreReset+0x60>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e01a      	b.n	8007e66 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	daf3      	bge.n	8007e20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f043 0201 	orr.w	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	4a09      	ldr	r2, [pc, #36]	; (8007e74 <USB_CoreReset+0x60>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d901      	bls.n	8007e58 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e006      	b.n	8007e66 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d0f1      	beq.n	8007e48 <USB_CoreReset+0x34>

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	00030d40 	.word	0x00030d40

08007e78 <__errno>:
 8007e78:	4b01      	ldr	r3, [pc, #4]	; (8007e80 <__errno+0x8>)
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	20000074 	.word	0x20000074

08007e84 <__libc_init_array>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4d0d      	ldr	r5, [pc, #52]	; (8007ebc <__libc_init_array+0x38>)
 8007e88:	4c0d      	ldr	r4, [pc, #52]	; (8007ec0 <__libc_init_array+0x3c>)
 8007e8a:	1b64      	subs	r4, r4, r5
 8007e8c:	10a4      	asrs	r4, r4, #2
 8007e8e:	2600      	movs	r6, #0
 8007e90:	42a6      	cmp	r6, r4
 8007e92:	d109      	bne.n	8007ea8 <__libc_init_array+0x24>
 8007e94:	4d0b      	ldr	r5, [pc, #44]	; (8007ec4 <__libc_init_array+0x40>)
 8007e96:	4c0c      	ldr	r4, [pc, #48]	; (8007ec8 <__libc_init_array+0x44>)
 8007e98:	f005 f8d6 	bl	800d048 <_init>
 8007e9c:	1b64      	subs	r4, r4, r5
 8007e9e:	10a4      	asrs	r4, r4, #2
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	42a6      	cmp	r6, r4
 8007ea4:	d105      	bne.n	8007eb2 <__libc_init_array+0x2e>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eac:	4798      	blx	r3
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7ee      	b.n	8007e90 <__libc_init_array+0xc>
 8007eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb6:	4798      	blx	r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	e7f2      	b.n	8007ea2 <__libc_init_array+0x1e>
 8007ebc:	0800d574 	.word	0x0800d574
 8007ec0:	0800d574 	.word	0x0800d574
 8007ec4:	0800d574 	.word	0x0800d574
 8007ec8:	0800d578 	.word	0x0800d578

08007ecc <memset>:
 8007ecc:	4402      	add	r2, r0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d100      	bne.n	8007ed6 <memset+0xa>
 8007ed4:	4770      	bx	lr
 8007ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eda:	e7f9      	b.n	8007ed0 <memset+0x4>

08007edc <__cvt>:
 8007edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	ec55 4b10 	vmov	r4, r5, d0
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	460e      	mov	r6, r1
 8007ee8:	4619      	mov	r1, r3
 8007eea:	462b      	mov	r3, r5
 8007eec:	bfbb      	ittet	lt
 8007eee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ef2:	461d      	movlt	r5, r3
 8007ef4:	2300      	movge	r3, #0
 8007ef6:	232d      	movlt	r3, #45	; 0x2d
 8007ef8:	700b      	strb	r3, [r1, #0]
 8007efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007efc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f00:	4691      	mov	r9, r2
 8007f02:	f023 0820 	bic.w	r8, r3, #32
 8007f06:	bfbc      	itt	lt
 8007f08:	4622      	movlt	r2, r4
 8007f0a:	4614      	movlt	r4, r2
 8007f0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f10:	d005      	beq.n	8007f1e <__cvt+0x42>
 8007f12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f16:	d100      	bne.n	8007f1a <__cvt+0x3e>
 8007f18:	3601      	adds	r6, #1
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	e000      	b.n	8007f20 <__cvt+0x44>
 8007f1e:	2103      	movs	r1, #3
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	ab02      	add	r3, sp, #8
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	ec45 4b10 	vmov	d0, r4, r5
 8007f2c:	4653      	mov	r3, sl
 8007f2e:	4632      	mov	r2, r6
 8007f30:	f001 fe9a 	bl	8009c68 <_dtoa_r>
 8007f34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f38:	4607      	mov	r7, r0
 8007f3a:	d102      	bne.n	8007f42 <__cvt+0x66>
 8007f3c:	f019 0f01 	tst.w	r9, #1
 8007f40:	d022      	beq.n	8007f88 <__cvt+0xac>
 8007f42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f46:	eb07 0906 	add.w	r9, r7, r6
 8007f4a:	d110      	bne.n	8007f6e <__cvt+0x92>
 8007f4c:	783b      	ldrb	r3, [r7, #0]
 8007f4e:	2b30      	cmp	r3, #48	; 0x30
 8007f50:	d10a      	bne.n	8007f68 <__cvt+0x8c>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4620      	mov	r0, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7f8 fdd5 	bl	8000b08 <__aeabi_dcmpeq>
 8007f5e:	b918      	cbnz	r0, 8007f68 <__cvt+0x8c>
 8007f60:	f1c6 0601 	rsb	r6, r6, #1
 8007f64:	f8ca 6000 	str.w	r6, [sl]
 8007f68:	f8da 3000 	ldr.w	r3, [sl]
 8007f6c:	4499      	add	r9, r3
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 8007f7a:	b108      	cbz	r0, 8007f80 <__cvt+0xa4>
 8007f7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f80:	2230      	movs	r2, #48	; 0x30
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	454b      	cmp	r3, r9
 8007f86:	d307      	bcc.n	8007f98 <__cvt+0xbc>
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f8c:	1bdb      	subs	r3, r3, r7
 8007f8e:	4638      	mov	r0, r7
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	b004      	add	sp, #16
 8007f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f98:	1c59      	adds	r1, r3, #1
 8007f9a:	9103      	str	r1, [sp, #12]
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e7f0      	b.n	8007f82 <__cvt+0xa6>

08007fa0 <__exponent>:
 8007fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	bfb8      	it	lt
 8007fa8:	4249      	neglt	r1, r1
 8007faa:	f803 2b02 	strb.w	r2, [r3], #2
 8007fae:	bfb4      	ite	lt
 8007fb0:	222d      	movlt	r2, #45	; 0x2d
 8007fb2:	222b      	movge	r2, #43	; 0x2b
 8007fb4:	2909      	cmp	r1, #9
 8007fb6:	7042      	strb	r2, [r0, #1]
 8007fb8:	dd2a      	ble.n	8008010 <__exponent+0x70>
 8007fba:	f10d 0407 	add.w	r4, sp, #7
 8007fbe:	46a4      	mov	ip, r4
 8007fc0:	270a      	movs	r7, #10
 8007fc2:	46a6      	mov	lr, r4
 8007fc4:	460a      	mov	r2, r1
 8007fc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fca:	fb07 1516 	mls	r5, r7, r6, r1
 8007fce:	3530      	adds	r5, #48	; 0x30
 8007fd0:	2a63      	cmp	r2, #99	; 0x63
 8007fd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fda:	4631      	mov	r1, r6
 8007fdc:	dcf1      	bgt.n	8007fc2 <__exponent+0x22>
 8007fde:	3130      	adds	r1, #48	; 0x30
 8007fe0:	f1ae 0502 	sub.w	r5, lr, #2
 8007fe4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fe8:	1c44      	adds	r4, r0, #1
 8007fea:	4629      	mov	r1, r5
 8007fec:	4561      	cmp	r1, ip
 8007fee:	d30a      	bcc.n	8008006 <__exponent+0x66>
 8007ff0:	f10d 0209 	add.w	r2, sp, #9
 8007ff4:	eba2 020e 	sub.w	r2, r2, lr
 8007ff8:	4565      	cmp	r5, ip
 8007ffa:	bf88      	it	hi
 8007ffc:	2200      	movhi	r2, #0
 8007ffe:	4413      	add	r3, r2
 8008000:	1a18      	subs	r0, r3, r0
 8008002:	b003      	add	sp, #12
 8008004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800800e:	e7ed      	b.n	8007fec <__exponent+0x4c>
 8008010:	2330      	movs	r3, #48	; 0x30
 8008012:	3130      	adds	r1, #48	; 0x30
 8008014:	7083      	strb	r3, [r0, #2]
 8008016:	70c1      	strb	r1, [r0, #3]
 8008018:	1d03      	adds	r3, r0, #4
 800801a:	e7f1      	b.n	8008000 <__exponent+0x60>

0800801c <_printf_float>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	ed2d 8b02 	vpush	{d8}
 8008024:	b08d      	sub	sp, #52	; 0x34
 8008026:	460c      	mov	r4, r1
 8008028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800802c:	4616      	mov	r6, r2
 800802e:	461f      	mov	r7, r3
 8008030:	4605      	mov	r5, r0
 8008032:	f002 ff75 	bl	800af20 <_localeconv_r>
 8008036:	f8d0 a000 	ldr.w	sl, [r0]
 800803a:	4650      	mov	r0, sl
 800803c:	f7f8 f8e8 	bl	8000210 <strlen>
 8008040:	2300      	movs	r3, #0
 8008042:	930a      	str	r3, [sp, #40]	; 0x28
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	9305      	str	r3, [sp, #20]
 8008048:	f8d8 3000 	ldr.w	r3, [r8]
 800804c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008050:	3307      	adds	r3, #7
 8008052:	f023 0307 	bic.w	r3, r3, #7
 8008056:	f103 0208 	add.w	r2, r3, #8
 800805a:	f8c8 2000 	str.w	r2, [r8]
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008066:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800806a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800806e:	9307      	str	r3, [sp, #28]
 8008070:	f8cd 8018 	str.w	r8, [sp, #24]
 8008074:	ee08 0a10 	vmov	s16, r0
 8008078:	4b9f      	ldr	r3, [pc, #636]	; (80082f8 <_printf_float+0x2dc>)
 800807a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800807e:	f04f 32ff 	mov.w	r2, #4294967295
 8008082:	f7f8 fd73 	bl	8000b6c <__aeabi_dcmpun>
 8008086:	bb88      	cbnz	r0, 80080ec <_printf_float+0xd0>
 8008088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800808c:	4b9a      	ldr	r3, [pc, #616]	; (80082f8 <_printf_float+0x2dc>)
 800808e:	f04f 32ff 	mov.w	r2, #4294967295
 8008092:	f7f8 fd4d 	bl	8000b30 <__aeabi_dcmple>
 8008096:	bb48      	cbnz	r0, 80080ec <_printf_float+0xd0>
 8008098:	2200      	movs	r2, #0
 800809a:	2300      	movs	r3, #0
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80080a4:	b110      	cbz	r0, 80080ac <_printf_float+0x90>
 80080a6:	232d      	movs	r3, #45	; 0x2d
 80080a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ac:	4b93      	ldr	r3, [pc, #588]	; (80082fc <_printf_float+0x2e0>)
 80080ae:	4894      	ldr	r0, [pc, #592]	; (8008300 <_printf_float+0x2e4>)
 80080b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080b4:	bf94      	ite	ls
 80080b6:	4698      	movls	r8, r3
 80080b8:	4680      	movhi	r8, r0
 80080ba:	2303      	movs	r3, #3
 80080bc:	6123      	str	r3, [r4, #16]
 80080be:	9b05      	ldr	r3, [sp, #20]
 80080c0:	f023 0204 	bic.w	r2, r3, #4
 80080c4:	6022      	str	r2, [r4, #0]
 80080c6:	f04f 0900 	mov.w	r9, #0
 80080ca:	9700      	str	r7, [sp, #0]
 80080cc:	4633      	mov	r3, r6
 80080ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80080d0:	4621      	mov	r1, r4
 80080d2:	4628      	mov	r0, r5
 80080d4:	f000 f9d8 	bl	8008488 <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	f040 8090 	bne.w	80081fe <_printf_float+0x1e2>
 80080de:	f04f 30ff 	mov.w	r0, #4294967295
 80080e2:	b00d      	add	sp, #52	; 0x34
 80080e4:	ecbd 8b02 	vpop	{d8}
 80080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	4640      	mov	r0, r8
 80080f2:	4649      	mov	r1, r9
 80080f4:	f7f8 fd3a 	bl	8000b6c <__aeabi_dcmpun>
 80080f8:	b140      	cbz	r0, 800810c <_printf_float+0xf0>
 80080fa:	464b      	mov	r3, r9
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bfbc      	itt	lt
 8008100:	232d      	movlt	r3, #45	; 0x2d
 8008102:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008106:	487f      	ldr	r0, [pc, #508]	; (8008304 <_printf_float+0x2e8>)
 8008108:	4b7f      	ldr	r3, [pc, #508]	; (8008308 <_printf_float+0x2ec>)
 800810a:	e7d1      	b.n	80080b0 <_printf_float+0x94>
 800810c:	6863      	ldr	r3, [r4, #4]
 800810e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008112:	9206      	str	r2, [sp, #24]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	d13f      	bne.n	8008198 <_printf_float+0x17c>
 8008118:	2306      	movs	r3, #6
 800811a:	6063      	str	r3, [r4, #4]
 800811c:	9b05      	ldr	r3, [sp, #20]
 800811e:	6861      	ldr	r1, [r4, #4]
 8008120:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008124:	2300      	movs	r3, #0
 8008126:	9303      	str	r3, [sp, #12]
 8008128:	ab0a      	add	r3, sp, #40	; 0x28
 800812a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800812e:	ab09      	add	r3, sp, #36	; 0x24
 8008130:	ec49 8b10 	vmov	d0, r8, r9
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800813c:	4628      	mov	r0, r5
 800813e:	f7ff fecd 	bl	8007edc <__cvt>
 8008142:	9b06      	ldr	r3, [sp, #24]
 8008144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008146:	2b47      	cmp	r3, #71	; 0x47
 8008148:	4680      	mov	r8, r0
 800814a:	d108      	bne.n	800815e <_printf_float+0x142>
 800814c:	1cc8      	adds	r0, r1, #3
 800814e:	db02      	blt.n	8008156 <_printf_float+0x13a>
 8008150:	6863      	ldr	r3, [r4, #4]
 8008152:	4299      	cmp	r1, r3
 8008154:	dd41      	ble.n	80081da <_printf_float+0x1be>
 8008156:	f1ab 0b02 	sub.w	fp, fp, #2
 800815a:	fa5f fb8b 	uxtb.w	fp, fp
 800815e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008162:	d820      	bhi.n	80081a6 <_printf_float+0x18a>
 8008164:	3901      	subs	r1, #1
 8008166:	465a      	mov	r2, fp
 8008168:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800816c:	9109      	str	r1, [sp, #36]	; 0x24
 800816e:	f7ff ff17 	bl	8007fa0 <__exponent>
 8008172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008174:	1813      	adds	r3, r2, r0
 8008176:	2a01      	cmp	r2, #1
 8008178:	4681      	mov	r9, r0
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	dc02      	bgt.n	8008184 <_printf_float+0x168>
 800817e:	6822      	ldr	r2, [r4, #0]
 8008180:	07d2      	lsls	r2, r2, #31
 8008182:	d501      	bpl.n	8008188 <_printf_float+0x16c>
 8008184:	3301      	adds	r3, #1
 8008186:	6123      	str	r3, [r4, #16]
 8008188:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800818c:	2b00      	cmp	r3, #0
 800818e:	d09c      	beq.n	80080ca <_printf_float+0xae>
 8008190:	232d      	movs	r3, #45	; 0x2d
 8008192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008196:	e798      	b.n	80080ca <_printf_float+0xae>
 8008198:	9a06      	ldr	r2, [sp, #24]
 800819a:	2a47      	cmp	r2, #71	; 0x47
 800819c:	d1be      	bne.n	800811c <_printf_float+0x100>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1bc      	bne.n	800811c <_printf_float+0x100>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e7b9      	b.n	800811a <_printf_float+0xfe>
 80081a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081aa:	d118      	bne.n	80081de <_printf_float+0x1c2>
 80081ac:	2900      	cmp	r1, #0
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	dd0b      	ble.n	80081ca <_printf_float+0x1ae>
 80081b2:	6121      	str	r1, [r4, #16]
 80081b4:	b913      	cbnz	r3, 80081bc <_printf_float+0x1a0>
 80081b6:	6822      	ldr	r2, [r4, #0]
 80081b8:	07d0      	lsls	r0, r2, #31
 80081ba:	d502      	bpl.n	80081c2 <_printf_float+0x1a6>
 80081bc:	3301      	adds	r3, #1
 80081be:	440b      	add	r3, r1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80081c4:	f04f 0900 	mov.w	r9, #0
 80081c8:	e7de      	b.n	8008188 <_printf_float+0x16c>
 80081ca:	b913      	cbnz	r3, 80081d2 <_printf_float+0x1b6>
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	07d2      	lsls	r2, r2, #31
 80081d0:	d501      	bpl.n	80081d6 <_printf_float+0x1ba>
 80081d2:	3302      	adds	r3, #2
 80081d4:	e7f4      	b.n	80081c0 <_printf_float+0x1a4>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e7f2      	b.n	80081c0 <_printf_float+0x1a4>
 80081da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e0:	4299      	cmp	r1, r3
 80081e2:	db05      	blt.n	80081f0 <_printf_float+0x1d4>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	6121      	str	r1, [r4, #16]
 80081e8:	07d8      	lsls	r0, r3, #31
 80081ea:	d5ea      	bpl.n	80081c2 <_printf_float+0x1a6>
 80081ec:	1c4b      	adds	r3, r1, #1
 80081ee:	e7e7      	b.n	80081c0 <_printf_float+0x1a4>
 80081f0:	2900      	cmp	r1, #0
 80081f2:	bfd4      	ite	le
 80081f4:	f1c1 0202 	rsble	r2, r1, #2
 80081f8:	2201      	movgt	r2, #1
 80081fa:	4413      	add	r3, r2
 80081fc:	e7e0      	b.n	80081c0 <_printf_float+0x1a4>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	055a      	lsls	r2, r3, #21
 8008202:	d407      	bmi.n	8008214 <_printf_float+0x1f8>
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	4642      	mov	r2, r8
 8008208:	4631      	mov	r1, r6
 800820a:	4628      	mov	r0, r5
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	d12c      	bne.n	800826c <_printf_float+0x250>
 8008212:	e764      	b.n	80080de <_printf_float+0xc2>
 8008214:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008218:	f240 80e0 	bls.w	80083dc <_printf_float+0x3c0>
 800821c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008220:	2200      	movs	r2, #0
 8008222:	2300      	movs	r3, #0
 8008224:	f7f8 fc70 	bl	8000b08 <__aeabi_dcmpeq>
 8008228:	2800      	cmp	r0, #0
 800822a:	d034      	beq.n	8008296 <_printf_float+0x27a>
 800822c:	4a37      	ldr	r2, [pc, #220]	; (800830c <_printf_float+0x2f0>)
 800822e:	2301      	movs	r3, #1
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	47b8      	blx	r7
 8008236:	3001      	adds	r0, #1
 8008238:	f43f af51 	beq.w	80080de <_printf_float+0xc2>
 800823c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008240:	429a      	cmp	r2, r3
 8008242:	db02      	blt.n	800824a <_printf_float+0x22e>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	07d8      	lsls	r0, r3, #31
 8008248:	d510      	bpl.n	800826c <_printf_float+0x250>
 800824a:	ee18 3a10 	vmov	r3, s16
 800824e:	4652      	mov	r2, sl
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	f43f af41 	beq.w	80080de <_printf_float+0xc2>
 800825c:	f04f 0800 	mov.w	r8, #0
 8008260:	f104 091a 	add.w	r9, r4, #26
 8008264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008266:	3b01      	subs	r3, #1
 8008268:	4543      	cmp	r3, r8
 800826a:	dc09      	bgt.n	8008280 <_printf_float+0x264>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	079b      	lsls	r3, r3, #30
 8008270:	f100 8105 	bmi.w	800847e <_printf_float+0x462>
 8008274:	68e0      	ldr	r0, [r4, #12]
 8008276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008278:	4298      	cmp	r0, r3
 800827a:	bfb8      	it	lt
 800827c:	4618      	movlt	r0, r3
 800827e:	e730      	b.n	80080e2 <_printf_float+0xc6>
 8008280:	2301      	movs	r3, #1
 8008282:	464a      	mov	r2, r9
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f af27 	beq.w	80080de <_printf_float+0xc2>
 8008290:	f108 0801 	add.w	r8, r8, #1
 8008294:	e7e6      	b.n	8008264 <_printf_float+0x248>
 8008296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	dc39      	bgt.n	8008310 <_printf_float+0x2f4>
 800829c:	4a1b      	ldr	r2, [pc, #108]	; (800830c <_printf_float+0x2f0>)
 800829e:	2301      	movs	r3, #1
 80082a0:	4631      	mov	r1, r6
 80082a2:	4628      	mov	r0, r5
 80082a4:	47b8      	blx	r7
 80082a6:	3001      	adds	r0, #1
 80082a8:	f43f af19 	beq.w	80080de <_printf_float+0xc2>
 80082ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d102      	bne.n	80082ba <_printf_float+0x29e>
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	07d9      	lsls	r1, r3, #31
 80082b8:	d5d8      	bpl.n	800826c <_printf_float+0x250>
 80082ba:	ee18 3a10 	vmov	r3, s16
 80082be:	4652      	mov	r2, sl
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	f43f af09 	beq.w	80080de <_printf_float+0xc2>
 80082cc:	f04f 0900 	mov.w	r9, #0
 80082d0:	f104 0a1a 	add.w	sl, r4, #26
 80082d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d6:	425b      	negs	r3, r3
 80082d8:	454b      	cmp	r3, r9
 80082da:	dc01      	bgt.n	80082e0 <_printf_float+0x2c4>
 80082dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082de:	e792      	b.n	8008206 <_printf_float+0x1ea>
 80082e0:	2301      	movs	r3, #1
 80082e2:	4652      	mov	r2, sl
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f aef7 	beq.w	80080de <_printf_float+0xc2>
 80082f0:	f109 0901 	add.w	r9, r9, #1
 80082f4:	e7ee      	b.n	80082d4 <_printf_float+0x2b8>
 80082f6:	bf00      	nop
 80082f8:	7fefffff 	.word	0x7fefffff
 80082fc:	0800d0a8 	.word	0x0800d0a8
 8008300:	0800d0ac 	.word	0x0800d0ac
 8008304:	0800d0b4 	.word	0x0800d0b4
 8008308:	0800d0b0 	.word	0x0800d0b0
 800830c:	0800d4b9 	.word	0x0800d4b9
 8008310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008314:	429a      	cmp	r2, r3
 8008316:	bfa8      	it	ge
 8008318:	461a      	movge	r2, r3
 800831a:	2a00      	cmp	r2, #0
 800831c:	4691      	mov	r9, r2
 800831e:	dc37      	bgt.n	8008390 <_printf_float+0x374>
 8008320:	f04f 0b00 	mov.w	fp, #0
 8008324:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008328:	f104 021a 	add.w	r2, r4, #26
 800832c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	eba3 0309 	sub.w	r3, r3, r9
 8008334:	455b      	cmp	r3, fp
 8008336:	dc33      	bgt.n	80083a0 <_printf_float+0x384>
 8008338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800833c:	429a      	cmp	r2, r3
 800833e:	db3b      	blt.n	80083b8 <_printf_float+0x39c>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	07da      	lsls	r2, r3, #31
 8008344:	d438      	bmi.n	80083b8 <_printf_float+0x39c>
 8008346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008348:	9b05      	ldr	r3, [sp, #20]
 800834a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	eba2 0901 	sub.w	r9, r2, r1
 8008352:	4599      	cmp	r9, r3
 8008354:	bfa8      	it	ge
 8008356:	4699      	movge	r9, r3
 8008358:	f1b9 0f00 	cmp.w	r9, #0
 800835c:	dc35      	bgt.n	80083ca <_printf_float+0x3ae>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008366:	f104 0a1a 	add.w	sl, r4, #26
 800836a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	eba3 0309 	sub.w	r3, r3, r9
 8008374:	4543      	cmp	r3, r8
 8008376:	f77f af79 	ble.w	800826c <_printf_float+0x250>
 800837a:	2301      	movs	r3, #1
 800837c:	4652      	mov	r2, sl
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f aeaa 	beq.w	80080de <_printf_float+0xc2>
 800838a:	f108 0801 	add.w	r8, r8, #1
 800838e:	e7ec      	b.n	800836a <_printf_float+0x34e>
 8008390:	4613      	mov	r3, r2
 8008392:	4631      	mov	r1, r6
 8008394:	4642      	mov	r2, r8
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	d1c0      	bne.n	8008320 <_printf_float+0x304>
 800839e:	e69e      	b.n	80080de <_printf_float+0xc2>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	9205      	str	r2, [sp, #20]
 80083a8:	47b8      	blx	r7
 80083aa:	3001      	adds	r0, #1
 80083ac:	f43f ae97 	beq.w	80080de <_printf_float+0xc2>
 80083b0:	9a05      	ldr	r2, [sp, #20]
 80083b2:	f10b 0b01 	add.w	fp, fp, #1
 80083b6:	e7b9      	b.n	800832c <_printf_float+0x310>
 80083b8:	ee18 3a10 	vmov	r3, s16
 80083bc:	4652      	mov	r2, sl
 80083be:	4631      	mov	r1, r6
 80083c0:	4628      	mov	r0, r5
 80083c2:	47b8      	blx	r7
 80083c4:	3001      	adds	r0, #1
 80083c6:	d1be      	bne.n	8008346 <_printf_float+0x32a>
 80083c8:	e689      	b.n	80080de <_printf_float+0xc2>
 80083ca:	9a05      	ldr	r2, [sp, #20]
 80083cc:	464b      	mov	r3, r9
 80083ce:	4442      	add	r2, r8
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	d1c1      	bne.n	800835e <_printf_float+0x342>
 80083da:	e680      	b.n	80080de <_printf_float+0xc2>
 80083dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083de:	2a01      	cmp	r2, #1
 80083e0:	dc01      	bgt.n	80083e6 <_printf_float+0x3ca>
 80083e2:	07db      	lsls	r3, r3, #31
 80083e4:	d538      	bpl.n	8008458 <_printf_float+0x43c>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4642      	mov	r2, r8
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f ae74 	beq.w	80080de <_printf_float+0xc2>
 80083f6:	ee18 3a10 	vmov	r3, s16
 80083fa:	4652      	mov	r2, sl
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f ae6b 	beq.w	80080de <_printf_float+0xc2>
 8008408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	f7f8 fb7a 	bl	8000b08 <__aeabi_dcmpeq>
 8008414:	b9d8      	cbnz	r0, 800844e <_printf_float+0x432>
 8008416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008418:	f108 0201 	add.w	r2, r8, #1
 800841c:	3b01      	subs	r3, #1
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	d10e      	bne.n	8008446 <_printf_float+0x42a>
 8008428:	e659      	b.n	80080de <_printf_float+0xc2>
 800842a:	2301      	movs	r3, #1
 800842c:	4652      	mov	r2, sl
 800842e:	4631      	mov	r1, r6
 8008430:	4628      	mov	r0, r5
 8008432:	47b8      	blx	r7
 8008434:	3001      	adds	r0, #1
 8008436:	f43f ae52 	beq.w	80080de <_printf_float+0xc2>
 800843a:	f108 0801 	add.w	r8, r8, #1
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	3b01      	subs	r3, #1
 8008442:	4543      	cmp	r3, r8
 8008444:	dcf1      	bgt.n	800842a <_printf_float+0x40e>
 8008446:	464b      	mov	r3, r9
 8008448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800844c:	e6dc      	b.n	8008208 <_printf_float+0x1ec>
 800844e:	f04f 0800 	mov.w	r8, #0
 8008452:	f104 0a1a 	add.w	sl, r4, #26
 8008456:	e7f2      	b.n	800843e <_printf_float+0x422>
 8008458:	2301      	movs	r3, #1
 800845a:	4642      	mov	r2, r8
 800845c:	e7df      	b.n	800841e <_printf_float+0x402>
 800845e:	2301      	movs	r3, #1
 8008460:	464a      	mov	r2, r9
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	f43f ae38 	beq.w	80080de <_printf_float+0xc2>
 800846e:	f108 0801 	add.w	r8, r8, #1
 8008472:	68e3      	ldr	r3, [r4, #12]
 8008474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008476:	1a5b      	subs	r3, r3, r1
 8008478:	4543      	cmp	r3, r8
 800847a:	dcf0      	bgt.n	800845e <_printf_float+0x442>
 800847c:	e6fa      	b.n	8008274 <_printf_float+0x258>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	f104 0919 	add.w	r9, r4, #25
 8008486:	e7f4      	b.n	8008472 <_printf_float+0x456>

08008488 <_printf_common>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	4616      	mov	r6, r2
 800848e:	4699      	mov	r9, r3
 8008490:	688a      	ldr	r2, [r1, #8]
 8008492:	690b      	ldr	r3, [r1, #16]
 8008494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008498:	4293      	cmp	r3, r2
 800849a:	bfb8      	it	lt
 800849c:	4613      	movlt	r3, r2
 800849e:	6033      	str	r3, [r6, #0]
 80084a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084a4:	4607      	mov	r7, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	b10a      	cbz	r2, 80084ae <_printf_common+0x26>
 80084aa:	3301      	adds	r3, #1
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	0699      	lsls	r1, r3, #26
 80084b2:	bf42      	ittt	mi
 80084b4:	6833      	ldrmi	r3, [r6, #0]
 80084b6:	3302      	addmi	r3, #2
 80084b8:	6033      	strmi	r3, [r6, #0]
 80084ba:	6825      	ldr	r5, [r4, #0]
 80084bc:	f015 0506 	ands.w	r5, r5, #6
 80084c0:	d106      	bne.n	80084d0 <_printf_common+0x48>
 80084c2:	f104 0a19 	add.w	sl, r4, #25
 80084c6:	68e3      	ldr	r3, [r4, #12]
 80084c8:	6832      	ldr	r2, [r6, #0]
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	42ab      	cmp	r3, r5
 80084ce:	dc26      	bgt.n	800851e <_printf_common+0x96>
 80084d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084d4:	1e13      	subs	r3, r2, #0
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	bf18      	it	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	0692      	lsls	r2, r2, #26
 80084de:	d42b      	bmi.n	8008538 <_printf_common+0xb0>
 80084e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e4:	4649      	mov	r1, r9
 80084e6:	4638      	mov	r0, r7
 80084e8:	47c0      	blx	r8
 80084ea:	3001      	adds	r0, #1
 80084ec:	d01e      	beq.n	800852c <_printf_common+0xa4>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	68e5      	ldr	r5, [r4, #12]
 80084f2:	6832      	ldr	r2, [r6, #0]
 80084f4:	f003 0306 	and.w	r3, r3, #6
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	bf08      	it	eq
 80084fc:	1aad      	subeq	r5, r5, r2
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	6922      	ldr	r2, [r4, #16]
 8008502:	bf0c      	ite	eq
 8008504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008508:	2500      	movne	r5, #0
 800850a:	4293      	cmp	r3, r2
 800850c:	bfc4      	itt	gt
 800850e:	1a9b      	subgt	r3, r3, r2
 8008510:	18ed      	addgt	r5, r5, r3
 8008512:	2600      	movs	r6, #0
 8008514:	341a      	adds	r4, #26
 8008516:	42b5      	cmp	r5, r6
 8008518:	d11a      	bne.n	8008550 <_printf_common+0xc8>
 800851a:	2000      	movs	r0, #0
 800851c:	e008      	b.n	8008530 <_printf_common+0xa8>
 800851e:	2301      	movs	r3, #1
 8008520:	4652      	mov	r2, sl
 8008522:	4649      	mov	r1, r9
 8008524:	4638      	mov	r0, r7
 8008526:	47c0      	blx	r8
 8008528:	3001      	adds	r0, #1
 800852a:	d103      	bne.n	8008534 <_printf_common+0xac>
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008534:	3501      	adds	r5, #1
 8008536:	e7c6      	b.n	80084c6 <_printf_common+0x3e>
 8008538:	18e1      	adds	r1, r4, r3
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	2030      	movs	r0, #48	; 0x30
 800853e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008542:	4422      	add	r2, r4
 8008544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800854c:	3302      	adds	r3, #2
 800854e:	e7c7      	b.n	80084e0 <_printf_common+0x58>
 8008550:	2301      	movs	r3, #1
 8008552:	4622      	mov	r2, r4
 8008554:	4649      	mov	r1, r9
 8008556:	4638      	mov	r0, r7
 8008558:	47c0      	blx	r8
 800855a:	3001      	adds	r0, #1
 800855c:	d0e6      	beq.n	800852c <_printf_common+0xa4>
 800855e:	3601      	adds	r6, #1
 8008560:	e7d9      	b.n	8008516 <_printf_common+0x8e>
	...

08008564 <_printf_i>:
 8008564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	460c      	mov	r4, r1
 800856a:	4691      	mov	r9, r2
 800856c:	7e27      	ldrb	r7, [r4, #24]
 800856e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008570:	2f78      	cmp	r7, #120	; 0x78
 8008572:	4680      	mov	r8, r0
 8008574:	469a      	mov	sl, r3
 8008576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800857a:	d807      	bhi.n	800858c <_printf_i+0x28>
 800857c:	2f62      	cmp	r7, #98	; 0x62
 800857e:	d80a      	bhi.n	8008596 <_printf_i+0x32>
 8008580:	2f00      	cmp	r7, #0
 8008582:	f000 80d8 	beq.w	8008736 <_printf_i+0x1d2>
 8008586:	2f58      	cmp	r7, #88	; 0x58
 8008588:	f000 80a3 	beq.w	80086d2 <_printf_i+0x16e>
 800858c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008594:	e03a      	b.n	800860c <_printf_i+0xa8>
 8008596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800859a:	2b15      	cmp	r3, #21
 800859c:	d8f6      	bhi.n	800858c <_printf_i+0x28>
 800859e:	a001      	add	r0, pc, #4	; (adr r0, 80085a4 <_printf_i+0x40>)
 80085a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085a4:	080085fd 	.word	0x080085fd
 80085a8:	08008611 	.word	0x08008611
 80085ac:	0800858d 	.word	0x0800858d
 80085b0:	0800858d 	.word	0x0800858d
 80085b4:	0800858d 	.word	0x0800858d
 80085b8:	0800858d 	.word	0x0800858d
 80085bc:	08008611 	.word	0x08008611
 80085c0:	0800858d 	.word	0x0800858d
 80085c4:	0800858d 	.word	0x0800858d
 80085c8:	0800858d 	.word	0x0800858d
 80085cc:	0800858d 	.word	0x0800858d
 80085d0:	0800871d 	.word	0x0800871d
 80085d4:	08008641 	.word	0x08008641
 80085d8:	080086ff 	.word	0x080086ff
 80085dc:	0800858d 	.word	0x0800858d
 80085e0:	0800858d 	.word	0x0800858d
 80085e4:	0800873f 	.word	0x0800873f
 80085e8:	0800858d 	.word	0x0800858d
 80085ec:	08008641 	.word	0x08008641
 80085f0:	0800858d 	.word	0x0800858d
 80085f4:	0800858d 	.word	0x0800858d
 80085f8:	08008707 	.word	0x08008707
 80085fc:	680b      	ldr	r3, [r1, #0]
 80085fe:	1d1a      	adds	r2, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	600a      	str	r2, [r1, #0]
 8008604:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800860c:	2301      	movs	r3, #1
 800860e:	e0a3      	b.n	8008758 <_printf_i+0x1f4>
 8008610:	6825      	ldr	r5, [r4, #0]
 8008612:	6808      	ldr	r0, [r1, #0]
 8008614:	062e      	lsls	r6, r5, #24
 8008616:	f100 0304 	add.w	r3, r0, #4
 800861a:	d50a      	bpl.n	8008632 <_printf_i+0xce>
 800861c:	6805      	ldr	r5, [r0, #0]
 800861e:	600b      	str	r3, [r1, #0]
 8008620:	2d00      	cmp	r5, #0
 8008622:	da03      	bge.n	800862c <_printf_i+0xc8>
 8008624:	232d      	movs	r3, #45	; 0x2d
 8008626:	426d      	negs	r5, r5
 8008628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800862c:	485e      	ldr	r0, [pc, #376]	; (80087a8 <_printf_i+0x244>)
 800862e:	230a      	movs	r3, #10
 8008630:	e019      	b.n	8008666 <_printf_i+0x102>
 8008632:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008636:	6805      	ldr	r5, [r0, #0]
 8008638:	600b      	str	r3, [r1, #0]
 800863a:	bf18      	it	ne
 800863c:	b22d      	sxthne	r5, r5
 800863e:	e7ef      	b.n	8008620 <_printf_i+0xbc>
 8008640:	680b      	ldr	r3, [r1, #0]
 8008642:	6825      	ldr	r5, [r4, #0]
 8008644:	1d18      	adds	r0, r3, #4
 8008646:	6008      	str	r0, [r1, #0]
 8008648:	0628      	lsls	r0, r5, #24
 800864a:	d501      	bpl.n	8008650 <_printf_i+0xec>
 800864c:	681d      	ldr	r5, [r3, #0]
 800864e:	e002      	b.n	8008656 <_printf_i+0xf2>
 8008650:	0669      	lsls	r1, r5, #25
 8008652:	d5fb      	bpl.n	800864c <_printf_i+0xe8>
 8008654:	881d      	ldrh	r5, [r3, #0]
 8008656:	4854      	ldr	r0, [pc, #336]	; (80087a8 <_printf_i+0x244>)
 8008658:	2f6f      	cmp	r7, #111	; 0x6f
 800865a:	bf0c      	ite	eq
 800865c:	2308      	moveq	r3, #8
 800865e:	230a      	movne	r3, #10
 8008660:	2100      	movs	r1, #0
 8008662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008666:	6866      	ldr	r6, [r4, #4]
 8008668:	60a6      	str	r6, [r4, #8]
 800866a:	2e00      	cmp	r6, #0
 800866c:	bfa2      	ittt	ge
 800866e:	6821      	ldrge	r1, [r4, #0]
 8008670:	f021 0104 	bicge.w	r1, r1, #4
 8008674:	6021      	strge	r1, [r4, #0]
 8008676:	b90d      	cbnz	r5, 800867c <_printf_i+0x118>
 8008678:	2e00      	cmp	r6, #0
 800867a:	d04d      	beq.n	8008718 <_printf_i+0x1b4>
 800867c:	4616      	mov	r6, r2
 800867e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008682:	fb03 5711 	mls	r7, r3, r1, r5
 8008686:	5dc7      	ldrb	r7, [r0, r7]
 8008688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800868c:	462f      	mov	r7, r5
 800868e:	42bb      	cmp	r3, r7
 8008690:	460d      	mov	r5, r1
 8008692:	d9f4      	bls.n	800867e <_printf_i+0x11a>
 8008694:	2b08      	cmp	r3, #8
 8008696:	d10b      	bne.n	80086b0 <_printf_i+0x14c>
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	07df      	lsls	r7, r3, #31
 800869c:	d508      	bpl.n	80086b0 <_printf_i+0x14c>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	6861      	ldr	r1, [r4, #4]
 80086a2:	4299      	cmp	r1, r3
 80086a4:	bfde      	ittt	le
 80086a6:	2330      	movle	r3, #48	; 0x30
 80086a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086b0:	1b92      	subs	r2, r2, r6
 80086b2:	6122      	str	r2, [r4, #16]
 80086b4:	f8cd a000 	str.w	sl, [sp]
 80086b8:	464b      	mov	r3, r9
 80086ba:	aa03      	add	r2, sp, #12
 80086bc:	4621      	mov	r1, r4
 80086be:	4640      	mov	r0, r8
 80086c0:	f7ff fee2 	bl	8008488 <_printf_common>
 80086c4:	3001      	adds	r0, #1
 80086c6:	d14c      	bne.n	8008762 <_printf_i+0x1fe>
 80086c8:	f04f 30ff 	mov.w	r0, #4294967295
 80086cc:	b004      	add	sp, #16
 80086ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d2:	4835      	ldr	r0, [pc, #212]	; (80087a8 <_printf_i+0x244>)
 80086d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	680e      	ldr	r6, [r1, #0]
 80086dc:	061f      	lsls	r7, r3, #24
 80086de:	f856 5b04 	ldr.w	r5, [r6], #4
 80086e2:	600e      	str	r6, [r1, #0]
 80086e4:	d514      	bpl.n	8008710 <_printf_i+0x1ac>
 80086e6:	07d9      	lsls	r1, r3, #31
 80086e8:	bf44      	itt	mi
 80086ea:	f043 0320 	orrmi.w	r3, r3, #32
 80086ee:	6023      	strmi	r3, [r4, #0]
 80086f0:	b91d      	cbnz	r5, 80086fa <_printf_i+0x196>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	f023 0320 	bic.w	r3, r3, #32
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	2310      	movs	r3, #16
 80086fc:	e7b0      	b.n	8008660 <_printf_i+0xfc>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	f043 0320 	orr.w	r3, r3, #32
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	2378      	movs	r3, #120	; 0x78
 8008708:	4828      	ldr	r0, [pc, #160]	; (80087ac <_printf_i+0x248>)
 800870a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800870e:	e7e3      	b.n	80086d8 <_printf_i+0x174>
 8008710:	065e      	lsls	r6, r3, #25
 8008712:	bf48      	it	mi
 8008714:	b2ad      	uxthmi	r5, r5
 8008716:	e7e6      	b.n	80086e6 <_printf_i+0x182>
 8008718:	4616      	mov	r6, r2
 800871a:	e7bb      	b.n	8008694 <_printf_i+0x130>
 800871c:	680b      	ldr	r3, [r1, #0]
 800871e:	6826      	ldr	r6, [r4, #0]
 8008720:	6960      	ldr	r0, [r4, #20]
 8008722:	1d1d      	adds	r5, r3, #4
 8008724:	600d      	str	r5, [r1, #0]
 8008726:	0635      	lsls	r5, r6, #24
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	d501      	bpl.n	8008730 <_printf_i+0x1cc>
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	e002      	b.n	8008736 <_printf_i+0x1d2>
 8008730:	0671      	lsls	r1, r6, #25
 8008732:	d5fb      	bpl.n	800872c <_printf_i+0x1c8>
 8008734:	8018      	strh	r0, [r3, #0]
 8008736:	2300      	movs	r3, #0
 8008738:	6123      	str	r3, [r4, #16]
 800873a:	4616      	mov	r6, r2
 800873c:	e7ba      	b.n	80086b4 <_printf_i+0x150>
 800873e:	680b      	ldr	r3, [r1, #0]
 8008740:	1d1a      	adds	r2, r3, #4
 8008742:	600a      	str	r2, [r1, #0]
 8008744:	681e      	ldr	r6, [r3, #0]
 8008746:	6862      	ldr	r2, [r4, #4]
 8008748:	2100      	movs	r1, #0
 800874a:	4630      	mov	r0, r6
 800874c:	f7f7 fd68 	bl	8000220 <memchr>
 8008750:	b108      	cbz	r0, 8008756 <_printf_i+0x1f2>
 8008752:	1b80      	subs	r0, r0, r6
 8008754:	6060      	str	r0, [r4, #4]
 8008756:	6863      	ldr	r3, [r4, #4]
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	2300      	movs	r3, #0
 800875c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008760:	e7a8      	b.n	80086b4 <_printf_i+0x150>
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	4632      	mov	r2, r6
 8008766:	4649      	mov	r1, r9
 8008768:	4640      	mov	r0, r8
 800876a:	47d0      	blx	sl
 800876c:	3001      	adds	r0, #1
 800876e:	d0ab      	beq.n	80086c8 <_printf_i+0x164>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	079b      	lsls	r3, r3, #30
 8008774:	d413      	bmi.n	800879e <_printf_i+0x23a>
 8008776:	68e0      	ldr	r0, [r4, #12]
 8008778:	9b03      	ldr	r3, [sp, #12]
 800877a:	4298      	cmp	r0, r3
 800877c:	bfb8      	it	lt
 800877e:	4618      	movlt	r0, r3
 8008780:	e7a4      	b.n	80086cc <_printf_i+0x168>
 8008782:	2301      	movs	r3, #1
 8008784:	4632      	mov	r2, r6
 8008786:	4649      	mov	r1, r9
 8008788:	4640      	mov	r0, r8
 800878a:	47d0      	blx	sl
 800878c:	3001      	adds	r0, #1
 800878e:	d09b      	beq.n	80086c8 <_printf_i+0x164>
 8008790:	3501      	adds	r5, #1
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	9903      	ldr	r1, [sp, #12]
 8008796:	1a5b      	subs	r3, r3, r1
 8008798:	42ab      	cmp	r3, r5
 800879a:	dcf2      	bgt.n	8008782 <_printf_i+0x21e>
 800879c:	e7eb      	b.n	8008776 <_printf_i+0x212>
 800879e:	2500      	movs	r5, #0
 80087a0:	f104 0619 	add.w	r6, r4, #25
 80087a4:	e7f5      	b.n	8008792 <_printf_i+0x22e>
 80087a6:	bf00      	nop
 80087a8:	0800d0b8 	.word	0x0800d0b8
 80087ac:	0800d0c9 	.word	0x0800d0c9

080087b0 <_scanf_float>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	b087      	sub	sp, #28
 80087b6:	4617      	mov	r7, r2
 80087b8:	9303      	str	r3, [sp, #12]
 80087ba:	688b      	ldr	r3, [r1, #8]
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087c2:	bf83      	ittte	hi
 80087c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087c8:	195b      	addhi	r3, r3, r5
 80087ca:	9302      	strhi	r3, [sp, #8]
 80087cc:	2300      	movls	r3, #0
 80087ce:	bf86      	itte	hi
 80087d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087d4:	608b      	strhi	r3, [r1, #8]
 80087d6:	9302      	strls	r3, [sp, #8]
 80087d8:	680b      	ldr	r3, [r1, #0]
 80087da:	468b      	mov	fp, r1
 80087dc:	2500      	movs	r5, #0
 80087de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80087e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087ea:	4680      	mov	r8, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	465e      	mov	r6, fp
 80087f0:	46aa      	mov	sl, r5
 80087f2:	46a9      	mov	r9, r5
 80087f4:	9501      	str	r5, [sp, #4]
 80087f6:	68a2      	ldr	r2, [r4, #8]
 80087f8:	b152      	cbz	r2, 8008810 <_scanf_float+0x60>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b4e      	cmp	r3, #78	; 0x4e
 8008800:	d864      	bhi.n	80088cc <_scanf_float+0x11c>
 8008802:	2b40      	cmp	r3, #64	; 0x40
 8008804:	d83c      	bhi.n	8008880 <_scanf_float+0xd0>
 8008806:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800880a:	b2c8      	uxtb	r0, r1
 800880c:	280e      	cmp	r0, #14
 800880e:	d93a      	bls.n	8008886 <_scanf_float+0xd6>
 8008810:	f1b9 0f00 	cmp.w	r9, #0
 8008814:	d003      	beq.n	800881e <_scanf_float+0x6e>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008822:	f1ba 0f01 	cmp.w	sl, #1
 8008826:	f200 8113 	bhi.w	8008a50 <_scanf_float+0x2a0>
 800882a:	455e      	cmp	r6, fp
 800882c:	f200 8105 	bhi.w	8008a3a <_scanf_float+0x28a>
 8008830:	2501      	movs	r5, #1
 8008832:	4628      	mov	r0, r5
 8008834:	b007      	add	sp, #28
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800883e:	2a0d      	cmp	r2, #13
 8008840:	d8e6      	bhi.n	8008810 <_scanf_float+0x60>
 8008842:	a101      	add	r1, pc, #4	; (adr r1, 8008848 <_scanf_float+0x98>)
 8008844:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008848:	08008987 	.word	0x08008987
 800884c:	08008811 	.word	0x08008811
 8008850:	08008811 	.word	0x08008811
 8008854:	08008811 	.word	0x08008811
 8008858:	080089e7 	.word	0x080089e7
 800885c:	080089bf 	.word	0x080089bf
 8008860:	08008811 	.word	0x08008811
 8008864:	08008811 	.word	0x08008811
 8008868:	08008995 	.word	0x08008995
 800886c:	08008811 	.word	0x08008811
 8008870:	08008811 	.word	0x08008811
 8008874:	08008811 	.word	0x08008811
 8008878:	08008811 	.word	0x08008811
 800887c:	0800894d 	.word	0x0800894d
 8008880:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008884:	e7db      	b.n	800883e <_scanf_float+0x8e>
 8008886:	290e      	cmp	r1, #14
 8008888:	d8c2      	bhi.n	8008810 <_scanf_float+0x60>
 800888a:	a001      	add	r0, pc, #4	; (adr r0, 8008890 <_scanf_float+0xe0>)
 800888c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008890:	0800893f 	.word	0x0800893f
 8008894:	08008811 	.word	0x08008811
 8008898:	0800893f 	.word	0x0800893f
 800889c:	080089d3 	.word	0x080089d3
 80088a0:	08008811 	.word	0x08008811
 80088a4:	080088ed 	.word	0x080088ed
 80088a8:	08008929 	.word	0x08008929
 80088ac:	08008929 	.word	0x08008929
 80088b0:	08008929 	.word	0x08008929
 80088b4:	08008929 	.word	0x08008929
 80088b8:	08008929 	.word	0x08008929
 80088bc:	08008929 	.word	0x08008929
 80088c0:	08008929 	.word	0x08008929
 80088c4:	08008929 	.word	0x08008929
 80088c8:	08008929 	.word	0x08008929
 80088cc:	2b6e      	cmp	r3, #110	; 0x6e
 80088ce:	d809      	bhi.n	80088e4 <_scanf_float+0x134>
 80088d0:	2b60      	cmp	r3, #96	; 0x60
 80088d2:	d8b2      	bhi.n	800883a <_scanf_float+0x8a>
 80088d4:	2b54      	cmp	r3, #84	; 0x54
 80088d6:	d077      	beq.n	80089c8 <_scanf_float+0x218>
 80088d8:	2b59      	cmp	r3, #89	; 0x59
 80088da:	d199      	bne.n	8008810 <_scanf_float+0x60>
 80088dc:	2d07      	cmp	r5, #7
 80088de:	d197      	bne.n	8008810 <_scanf_float+0x60>
 80088e0:	2508      	movs	r5, #8
 80088e2:	e029      	b.n	8008938 <_scanf_float+0x188>
 80088e4:	2b74      	cmp	r3, #116	; 0x74
 80088e6:	d06f      	beq.n	80089c8 <_scanf_float+0x218>
 80088e8:	2b79      	cmp	r3, #121	; 0x79
 80088ea:	e7f6      	b.n	80088da <_scanf_float+0x12a>
 80088ec:	6821      	ldr	r1, [r4, #0]
 80088ee:	05c8      	lsls	r0, r1, #23
 80088f0:	d51a      	bpl.n	8008928 <_scanf_float+0x178>
 80088f2:	9b02      	ldr	r3, [sp, #8]
 80088f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088f8:	6021      	str	r1, [r4, #0]
 80088fa:	f109 0901 	add.w	r9, r9, #1
 80088fe:	b11b      	cbz	r3, 8008908 <_scanf_float+0x158>
 8008900:	3b01      	subs	r3, #1
 8008902:	3201      	adds	r2, #1
 8008904:	9302      	str	r3, [sp, #8]
 8008906:	60a2      	str	r2, [r4, #8]
 8008908:	68a3      	ldr	r3, [r4, #8]
 800890a:	3b01      	subs	r3, #1
 800890c:	60a3      	str	r3, [r4, #8]
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3b01      	subs	r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	f340 8084 	ble.w	8008a28 <_scanf_float+0x278>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	603b      	str	r3, [r7, #0]
 8008926:	e766      	b.n	80087f6 <_scanf_float+0x46>
 8008928:	eb1a 0f05 	cmn.w	sl, r5
 800892c:	f47f af70 	bne.w	8008810 <_scanf_float+0x60>
 8008930:	6822      	ldr	r2, [r4, #0]
 8008932:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	f806 3b01 	strb.w	r3, [r6], #1
 800893c:	e7e4      	b.n	8008908 <_scanf_float+0x158>
 800893e:	6822      	ldr	r2, [r4, #0]
 8008940:	0610      	lsls	r0, r2, #24
 8008942:	f57f af65 	bpl.w	8008810 <_scanf_float+0x60>
 8008946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800894a:	e7f4      	b.n	8008936 <_scanf_float+0x186>
 800894c:	f1ba 0f00 	cmp.w	sl, #0
 8008950:	d10e      	bne.n	8008970 <_scanf_float+0x1c0>
 8008952:	f1b9 0f00 	cmp.w	r9, #0
 8008956:	d10e      	bne.n	8008976 <_scanf_float+0x1c6>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800895e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008962:	d108      	bne.n	8008976 <_scanf_float+0x1c6>
 8008964:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008968:	6022      	str	r2, [r4, #0]
 800896a:	f04f 0a01 	mov.w	sl, #1
 800896e:	e7e3      	b.n	8008938 <_scanf_float+0x188>
 8008970:	f1ba 0f02 	cmp.w	sl, #2
 8008974:	d055      	beq.n	8008a22 <_scanf_float+0x272>
 8008976:	2d01      	cmp	r5, #1
 8008978:	d002      	beq.n	8008980 <_scanf_float+0x1d0>
 800897a:	2d04      	cmp	r5, #4
 800897c:	f47f af48 	bne.w	8008810 <_scanf_float+0x60>
 8008980:	3501      	adds	r5, #1
 8008982:	b2ed      	uxtb	r5, r5
 8008984:	e7d8      	b.n	8008938 <_scanf_float+0x188>
 8008986:	f1ba 0f01 	cmp.w	sl, #1
 800898a:	f47f af41 	bne.w	8008810 <_scanf_float+0x60>
 800898e:	f04f 0a02 	mov.w	sl, #2
 8008992:	e7d1      	b.n	8008938 <_scanf_float+0x188>
 8008994:	b97d      	cbnz	r5, 80089b6 <_scanf_float+0x206>
 8008996:	f1b9 0f00 	cmp.w	r9, #0
 800899a:	f47f af3c 	bne.w	8008816 <_scanf_float+0x66>
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089a8:	f47f af39 	bne.w	800881e <_scanf_float+0x6e>
 80089ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089b0:	6022      	str	r2, [r4, #0]
 80089b2:	2501      	movs	r5, #1
 80089b4:	e7c0      	b.n	8008938 <_scanf_float+0x188>
 80089b6:	2d03      	cmp	r5, #3
 80089b8:	d0e2      	beq.n	8008980 <_scanf_float+0x1d0>
 80089ba:	2d05      	cmp	r5, #5
 80089bc:	e7de      	b.n	800897c <_scanf_float+0x1cc>
 80089be:	2d02      	cmp	r5, #2
 80089c0:	f47f af26 	bne.w	8008810 <_scanf_float+0x60>
 80089c4:	2503      	movs	r5, #3
 80089c6:	e7b7      	b.n	8008938 <_scanf_float+0x188>
 80089c8:	2d06      	cmp	r5, #6
 80089ca:	f47f af21 	bne.w	8008810 <_scanf_float+0x60>
 80089ce:	2507      	movs	r5, #7
 80089d0:	e7b2      	b.n	8008938 <_scanf_float+0x188>
 80089d2:	6822      	ldr	r2, [r4, #0]
 80089d4:	0591      	lsls	r1, r2, #22
 80089d6:	f57f af1b 	bpl.w	8008810 <_scanf_float+0x60>
 80089da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089de:	6022      	str	r2, [r4, #0]
 80089e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80089e4:	e7a8      	b.n	8008938 <_scanf_float+0x188>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089f0:	d006      	beq.n	8008a00 <_scanf_float+0x250>
 80089f2:	0550      	lsls	r0, r2, #21
 80089f4:	f57f af0c 	bpl.w	8008810 <_scanf_float+0x60>
 80089f8:	f1b9 0f00 	cmp.w	r9, #0
 80089fc:	f43f af0f 	beq.w	800881e <_scanf_float+0x6e>
 8008a00:	0591      	lsls	r1, r2, #22
 8008a02:	bf58      	it	pl
 8008a04:	9901      	ldrpl	r1, [sp, #4]
 8008a06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a0a:	bf58      	it	pl
 8008a0c:	eba9 0101 	subpl.w	r1, r9, r1
 8008a10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a14:	bf58      	it	pl
 8008a16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a1a:	6022      	str	r2, [r4, #0]
 8008a1c:	f04f 0900 	mov.w	r9, #0
 8008a20:	e78a      	b.n	8008938 <_scanf_float+0x188>
 8008a22:	f04f 0a03 	mov.w	sl, #3
 8008a26:	e787      	b.n	8008938 <_scanf_float+0x188>
 8008a28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4640      	mov	r0, r8
 8008a30:	4798      	blx	r3
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f43f aedf 	beq.w	80087f6 <_scanf_float+0x46>
 8008a38:	e6ea      	b.n	8008810 <_scanf_float+0x60>
 8008a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a42:	463a      	mov	r2, r7
 8008a44:	4640      	mov	r0, r8
 8008a46:	4798      	blx	r3
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	e6ec      	b.n	800882a <_scanf_float+0x7a>
 8008a50:	1e6b      	subs	r3, r5, #1
 8008a52:	2b06      	cmp	r3, #6
 8008a54:	d825      	bhi.n	8008aa2 <_scanf_float+0x2f2>
 8008a56:	2d02      	cmp	r5, #2
 8008a58:	d836      	bhi.n	8008ac8 <_scanf_float+0x318>
 8008a5a:	455e      	cmp	r6, fp
 8008a5c:	f67f aee8 	bls.w	8008830 <_scanf_float+0x80>
 8008a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a68:	463a      	mov	r2, r7
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	4798      	blx	r3
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	6123      	str	r3, [r4, #16]
 8008a74:	e7f1      	b.n	8008a5a <_scanf_float+0x2aa>
 8008a76:	9802      	ldr	r0, [sp, #8]
 8008a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a80:	9002      	str	r0, [sp, #8]
 8008a82:	463a      	mov	r2, r7
 8008a84:	4640      	mov	r0, r8
 8008a86:	4798      	blx	r3
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	6123      	str	r3, [r4, #16]
 8008a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a92:	fa5f fa8a 	uxtb.w	sl, sl
 8008a96:	f1ba 0f02 	cmp.w	sl, #2
 8008a9a:	d1ec      	bne.n	8008a76 <_scanf_float+0x2c6>
 8008a9c:	3d03      	subs	r5, #3
 8008a9e:	b2ed      	uxtb	r5, r5
 8008aa0:	1b76      	subs	r6, r6, r5
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	05da      	lsls	r2, r3, #23
 8008aa6:	d52f      	bpl.n	8008b08 <_scanf_float+0x358>
 8008aa8:	055b      	lsls	r3, r3, #21
 8008aaa:	d510      	bpl.n	8008ace <_scanf_float+0x31e>
 8008aac:	455e      	cmp	r6, fp
 8008aae:	f67f aebf 	bls.w	8008830 <_scanf_float+0x80>
 8008ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008aba:	463a      	mov	r2, r7
 8008abc:	4640      	mov	r0, r8
 8008abe:	4798      	blx	r3
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	6123      	str	r3, [r4, #16]
 8008ac6:	e7f1      	b.n	8008aac <_scanf_float+0x2fc>
 8008ac8:	46aa      	mov	sl, r5
 8008aca:	9602      	str	r6, [sp, #8]
 8008acc:	e7df      	b.n	8008a8e <_scanf_float+0x2de>
 8008ace:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ad2:	6923      	ldr	r3, [r4, #16]
 8008ad4:	2965      	cmp	r1, #101	; 0x65
 8008ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ada:	f106 35ff 	add.w	r5, r6, #4294967295
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	d00c      	beq.n	8008afc <_scanf_float+0x34c>
 8008ae2:	2945      	cmp	r1, #69	; 0x45
 8008ae4:	d00a      	beq.n	8008afc <_scanf_float+0x34c>
 8008ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aea:	463a      	mov	r2, r7
 8008aec:	4640      	mov	r0, r8
 8008aee:	4798      	blx	r3
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	1eb5      	subs	r5, r6, #2
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b00:	463a      	mov	r2, r7
 8008b02:	4640      	mov	r0, r8
 8008b04:	4798      	blx	r3
 8008b06:	462e      	mov	r6, r5
 8008b08:	6825      	ldr	r5, [r4, #0]
 8008b0a:	f015 0510 	ands.w	r5, r5, #16
 8008b0e:	d158      	bne.n	8008bc2 <_scanf_float+0x412>
 8008b10:	7035      	strb	r5, [r6, #0]
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b1c:	d11c      	bne.n	8008b58 <_scanf_float+0x3a8>
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	454b      	cmp	r3, r9
 8008b22:	eba3 0209 	sub.w	r2, r3, r9
 8008b26:	d124      	bne.n	8008b72 <_scanf_float+0x3c2>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4659      	mov	r1, fp
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	f000 ff41 	bl	80099b4 <_strtod_r>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	6821      	ldr	r1, [r4, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f011 0f02 	tst.w	r1, #2
 8008b3c:	ec57 6b10 	vmov	r6, r7, d0
 8008b40:	f103 0204 	add.w	r2, r3, #4
 8008b44:	d020      	beq.n	8008b88 <_scanf_float+0x3d8>
 8008b46:	9903      	ldr	r1, [sp, #12]
 8008b48:	600a      	str	r2, [r1, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	e9c3 6700 	strd	r6, r7, [r3]
 8008b50:	68e3      	ldr	r3, [r4, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60e3      	str	r3, [r4, #12]
 8008b56:	e66c      	b.n	8008832 <_scanf_float+0x82>
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0e4      	beq.n	8008b28 <_scanf_float+0x378>
 8008b5e:	9905      	ldr	r1, [sp, #20]
 8008b60:	230a      	movs	r3, #10
 8008b62:	462a      	mov	r2, r5
 8008b64:	3101      	adds	r1, #1
 8008b66:	4640      	mov	r0, r8
 8008b68:	f000 ffae 	bl	8009ac8 <_strtol_r>
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	9e05      	ldr	r6, [sp, #20]
 8008b70:	1ac2      	subs	r2, r0, r3
 8008b72:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b76:	429e      	cmp	r6, r3
 8008b78:	bf28      	it	cs
 8008b7a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b7e:	4912      	ldr	r1, [pc, #72]	; (8008bc8 <_scanf_float+0x418>)
 8008b80:	4630      	mov	r0, r6
 8008b82:	f000 f85f 	bl	8008c44 <siprintf>
 8008b86:	e7cf      	b.n	8008b28 <_scanf_float+0x378>
 8008b88:	f011 0f04 	tst.w	r1, #4
 8008b8c:	9903      	ldr	r1, [sp, #12]
 8008b8e:	600a      	str	r2, [r1, #0]
 8008b90:	d1db      	bne.n	8008b4a <_scanf_float+0x39a>
 8008b92:	f8d3 8000 	ldr.w	r8, [r3]
 8008b96:	ee10 2a10 	vmov	r2, s0
 8008b9a:	ee10 0a10 	vmov	r0, s0
 8008b9e:	463b      	mov	r3, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	f7f7 ffe3 	bl	8000b6c <__aeabi_dcmpun>
 8008ba6:	b128      	cbz	r0, 8008bb4 <_scanf_float+0x404>
 8008ba8:	4808      	ldr	r0, [pc, #32]	; (8008bcc <_scanf_float+0x41c>)
 8008baa:	f000 f811 	bl	8008bd0 <nanf>
 8008bae:	ed88 0a00 	vstr	s0, [r8]
 8008bb2:	e7cd      	b.n	8008b50 <_scanf_float+0x3a0>
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f8 f836 	bl	8000c28 <__aeabi_d2f>
 8008bbc:	f8c8 0000 	str.w	r0, [r8]
 8008bc0:	e7c6      	b.n	8008b50 <_scanf_float+0x3a0>
 8008bc2:	2500      	movs	r5, #0
 8008bc4:	e635      	b.n	8008832 <_scanf_float+0x82>
 8008bc6:	bf00      	nop
 8008bc8:	0800d0da 	.word	0x0800d0da
 8008bcc:	0800d50b 	.word	0x0800d50b

08008bd0 <nanf>:
 8008bd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008bd8 <nanf+0x8>
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	7fc00000 	.word	0x7fc00000

08008bdc <sniprintf>:
 8008bdc:	b40c      	push	{r2, r3}
 8008bde:	b530      	push	{r4, r5, lr}
 8008be0:	4b17      	ldr	r3, [pc, #92]	; (8008c40 <sniprintf+0x64>)
 8008be2:	1e0c      	subs	r4, r1, #0
 8008be4:	681d      	ldr	r5, [r3, #0]
 8008be6:	b09d      	sub	sp, #116	; 0x74
 8008be8:	da08      	bge.n	8008bfc <sniprintf+0x20>
 8008bea:	238b      	movs	r3, #139	; 0x8b
 8008bec:	602b      	str	r3, [r5, #0]
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	b01d      	add	sp, #116	; 0x74
 8008bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bf8:	b002      	add	sp, #8
 8008bfa:	4770      	bx	lr
 8008bfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008c00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c04:	bf14      	ite	ne
 8008c06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c0a:	4623      	moveq	r3, r4
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c14:	9002      	str	r0, [sp, #8]
 8008c16:	9006      	str	r0, [sp, #24]
 8008c18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c1e:	ab21      	add	r3, sp, #132	; 0x84
 8008c20:	a902      	add	r1, sp, #8
 8008c22:	4628      	mov	r0, r5
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	f002 ff89 	bl	800bb3c <_svfiprintf_r>
 8008c2a:	1c43      	adds	r3, r0, #1
 8008c2c:	bfbc      	itt	lt
 8008c2e:	238b      	movlt	r3, #139	; 0x8b
 8008c30:	602b      	strlt	r3, [r5, #0]
 8008c32:	2c00      	cmp	r4, #0
 8008c34:	d0dd      	beq.n	8008bf2 <sniprintf+0x16>
 8008c36:	9b02      	ldr	r3, [sp, #8]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e7d9      	b.n	8008bf2 <sniprintf+0x16>
 8008c3e:	bf00      	nop
 8008c40:	20000074 	.word	0x20000074

08008c44 <siprintf>:
 8008c44:	b40e      	push	{r1, r2, r3}
 8008c46:	b500      	push	{lr}
 8008c48:	b09c      	sub	sp, #112	; 0x70
 8008c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008c4c:	9002      	str	r0, [sp, #8]
 8008c4e:	9006      	str	r0, [sp, #24]
 8008c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c54:	4809      	ldr	r0, [pc, #36]	; (8008c7c <siprintf+0x38>)
 8008c56:	9107      	str	r1, [sp, #28]
 8008c58:	9104      	str	r1, [sp, #16]
 8008c5a:	4909      	ldr	r1, [pc, #36]	; (8008c80 <siprintf+0x3c>)
 8008c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c60:	9105      	str	r1, [sp, #20]
 8008c62:	6800      	ldr	r0, [r0, #0]
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	a902      	add	r1, sp, #8
 8008c68:	f002 ff68 	bl	800bb3c <_svfiprintf_r>
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	b01c      	add	sp, #112	; 0x70
 8008c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c78:	b003      	add	sp, #12
 8008c7a:	4770      	bx	lr
 8008c7c:	20000074 	.word	0x20000074
 8008c80:	ffff0208 	.word	0xffff0208

08008c84 <siscanf>:
 8008c84:	b40e      	push	{r1, r2, r3}
 8008c86:	b510      	push	{r4, lr}
 8008c88:	b09f      	sub	sp, #124	; 0x7c
 8008c8a:	ac21      	add	r4, sp, #132	; 0x84
 8008c8c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008c90:	f854 2b04 	ldr.w	r2, [r4], #4
 8008c94:	9201      	str	r2, [sp, #4]
 8008c96:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008c9a:	9004      	str	r0, [sp, #16]
 8008c9c:	9008      	str	r0, [sp, #32]
 8008c9e:	f7f7 fab7 	bl	8000210 <strlen>
 8008ca2:	4b0c      	ldr	r3, [pc, #48]	; (8008cd4 <siscanf+0x50>)
 8008ca4:	9005      	str	r0, [sp, #20]
 8008ca6:	9009      	str	r0, [sp, #36]	; 0x24
 8008ca8:	930d      	str	r3, [sp, #52]	; 0x34
 8008caa:	480b      	ldr	r0, [pc, #44]	; (8008cd8 <siscanf+0x54>)
 8008cac:	9a01      	ldr	r2, [sp, #4]
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9403      	str	r4, [sp, #12]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9311      	str	r3, [sp, #68]	; 0x44
 8008cb6:	9316      	str	r3, [sp, #88]	; 0x58
 8008cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008cc0:	a904      	add	r1, sp, #16
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	f003 f894 	bl	800bdf0 <__ssvfiscanf_r>
 8008cc8:	b01f      	add	sp, #124	; 0x7c
 8008cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cce:	b003      	add	sp, #12
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	08008cff 	.word	0x08008cff
 8008cd8:	20000074 	.word	0x20000074

08008cdc <__sread>:
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	460c      	mov	r4, r1
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	f003 fb48 	bl	800c378 <_read_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	bfab      	itete	ge
 8008cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cee:	89a3      	ldrhlt	r3, [r4, #12]
 8008cf0:	181b      	addge	r3, r3, r0
 8008cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cf6:	bfac      	ite	ge
 8008cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cfa:	81a3      	strhlt	r3, [r4, #12]
 8008cfc:	bd10      	pop	{r4, pc}

08008cfe <__seofread>:
 8008cfe:	2000      	movs	r0, #0
 8008d00:	4770      	bx	lr

08008d02 <__swrite>:
 8008d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d06:	461f      	mov	r7, r3
 8008d08:	898b      	ldrh	r3, [r1, #12]
 8008d0a:	05db      	lsls	r3, r3, #23
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	4616      	mov	r6, r2
 8008d12:	d505      	bpl.n	8008d20 <__swrite+0x1e>
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	2302      	movs	r3, #2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f002 f904 	bl	800af28 <_lseek_r>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d2a:	81a3      	strh	r3, [r4, #12]
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	463b      	mov	r3, r7
 8008d30:	4628      	mov	r0, r5
 8008d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d36:	f000 bee9 	b.w	8009b0c <_write_r>

08008d3a <__sseek>:
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d42:	f002 f8f1 	bl	800af28 <_lseek_r>
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	bf15      	itete	ne
 8008d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d56:	81a3      	strheq	r3, [r4, #12]
 8008d58:	bf18      	it	ne
 8008d5a:	81a3      	strhne	r3, [r4, #12]
 8008d5c:	bd10      	pop	{r4, pc}

08008d5e <__sclose>:
 8008d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d62:	f000 bee5 	b.w	8009b30 <_close_r>

08008d66 <sulp>:
 8008d66:	b570      	push	{r4, r5, r6, lr}
 8008d68:	4604      	mov	r4, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	ec45 4b10 	vmov	d0, r4, r5
 8008d70:	4616      	mov	r6, r2
 8008d72:	f002 fc7f 	bl	800b674 <__ulp>
 8008d76:	ec51 0b10 	vmov	r0, r1, d0
 8008d7a:	b17e      	cbz	r6, 8008d9c <sulp+0x36>
 8008d7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dd09      	ble.n	8008d9c <sulp+0x36>
 8008d88:	051b      	lsls	r3, r3, #20
 8008d8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d8e:	2400      	movs	r4, #0
 8008d90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d94:	4622      	mov	r2, r4
 8008d96:	462b      	mov	r3, r5
 8008d98:	f7f7 fc4e 	bl	8000638 <__aeabi_dmul>
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008da0 <_strtod_l>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	b0a3      	sub	sp, #140	; 0x8c
 8008da6:	461f      	mov	r7, r3
 8008da8:	2300      	movs	r3, #0
 8008daa:	931e      	str	r3, [sp, #120]	; 0x78
 8008dac:	4ba4      	ldr	r3, [pc, #656]	; (8009040 <_strtod_l+0x2a0>)
 8008dae:	9219      	str	r2, [sp, #100]	; 0x64
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	4604      	mov	r4, r0
 8008db6:	4618      	mov	r0, r3
 8008db8:	4688      	mov	r8, r1
 8008dba:	f7f7 fa29 	bl	8000210 <strlen>
 8008dbe:	f04f 0a00 	mov.w	sl, #0
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	f04f 0b00 	mov.w	fp, #0
 8008dc8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008dcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dce:	781a      	ldrb	r2, [r3, #0]
 8008dd0:	2a2b      	cmp	r2, #43	; 0x2b
 8008dd2:	d04c      	beq.n	8008e6e <_strtod_l+0xce>
 8008dd4:	d839      	bhi.n	8008e4a <_strtod_l+0xaa>
 8008dd6:	2a0d      	cmp	r2, #13
 8008dd8:	d832      	bhi.n	8008e40 <_strtod_l+0xa0>
 8008dda:	2a08      	cmp	r2, #8
 8008ddc:	d832      	bhi.n	8008e44 <_strtod_l+0xa4>
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	d03c      	beq.n	8008e5c <_strtod_l+0xbc>
 8008de2:	2300      	movs	r3, #0
 8008de4:	930e      	str	r3, [sp, #56]	; 0x38
 8008de6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008de8:	7833      	ldrb	r3, [r6, #0]
 8008dea:	2b30      	cmp	r3, #48	; 0x30
 8008dec:	f040 80b4 	bne.w	8008f58 <_strtod_l+0x1b8>
 8008df0:	7873      	ldrb	r3, [r6, #1]
 8008df2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008df6:	2b58      	cmp	r3, #88	; 0x58
 8008df8:	d16c      	bne.n	8008ed4 <_strtod_l+0x134>
 8008dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	ab1e      	add	r3, sp, #120	; 0x78
 8008e00:	9702      	str	r7, [sp, #8]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	4a8f      	ldr	r2, [pc, #572]	; (8009044 <_strtod_l+0x2a4>)
 8008e06:	ab1f      	add	r3, sp, #124	; 0x7c
 8008e08:	a91d      	add	r1, sp, #116	; 0x74
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f001 fd80 	bl	800a910 <__gethex>
 8008e10:	f010 0707 	ands.w	r7, r0, #7
 8008e14:	4605      	mov	r5, r0
 8008e16:	d005      	beq.n	8008e24 <_strtod_l+0x84>
 8008e18:	2f06      	cmp	r7, #6
 8008e1a:	d12a      	bne.n	8008e72 <_strtod_l+0xd2>
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	2300      	movs	r3, #0
 8008e20:	961d      	str	r6, [sp, #116]	; 0x74
 8008e22:	930e      	str	r3, [sp, #56]	; 0x38
 8008e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f040 8596 	bne.w	8009958 <_strtod_l+0xbb8>
 8008e2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e2e:	b1db      	cbz	r3, 8008e68 <_strtod_l+0xc8>
 8008e30:	4652      	mov	r2, sl
 8008e32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e36:	ec43 2b10 	vmov	d0, r2, r3
 8008e3a:	b023      	add	sp, #140	; 0x8c
 8008e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e40:	2a20      	cmp	r2, #32
 8008e42:	d1ce      	bne.n	8008de2 <_strtod_l+0x42>
 8008e44:	3301      	adds	r3, #1
 8008e46:	931d      	str	r3, [sp, #116]	; 0x74
 8008e48:	e7c0      	b.n	8008dcc <_strtod_l+0x2c>
 8008e4a:	2a2d      	cmp	r2, #45	; 0x2d
 8008e4c:	d1c9      	bne.n	8008de2 <_strtod_l+0x42>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	920e      	str	r2, [sp, #56]	; 0x38
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	921d      	str	r2, [sp, #116]	; 0x74
 8008e56:	785b      	ldrb	r3, [r3, #1]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1c4      	bne.n	8008de6 <_strtod_l+0x46>
 8008e5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e5e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f040 8576 	bne.w	8009954 <_strtod_l+0xbb4>
 8008e68:	4652      	mov	r2, sl
 8008e6a:	465b      	mov	r3, fp
 8008e6c:	e7e3      	b.n	8008e36 <_strtod_l+0x96>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	e7ee      	b.n	8008e50 <_strtod_l+0xb0>
 8008e72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e74:	b13a      	cbz	r2, 8008e86 <_strtod_l+0xe6>
 8008e76:	2135      	movs	r1, #53	; 0x35
 8008e78:	a820      	add	r0, sp, #128	; 0x80
 8008e7a:	f002 fd06 	bl	800b88a <__copybits>
 8008e7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008e80:	4620      	mov	r0, r4
 8008e82:	f002 f8cb 	bl	800b01c <_Bfree>
 8008e86:	3f01      	subs	r7, #1
 8008e88:	2f05      	cmp	r7, #5
 8008e8a:	d807      	bhi.n	8008e9c <_strtod_l+0xfc>
 8008e8c:	e8df f007 	tbb	[pc, r7]
 8008e90:	1d180b0e 	.word	0x1d180b0e
 8008e94:	030e      	.short	0x030e
 8008e96:	f04f 0b00 	mov.w	fp, #0
 8008e9a:	46da      	mov	sl, fp
 8008e9c:	0728      	lsls	r0, r5, #28
 8008e9e:	d5c1      	bpl.n	8008e24 <_strtod_l+0x84>
 8008ea0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ea4:	e7be      	b.n	8008e24 <_strtod_l+0x84>
 8008ea6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008eaa:	e7f7      	b.n	8008e9c <_strtod_l+0xfc>
 8008eac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008eb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008eb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008eb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008eba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ebe:	e7ed      	b.n	8008e9c <_strtod_l+0xfc>
 8008ec0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009048 <_strtod_l+0x2a8>
 8008ec4:	f04f 0a00 	mov.w	sl, #0
 8008ec8:	e7e8      	b.n	8008e9c <_strtod_l+0xfc>
 8008eca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ece:	f04f 3aff 	mov.w	sl, #4294967295
 8008ed2:	e7e3      	b.n	8008e9c <_strtod_l+0xfc>
 8008ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	921d      	str	r2, [sp, #116]	; 0x74
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b30      	cmp	r3, #48	; 0x30
 8008ede:	d0f9      	beq.n	8008ed4 <_strtod_l+0x134>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d09f      	beq.n	8008e24 <_strtod_l+0x84>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f04f 0900 	mov.w	r9, #0
 8008eea:	9304      	str	r3, [sp, #16]
 8008eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008eee:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ef4:	464f      	mov	r7, r9
 8008ef6:	220a      	movs	r2, #10
 8008ef8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008efa:	7806      	ldrb	r6, [r0, #0]
 8008efc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f00:	b2d9      	uxtb	r1, r3
 8008f02:	2909      	cmp	r1, #9
 8008f04:	d92a      	bls.n	8008f5c <_strtod_l+0x1bc>
 8008f06:	9907      	ldr	r1, [sp, #28]
 8008f08:	462a      	mov	r2, r5
 8008f0a:	f003 fa9b 	bl	800c444 <strncmp>
 8008f0e:	b398      	cbz	r0, 8008f78 <_strtod_l+0x1d8>
 8008f10:	2000      	movs	r0, #0
 8008f12:	4633      	mov	r3, r6
 8008f14:	463d      	mov	r5, r7
 8008f16:	9007      	str	r0, [sp, #28]
 8008f18:	4602      	mov	r2, r0
 8008f1a:	2b65      	cmp	r3, #101	; 0x65
 8008f1c:	d001      	beq.n	8008f22 <_strtod_l+0x182>
 8008f1e:	2b45      	cmp	r3, #69	; 0x45
 8008f20:	d118      	bne.n	8008f54 <_strtod_l+0x1b4>
 8008f22:	b91d      	cbnz	r5, 8008f2c <_strtod_l+0x18c>
 8008f24:	9b04      	ldr	r3, [sp, #16]
 8008f26:	4303      	orrs	r3, r0
 8008f28:	d098      	beq.n	8008e5c <_strtod_l+0xbc>
 8008f2a:	2500      	movs	r5, #0
 8008f2c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008f30:	f108 0301 	add.w	r3, r8, #1
 8008f34:	931d      	str	r3, [sp, #116]	; 0x74
 8008f36:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008f3a:	2b2b      	cmp	r3, #43	; 0x2b
 8008f3c:	d075      	beq.n	800902a <_strtod_l+0x28a>
 8008f3e:	2b2d      	cmp	r3, #45	; 0x2d
 8008f40:	d07b      	beq.n	800903a <_strtod_l+0x29a>
 8008f42:	f04f 0c00 	mov.w	ip, #0
 8008f46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008f4a:	2909      	cmp	r1, #9
 8008f4c:	f240 8082 	bls.w	8009054 <_strtod_l+0x2b4>
 8008f50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008f54:	2600      	movs	r6, #0
 8008f56:	e09d      	b.n	8009094 <_strtod_l+0x2f4>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e7c4      	b.n	8008ee6 <_strtod_l+0x146>
 8008f5c:	2f08      	cmp	r7, #8
 8008f5e:	bfd8      	it	le
 8008f60:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f62:	f100 0001 	add.w	r0, r0, #1
 8008f66:	bfda      	itte	le
 8008f68:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f6c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f6e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008f72:	3701      	adds	r7, #1
 8008f74:	901d      	str	r0, [sp, #116]	; 0x74
 8008f76:	e7bf      	b.n	8008ef8 <_strtod_l+0x158>
 8008f78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f7a:	195a      	adds	r2, r3, r5
 8008f7c:	921d      	str	r2, [sp, #116]	; 0x74
 8008f7e:	5d5b      	ldrb	r3, [r3, r5]
 8008f80:	2f00      	cmp	r7, #0
 8008f82:	d037      	beq.n	8008ff4 <_strtod_l+0x254>
 8008f84:	9007      	str	r0, [sp, #28]
 8008f86:	463d      	mov	r5, r7
 8008f88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008f8c:	2a09      	cmp	r2, #9
 8008f8e:	d912      	bls.n	8008fb6 <_strtod_l+0x216>
 8008f90:	2201      	movs	r2, #1
 8008f92:	e7c2      	b.n	8008f1a <_strtod_l+0x17a>
 8008f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	921d      	str	r2, [sp, #116]	; 0x74
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	2b30      	cmp	r3, #48	; 0x30
 8008fa0:	d0f8      	beq.n	8008f94 <_strtod_l+0x1f4>
 8008fa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008fa6:	2a08      	cmp	r2, #8
 8008fa8:	f200 84db 	bhi.w	8009962 <_strtod_l+0xbc2>
 8008fac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008fae:	9007      	str	r0, [sp, #28]
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	920a      	str	r2, [sp, #40]	; 0x28
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	3b30      	subs	r3, #48	; 0x30
 8008fb8:	f100 0201 	add.w	r2, r0, #1
 8008fbc:	d014      	beq.n	8008fe8 <_strtod_l+0x248>
 8008fbe:	9907      	ldr	r1, [sp, #28]
 8008fc0:	4411      	add	r1, r2
 8008fc2:	9107      	str	r1, [sp, #28]
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	eb00 0e05 	add.w	lr, r0, r5
 8008fca:	210a      	movs	r1, #10
 8008fcc:	4572      	cmp	r2, lr
 8008fce:	d113      	bne.n	8008ff8 <_strtod_l+0x258>
 8008fd0:	182a      	adds	r2, r5, r0
 8008fd2:	2a08      	cmp	r2, #8
 8008fd4:	f105 0501 	add.w	r5, r5, #1
 8008fd8:	4405      	add	r5, r0
 8008fda:	dc1c      	bgt.n	8009016 <_strtod_l+0x276>
 8008fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fde:	220a      	movs	r2, #10
 8008fe0:	fb02 3301 	mla	r3, r2, r1, r3
 8008fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	911d      	str	r1, [sp, #116]	; 0x74
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	e7c9      	b.n	8008f88 <_strtod_l+0x1e8>
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	e7d2      	b.n	8008f9e <_strtod_l+0x1fe>
 8008ff8:	2a08      	cmp	r2, #8
 8008ffa:	dc04      	bgt.n	8009006 <_strtod_l+0x266>
 8008ffc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ffe:	434e      	muls	r6, r1
 8009000:	9609      	str	r6, [sp, #36]	; 0x24
 8009002:	3201      	adds	r2, #1
 8009004:	e7e2      	b.n	8008fcc <_strtod_l+0x22c>
 8009006:	f102 0c01 	add.w	ip, r2, #1
 800900a:	f1bc 0f10 	cmp.w	ip, #16
 800900e:	bfd8      	it	le
 8009010:	fb01 f909 	mulle.w	r9, r1, r9
 8009014:	e7f5      	b.n	8009002 <_strtod_l+0x262>
 8009016:	2d10      	cmp	r5, #16
 8009018:	bfdc      	itt	le
 800901a:	220a      	movle	r2, #10
 800901c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009020:	e7e1      	b.n	8008fe6 <_strtod_l+0x246>
 8009022:	2300      	movs	r3, #0
 8009024:	9307      	str	r3, [sp, #28]
 8009026:	2201      	movs	r2, #1
 8009028:	e77c      	b.n	8008f24 <_strtod_l+0x184>
 800902a:	f04f 0c00 	mov.w	ip, #0
 800902e:	f108 0302 	add.w	r3, r8, #2
 8009032:	931d      	str	r3, [sp, #116]	; 0x74
 8009034:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009038:	e785      	b.n	8008f46 <_strtod_l+0x1a6>
 800903a:	f04f 0c01 	mov.w	ip, #1
 800903e:	e7f6      	b.n	800902e <_strtod_l+0x28e>
 8009040:	0800d330 	.word	0x0800d330
 8009044:	0800d0e0 	.word	0x0800d0e0
 8009048:	7ff00000 	.word	0x7ff00000
 800904c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800904e:	1c59      	adds	r1, r3, #1
 8009050:	911d      	str	r1, [sp, #116]	; 0x74
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	2b30      	cmp	r3, #48	; 0x30
 8009056:	d0f9      	beq.n	800904c <_strtod_l+0x2ac>
 8009058:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800905c:	2908      	cmp	r1, #8
 800905e:	f63f af79 	bhi.w	8008f54 <_strtod_l+0x1b4>
 8009062:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009066:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009068:	9308      	str	r3, [sp, #32]
 800906a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800906c:	1c59      	adds	r1, r3, #1
 800906e:	911d      	str	r1, [sp, #116]	; 0x74
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009076:	2e09      	cmp	r6, #9
 8009078:	d937      	bls.n	80090ea <_strtod_l+0x34a>
 800907a:	9e08      	ldr	r6, [sp, #32]
 800907c:	1b89      	subs	r1, r1, r6
 800907e:	2908      	cmp	r1, #8
 8009080:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009084:	dc02      	bgt.n	800908c <_strtod_l+0x2ec>
 8009086:	4576      	cmp	r6, lr
 8009088:	bfa8      	it	ge
 800908a:	4676      	movge	r6, lr
 800908c:	f1bc 0f00 	cmp.w	ip, #0
 8009090:	d000      	beq.n	8009094 <_strtod_l+0x2f4>
 8009092:	4276      	negs	r6, r6
 8009094:	2d00      	cmp	r5, #0
 8009096:	d14f      	bne.n	8009138 <_strtod_l+0x398>
 8009098:	9904      	ldr	r1, [sp, #16]
 800909a:	4301      	orrs	r1, r0
 800909c:	f47f aec2 	bne.w	8008e24 <_strtod_l+0x84>
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	f47f aedb 	bne.w	8008e5c <_strtod_l+0xbc>
 80090a6:	2b69      	cmp	r3, #105	; 0x69
 80090a8:	d027      	beq.n	80090fa <_strtod_l+0x35a>
 80090aa:	dc24      	bgt.n	80090f6 <_strtod_l+0x356>
 80090ac:	2b49      	cmp	r3, #73	; 0x49
 80090ae:	d024      	beq.n	80090fa <_strtod_l+0x35a>
 80090b0:	2b4e      	cmp	r3, #78	; 0x4e
 80090b2:	f47f aed3 	bne.w	8008e5c <_strtod_l+0xbc>
 80090b6:	499e      	ldr	r1, [pc, #632]	; (8009330 <_strtod_l+0x590>)
 80090b8:	a81d      	add	r0, sp, #116	; 0x74
 80090ba:	f001 fe81 	bl	800adc0 <__match>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f43f aecc 	beq.w	8008e5c <_strtod_l+0xbc>
 80090c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b28      	cmp	r3, #40	; 0x28
 80090ca:	d12d      	bne.n	8009128 <_strtod_l+0x388>
 80090cc:	4999      	ldr	r1, [pc, #612]	; (8009334 <_strtod_l+0x594>)
 80090ce:	aa20      	add	r2, sp, #128	; 0x80
 80090d0:	a81d      	add	r0, sp, #116	; 0x74
 80090d2:	f001 fe89 	bl	800ade8 <__hexnan>
 80090d6:	2805      	cmp	r0, #5
 80090d8:	d126      	bne.n	8009128 <_strtod_l+0x388>
 80090da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80090e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80090e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80090e8:	e69c      	b.n	8008e24 <_strtod_l+0x84>
 80090ea:	210a      	movs	r1, #10
 80090ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80090f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80090f4:	e7b9      	b.n	800906a <_strtod_l+0x2ca>
 80090f6:	2b6e      	cmp	r3, #110	; 0x6e
 80090f8:	e7db      	b.n	80090b2 <_strtod_l+0x312>
 80090fa:	498f      	ldr	r1, [pc, #572]	; (8009338 <_strtod_l+0x598>)
 80090fc:	a81d      	add	r0, sp, #116	; 0x74
 80090fe:	f001 fe5f 	bl	800adc0 <__match>
 8009102:	2800      	cmp	r0, #0
 8009104:	f43f aeaa 	beq.w	8008e5c <_strtod_l+0xbc>
 8009108:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800910a:	498c      	ldr	r1, [pc, #560]	; (800933c <_strtod_l+0x59c>)
 800910c:	3b01      	subs	r3, #1
 800910e:	a81d      	add	r0, sp, #116	; 0x74
 8009110:	931d      	str	r3, [sp, #116]	; 0x74
 8009112:	f001 fe55 	bl	800adc0 <__match>
 8009116:	b910      	cbnz	r0, 800911e <_strtod_l+0x37e>
 8009118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800911a:	3301      	adds	r3, #1
 800911c:	931d      	str	r3, [sp, #116]	; 0x74
 800911e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800934c <_strtod_l+0x5ac>
 8009122:	f04f 0a00 	mov.w	sl, #0
 8009126:	e67d      	b.n	8008e24 <_strtod_l+0x84>
 8009128:	4885      	ldr	r0, [pc, #532]	; (8009340 <_strtod_l+0x5a0>)
 800912a:	f003 f939 	bl	800c3a0 <nan>
 800912e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009132:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009136:	e675      	b.n	8008e24 <_strtod_l+0x84>
 8009138:	9b07      	ldr	r3, [sp, #28]
 800913a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800913c:	1af3      	subs	r3, r6, r3
 800913e:	2f00      	cmp	r7, #0
 8009140:	bf08      	it	eq
 8009142:	462f      	moveq	r7, r5
 8009144:	2d10      	cmp	r5, #16
 8009146:	9308      	str	r3, [sp, #32]
 8009148:	46a8      	mov	r8, r5
 800914a:	bfa8      	it	ge
 800914c:	f04f 0810 	movge.w	r8, #16
 8009150:	f7f7 f9f8 	bl	8000544 <__aeabi_ui2d>
 8009154:	2d09      	cmp	r5, #9
 8009156:	4682      	mov	sl, r0
 8009158:	468b      	mov	fp, r1
 800915a:	dd13      	ble.n	8009184 <_strtod_l+0x3e4>
 800915c:	4b79      	ldr	r3, [pc, #484]	; (8009344 <_strtod_l+0x5a4>)
 800915e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009162:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009166:	f7f7 fa67 	bl	8000638 <__aeabi_dmul>
 800916a:	4682      	mov	sl, r0
 800916c:	4648      	mov	r0, r9
 800916e:	468b      	mov	fp, r1
 8009170:	f7f7 f9e8 	bl	8000544 <__aeabi_ui2d>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4650      	mov	r0, sl
 800917a:	4659      	mov	r1, fp
 800917c:	f7f7 f8a6 	bl	80002cc <__adddf3>
 8009180:	4682      	mov	sl, r0
 8009182:	468b      	mov	fp, r1
 8009184:	2d0f      	cmp	r5, #15
 8009186:	dc38      	bgt.n	80091fa <_strtod_l+0x45a>
 8009188:	9b08      	ldr	r3, [sp, #32]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f43f ae4a 	beq.w	8008e24 <_strtod_l+0x84>
 8009190:	dd24      	ble.n	80091dc <_strtod_l+0x43c>
 8009192:	2b16      	cmp	r3, #22
 8009194:	dc0b      	bgt.n	80091ae <_strtod_l+0x40e>
 8009196:	4d6b      	ldr	r5, [pc, #428]	; (8009344 <_strtod_l+0x5a4>)
 8009198:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800919c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80091a0:	4652      	mov	r2, sl
 80091a2:	465b      	mov	r3, fp
 80091a4:	f7f7 fa48 	bl	8000638 <__aeabi_dmul>
 80091a8:	4682      	mov	sl, r0
 80091aa:	468b      	mov	fp, r1
 80091ac:	e63a      	b.n	8008e24 <_strtod_l+0x84>
 80091ae:	9a08      	ldr	r2, [sp, #32]
 80091b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80091b4:	4293      	cmp	r3, r2
 80091b6:	db20      	blt.n	80091fa <_strtod_l+0x45a>
 80091b8:	4c62      	ldr	r4, [pc, #392]	; (8009344 <_strtod_l+0x5a4>)
 80091ba:	f1c5 050f 	rsb	r5, r5, #15
 80091be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091c2:	4652      	mov	r2, sl
 80091c4:	465b      	mov	r3, fp
 80091c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ca:	f7f7 fa35 	bl	8000638 <__aeabi_dmul>
 80091ce:	9b08      	ldr	r3, [sp, #32]
 80091d0:	1b5d      	subs	r5, r3, r5
 80091d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091da:	e7e3      	b.n	80091a4 <_strtod_l+0x404>
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	3316      	adds	r3, #22
 80091e0:	db0b      	blt.n	80091fa <_strtod_l+0x45a>
 80091e2:	9b07      	ldr	r3, [sp, #28]
 80091e4:	4a57      	ldr	r2, [pc, #348]	; (8009344 <_strtod_l+0x5a4>)
 80091e6:	1b9e      	subs	r6, r3, r6
 80091e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80091ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	f7f7 fb4a 	bl	800088c <__aeabi_ddiv>
 80091f8:	e7d6      	b.n	80091a8 <_strtod_l+0x408>
 80091fa:	9b08      	ldr	r3, [sp, #32]
 80091fc:	eba5 0808 	sub.w	r8, r5, r8
 8009200:	4498      	add	r8, r3
 8009202:	f1b8 0f00 	cmp.w	r8, #0
 8009206:	dd71      	ble.n	80092ec <_strtod_l+0x54c>
 8009208:	f018 030f 	ands.w	r3, r8, #15
 800920c:	d00a      	beq.n	8009224 <_strtod_l+0x484>
 800920e:	494d      	ldr	r1, [pc, #308]	; (8009344 <_strtod_l+0x5a4>)
 8009210:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009214:	4652      	mov	r2, sl
 8009216:	465b      	mov	r3, fp
 8009218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800921c:	f7f7 fa0c 	bl	8000638 <__aeabi_dmul>
 8009220:	4682      	mov	sl, r0
 8009222:	468b      	mov	fp, r1
 8009224:	f038 080f 	bics.w	r8, r8, #15
 8009228:	d04d      	beq.n	80092c6 <_strtod_l+0x526>
 800922a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800922e:	dd22      	ble.n	8009276 <_strtod_l+0x4d6>
 8009230:	2500      	movs	r5, #0
 8009232:	462e      	mov	r6, r5
 8009234:	9509      	str	r5, [sp, #36]	; 0x24
 8009236:	9507      	str	r5, [sp, #28]
 8009238:	2322      	movs	r3, #34	; 0x22
 800923a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800934c <_strtod_l+0x5ac>
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	f04f 0a00 	mov.w	sl, #0
 8009244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009246:	2b00      	cmp	r3, #0
 8009248:	f43f adec 	beq.w	8008e24 <_strtod_l+0x84>
 800924c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800924e:	4620      	mov	r0, r4
 8009250:	f001 fee4 	bl	800b01c <_Bfree>
 8009254:	9907      	ldr	r1, [sp, #28]
 8009256:	4620      	mov	r0, r4
 8009258:	f001 fee0 	bl	800b01c <_Bfree>
 800925c:	4631      	mov	r1, r6
 800925e:	4620      	mov	r0, r4
 8009260:	f001 fedc 	bl	800b01c <_Bfree>
 8009264:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009266:	4620      	mov	r0, r4
 8009268:	f001 fed8 	bl	800b01c <_Bfree>
 800926c:	4629      	mov	r1, r5
 800926e:	4620      	mov	r0, r4
 8009270:	f001 fed4 	bl	800b01c <_Bfree>
 8009274:	e5d6      	b.n	8008e24 <_strtod_l+0x84>
 8009276:	2300      	movs	r3, #0
 8009278:	ea4f 1828 	mov.w	r8, r8, asr #4
 800927c:	4650      	mov	r0, sl
 800927e:	4659      	mov	r1, fp
 8009280:	4699      	mov	r9, r3
 8009282:	f1b8 0f01 	cmp.w	r8, #1
 8009286:	dc21      	bgt.n	80092cc <_strtod_l+0x52c>
 8009288:	b10b      	cbz	r3, 800928e <_strtod_l+0x4ee>
 800928a:	4682      	mov	sl, r0
 800928c:	468b      	mov	fp, r1
 800928e:	4b2e      	ldr	r3, [pc, #184]	; (8009348 <_strtod_l+0x5a8>)
 8009290:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009294:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009298:	4652      	mov	r2, sl
 800929a:	465b      	mov	r3, fp
 800929c:	e9d9 0100 	ldrd	r0, r1, [r9]
 80092a0:	f7f7 f9ca 	bl	8000638 <__aeabi_dmul>
 80092a4:	4b29      	ldr	r3, [pc, #164]	; (800934c <_strtod_l+0x5ac>)
 80092a6:	460a      	mov	r2, r1
 80092a8:	400b      	ands	r3, r1
 80092aa:	4929      	ldr	r1, [pc, #164]	; (8009350 <_strtod_l+0x5b0>)
 80092ac:	428b      	cmp	r3, r1
 80092ae:	4682      	mov	sl, r0
 80092b0:	d8be      	bhi.n	8009230 <_strtod_l+0x490>
 80092b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092b6:	428b      	cmp	r3, r1
 80092b8:	bf86      	itte	hi
 80092ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009354 <_strtod_l+0x5b4>
 80092be:	f04f 3aff 	movhi.w	sl, #4294967295
 80092c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80092c6:	2300      	movs	r3, #0
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	e081      	b.n	80093d0 <_strtod_l+0x630>
 80092cc:	f018 0f01 	tst.w	r8, #1
 80092d0:	d007      	beq.n	80092e2 <_strtod_l+0x542>
 80092d2:	4b1d      	ldr	r3, [pc, #116]	; (8009348 <_strtod_l+0x5a8>)
 80092d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f7f7 f9ac 	bl	8000638 <__aeabi_dmul>
 80092e0:	2301      	movs	r3, #1
 80092e2:	f109 0901 	add.w	r9, r9, #1
 80092e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092ea:	e7ca      	b.n	8009282 <_strtod_l+0x4e2>
 80092ec:	d0eb      	beq.n	80092c6 <_strtod_l+0x526>
 80092ee:	f1c8 0800 	rsb	r8, r8, #0
 80092f2:	f018 020f 	ands.w	r2, r8, #15
 80092f6:	d00a      	beq.n	800930e <_strtod_l+0x56e>
 80092f8:	4b12      	ldr	r3, [pc, #72]	; (8009344 <_strtod_l+0x5a4>)
 80092fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092fe:	4650      	mov	r0, sl
 8009300:	4659      	mov	r1, fp
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	f7f7 fac1 	bl	800088c <__aeabi_ddiv>
 800930a:	4682      	mov	sl, r0
 800930c:	468b      	mov	fp, r1
 800930e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009312:	d0d8      	beq.n	80092c6 <_strtod_l+0x526>
 8009314:	f1b8 0f1f 	cmp.w	r8, #31
 8009318:	dd1e      	ble.n	8009358 <_strtod_l+0x5b8>
 800931a:	2500      	movs	r5, #0
 800931c:	462e      	mov	r6, r5
 800931e:	9509      	str	r5, [sp, #36]	; 0x24
 8009320:	9507      	str	r5, [sp, #28]
 8009322:	2322      	movs	r3, #34	; 0x22
 8009324:	f04f 0a00 	mov.w	sl, #0
 8009328:	f04f 0b00 	mov.w	fp, #0
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	e789      	b.n	8009244 <_strtod_l+0x4a4>
 8009330:	0800d0b5 	.word	0x0800d0b5
 8009334:	0800d0f4 	.word	0x0800d0f4
 8009338:	0800d0ad 	.word	0x0800d0ad
 800933c:	0800d234 	.word	0x0800d234
 8009340:	0800d50b 	.word	0x0800d50b
 8009344:	0800d3d0 	.word	0x0800d3d0
 8009348:	0800d3a8 	.word	0x0800d3a8
 800934c:	7ff00000 	.word	0x7ff00000
 8009350:	7ca00000 	.word	0x7ca00000
 8009354:	7fefffff 	.word	0x7fefffff
 8009358:	f018 0310 	ands.w	r3, r8, #16
 800935c:	bf18      	it	ne
 800935e:	236a      	movne	r3, #106	; 0x6a
 8009360:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009718 <_strtod_l+0x978>
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	4650      	mov	r0, sl
 8009368:	4659      	mov	r1, fp
 800936a:	2300      	movs	r3, #0
 800936c:	f018 0f01 	tst.w	r8, #1
 8009370:	d004      	beq.n	800937c <_strtod_l+0x5dc>
 8009372:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009376:	f7f7 f95f 	bl	8000638 <__aeabi_dmul>
 800937a:	2301      	movs	r3, #1
 800937c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009380:	f109 0908 	add.w	r9, r9, #8
 8009384:	d1f2      	bne.n	800936c <_strtod_l+0x5cc>
 8009386:	b10b      	cbz	r3, 800938c <_strtod_l+0x5ec>
 8009388:	4682      	mov	sl, r0
 800938a:	468b      	mov	fp, r1
 800938c:	9b04      	ldr	r3, [sp, #16]
 800938e:	b1bb      	cbz	r3, 80093c0 <_strtod_l+0x620>
 8009390:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009394:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009398:	2b00      	cmp	r3, #0
 800939a:	4659      	mov	r1, fp
 800939c:	dd10      	ble.n	80093c0 <_strtod_l+0x620>
 800939e:	2b1f      	cmp	r3, #31
 80093a0:	f340 8128 	ble.w	80095f4 <_strtod_l+0x854>
 80093a4:	2b34      	cmp	r3, #52	; 0x34
 80093a6:	bfde      	ittt	le
 80093a8:	3b20      	suble	r3, #32
 80093aa:	f04f 32ff 	movle.w	r2, #4294967295
 80093ae:	fa02 f303 	lslle.w	r3, r2, r3
 80093b2:	f04f 0a00 	mov.w	sl, #0
 80093b6:	bfcc      	ite	gt
 80093b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80093bc:	ea03 0b01 	andle.w	fp, r3, r1
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	4650      	mov	r0, sl
 80093c6:	4659      	mov	r1, fp
 80093c8:	f7f7 fb9e 	bl	8000b08 <__aeabi_dcmpeq>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d1a4      	bne.n	800931a <_strtod_l+0x57a>
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093d6:	462b      	mov	r3, r5
 80093d8:	463a      	mov	r2, r7
 80093da:	4620      	mov	r0, r4
 80093dc:	f001 fe8a 	bl	800b0f4 <__s2b>
 80093e0:	9009      	str	r0, [sp, #36]	; 0x24
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f af24 	beq.w	8009230 <_strtod_l+0x490>
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	1b9e      	subs	r6, r3, r6
 80093ec:	9b08      	ldr	r3, [sp, #32]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfb4      	ite	lt
 80093f2:	4633      	movlt	r3, r6
 80093f4:	2300      	movge	r3, #0
 80093f6:	9310      	str	r3, [sp, #64]	; 0x40
 80093f8:	9b08      	ldr	r3, [sp, #32]
 80093fa:	2500      	movs	r5, #0
 80093fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009400:	9318      	str	r3, [sp, #96]	; 0x60
 8009402:	462e      	mov	r6, r5
 8009404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009406:	4620      	mov	r0, r4
 8009408:	6859      	ldr	r1, [r3, #4]
 800940a:	f001 fdc7 	bl	800af9c <_Balloc>
 800940e:	9007      	str	r0, [sp, #28]
 8009410:	2800      	cmp	r0, #0
 8009412:	f43f af11 	beq.w	8009238 <_strtod_l+0x498>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	691a      	ldr	r2, [r3, #16]
 800941a:	3202      	adds	r2, #2
 800941c:	f103 010c 	add.w	r1, r3, #12
 8009420:	0092      	lsls	r2, r2, #2
 8009422:	300c      	adds	r0, #12
 8009424:	f001 fdac 	bl	800af80 <memcpy>
 8009428:	ec4b ab10 	vmov	d0, sl, fp
 800942c:	aa20      	add	r2, sp, #128	; 0x80
 800942e:	a91f      	add	r1, sp, #124	; 0x7c
 8009430:	4620      	mov	r0, r4
 8009432:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009436:	f002 f999 	bl	800b76c <__d2b>
 800943a:	901e      	str	r0, [sp, #120]	; 0x78
 800943c:	2800      	cmp	r0, #0
 800943e:	f43f aefb 	beq.w	8009238 <_strtod_l+0x498>
 8009442:	2101      	movs	r1, #1
 8009444:	4620      	mov	r0, r4
 8009446:	f001 feef 	bl	800b228 <__i2b>
 800944a:	4606      	mov	r6, r0
 800944c:	2800      	cmp	r0, #0
 800944e:	f43f aef3 	beq.w	8009238 <_strtod_l+0x498>
 8009452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009454:	9904      	ldr	r1, [sp, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	bfab      	itete	ge
 800945a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800945c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800945e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009460:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009464:	bfac      	ite	ge
 8009466:	eb03 0902 	addge.w	r9, r3, r2
 800946a:	1ad7      	sublt	r7, r2, r3
 800946c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800946e:	eba3 0801 	sub.w	r8, r3, r1
 8009472:	4490      	add	r8, r2
 8009474:	4ba3      	ldr	r3, [pc, #652]	; (8009704 <_strtod_l+0x964>)
 8009476:	f108 38ff 	add.w	r8, r8, #4294967295
 800947a:	4598      	cmp	r8, r3
 800947c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009480:	f280 80cc 	bge.w	800961c <_strtod_l+0x87c>
 8009484:	eba3 0308 	sub.w	r3, r3, r8
 8009488:	2b1f      	cmp	r3, #31
 800948a:	eba2 0203 	sub.w	r2, r2, r3
 800948e:	f04f 0101 	mov.w	r1, #1
 8009492:	f300 80b6 	bgt.w	8009602 <_strtod_l+0x862>
 8009496:	fa01 f303 	lsl.w	r3, r1, r3
 800949a:	9311      	str	r3, [sp, #68]	; 0x44
 800949c:	2300      	movs	r3, #0
 800949e:	930c      	str	r3, [sp, #48]	; 0x30
 80094a0:	eb09 0802 	add.w	r8, r9, r2
 80094a4:	9b04      	ldr	r3, [sp, #16]
 80094a6:	45c1      	cmp	r9, r8
 80094a8:	4417      	add	r7, r2
 80094aa:	441f      	add	r7, r3
 80094ac:	464b      	mov	r3, r9
 80094ae:	bfa8      	it	ge
 80094b0:	4643      	movge	r3, r8
 80094b2:	42bb      	cmp	r3, r7
 80094b4:	bfa8      	it	ge
 80094b6:	463b      	movge	r3, r7
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfc2      	ittt	gt
 80094bc:	eba8 0803 	subgt.w	r8, r8, r3
 80094c0:	1aff      	subgt	r7, r7, r3
 80094c2:	eba9 0903 	subgt.w	r9, r9, r3
 80094c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dd17      	ble.n	80094fc <_strtod_l+0x75c>
 80094cc:	4631      	mov	r1, r6
 80094ce:	461a      	mov	r2, r3
 80094d0:	4620      	mov	r0, r4
 80094d2:	f001 ff65 	bl	800b3a0 <__pow5mult>
 80094d6:	4606      	mov	r6, r0
 80094d8:	2800      	cmp	r0, #0
 80094da:	f43f aead 	beq.w	8009238 <_strtod_l+0x498>
 80094de:	4601      	mov	r1, r0
 80094e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094e2:	4620      	mov	r0, r4
 80094e4:	f001 feb6 	bl	800b254 <__multiply>
 80094e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80094ea:	2800      	cmp	r0, #0
 80094ec:	f43f aea4 	beq.w	8009238 <_strtod_l+0x498>
 80094f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094f2:	4620      	mov	r0, r4
 80094f4:	f001 fd92 	bl	800b01c <_Bfree>
 80094f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094fa:	931e      	str	r3, [sp, #120]	; 0x78
 80094fc:	f1b8 0f00 	cmp.w	r8, #0
 8009500:	f300 8091 	bgt.w	8009626 <_strtod_l+0x886>
 8009504:	9b08      	ldr	r3, [sp, #32]
 8009506:	2b00      	cmp	r3, #0
 8009508:	dd08      	ble.n	800951c <_strtod_l+0x77c>
 800950a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800950c:	9907      	ldr	r1, [sp, #28]
 800950e:	4620      	mov	r0, r4
 8009510:	f001 ff46 	bl	800b3a0 <__pow5mult>
 8009514:	9007      	str	r0, [sp, #28]
 8009516:	2800      	cmp	r0, #0
 8009518:	f43f ae8e 	beq.w	8009238 <_strtod_l+0x498>
 800951c:	2f00      	cmp	r7, #0
 800951e:	dd08      	ble.n	8009532 <_strtod_l+0x792>
 8009520:	9907      	ldr	r1, [sp, #28]
 8009522:	463a      	mov	r2, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f001 ff95 	bl	800b454 <__lshift>
 800952a:	9007      	str	r0, [sp, #28]
 800952c:	2800      	cmp	r0, #0
 800952e:	f43f ae83 	beq.w	8009238 <_strtod_l+0x498>
 8009532:	f1b9 0f00 	cmp.w	r9, #0
 8009536:	dd08      	ble.n	800954a <_strtod_l+0x7aa>
 8009538:	4631      	mov	r1, r6
 800953a:	464a      	mov	r2, r9
 800953c:	4620      	mov	r0, r4
 800953e:	f001 ff89 	bl	800b454 <__lshift>
 8009542:	4606      	mov	r6, r0
 8009544:	2800      	cmp	r0, #0
 8009546:	f43f ae77 	beq.w	8009238 <_strtod_l+0x498>
 800954a:	9a07      	ldr	r2, [sp, #28]
 800954c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800954e:	4620      	mov	r0, r4
 8009550:	f002 f808 	bl	800b564 <__mdiff>
 8009554:	4605      	mov	r5, r0
 8009556:	2800      	cmp	r0, #0
 8009558:	f43f ae6e 	beq.w	8009238 <_strtod_l+0x498>
 800955c:	68c3      	ldr	r3, [r0, #12]
 800955e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009560:	2300      	movs	r3, #0
 8009562:	60c3      	str	r3, [r0, #12]
 8009564:	4631      	mov	r1, r6
 8009566:	f001 ffe1 	bl	800b52c <__mcmp>
 800956a:	2800      	cmp	r0, #0
 800956c:	da65      	bge.n	800963a <_strtod_l+0x89a>
 800956e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009570:	ea53 030a 	orrs.w	r3, r3, sl
 8009574:	f040 8087 	bne.w	8009686 <_strtod_l+0x8e6>
 8009578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 8082 	bne.w	8009686 <_strtod_l+0x8e6>
 8009582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009586:	0d1b      	lsrs	r3, r3, #20
 8009588:	051b      	lsls	r3, r3, #20
 800958a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800958e:	d97a      	bls.n	8009686 <_strtod_l+0x8e6>
 8009590:	696b      	ldr	r3, [r5, #20]
 8009592:	b913      	cbnz	r3, 800959a <_strtod_l+0x7fa>
 8009594:	692b      	ldr	r3, [r5, #16]
 8009596:	2b01      	cmp	r3, #1
 8009598:	dd75      	ble.n	8009686 <_strtod_l+0x8e6>
 800959a:	4629      	mov	r1, r5
 800959c:	2201      	movs	r2, #1
 800959e:	4620      	mov	r0, r4
 80095a0:	f001 ff58 	bl	800b454 <__lshift>
 80095a4:	4631      	mov	r1, r6
 80095a6:	4605      	mov	r5, r0
 80095a8:	f001 ffc0 	bl	800b52c <__mcmp>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	dd6a      	ble.n	8009686 <_strtod_l+0x8e6>
 80095b0:	9904      	ldr	r1, [sp, #16]
 80095b2:	4a55      	ldr	r2, [pc, #340]	; (8009708 <_strtod_l+0x968>)
 80095b4:	465b      	mov	r3, fp
 80095b6:	2900      	cmp	r1, #0
 80095b8:	f000 8085 	beq.w	80096c6 <_strtod_l+0x926>
 80095bc:	ea02 010b 	and.w	r1, r2, fp
 80095c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80095c4:	dc7f      	bgt.n	80096c6 <_strtod_l+0x926>
 80095c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80095ca:	f77f aeaa 	ble.w	8009322 <_strtod_l+0x582>
 80095ce:	4a4f      	ldr	r2, [pc, #316]	; (800970c <_strtod_l+0x96c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80095d6:	4650      	mov	r0, sl
 80095d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80095dc:	4659      	mov	r1, fp
 80095de:	f7f7 f82b 	bl	8000638 <__aeabi_dmul>
 80095e2:	460b      	mov	r3, r1
 80095e4:	4303      	orrs	r3, r0
 80095e6:	bf08      	it	eq
 80095e8:	2322      	moveq	r3, #34	; 0x22
 80095ea:	4682      	mov	sl, r0
 80095ec:	468b      	mov	fp, r1
 80095ee:	bf08      	it	eq
 80095f0:	6023      	streq	r3, [r4, #0]
 80095f2:	e62b      	b.n	800924c <_strtod_l+0x4ac>
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	ea03 0a0a 	and.w	sl, r3, sl
 8009600:	e6de      	b.n	80093c0 <_strtod_l+0x620>
 8009602:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009606:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800960a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800960e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009612:	fa01 f308 	lsl.w	r3, r1, r8
 8009616:	930c      	str	r3, [sp, #48]	; 0x30
 8009618:	9111      	str	r1, [sp, #68]	; 0x44
 800961a:	e741      	b.n	80094a0 <_strtod_l+0x700>
 800961c:	2300      	movs	r3, #0
 800961e:	930c      	str	r3, [sp, #48]	; 0x30
 8009620:	2301      	movs	r3, #1
 8009622:	9311      	str	r3, [sp, #68]	; 0x44
 8009624:	e73c      	b.n	80094a0 <_strtod_l+0x700>
 8009626:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009628:	4642      	mov	r2, r8
 800962a:	4620      	mov	r0, r4
 800962c:	f001 ff12 	bl	800b454 <__lshift>
 8009630:	901e      	str	r0, [sp, #120]	; 0x78
 8009632:	2800      	cmp	r0, #0
 8009634:	f47f af66 	bne.w	8009504 <_strtod_l+0x764>
 8009638:	e5fe      	b.n	8009238 <_strtod_l+0x498>
 800963a:	465f      	mov	r7, fp
 800963c:	d16e      	bne.n	800971c <_strtod_l+0x97c>
 800963e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009640:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009644:	b342      	cbz	r2, 8009698 <_strtod_l+0x8f8>
 8009646:	4a32      	ldr	r2, [pc, #200]	; (8009710 <_strtod_l+0x970>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d128      	bne.n	800969e <_strtod_l+0x8fe>
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	4650      	mov	r0, sl
 8009650:	b1eb      	cbz	r3, 800968e <_strtod_l+0x8ee>
 8009652:	4a2d      	ldr	r2, [pc, #180]	; (8009708 <_strtod_l+0x968>)
 8009654:	403a      	ands	r2, r7
 8009656:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800965a:	f04f 31ff 	mov.w	r1, #4294967295
 800965e:	d819      	bhi.n	8009694 <_strtod_l+0x8f4>
 8009660:	0d12      	lsrs	r2, r2, #20
 8009662:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009666:	fa01 f303 	lsl.w	r3, r1, r3
 800966a:	4298      	cmp	r0, r3
 800966c:	d117      	bne.n	800969e <_strtod_l+0x8fe>
 800966e:	4b29      	ldr	r3, [pc, #164]	; (8009714 <_strtod_l+0x974>)
 8009670:	429f      	cmp	r7, r3
 8009672:	d102      	bne.n	800967a <_strtod_l+0x8da>
 8009674:	3001      	adds	r0, #1
 8009676:	f43f addf 	beq.w	8009238 <_strtod_l+0x498>
 800967a:	4b23      	ldr	r3, [pc, #140]	; (8009708 <_strtod_l+0x968>)
 800967c:	403b      	ands	r3, r7
 800967e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009682:	f04f 0a00 	mov.w	sl, #0
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1a0      	bne.n	80095ce <_strtod_l+0x82e>
 800968c:	e5de      	b.n	800924c <_strtod_l+0x4ac>
 800968e:	f04f 33ff 	mov.w	r3, #4294967295
 8009692:	e7ea      	b.n	800966a <_strtod_l+0x8ca>
 8009694:	460b      	mov	r3, r1
 8009696:	e7e8      	b.n	800966a <_strtod_l+0x8ca>
 8009698:	ea53 030a 	orrs.w	r3, r3, sl
 800969c:	d088      	beq.n	80095b0 <_strtod_l+0x810>
 800969e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a0:	b1db      	cbz	r3, 80096da <_strtod_l+0x93a>
 80096a2:	423b      	tst	r3, r7
 80096a4:	d0ef      	beq.n	8009686 <_strtod_l+0x8e6>
 80096a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096a8:	9a04      	ldr	r2, [sp, #16]
 80096aa:	4650      	mov	r0, sl
 80096ac:	4659      	mov	r1, fp
 80096ae:	b1c3      	cbz	r3, 80096e2 <_strtod_l+0x942>
 80096b0:	f7ff fb59 	bl	8008d66 <sulp>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096bc:	f7f6 fe06 	bl	80002cc <__adddf3>
 80096c0:	4682      	mov	sl, r0
 80096c2:	468b      	mov	fp, r1
 80096c4:	e7df      	b.n	8009686 <_strtod_l+0x8e6>
 80096c6:	4013      	ands	r3, r2
 80096c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80096d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80096d4:	f04f 3aff 	mov.w	sl, #4294967295
 80096d8:	e7d5      	b.n	8009686 <_strtod_l+0x8e6>
 80096da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096dc:	ea13 0f0a 	tst.w	r3, sl
 80096e0:	e7e0      	b.n	80096a4 <_strtod_l+0x904>
 80096e2:	f7ff fb40 	bl	8008d66 <sulp>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096ee:	f7f6 fdeb 	bl	80002c8 <__aeabi_dsub>
 80096f2:	2200      	movs	r2, #0
 80096f4:	2300      	movs	r3, #0
 80096f6:	4682      	mov	sl, r0
 80096f8:	468b      	mov	fp, r1
 80096fa:	f7f7 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d0c1      	beq.n	8009686 <_strtod_l+0x8e6>
 8009702:	e60e      	b.n	8009322 <_strtod_l+0x582>
 8009704:	fffffc02 	.word	0xfffffc02
 8009708:	7ff00000 	.word	0x7ff00000
 800970c:	39500000 	.word	0x39500000
 8009710:	000fffff 	.word	0x000fffff
 8009714:	7fefffff 	.word	0x7fefffff
 8009718:	0800d108 	.word	0x0800d108
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	f002 f880 	bl	800b824 <__ratio>
 8009724:	ec59 8b10 	vmov	r8, r9, d0
 8009728:	ee10 0a10 	vmov	r0, s0
 800972c:	2200      	movs	r2, #0
 800972e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009732:	4649      	mov	r1, r9
 8009734:	f7f7 f9fc 	bl	8000b30 <__aeabi_dcmple>
 8009738:	2800      	cmp	r0, #0
 800973a:	d07c      	beq.n	8009836 <_strtod_l+0xa96>
 800973c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d04c      	beq.n	80097dc <_strtod_l+0xa3c>
 8009742:	4b95      	ldr	r3, [pc, #596]	; (8009998 <_strtod_l+0xbf8>)
 8009744:	2200      	movs	r2, #0
 8009746:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800974a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009998 <_strtod_l+0xbf8>
 800974e:	f04f 0800 	mov.w	r8, #0
 8009752:	4b92      	ldr	r3, [pc, #584]	; (800999c <_strtod_l+0xbfc>)
 8009754:	403b      	ands	r3, r7
 8009756:	9311      	str	r3, [sp, #68]	; 0x44
 8009758:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800975a:	4b91      	ldr	r3, [pc, #580]	; (80099a0 <_strtod_l+0xc00>)
 800975c:	429a      	cmp	r2, r3
 800975e:	f040 80b2 	bne.w	80098c6 <_strtod_l+0xb26>
 8009762:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800976a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800976e:	ec4b ab10 	vmov	d0, sl, fp
 8009772:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009776:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800977a:	f001 ff7b 	bl	800b674 <__ulp>
 800977e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009782:	ec53 2b10 	vmov	r2, r3, d0
 8009786:	f7f6 ff57 	bl	8000638 <__aeabi_dmul>
 800978a:	4652      	mov	r2, sl
 800978c:	465b      	mov	r3, fp
 800978e:	f7f6 fd9d 	bl	80002cc <__adddf3>
 8009792:	460b      	mov	r3, r1
 8009794:	4981      	ldr	r1, [pc, #516]	; (800999c <_strtod_l+0xbfc>)
 8009796:	4a83      	ldr	r2, [pc, #524]	; (80099a4 <_strtod_l+0xc04>)
 8009798:	4019      	ands	r1, r3
 800979a:	4291      	cmp	r1, r2
 800979c:	4682      	mov	sl, r0
 800979e:	d95e      	bls.n	800985e <_strtod_l+0xabe>
 80097a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d103      	bne.n	80097b2 <_strtod_l+0xa12>
 80097aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ac:	3301      	adds	r3, #1
 80097ae:	f43f ad43 	beq.w	8009238 <_strtod_l+0x498>
 80097b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80099b0 <_strtod_l+0xc10>
 80097b6:	f04f 3aff 	mov.w	sl, #4294967295
 80097ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80097bc:	4620      	mov	r0, r4
 80097be:	f001 fc2d 	bl	800b01c <_Bfree>
 80097c2:	9907      	ldr	r1, [sp, #28]
 80097c4:	4620      	mov	r0, r4
 80097c6:	f001 fc29 	bl	800b01c <_Bfree>
 80097ca:	4631      	mov	r1, r6
 80097cc:	4620      	mov	r0, r4
 80097ce:	f001 fc25 	bl	800b01c <_Bfree>
 80097d2:	4629      	mov	r1, r5
 80097d4:	4620      	mov	r0, r4
 80097d6:	f001 fc21 	bl	800b01c <_Bfree>
 80097da:	e613      	b.n	8009404 <_strtod_l+0x664>
 80097dc:	f1ba 0f00 	cmp.w	sl, #0
 80097e0:	d11b      	bne.n	800981a <_strtod_l+0xa7a>
 80097e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097e6:	b9f3      	cbnz	r3, 8009826 <_strtod_l+0xa86>
 80097e8:	4b6b      	ldr	r3, [pc, #428]	; (8009998 <_strtod_l+0xbf8>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	4640      	mov	r0, r8
 80097ee:	4649      	mov	r1, r9
 80097f0:	f7f7 f994 	bl	8000b1c <__aeabi_dcmplt>
 80097f4:	b9d0      	cbnz	r0, 800982c <_strtod_l+0xa8c>
 80097f6:	4640      	mov	r0, r8
 80097f8:	4649      	mov	r1, r9
 80097fa:	4b6b      	ldr	r3, [pc, #428]	; (80099a8 <_strtod_l+0xc08>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	f7f6 ff1b 	bl	8000638 <__aeabi_dmul>
 8009802:	4680      	mov	r8, r0
 8009804:	4689      	mov	r9, r1
 8009806:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800980a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800980e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009810:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009814:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009818:	e79b      	b.n	8009752 <_strtod_l+0x9b2>
 800981a:	f1ba 0f01 	cmp.w	sl, #1
 800981e:	d102      	bne.n	8009826 <_strtod_l+0xa86>
 8009820:	2f00      	cmp	r7, #0
 8009822:	f43f ad7e 	beq.w	8009322 <_strtod_l+0x582>
 8009826:	4b61      	ldr	r3, [pc, #388]	; (80099ac <_strtod_l+0xc0c>)
 8009828:	2200      	movs	r2, #0
 800982a:	e78c      	b.n	8009746 <_strtod_l+0x9a6>
 800982c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80099a8 <_strtod_l+0xc08>
 8009830:	f04f 0800 	mov.w	r8, #0
 8009834:	e7e7      	b.n	8009806 <_strtod_l+0xa66>
 8009836:	4b5c      	ldr	r3, [pc, #368]	; (80099a8 <_strtod_l+0xc08>)
 8009838:	4640      	mov	r0, r8
 800983a:	4649      	mov	r1, r9
 800983c:	2200      	movs	r2, #0
 800983e:	f7f6 fefb 	bl	8000638 <__aeabi_dmul>
 8009842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009844:	4680      	mov	r8, r0
 8009846:	4689      	mov	r9, r1
 8009848:	b933      	cbnz	r3, 8009858 <_strtod_l+0xab8>
 800984a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800984e:	9012      	str	r0, [sp, #72]	; 0x48
 8009850:	9313      	str	r3, [sp, #76]	; 0x4c
 8009852:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009856:	e7dd      	b.n	8009814 <_strtod_l+0xa74>
 8009858:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800985c:	e7f9      	b.n	8009852 <_strtod_l+0xab2>
 800985e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1a8      	bne.n	80097ba <_strtod_l+0xa1a>
 8009868:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800986c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800986e:	0d1b      	lsrs	r3, r3, #20
 8009870:	051b      	lsls	r3, r3, #20
 8009872:	429a      	cmp	r2, r3
 8009874:	d1a1      	bne.n	80097ba <_strtod_l+0xa1a>
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f7 fa3d 	bl	8000cf8 <__aeabi_d2lz>
 800987e:	f7f6 fead 	bl	80005dc <__aeabi_l2d>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f6 fd1d 	bl	80002c8 <__aeabi_dsub>
 800988e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009890:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009894:	ea43 030a 	orr.w	r3, r3, sl
 8009898:	4313      	orrs	r3, r2
 800989a:	4680      	mov	r8, r0
 800989c:	4689      	mov	r9, r1
 800989e:	d053      	beq.n	8009948 <_strtod_l+0xba8>
 80098a0:	a335      	add	r3, pc, #212	; (adr r3, 8009978 <_strtod_l+0xbd8>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f7 f939 	bl	8000b1c <__aeabi_dcmplt>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f47f acce 	bne.w	800924c <_strtod_l+0x4ac>
 80098b0:	a333      	add	r3, pc, #204	; (adr r3, 8009980 <_strtod_l+0xbe0>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	4640      	mov	r0, r8
 80098b8:	4649      	mov	r1, r9
 80098ba:	f7f7 f94d 	bl	8000b58 <__aeabi_dcmpgt>
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f af7b 	beq.w	80097ba <_strtod_l+0xa1a>
 80098c4:	e4c2      	b.n	800924c <_strtod_l+0x4ac>
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	b333      	cbz	r3, 8009918 <_strtod_l+0xb78>
 80098ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098d0:	d822      	bhi.n	8009918 <_strtod_l+0xb78>
 80098d2:	a32d      	add	r3, pc, #180	; (adr r3, 8009988 <_strtod_l+0xbe8>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	4640      	mov	r0, r8
 80098da:	4649      	mov	r1, r9
 80098dc:	f7f7 f928 	bl	8000b30 <__aeabi_dcmple>
 80098e0:	b1a0      	cbz	r0, 800990c <_strtod_l+0xb6c>
 80098e2:	4649      	mov	r1, r9
 80098e4:	4640      	mov	r0, r8
 80098e6:	f7f7 f97f 	bl	8000be8 <__aeabi_d2uiz>
 80098ea:	2801      	cmp	r0, #1
 80098ec:	bf38      	it	cc
 80098ee:	2001      	movcc	r0, #1
 80098f0:	f7f6 fe28 	bl	8000544 <__aeabi_ui2d>
 80098f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098f6:	4680      	mov	r8, r0
 80098f8:	4689      	mov	r9, r1
 80098fa:	bb13      	cbnz	r3, 8009942 <_strtod_l+0xba2>
 80098fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009900:	9014      	str	r0, [sp, #80]	; 0x50
 8009902:	9315      	str	r3, [sp, #84]	; 0x54
 8009904:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009908:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800990c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800990e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009910:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	930d      	str	r3, [sp, #52]	; 0x34
 8009918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800991c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009920:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009924:	f001 fea6 	bl	800b674 <__ulp>
 8009928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800992c:	ec53 2b10 	vmov	r2, r3, d0
 8009930:	f7f6 fe82 	bl	8000638 <__aeabi_dmul>
 8009934:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009938:	f7f6 fcc8 	bl	80002cc <__adddf3>
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	e78f      	b.n	8009862 <_strtod_l+0xac2>
 8009942:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009946:	e7dd      	b.n	8009904 <_strtod_l+0xb64>
 8009948:	a311      	add	r3, pc, #68	; (adr r3, 8009990 <_strtod_l+0xbf0>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f7 f8e5 	bl	8000b1c <__aeabi_dcmplt>
 8009952:	e7b4      	b.n	80098be <_strtod_l+0xb1e>
 8009954:	2300      	movs	r3, #0
 8009956:	930e      	str	r3, [sp, #56]	; 0x38
 8009958:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800995a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	f7ff ba65 	b.w	8008e2c <_strtod_l+0x8c>
 8009962:	2b65      	cmp	r3, #101	; 0x65
 8009964:	f43f ab5d 	beq.w	8009022 <_strtod_l+0x282>
 8009968:	2b45      	cmp	r3, #69	; 0x45
 800996a:	f43f ab5a 	beq.w	8009022 <_strtod_l+0x282>
 800996e:	2201      	movs	r2, #1
 8009970:	f7ff bb92 	b.w	8009098 <_strtod_l+0x2f8>
 8009974:	f3af 8000 	nop.w
 8009978:	94a03595 	.word	0x94a03595
 800997c:	3fdfffff 	.word	0x3fdfffff
 8009980:	35afe535 	.word	0x35afe535
 8009984:	3fe00000 	.word	0x3fe00000
 8009988:	ffc00000 	.word	0xffc00000
 800998c:	41dfffff 	.word	0x41dfffff
 8009990:	94a03595 	.word	0x94a03595
 8009994:	3fcfffff 	.word	0x3fcfffff
 8009998:	3ff00000 	.word	0x3ff00000
 800999c:	7ff00000 	.word	0x7ff00000
 80099a0:	7fe00000 	.word	0x7fe00000
 80099a4:	7c9fffff 	.word	0x7c9fffff
 80099a8:	3fe00000 	.word	0x3fe00000
 80099ac:	bff00000 	.word	0xbff00000
 80099b0:	7fefffff 	.word	0x7fefffff

080099b4 <_strtod_r>:
 80099b4:	4b01      	ldr	r3, [pc, #4]	; (80099bc <_strtod_r+0x8>)
 80099b6:	f7ff b9f3 	b.w	8008da0 <_strtod_l>
 80099ba:	bf00      	nop
 80099bc:	200000dc 	.word	0x200000dc

080099c0 <_strtol_l.isra.0>:
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c6:	d001      	beq.n	80099cc <_strtol_l.isra.0+0xc>
 80099c8:	2b24      	cmp	r3, #36	; 0x24
 80099ca:	d906      	bls.n	80099da <_strtol_l.isra.0+0x1a>
 80099cc:	f7fe fa54 	bl	8007e78 <__errno>
 80099d0:	2316      	movs	r3, #22
 80099d2:	6003      	str	r3, [r0, #0]
 80099d4:	2000      	movs	r0, #0
 80099d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099da:	4f3a      	ldr	r7, [pc, #232]	; (8009ac4 <_strtol_l.isra.0+0x104>)
 80099dc:	468e      	mov	lr, r1
 80099de:	4676      	mov	r6, lr
 80099e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80099e4:	5de5      	ldrb	r5, [r4, r7]
 80099e6:	f015 0508 	ands.w	r5, r5, #8
 80099ea:	d1f8      	bne.n	80099de <_strtol_l.isra.0+0x1e>
 80099ec:	2c2d      	cmp	r4, #45	; 0x2d
 80099ee:	d134      	bne.n	8009a5a <_strtol_l.isra.0+0x9a>
 80099f0:	f89e 4000 	ldrb.w	r4, [lr]
 80099f4:	f04f 0801 	mov.w	r8, #1
 80099f8:	f106 0e02 	add.w	lr, r6, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d05c      	beq.n	8009aba <_strtol_l.isra.0+0xfa>
 8009a00:	2b10      	cmp	r3, #16
 8009a02:	d10c      	bne.n	8009a1e <_strtol_l.isra.0+0x5e>
 8009a04:	2c30      	cmp	r4, #48	; 0x30
 8009a06:	d10a      	bne.n	8009a1e <_strtol_l.isra.0+0x5e>
 8009a08:	f89e 4000 	ldrb.w	r4, [lr]
 8009a0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a10:	2c58      	cmp	r4, #88	; 0x58
 8009a12:	d14d      	bne.n	8009ab0 <_strtol_l.isra.0+0xf0>
 8009a14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f10e 0e02 	add.w	lr, lr, #2
 8009a1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009a22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a26:	2600      	movs	r6, #0
 8009a28:	fbbc f9f3 	udiv	r9, ip, r3
 8009a2c:	4635      	mov	r5, r6
 8009a2e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009a36:	2f09      	cmp	r7, #9
 8009a38:	d818      	bhi.n	8009a6c <_strtol_l.isra.0+0xac>
 8009a3a:	463c      	mov	r4, r7
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	dd24      	ble.n	8009a8a <_strtol_l.isra.0+0xca>
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	db1f      	blt.n	8009a84 <_strtol_l.isra.0+0xc4>
 8009a44:	45a9      	cmp	r9, r5
 8009a46:	d31d      	bcc.n	8009a84 <_strtol_l.isra.0+0xc4>
 8009a48:	d101      	bne.n	8009a4e <_strtol_l.isra.0+0x8e>
 8009a4a:	45a2      	cmp	sl, r4
 8009a4c:	db1a      	blt.n	8009a84 <_strtol_l.isra.0+0xc4>
 8009a4e:	fb05 4503 	mla	r5, r5, r3, r4
 8009a52:	2601      	movs	r6, #1
 8009a54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009a58:	e7eb      	b.n	8009a32 <_strtol_l.isra.0+0x72>
 8009a5a:	2c2b      	cmp	r4, #43	; 0x2b
 8009a5c:	bf08      	it	eq
 8009a5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009a62:	46a8      	mov	r8, r5
 8009a64:	bf08      	it	eq
 8009a66:	f106 0e02 	addeq.w	lr, r6, #2
 8009a6a:	e7c7      	b.n	80099fc <_strtol_l.isra.0+0x3c>
 8009a6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a70:	2f19      	cmp	r7, #25
 8009a72:	d801      	bhi.n	8009a78 <_strtol_l.isra.0+0xb8>
 8009a74:	3c37      	subs	r4, #55	; 0x37
 8009a76:	e7e1      	b.n	8009a3c <_strtol_l.isra.0+0x7c>
 8009a78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a7c:	2f19      	cmp	r7, #25
 8009a7e:	d804      	bhi.n	8009a8a <_strtol_l.isra.0+0xca>
 8009a80:	3c57      	subs	r4, #87	; 0x57
 8009a82:	e7db      	b.n	8009a3c <_strtol_l.isra.0+0x7c>
 8009a84:	f04f 36ff 	mov.w	r6, #4294967295
 8009a88:	e7e4      	b.n	8009a54 <_strtol_l.isra.0+0x94>
 8009a8a:	2e00      	cmp	r6, #0
 8009a8c:	da05      	bge.n	8009a9a <_strtol_l.isra.0+0xda>
 8009a8e:	2322      	movs	r3, #34	; 0x22
 8009a90:	6003      	str	r3, [r0, #0]
 8009a92:	4665      	mov	r5, ip
 8009a94:	b942      	cbnz	r2, 8009aa8 <_strtol_l.isra.0+0xe8>
 8009a96:	4628      	mov	r0, r5
 8009a98:	e79d      	b.n	80099d6 <_strtol_l.isra.0+0x16>
 8009a9a:	f1b8 0f00 	cmp.w	r8, #0
 8009a9e:	d000      	beq.n	8009aa2 <_strtol_l.isra.0+0xe2>
 8009aa0:	426d      	negs	r5, r5
 8009aa2:	2a00      	cmp	r2, #0
 8009aa4:	d0f7      	beq.n	8009a96 <_strtol_l.isra.0+0xd6>
 8009aa6:	b10e      	cbz	r6, 8009aac <_strtol_l.isra.0+0xec>
 8009aa8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	e7f2      	b.n	8009a96 <_strtol_l.isra.0+0xd6>
 8009ab0:	2430      	movs	r4, #48	; 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1b3      	bne.n	8009a1e <_strtol_l.isra.0+0x5e>
 8009ab6:	2308      	movs	r3, #8
 8009ab8:	e7b1      	b.n	8009a1e <_strtol_l.isra.0+0x5e>
 8009aba:	2c30      	cmp	r4, #48	; 0x30
 8009abc:	d0a4      	beq.n	8009a08 <_strtol_l.isra.0+0x48>
 8009abe:	230a      	movs	r3, #10
 8009ac0:	e7ad      	b.n	8009a1e <_strtol_l.isra.0+0x5e>
 8009ac2:	bf00      	nop
 8009ac4:	0800d131 	.word	0x0800d131

08009ac8 <_strtol_r>:
 8009ac8:	f7ff bf7a 	b.w	80099c0 <_strtol_l.isra.0>

08009acc <_vsiprintf_r>:
 8009acc:	b500      	push	{lr}
 8009ace:	b09b      	sub	sp, #108	; 0x6c
 8009ad0:	9100      	str	r1, [sp, #0]
 8009ad2:	9104      	str	r1, [sp, #16]
 8009ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ad8:	9105      	str	r1, [sp, #20]
 8009ada:	9102      	str	r1, [sp, #8]
 8009adc:	4905      	ldr	r1, [pc, #20]	; (8009af4 <_vsiprintf_r+0x28>)
 8009ade:	9103      	str	r1, [sp, #12]
 8009ae0:	4669      	mov	r1, sp
 8009ae2:	f002 f82b 	bl	800bb3c <_svfiprintf_r>
 8009ae6:	9b00      	ldr	r3, [sp, #0]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	b01b      	add	sp, #108	; 0x6c
 8009aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8009af2:	bf00      	nop
 8009af4:	ffff0208 	.word	0xffff0208

08009af8 <vsiprintf>:
 8009af8:	4613      	mov	r3, r2
 8009afa:	460a      	mov	r2, r1
 8009afc:	4601      	mov	r1, r0
 8009afe:	4802      	ldr	r0, [pc, #8]	; (8009b08 <vsiprintf+0x10>)
 8009b00:	6800      	ldr	r0, [r0, #0]
 8009b02:	f7ff bfe3 	b.w	8009acc <_vsiprintf_r>
 8009b06:	bf00      	nop
 8009b08:	20000074 	.word	0x20000074

08009b0c <_write_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_write_r+0x20>)
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f8 fb9b 	bl	8002256 <_write>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_write_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_write_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	200008bc 	.word	0x200008bc

08009b30 <_close_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_close_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f8 fba7 	bl	800228e <_close>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_close_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_close_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	200008bc 	.word	0x200008bc

08009b50 <quorem>:
 8009b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	6903      	ldr	r3, [r0, #16]
 8009b56:	690c      	ldr	r4, [r1, #16]
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	f2c0 8081 	blt.w	8009c62 <quorem+0x112>
 8009b60:	3c01      	subs	r4, #1
 8009b62:	f101 0814 	add.w	r8, r1, #20
 8009b66:	f100 0514 	add.w	r5, r0, #20
 8009b6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b88:	d331      	bcc.n	8009bee <quorem+0x9e>
 8009b8a:	f04f 0e00 	mov.w	lr, #0
 8009b8e:	4640      	mov	r0, r8
 8009b90:	46ac      	mov	ip, r5
 8009b92:	46f2      	mov	sl, lr
 8009b94:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b98:	b293      	uxth	r3, r2
 8009b9a:	fb06 e303 	mla	r3, r6, r3, lr
 8009b9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ba8:	0c12      	lsrs	r2, r2, #16
 8009baa:	f8dc a000 	ldr.w	sl, [ip]
 8009bae:	fb06 e202 	mla	r2, r6, r2, lr
 8009bb2:	fa13 f38a 	uxtah	r3, r3, sl
 8009bb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bba:	fa1f fa82 	uxth.w	sl, r2
 8009bbe:	f8dc 2000 	ldr.w	r2, [ip]
 8009bc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009bc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd0:	4581      	cmp	r9, r0
 8009bd2:	f84c 3b04 	str.w	r3, [ip], #4
 8009bd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bda:	d2db      	bcs.n	8009b94 <quorem+0x44>
 8009bdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009be0:	b92b      	cbnz	r3, 8009bee <quorem+0x9e>
 8009be2:	9b01      	ldr	r3, [sp, #4]
 8009be4:	3b04      	subs	r3, #4
 8009be6:	429d      	cmp	r5, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	d32e      	bcc.n	8009c4a <quorem+0xfa>
 8009bec:	613c      	str	r4, [r7, #16]
 8009bee:	4638      	mov	r0, r7
 8009bf0:	f001 fc9c 	bl	800b52c <__mcmp>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	db24      	blt.n	8009c42 <quorem+0xf2>
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f04f 0c00 	mov.w	ip, #0
 8009c00:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c04:	f8d0 e000 	ldr.w	lr, [r0]
 8009c08:	b293      	uxth	r3, r2
 8009c0a:	ebac 0303 	sub.w	r3, ip, r3
 8009c0e:	0c12      	lsrs	r2, r2, #16
 8009c10:	fa13 f38e 	uxtah	r3, r3, lr
 8009c14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c22:	45c1      	cmp	r9, r8
 8009c24:	f840 3b04 	str.w	r3, [r0], #4
 8009c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c2c:	d2e8      	bcs.n	8009c00 <quorem+0xb0>
 8009c2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c36:	b922      	cbnz	r2, 8009c42 <quorem+0xf2>
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	429d      	cmp	r5, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	d30a      	bcc.n	8009c56 <quorem+0x106>
 8009c40:	613c      	str	r4, [r7, #16]
 8009c42:	4630      	mov	r0, r6
 8009c44:	b003      	add	sp, #12
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	6812      	ldr	r2, [r2, #0]
 8009c4c:	3b04      	subs	r3, #4
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	d1cc      	bne.n	8009bec <quorem+0x9c>
 8009c52:	3c01      	subs	r4, #1
 8009c54:	e7c7      	b.n	8009be6 <quorem+0x96>
 8009c56:	6812      	ldr	r2, [r2, #0]
 8009c58:	3b04      	subs	r3, #4
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	d1f0      	bne.n	8009c40 <quorem+0xf0>
 8009c5e:	3c01      	subs	r4, #1
 8009c60:	e7eb      	b.n	8009c3a <quorem+0xea>
 8009c62:	2000      	movs	r0, #0
 8009c64:	e7ee      	b.n	8009c44 <quorem+0xf4>
	...

08009c68 <_dtoa_r>:
 8009c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	ed2d 8b02 	vpush	{d8}
 8009c70:	ec57 6b10 	vmov	r6, r7, d0
 8009c74:	b095      	sub	sp, #84	; 0x54
 8009c76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c7c:	9105      	str	r1, [sp, #20]
 8009c7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009c82:	4604      	mov	r4, r0
 8009c84:	9209      	str	r2, [sp, #36]	; 0x24
 8009c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c88:	b975      	cbnz	r5, 8009ca8 <_dtoa_r+0x40>
 8009c8a:	2010      	movs	r0, #16
 8009c8c:	f001 f95e 	bl	800af4c <malloc>
 8009c90:	4602      	mov	r2, r0
 8009c92:	6260      	str	r0, [r4, #36]	; 0x24
 8009c94:	b920      	cbnz	r0, 8009ca0 <_dtoa_r+0x38>
 8009c96:	4bb2      	ldr	r3, [pc, #712]	; (8009f60 <_dtoa_r+0x2f8>)
 8009c98:	21ea      	movs	r1, #234	; 0xea
 8009c9a:	48b2      	ldr	r0, [pc, #712]	; (8009f64 <_dtoa_r+0x2fc>)
 8009c9c:	f002 fcaa 	bl	800c5f4 <__assert_func>
 8009ca0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ca4:	6005      	str	r5, [r0, #0]
 8009ca6:	60c5      	str	r5, [r0, #12]
 8009ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	b151      	cbz	r1, 8009cc4 <_dtoa_r+0x5c>
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	604a      	str	r2, [r1, #4]
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4093      	lsls	r3, r2
 8009cb6:	608b      	str	r3, [r1, #8]
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f001 f9af 	bl	800b01c <_Bfree>
 8009cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	1e3b      	subs	r3, r7, #0
 8009cc6:	bfb9      	ittee	lt
 8009cc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ccc:	9303      	strlt	r3, [sp, #12]
 8009cce:	2300      	movge	r3, #0
 8009cd0:	f8c8 3000 	strge.w	r3, [r8]
 8009cd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009cd8:	4ba3      	ldr	r3, [pc, #652]	; (8009f68 <_dtoa_r+0x300>)
 8009cda:	bfbc      	itt	lt
 8009cdc:	2201      	movlt	r2, #1
 8009cde:	f8c8 2000 	strlt.w	r2, [r8]
 8009ce2:	ea33 0309 	bics.w	r3, r3, r9
 8009ce6:	d11b      	bne.n	8009d20 <_dtoa_r+0xb8>
 8009ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cea:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cf4:	4333      	orrs	r3, r6
 8009cf6:	f000 857a 	beq.w	800a7ee <_dtoa_r+0xb86>
 8009cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfc:	b963      	cbnz	r3, 8009d18 <_dtoa_r+0xb0>
 8009cfe:	4b9b      	ldr	r3, [pc, #620]	; (8009f6c <_dtoa_r+0x304>)
 8009d00:	e024      	b.n	8009d4c <_dtoa_r+0xe4>
 8009d02:	4b9b      	ldr	r3, [pc, #620]	; (8009f70 <_dtoa_r+0x308>)
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	3308      	adds	r3, #8
 8009d08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	9800      	ldr	r0, [sp, #0]
 8009d0e:	b015      	add	sp, #84	; 0x54
 8009d10:	ecbd 8b02 	vpop	{d8}
 8009d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d18:	4b94      	ldr	r3, [pc, #592]	; (8009f6c <_dtoa_r+0x304>)
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	3303      	adds	r3, #3
 8009d1e:	e7f3      	b.n	8009d08 <_dtoa_r+0xa0>
 8009d20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d24:	2200      	movs	r2, #0
 8009d26:	ec51 0b17 	vmov	r0, r1, d7
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009d30:	f7f6 feea 	bl	8000b08 <__aeabi_dcmpeq>
 8009d34:	4680      	mov	r8, r0
 8009d36:	b158      	cbz	r0, 8009d50 <_dtoa_r+0xe8>
 8009d38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	6013      	str	r3, [r2, #0]
 8009d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8551 	beq.w	800a7e8 <_dtoa_r+0xb80>
 8009d46:	488b      	ldr	r0, [pc, #556]	; (8009f74 <_dtoa_r+0x30c>)
 8009d48:	6018      	str	r0, [r3, #0]
 8009d4a:	1e43      	subs	r3, r0, #1
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	e7dd      	b.n	8009d0c <_dtoa_r+0xa4>
 8009d50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d54:	aa12      	add	r2, sp, #72	; 0x48
 8009d56:	a913      	add	r1, sp, #76	; 0x4c
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f001 fd07 	bl	800b76c <__d2b>
 8009d5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d62:	4683      	mov	fp, r0
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	d07c      	beq.n	8009e62 <_dtoa_r+0x1fa>
 8009d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009d76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d82:	4b7d      	ldr	r3, [pc, #500]	; (8009f78 <_dtoa_r+0x310>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fa9d 	bl	80002c8 <__aeabi_dsub>
 8009d8e:	a36e      	add	r3, pc, #440	; (adr r3, 8009f48 <_dtoa_r+0x2e0>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f7f6 fc50 	bl	8000638 <__aeabi_dmul>
 8009d98:	a36d      	add	r3, pc, #436	; (adr r3, 8009f50 <_dtoa_r+0x2e8>)
 8009d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9e:	f7f6 fa95 	bl	80002cc <__adddf3>
 8009da2:	4606      	mov	r6, r0
 8009da4:	4628      	mov	r0, r5
 8009da6:	460f      	mov	r7, r1
 8009da8:	f7f6 fbdc 	bl	8000564 <__aeabi_i2d>
 8009dac:	a36a      	add	r3, pc, #424	; (adr r3, 8009f58 <_dtoa_r+0x2f0>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f7f6 fc41 	bl	8000638 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	4630      	mov	r0, r6
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	f7f6 fa85 	bl	80002cc <__adddf3>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460f      	mov	r7, r1
 8009dc6:	f7f6 fee7 	bl	8000b98 <__aeabi_d2iz>
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4682      	mov	sl, r0
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fea2 	bl	8000b1c <__aeabi_dcmplt>
 8009dd8:	b148      	cbz	r0, 8009dee <_dtoa_r+0x186>
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7f6 fbc2 	bl	8000564 <__aeabi_i2d>
 8009de0:	4632      	mov	r2, r6
 8009de2:	463b      	mov	r3, r7
 8009de4:	f7f6 fe90 	bl	8000b08 <__aeabi_dcmpeq>
 8009de8:	b908      	cbnz	r0, 8009dee <_dtoa_r+0x186>
 8009dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dee:	f1ba 0f16 	cmp.w	sl, #22
 8009df2:	d854      	bhi.n	8009e9e <_dtoa_r+0x236>
 8009df4:	4b61      	ldr	r3, [pc, #388]	; (8009f7c <_dtoa_r+0x314>)
 8009df6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e02:	f7f6 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 8009e06:	2800      	cmp	r0, #0
 8009e08:	d04b      	beq.n	8009ea2 <_dtoa_r+0x23a>
 8009e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e0e:	2300      	movs	r3, #0
 8009e10:	930e      	str	r3, [sp, #56]	; 0x38
 8009e12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e14:	1b5d      	subs	r5, r3, r5
 8009e16:	1e6b      	subs	r3, r5, #1
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	bf43      	ittte	mi
 8009e1c:	2300      	movmi	r3, #0
 8009e1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009e22:	9304      	strmi	r3, [sp, #16]
 8009e24:	f04f 0800 	movpl.w	r8, #0
 8009e28:	f1ba 0f00 	cmp.w	sl, #0
 8009e2c:	db3b      	blt.n	8009ea6 <_dtoa_r+0x23e>
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009e34:	4453      	add	r3, sl
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	9306      	str	r3, [sp, #24]
 8009e3c:	9b05      	ldr	r3, [sp, #20]
 8009e3e:	2b09      	cmp	r3, #9
 8009e40:	d869      	bhi.n	8009f16 <_dtoa_r+0x2ae>
 8009e42:	2b05      	cmp	r3, #5
 8009e44:	bfc4      	itt	gt
 8009e46:	3b04      	subgt	r3, #4
 8009e48:	9305      	strgt	r3, [sp, #20]
 8009e4a:	9b05      	ldr	r3, [sp, #20]
 8009e4c:	f1a3 0302 	sub.w	r3, r3, #2
 8009e50:	bfcc      	ite	gt
 8009e52:	2500      	movgt	r5, #0
 8009e54:	2501      	movle	r5, #1
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d869      	bhi.n	8009f2e <_dtoa_r+0x2c6>
 8009e5a:	e8df f003 	tbb	[pc, r3]
 8009e5e:	4e2c      	.short	0x4e2c
 8009e60:	5a4c      	.short	0x5a4c
 8009e62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009e66:	441d      	add	r5, r3
 8009e68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	bfc1      	itttt	gt
 8009e70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e78:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e80:	bfda      	itte	le
 8009e82:	f1c3 0320 	rsble	r3, r3, #32
 8009e86:	fa06 f003 	lslle.w	r0, r6, r3
 8009e8a:	4318      	orrgt	r0, r3
 8009e8c:	f7f6 fb5a 	bl	8000544 <__aeabi_ui2d>
 8009e90:	2301      	movs	r3, #1
 8009e92:	4606      	mov	r6, r0
 8009e94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e98:	3d01      	subs	r5, #1
 8009e9a:	9310      	str	r3, [sp, #64]	; 0x40
 8009e9c:	e771      	b.n	8009d82 <_dtoa_r+0x11a>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e7b6      	b.n	8009e10 <_dtoa_r+0x1a8>
 8009ea2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ea4:	e7b5      	b.n	8009e12 <_dtoa_r+0x1aa>
 8009ea6:	f1ca 0300 	rsb	r3, sl, #0
 8009eaa:	9306      	str	r3, [sp, #24]
 8009eac:	2300      	movs	r3, #0
 8009eae:	eba8 080a 	sub.w	r8, r8, sl
 8009eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8009eb4:	e7c2      	b.n	8009e3c <_dtoa_r+0x1d4>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9308      	str	r3, [sp, #32]
 8009eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	dc39      	bgt.n	8009f34 <_dtoa_r+0x2cc>
 8009ec0:	f04f 0901 	mov.w	r9, #1
 8009ec4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ec8:	464b      	mov	r3, r9
 8009eca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009ece:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	6042      	str	r2, [r0, #4]
 8009ed4:	2204      	movs	r2, #4
 8009ed6:	f102 0614 	add.w	r6, r2, #20
 8009eda:	429e      	cmp	r6, r3
 8009edc:	6841      	ldr	r1, [r0, #4]
 8009ede:	d92f      	bls.n	8009f40 <_dtoa_r+0x2d8>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f001 f85b 	bl	800af9c <_Balloc>
 8009ee6:	9000      	str	r0, [sp, #0]
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d14b      	bne.n	8009f84 <_dtoa_r+0x31c>
 8009eec:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <_dtoa_r+0x318>)
 8009eee:	4602      	mov	r2, r0
 8009ef0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ef4:	e6d1      	b.n	8009c9a <_dtoa_r+0x32>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e7de      	b.n	8009eb8 <_dtoa_r+0x250>
 8009efa:	2300      	movs	r3, #0
 8009efc:	9308      	str	r3, [sp, #32]
 8009efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f00:	eb0a 0903 	add.w	r9, sl, r3
 8009f04:	f109 0301 	add.w	r3, r9, #1
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	bfb8      	it	lt
 8009f0e:	2301      	movlt	r3, #1
 8009f10:	e7dd      	b.n	8009ece <_dtoa_r+0x266>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e7f2      	b.n	8009efc <_dtoa_r+0x294>
 8009f16:	2501      	movs	r5, #1
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9305      	str	r3, [sp, #20]
 8009f1c:	9508      	str	r5, [sp, #32]
 8009f1e:	f04f 39ff 	mov.w	r9, #4294967295
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f28:	2312      	movs	r3, #18
 8009f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f2c:	e7cf      	b.n	8009ece <_dtoa_r+0x266>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	9308      	str	r3, [sp, #32]
 8009f32:	e7f4      	b.n	8009f1e <_dtoa_r+0x2b6>
 8009f34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009f38:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	e7c6      	b.n	8009ece <_dtoa_r+0x266>
 8009f40:	3101      	adds	r1, #1
 8009f42:	6041      	str	r1, [r0, #4]
 8009f44:	0052      	lsls	r2, r2, #1
 8009f46:	e7c6      	b.n	8009ed6 <_dtoa_r+0x26e>
 8009f48:	636f4361 	.word	0x636f4361
 8009f4c:	3fd287a7 	.word	0x3fd287a7
 8009f50:	8b60c8b3 	.word	0x8b60c8b3
 8009f54:	3fc68a28 	.word	0x3fc68a28
 8009f58:	509f79fb 	.word	0x509f79fb
 8009f5c:	3fd34413 	.word	0x3fd34413
 8009f60:	0800d23e 	.word	0x0800d23e
 8009f64:	0800d255 	.word	0x0800d255
 8009f68:	7ff00000 	.word	0x7ff00000
 8009f6c:	0800d23a 	.word	0x0800d23a
 8009f70:	0800d231 	.word	0x0800d231
 8009f74:	0800d4ba 	.word	0x0800d4ba
 8009f78:	3ff80000 	.word	0x3ff80000
 8009f7c:	0800d3d0 	.word	0x0800d3d0
 8009f80:	0800d2b4 	.word	0x0800d2b4
 8009f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f86:	9a00      	ldr	r2, [sp, #0]
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	2b0e      	cmp	r3, #14
 8009f8e:	f200 80ad 	bhi.w	800a0ec <_dtoa_r+0x484>
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	f000 80aa 	beq.w	800a0ec <_dtoa_r+0x484>
 8009f98:	f1ba 0f00 	cmp.w	sl, #0
 8009f9c:	dd36      	ble.n	800a00c <_dtoa_r+0x3a4>
 8009f9e:	4ac3      	ldr	r2, [pc, #780]	; (800a2ac <_dtoa_r+0x644>)
 8009fa0:	f00a 030f 	and.w	r3, sl, #15
 8009fa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fa8:	ed93 7b00 	vldr	d7, [r3]
 8009fac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009fb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009fb4:	eeb0 8a47 	vmov.f32	s16, s14
 8009fb8:	eef0 8a67 	vmov.f32	s17, s15
 8009fbc:	d016      	beq.n	8009fec <_dtoa_r+0x384>
 8009fbe:	4bbc      	ldr	r3, [pc, #752]	; (800a2b0 <_dtoa_r+0x648>)
 8009fc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fc8:	f7f6 fc60 	bl	800088c <__aeabi_ddiv>
 8009fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd0:	f007 070f 	and.w	r7, r7, #15
 8009fd4:	2503      	movs	r5, #3
 8009fd6:	4eb6      	ldr	r6, [pc, #728]	; (800a2b0 <_dtoa_r+0x648>)
 8009fd8:	b957      	cbnz	r7, 8009ff0 <_dtoa_r+0x388>
 8009fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fde:	ec53 2b18 	vmov	r2, r3, d8
 8009fe2:	f7f6 fc53 	bl	800088c <__aeabi_ddiv>
 8009fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fea:	e029      	b.n	800a040 <_dtoa_r+0x3d8>
 8009fec:	2502      	movs	r5, #2
 8009fee:	e7f2      	b.n	8009fd6 <_dtoa_r+0x36e>
 8009ff0:	07f9      	lsls	r1, r7, #31
 8009ff2:	d508      	bpl.n	800a006 <_dtoa_r+0x39e>
 8009ff4:	ec51 0b18 	vmov	r0, r1, d8
 8009ff8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ffc:	f7f6 fb1c 	bl	8000638 <__aeabi_dmul>
 800a000:	ec41 0b18 	vmov	d8, r0, r1
 800a004:	3501      	adds	r5, #1
 800a006:	107f      	asrs	r7, r7, #1
 800a008:	3608      	adds	r6, #8
 800a00a:	e7e5      	b.n	8009fd8 <_dtoa_r+0x370>
 800a00c:	f000 80a6 	beq.w	800a15c <_dtoa_r+0x4f4>
 800a010:	f1ca 0600 	rsb	r6, sl, #0
 800a014:	4ba5      	ldr	r3, [pc, #660]	; (800a2ac <_dtoa_r+0x644>)
 800a016:	4fa6      	ldr	r7, [pc, #664]	; (800a2b0 <_dtoa_r+0x648>)
 800a018:	f006 020f 	and.w	r2, r6, #15
 800a01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a028:	f7f6 fb06 	bl	8000638 <__aeabi_dmul>
 800a02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a030:	1136      	asrs	r6, r6, #4
 800a032:	2300      	movs	r3, #0
 800a034:	2502      	movs	r5, #2
 800a036:	2e00      	cmp	r6, #0
 800a038:	f040 8085 	bne.w	800a146 <_dtoa_r+0x4de>
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1d2      	bne.n	8009fe6 <_dtoa_r+0x37e>
 800a040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 808c 	beq.w	800a160 <_dtoa_r+0x4f8>
 800a048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a04c:	4b99      	ldr	r3, [pc, #612]	; (800a2b4 <_dtoa_r+0x64c>)
 800a04e:	2200      	movs	r2, #0
 800a050:	4630      	mov	r0, r6
 800a052:	4639      	mov	r1, r7
 800a054:	f7f6 fd62 	bl	8000b1c <__aeabi_dcmplt>
 800a058:	2800      	cmp	r0, #0
 800a05a:	f000 8081 	beq.w	800a160 <_dtoa_r+0x4f8>
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d07d      	beq.n	800a160 <_dtoa_r+0x4f8>
 800a064:	f1b9 0f00 	cmp.w	r9, #0
 800a068:	dd3c      	ble.n	800a0e4 <_dtoa_r+0x47c>
 800a06a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	2200      	movs	r2, #0
 800a072:	4b91      	ldr	r3, [pc, #580]	; (800a2b8 <_dtoa_r+0x650>)
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 fade 	bl	8000638 <__aeabi_dmul>
 800a07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a080:	3501      	adds	r5, #1
 800a082:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a086:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a08a:	4628      	mov	r0, r5
 800a08c:	f7f6 fa6a 	bl	8000564 <__aeabi_i2d>
 800a090:	4632      	mov	r2, r6
 800a092:	463b      	mov	r3, r7
 800a094:	f7f6 fad0 	bl	8000638 <__aeabi_dmul>
 800a098:	4b88      	ldr	r3, [pc, #544]	; (800a2bc <_dtoa_r+0x654>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	f7f6 f916 	bl	80002cc <__adddf3>
 800a0a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d15c      	bne.n	800a16a <_dtoa_r+0x502>
 800a0b0:	4b83      	ldr	r3, [pc, #524]	; (800a2c0 <_dtoa_r+0x658>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	f7f6 f906 	bl	80002c8 <__aeabi_dsub>
 800a0bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460f      	mov	r7, r1
 800a0c4:	f7f6 fd48 	bl	8000b58 <__aeabi_dcmpgt>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f040 8296 	bne.w	800a5fa <_dtoa_r+0x992>
 800a0ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0d8:	4639      	mov	r1, r7
 800a0da:	f7f6 fd1f 	bl	8000b1c <__aeabi_dcmplt>
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	f040 8288 	bne.w	800a5f4 <_dtoa_r+0x98c>
 800a0e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f2c0 8158 	blt.w	800a3a4 <_dtoa_r+0x73c>
 800a0f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a0f8:	f300 8154 	bgt.w	800a3a4 <_dtoa_r+0x73c>
 800a0fc:	4b6b      	ldr	r3, [pc, #428]	; (800a2ac <_dtoa_r+0x644>)
 800a0fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a102:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f280 80e3 	bge.w	800a2d4 <_dtoa_r+0x66c>
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f300 80df 	bgt.w	800a2d4 <_dtoa_r+0x66c>
 800a116:	f040 826d 	bne.w	800a5f4 <_dtoa_r+0x98c>
 800a11a:	4b69      	ldr	r3, [pc, #420]	; (800a2c0 <_dtoa_r+0x658>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	4640      	mov	r0, r8
 800a120:	4649      	mov	r1, r9
 800a122:	f7f6 fa89 	bl	8000638 <__aeabi_dmul>
 800a126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a12a:	f7f6 fd0b 	bl	8000b44 <__aeabi_dcmpge>
 800a12e:	9e01      	ldr	r6, [sp, #4]
 800a130:	4637      	mov	r7, r6
 800a132:	2800      	cmp	r0, #0
 800a134:	f040 8243 	bne.w	800a5be <_dtoa_r+0x956>
 800a138:	9d00      	ldr	r5, [sp, #0]
 800a13a:	2331      	movs	r3, #49	; 0x31
 800a13c:	f805 3b01 	strb.w	r3, [r5], #1
 800a140:	f10a 0a01 	add.w	sl, sl, #1
 800a144:	e23f      	b.n	800a5c6 <_dtoa_r+0x95e>
 800a146:	07f2      	lsls	r2, r6, #31
 800a148:	d505      	bpl.n	800a156 <_dtoa_r+0x4ee>
 800a14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a14e:	f7f6 fa73 	bl	8000638 <__aeabi_dmul>
 800a152:	3501      	adds	r5, #1
 800a154:	2301      	movs	r3, #1
 800a156:	1076      	asrs	r6, r6, #1
 800a158:	3708      	adds	r7, #8
 800a15a:	e76c      	b.n	800a036 <_dtoa_r+0x3ce>
 800a15c:	2502      	movs	r5, #2
 800a15e:	e76f      	b.n	800a040 <_dtoa_r+0x3d8>
 800a160:	9b01      	ldr	r3, [sp, #4]
 800a162:	f8cd a01c 	str.w	sl, [sp, #28]
 800a166:	930c      	str	r3, [sp, #48]	; 0x30
 800a168:	e78d      	b.n	800a086 <_dtoa_r+0x41e>
 800a16a:	9900      	ldr	r1, [sp, #0]
 800a16c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a16e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a170:	4b4e      	ldr	r3, [pc, #312]	; (800a2ac <_dtoa_r+0x644>)
 800a172:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a176:	4401      	add	r1, r0
 800a178:	9102      	str	r1, [sp, #8]
 800a17a:	9908      	ldr	r1, [sp, #32]
 800a17c:	eeb0 8a47 	vmov.f32	s16, s14
 800a180:	eef0 8a67 	vmov.f32	s17, s15
 800a184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a188:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a18c:	2900      	cmp	r1, #0
 800a18e:	d045      	beq.n	800a21c <_dtoa_r+0x5b4>
 800a190:	494c      	ldr	r1, [pc, #304]	; (800a2c4 <_dtoa_r+0x65c>)
 800a192:	2000      	movs	r0, #0
 800a194:	f7f6 fb7a 	bl	800088c <__aeabi_ddiv>
 800a198:	ec53 2b18 	vmov	r2, r3, d8
 800a19c:	f7f6 f894 	bl	80002c8 <__aeabi_dsub>
 800a1a0:	9d00      	ldr	r5, [sp, #0]
 800a1a2:	ec41 0b18 	vmov	d8, r0, r1
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f7f6 fcf5 	bl	8000b98 <__aeabi_d2iz>
 800a1ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a1b0:	f7f6 f9d8 	bl	8000564 <__aeabi_i2d>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 f884 	bl	80002c8 <__aeabi_dsub>
 800a1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c2:	3330      	adds	r3, #48	; 0x30
 800a1c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a1c8:	ec53 2b18 	vmov	r2, r3, d8
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	f7f6 fca4 	bl	8000b1c <__aeabi_dcmplt>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d165      	bne.n	800a2a4 <_dtoa_r+0x63c>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	463b      	mov	r3, r7
 800a1dc:	4935      	ldr	r1, [pc, #212]	; (800a2b4 <_dtoa_r+0x64c>)
 800a1de:	2000      	movs	r0, #0
 800a1e0:	f7f6 f872 	bl	80002c8 <__aeabi_dsub>
 800a1e4:	ec53 2b18 	vmov	r2, r3, d8
 800a1e8:	f7f6 fc98 	bl	8000b1c <__aeabi_dcmplt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f040 80b9 	bne.w	800a364 <_dtoa_r+0x6fc>
 800a1f2:	9b02      	ldr	r3, [sp, #8]
 800a1f4:	429d      	cmp	r5, r3
 800a1f6:	f43f af75 	beq.w	800a0e4 <_dtoa_r+0x47c>
 800a1fa:	4b2f      	ldr	r3, [pc, #188]	; (800a2b8 <_dtoa_r+0x650>)
 800a1fc:	ec51 0b18 	vmov	r0, r1, d8
 800a200:	2200      	movs	r2, #0
 800a202:	f7f6 fa19 	bl	8000638 <__aeabi_dmul>
 800a206:	4b2c      	ldr	r3, [pc, #176]	; (800a2b8 <_dtoa_r+0x650>)
 800a208:	ec41 0b18 	vmov	d8, r0, r1
 800a20c:	2200      	movs	r2, #0
 800a20e:	4630      	mov	r0, r6
 800a210:	4639      	mov	r1, r7
 800a212:	f7f6 fa11 	bl	8000638 <__aeabi_dmul>
 800a216:	4606      	mov	r6, r0
 800a218:	460f      	mov	r7, r1
 800a21a:	e7c4      	b.n	800a1a6 <_dtoa_r+0x53e>
 800a21c:	ec51 0b17 	vmov	r0, r1, d7
 800a220:	f7f6 fa0a 	bl	8000638 <__aeabi_dmul>
 800a224:	9b02      	ldr	r3, [sp, #8]
 800a226:	9d00      	ldr	r5, [sp, #0]
 800a228:	930c      	str	r3, [sp, #48]	; 0x30
 800a22a:	ec41 0b18 	vmov	d8, r0, r1
 800a22e:	4639      	mov	r1, r7
 800a230:	4630      	mov	r0, r6
 800a232:	f7f6 fcb1 	bl	8000b98 <__aeabi_d2iz>
 800a236:	9011      	str	r0, [sp, #68]	; 0x44
 800a238:	f7f6 f994 	bl	8000564 <__aeabi_i2d>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 f840 	bl	80002c8 <__aeabi_dsub>
 800a248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a24a:	3330      	adds	r3, #48	; 0x30
 800a24c:	f805 3b01 	strb.w	r3, [r5], #1
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	429d      	cmp	r5, r3
 800a254:	4606      	mov	r6, r0
 800a256:	460f      	mov	r7, r1
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	d134      	bne.n	800a2c8 <_dtoa_r+0x660>
 800a25e:	4b19      	ldr	r3, [pc, #100]	; (800a2c4 <_dtoa_r+0x65c>)
 800a260:	ec51 0b18 	vmov	r0, r1, d8
 800a264:	f7f6 f832 	bl	80002cc <__adddf3>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f7f6 fc72 	bl	8000b58 <__aeabi_dcmpgt>
 800a274:	2800      	cmp	r0, #0
 800a276:	d175      	bne.n	800a364 <_dtoa_r+0x6fc>
 800a278:	ec53 2b18 	vmov	r2, r3, d8
 800a27c:	4911      	ldr	r1, [pc, #68]	; (800a2c4 <_dtoa_r+0x65c>)
 800a27e:	2000      	movs	r0, #0
 800a280:	f7f6 f822 	bl	80002c8 <__aeabi_dsub>
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	4630      	mov	r0, r6
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fc46 	bl	8000b1c <__aeabi_dcmplt>
 800a290:	2800      	cmp	r0, #0
 800a292:	f43f af27 	beq.w	800a0e4 <_dtoa_r+0x47c>
 800a296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a298:	1e6b      	subs	r3, r5, #1
 800a29a:	930c      	str	r3, [sp, #48]	; 0x30
 800a29c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2a0:	2b30      	cmp	r3, #48	; 0x30
 800a2a2:	d0f8      	beq.n	800a296 <_dtoa_r+0x62e>
 800a2a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2a8:	e04a      	b.n	800a340 <_dtoa_r+0x6d8>
 800a2aa:	bf00      	nop
 800a2ac:	0800d3d0 	.word	0x0800d3d0
 800a2b0:	0800d3a8 	.word	0x0800d3a8
 800a2b4:	3ff00000 	.word	0x3ff00000
 800a2b8:	40240000 	.word	0x40240000
 800a2bc:	401c0000 	.word	0x401c0000
 800a2c0:	40140000 	.word	0x40140000
 800a2c4:	3fe00000 	.word	0x3fe00000
 800a2c8:	4baf      	ldr	r3, [pc, #700]	; (800a588 <_dtoa_r+0x920>)
 800a2ca:	f7f6 f9b5 	bl	8000638 <__aeabi_dmul>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	e7ac      	b.n	800a22e <_dtoa_r+0x5c6>
 800a2d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2d8:	9d00      	ldr	r5, [sp, #0]
 800a2da:	4642      	mov	r2, r8
 800a2dc:	464b      	mov	r3, r9
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 fad3 	bl	800088c <__aeabi_ddiv>
 800a2e6:	f7f6 fc57 	bl	8000b98 <__aeabi_d2iz>
 800a2ea:	9002      	str	r0, [sp, #8]
 800a2ec:	f7f6 f93a 	bl	8000564 <__aeabi_i2d>
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	f7f6 f9a0 	bl	8000638 <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f5 ffe2 	bl	80002c8 <__aeabi_dsub>
 800a304:	9e02      	ldr	r6, [sp, #8]
 800a306:	9f01      	ldr	r7, [sp, #4]
 800a308:	3630      	adds	r6, #48	; 0x30
 800a30a:	f805 6b01 	strb.w	r6, [r5], #1
 800a30e:	9e00      	ldr	r6, [sp, #0]
 800a310:	1bae      	subs	r6, r5, r6
 800a312:	42b7      	cmp	r7, r6
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	d137      	bne.n	800a38a <_dtoa_r+0x722>
 800a31a:	f7f5 ffd7 	bl	80002cc <__adddf3>
 800a31e:	4642      	mov	r2, r8
 800a320:	464b      	mov	r3, r9
 800a322:	4606      	mov	r6, r0
 800a324:	460f      	mov	r7, r1
 800a326:	f7f6 fc17 	bl	8000b58 <__aeabi_dcmpgt>
 800a32a:	b9c8      	cbnz	r0, 800a360 <_dtoa_r+0x6f8>
 800a32c:	4642      	mov	r2, r8
 800a32e:	464b      	mov	r3, r9
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 fbe8 	bl	8000b08 <__aeabi_dcmpeq>
 800a338:	b110      	cbz	r0, 800a340 <_dtoa_r+0x6d8>
 800a33a:	9b02      	ldr	r3, [sp, #8]
 800a33c:	07d9      	lsls	r1, r3, #31
 800a33e:	d40f      	bmi.n	800a360 <_dtoa_r+0x6f8>
 800a340:	4620      	mov	r0, r4
 800a342:	4659      	mov	r1, fp
 800a344:	f000 fe6a 	bl	800b01c <_Bfree>
 800a348:	2300      	movs	r3, #0
 800a34a:	702b      	strb	r3, [r5, #0]
 800a34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34e:	f10a 0001 	add.w	r0, sl, #1
 800a352:	6018      	str	r0, [r3, #0]
 800a354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a356:	2b00      	cmp	r3, #0
 800a358:	f43f acd8 	beq.w	8009d0c <_dtoa_r+0xa4>
 800a35c:	601d      	str	r5, [r3, #0]
 800a35e:	e4d5      	b.n	8009d0c <_dtoa_r+0xa4>
 800a360:	f8cd a01c 	str.w	sl, [sp, #28]
 800a364:	462b      	mov	r3, r5
 800a366:	461d      	mov	r5, r3
 800a368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a36c:	2a39      	cmp	r2, #57	; 0x39
 800a36e:	d108      	bne.n	800a382 <_dtoa_r+0x71a>
 800a370:	9a00      	ldr	r2, [sp, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d1f7      	bne.n	800a366 <_dtoa_r+0x6fe>
 800a376:	9a07      	ldr	r2, [sp, #28]
 800a378:	9900      	ldr	r1, [sp, #0]
 800a37a:	3201      	adds	r2, #1
 800a37c:	9207      	str	r2, [sp, #28]
 800a37e:	2230      	movs	r2, #48	; 0x30
 800a380:	700a      	strb	r2, [r1, #0]
 800a382:	781a      	ldrb	r2, [r3, #0]
 800a384:	3201      	adds	r2, #1
 800a386:	701a      	strb	r2, [r3, #0]
 800a388:	e78c      	b.n	800a2a4 <_dtoa_r+0x63c>
 800a38a:	4b7f      	ldr	r3, [pc, #508]	; (800a588 <_dtoa_r+0x920>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	f7f6 f953 	bl	8000638 <__aeabi_dmul>
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	4606      	mov	r6, r0
 800a398:	460f      	mov	r7, r1
 800a39a:	f7f6 fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d09b      	beq.n	800a2da <_dtoa_r+0x672>
 800a3a2:	e7cd      	b.n	800a340 <_dtoa_r+0x6d8>
 800a3a4:	9a08      	ldr	r2, [sp, #32]
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	f000 80c4 	beq.w	800a534 <_dtoa_r+0x8cc>
 800a3ac:	9a05      	ldr	r2, [sp, #20]
 800a3ae:	2a01      	cmp	r2, #1
 800a3b0:	f300 80a8 	bgt.w	800a504 <_dtoa_r+0x89c>
 800a3b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	f000 80a0 	beq.w	800a4fc <_dtoa_r+0x894>
 800a3bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3c0:	9e06      	ldr	r6, [sp, #24]
 800a3c2:	4645      	mov	r5, r8
 800a3c4:	9a04      	ldr	r2, [sp, #16]
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	441a      	add	r2, r3
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4498      	add	r8, r3
 800a3ce:	9204      	str	r2, [sp, #16]
 800a3d0:	f000 ff2a 	bl	800b228 <__i2b>
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	2d00      	cmp	r5, #0
 800a3d8:	dd0b      	ble.n	800a3f2 <_dtoa_r+0x78a>
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dd08      	ble.n	800a3f2 <_dtoa_r+0x78a>
 800a3e0:	42ab      	cmp	r3, r5
 800a3e2:	9a04      	ldr	r2, [sp, #16]
 800a3e4:	bfa8      	it	ge
 800a3e6:	462b      	movge	r3, r5
 800a3e8:	eba8 0803 	sub.w	r8, r8, r3
 800a3ec:	1aed      	subs	r5, r5, r3
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	b1fb      	cbz	r3, 800a436 <_dtoa_r+0x7ce>
 800a3f6:	9b08      	ldr	r3, [sp, #32]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 809f 	beq.w	800a53c <_dtoa_r+0x8d4>
 800a3fe:	2e00      	cmp	r6, #0
 800a400:	dd11      	ble.n	800a426 <_dtoa_r+0x7be>
 800a402:	4639      	mov	r1, r7
 800a404:	4632      	mov	r2, r6
 800a406:	4620      	mov	r0, r4
 800a408:	f000 ffca 	bl	800b3a0 <__pow5mult>
 800a40c:	465a      	mov	r2, fp
 800a40e:	4601      	mov	r1, r0
 800a410:	4607      	mov	r7, r0
 800a412:	4620      	mov	r0, r4
 800a414:	f000 ff1e 	bl	800b254 <__multiply>
 800a418:	4659      	mov	r1, fp
 800a41a:	9007      	str	r0, [sp, #28]
 800a41c:	4620      	mov	r0, r4
 800a41e:	f000 fdfd 	bl	800b01c <_Bfree>
 800a422:	9b07      	ldr	r3, [sp, #28]
 800a424:	469b      	mov	fp, r3
 800a426:	9b06      	ldr	r3, [sp, #24]
 800a428:	1b9a      	subs	r2, r3, r6
 800a42a:	d004      	beq.n	800a436 <_dtoa_r+0x7ce>
 800a42c:	4659      	mov	r1, fp
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 ffb6 	bl	800b3a0 <__pow5mult>
 800a434:	4683      	mov	fp, r0
 800a436:	2101      	movs	r1, #1
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 fef5 	bl	800b228 <__i2b>
 800a43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a440:	2b00      	cmp	r3, #0
 800a442:	4606      	mov	r6, r0
 800a444:	dd7c      	ble.n	800a540 <_dtoa_r+0x8d8>
 800a446:	461a      	mov	r2, r3
 800a448:	4601      	mov	r1, r0
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 ffa8 	bl	800b3a0 <__pow5mult>
 800a450:	9b05      	ldr	r3, [sp, #20]
 800a452:	2b01      	cmp	r3, #1
 800a454:	4606      	mov	r6, r0
 800a456:	dd76      	ble.n	800a546 <_dtoa_r+0x8de>
 800a458:	2300      	movs	r3, #0
 800a45a:	9306      	str	r3, [sp, #24]
 800a45c:	6933      	ldr	r3, [r6, #16]
 800a45e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a462:	6918      	ldr	r0, [r3, #16]
 800a464:	f000 fe90 	bl	800b188 <__hi0bits>
 800a468:	f1c0 0020 	rsb	r0, r0, #32
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	4418      	add	r0, r3
 800a470:	f010 001f 	ands.w	r0, r0, #31
 800a474:	f000 8086 	beq.w	800a584 <_dtoa_r+0x91c>
 800a478:	f1c0 0320 	rsb	r3, r0, #32
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	dd7f      	ble.n	800a580 <_dtoa_r+0x918>
 800a480:	f1c0 001c 	rsb	r0, r0, #28
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	4403      	add	r3, r0
 800a488:	4480      	add	r8, r0
 800a48a:	4405      	add	r5, r0
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	f1b8 0f00 	cmp.w	r8, #0
 800a492:	dd05      	ble.n	800a4a0 <_dtoa_r+0x838>
 800a494:	4659      	mov	r1, fp
 800a496:	4642      	mov	r2, r8
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 ffdb 	bl	800b454 <__lshift>
 800a49e:	4683      	mov	fp, r0
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dd05      	ble.n	800a4b2 <_dtoa_r+0x84a>
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f000 ffd2 	bl	800b454 <__lshift>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d069      	beq.n	800a58c <_dtoa_r+0x924>
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f001 f836 	bl	800b52c <__mcmp>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	da63      	bge.n	800a58c <_dtoa_r+0x924>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4659      	mov	r1, fp
 800a4c8:	220a      	movs	r2, #10
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fdc8 	bl	800b060 <__multadd>
 800a4d0:	9b08      	ldr	r3, [sp, #32]
 800a4d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4d6:	4683      	mov	fp, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 818f 	beq.w	800a7fc <_dtoa_r+0xb94>
 800a4de:	4639      	mov	r1, r7
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	220a      	movs	r2, #10
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fdbb 	bl	800b060 <__multadd>
 800a4ea:	f1b9 0f00 	cmp.w	r9, #0
 800a4ee:	4607      	mov	r7, r0
 800a4f0:	f300 808e 	bgt.w	800a610 <_dtoa_r+0x9a8>
 800a4f4:	9b05      	ldr	r3, [sp, #20]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	dc50      	bgt.n	800a59c <_dtoa_r+0x934>
 800a4fa:	e089      	b.n	800a610 <_dtoa_r+0x9a8>
 800a4fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a502:	e75d      	b.n	800a3c0 <_dtoa_r+0x758>
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	1e5e      	subs	r6, r3, #1
 800a508:	9b06      	ldr	r3, [sp, #24]
 800a50a:	42b3      	cmp	r3, r6
 800a50c:	bfbf      	itttt	lt
 800a50e:	9b06      	ldrlt	r3, [sp, #24]
 800a510:	9606      	strlt	r6, [sp, #24]
 800a512:	1af2      	sublt	r2, r6, r3
 800a514:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a516:	bfb6      	itet	lt
 800a518:	189b      	addlt	r3, r3, r2
 800a51a:	1b9e      	subge	r6, r3, r6
 800a51c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a51e:	9b01      	ldr	r3, [sp, #4]
 800a520:	bfb8      	it	lt
 800a522:	2600      	movlt	r6, #0
 800a524:	2b00      	cmp	r3, #0
 800a526:	bfb5      	itete	lt
 800a528:	eba8 0503 	sublt.w	r5, r8, r3
 800a52c:	9b01      	ldrge	r3, [sp, #4]
 800a52e:	2300      	movlt	r3, #0
 800a530:	4645      	movge	r5, r8
 800a532:	e747      	b.n	800a3c4 <_dtoa_r+0x75c>
 800a534:	9e06      	ldr	r6, [sp, #24]
 800a536:	9f08      	ldr	r7, [sp, #32]
 800a538:	4645      	mov	r5, r8
 800a53a:	e74c      	b.n	800a3d6 <_dtoa_r+0x76e>
 800a53c:	9a06      	ldr	r2, [sp, #24]
 800a53e:	e775      	b.n	800a42c <_dtoa_r+0x7c4>
 800a540:	9b05      	ldr	r3, [sp, #20]
 800a542:	2b01      	cmp	r3, #1
 800a544:	dc18      	bgt.n	800a578 <_dtoa_r+0x910>
 800a546:	9b02      	ldr	r3, [sp, #8]
 800a548:	b9b3      	cbnz	r3, 800a578 <_dtoa_r+0x910>
 800a54a:	9b03      	ldr	r3, [sp, #12]
 800a54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a550:	b9a3      	cbnz	r3, 800a57c <_dtoa_r+0x914>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a558:	0d1b      	lsrs	r3, r3, #20
 800a55a:	051b      	lsls	r3, r3, #20
 800a55c:	b12b      	cbz	r3, 800a56a <_dtoa_r+0x902>
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	3301      	adds	r3, #1
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	f108 0801 	add.w	r8, r8, #1
 800a568:	2301      	movs	r3, #1
 800a56a:	9306      	str	r3, [sp, #24]
 800a56c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f47f af74 	bne.w	800a45c <_dtoa_r+0x7f4>
 800a574:	2001      	movs	r0, #1
 800a576:	e779      	b.n	800a46c <_dtoa_r+0x804>
 800a578:	2300      	movs	r3, #0
 800a57a:	e7f6      	b.n	800a56a <_dtoa_r+0x902>
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	e7f4      	b.n	800a56a <_dtoa_r+0x902>
 800a580:	d085      	beq.n	800a48e <_dtoa_r+0x826>
 800a582:	4618      	mov	r0, r3
 800a584:	301c      	adds	r0, #28
 800a586:	e77d      	b.n	800a484 <_dtoa_r+0x81c>
 800a588:	40240000 	.word	0x40240000
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dc38      	bgt.n	800a604 <_dtoa_r+0x99c>
 800a592:	9b05      	ldr	r3, [sp, #20]
 800a594:	2b02      	cmp	r3, #2
 800a596:	dd35      	ble.n	800a604 <_dtoa_r+0x99c>
 800a598:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a59c:	f1b9 0f00 	cmp.w	r9, #0
 800a5a0:	d10d      	bne.n	800a5be <_dtoa_r+0x956>
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	464b      	mov	r3, r9
 800a5a6:	2205      	movs	r2, #5
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fd59 	bl	800b060 <__multadd>
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	4658      	mov	r0, fp
 800a5b4:	f000 ffba 	bl	800b52c <__mcmp>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f73f adbd 	bgt.w	800a138 <_dtoa_r+0x4d0>
 800a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c0:	9d00      	ldr	r5, [sp, #0]
 800a5c2:	ea6f 0a03 	mvn.w	sl, r3
 800a5c6:	f04f 0800 	mov.w	r8, #0
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 fd25 	bl	800b01c <_Bfree>
 800a5d2:	2f00      	cmp	r7, #0
 800a5d4:	f43f aeb4 	beq.w	800a340 <_dtoa_r+0x6d8>
 800a5d8:	f1b8 0f00 	cmp.w	r8, #0
 800a5dc:	d005      	beq.n	800a5ea <_dtoa_r+0x982>
 800a5de:	45b8      	cmp	r8, r7
 800a5e0:	d003      	beq.n	800a5ea <_dtoa_r+0x982>
 800a5e2:	4641      	mov	r1, r8
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fd19 	bl	800b01c <_Bfree>
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fd15 	bl	800b01c <_Bfree>
 800a5f2:	e6a5      	b.n	800a340 <_dtoa_r+0x6d8>
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	4637      	mov	r7, r6
 800a5f8:	e7e1      	b.n	800a5be <_dtoa_r+0x956>
 800a5fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a5fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a600:	4637      	mov	r7, r6
 800a602:	e599      	b.n	800a138 <_dtoa_r+0x4d0>
 800a604:	9b08      	ldr	r3, [sp, #32]
 800a606:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 80fd 	beq.w	800a80a <_dtoa_r+0xba2>
 800a610:	2d00      	cmp	r5, #0
 800a612:	dd05      	ble.n	800a620 <_dtoa_r+0x9b8>
 800a614:	4639      	mov	r1, r7
 800a616:	462a      	mov	r2, r5
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 ff1b 	bl	800b454 <__lshift>
 800a61e:	4607      	mov	r7, r0
 800a620:	9b06      	ldr	r3, [sp, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d05c      	beq.n	800a6e0 <_dtoa_r+0xa78>
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fcb7 	bl	800af9c <_Balloc>
 800a62e:	4605      	mov	r5, r0
 800a630:	b928      	cbnz	r0, 800a63e <_dtoa_r+0x9d6>
 800a632:	4b80      	ldr	r3, [pc, #512]	; (800a834 <_dtoa_r+0xbcc>)
 800a634:	4602      	mov	r2, r0
 800a636:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a63a:	f7ff bb2e 	b.w	8009c9a <_dtoa_r+0x32>
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	3202      	adds	r2, #2
 800a642:	0092      	lsls	r2, r2, #2
 800a644:	f107 010c 	add.w	r1, r7, #12
 800a648:	300c      	adds	r0, #12
 800a64a:	f000 fc99 	bl	800af80 <memcpy>
 800a64e:	2201      	movs	r2, #1
 800a650:	4629      	mov	r1, r5
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fefe 	bl	800b454 <__lshift>
 800a658:	9b00      	ldr	r3, [sp, #0]
 800a65a:	3301      	adds	r3, #1
 800a65c:	9301      	str	r3, [sp, #4]
 800a65e:	9b00      	ldr	r3, [sp, #0]
 800a660:	444b      	add	r3, r9
 800a662:	9307      	str	r3, [sp, #28]
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	46b8      	mov	r8, r7
 800a66c:	9306      	str	r3, [sp, #24]
 800a66e:	4607      	mov	r7, r0
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	4631      	mov	r1, r6
 800a674:	3b01      	subs	r3, #1
 800a676:	4658      	mov	r0, fp
 800a678:	9302      	str	r3, [sp, #8]
 800a67a:	f7ff fa69 	bl	8009b50 <quorem>
 800a67e:	4603      	mov	r3, r0
 800a680:	3330      	adds	r3, #48	; 0x30
 800a682:	9004      	str	r0, [sp, #16]
 800a684:	4641      	mov	r1, r8
 800a686:	4658      	mov	r0, fp
 800a688:	9308      	str	r3, [sp, #32]
 800a68a:	f000 ff4f 	bl	800b52c <__mcmp>
 800a68e:	463a      	mov	r2, r7
 800a690:	4681      	mov	r9, r0
 800a692:	4631      	mov	r1, r6
 800a694:	4620      	mov	r0, r4
 800a696:	f000 ff65 	bl	800b564 <__mdiff>
 800a69a:	68c2      	ldr	r2, [r0, #12]
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	bb02      	cbnz	r2, 800a6e4 <_dtoa_r+0xa7c>
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	4658      	mov	r0, fp
 800a6a6:	f000 ff41 	bl	800b52c <__mcmp>
 800a6aa:	9b08      	ldr	r3, [sp, #32]
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a6b6:	f000 fcb1 	bl	800b01c <_Bfree>
 800a6ba:	9b05      	ldr	r3, [sp, #20]
 800a6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6be:	9d01      	ldr	r5, [sp, #4]
 800a6c0:	ea43 0102 	orr.w	r1, r3, r2
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	9b08      	ldr	r3, [sp, #32]
 800a6ca:	d10d      	bne.n	800a6e8 <_dtoa_r+0xa80>
 800a6cc:	2b39      	cmp	r3, #57	; 0x39
 800a6ce:	d029      	beq.n	800a724 <_dtoa_r+0xabc>
 800a6d0:	f1b9 0f00 	cmp.w	r9, #0
 800a6d4:	dd01      	ble.n	800a6da <_dtoa_r+0xa72>
 800a6d6:	9b04      	ldr	r3, [sp, #16]
 800a6d8:	3331      	adds	r3, #49	; 0x31
 800a6da:	9a02      	ldr	r2, [sp, #8]
 800a6dc:	7013      	strb	r3, [r2, #0]
 800a6de:	e774      	b.n	800a5ca <_dtoa_r+0x962>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	e7b9      	b.n	800a658 <_dtoa_r+0x9f0>
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	e7e2      	b.n	800a6ae <_dtoa_r+0xa46>
 800a6e8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ec:	db06      	blt.n	800a6fc <_dtoa_r+0xa94>
 800a6ee:	9905      	ldr	r1, [sp, #20]
 800a6f0:	ea41 0909 	orr.w	r9, r1, r9
 800a6f4:	9906      	ldr	r1, [sp, #24]
 800a6f6:	ea59 0101 	orrs.w	r1, r9, r1
 800a6fa:	d120      	bne.n	800a73e <_dtoa_r+0xad6>
 800a6fc:	2a00      	cmp	r2, #0
 800a6fe:	ddec      	ble.n	800a6da <_dtoa_r+0xa72>
 800a700:	4659      	mov	r1, fp
 800a702:	2201      	movs	r2, #1
 800a704:	4620      	mov	r0, r4
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	f000 fea4 	bl	800b454 <__lshift>
 800a70c:	4631      	mov	r1, r6
 800a70e:	4683      	mov	fp, r0
 800a710:	f000 ff0c 	bl	800b52c <__mcmp>
 800a714:	2800      	cmp	r0, #0
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	dc02      	bgt.n	800a720 <_dtoa_r+0xab8>
 800a71a:	d1de      	bne.n	800a6da <_dtoa_r+0xa72>
 800a71c:	07da      	lsls	r2, r3, #31
 800a71e:	d5dc      	bpl.n	800a6da <_dtoa_r+0xa72>
 800a720:	2b39      	cmp	r3, #57	; 0x39
 800a722:	d1d8      	bne.n	800a6d6 <_dtoa_r+0xa6e>
 800a724:	9a02      	ldr	r2, [sp, #8]
 800a726:	2339      	movs	r3, #57	; 0x39
 800a728:	7013      	strb	r3, [r2, #0]
 800a72a:	462b      	mov	r3, r5
 800a72c:	461d      	mov	r5, r3
 800a72e:	3b01      	subs	r3, #1
 800a730:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a734:	2a39      	cmp	r2, #57	; 0x39
 800a736:	d050      	beq.n	800a7da <_dtoa_r+0xb72>
 800a738:	3201      	adds	r2, #1
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	e745      	b.n	800a5ca <_dtoa_r+0x962>
 800a73e:	2a00      	cmp	r2, #0
 800a740:	dd03      	ble.n	800a74a <_dtoa_r+0xae2>
 800a742:	2b39      	cmp	r3, #57	; 0x39
 800a744:	d0ee      	beq.n	800a724 <_dtoa_r+0xabc>
 800a746:	3301      	adds	r3, #1
 800a748:	e7c7      	b.n	800a6da <_dtoa_r+0xa72>
 800a74a:	9a01      	ldr	r2, [sp, #4]
 800a74c:	9907      	ldr	r1, [sp, #28]
 800a74e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a752:	428a      	cmp	r2, r1
 800a754:	d02a      	beq.n	800a7ac <_dtoa_r+0xb44>
 800a756:	4659      	mov	r1, fp
 800a758:	2300      	movs	r3, #0
 800a75a:	220a      	movs	r2, #10
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 fc7f 	bl	800b060 <__multadd>
 800a762:	45b8      	cmp	r8, r7
 800a764:	4683      	mov	fp, r0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	f04f 020a 	mov.w	r2, #10
 800a76e:	4641      	mov	r1, r8
 800a770:	4620      	mov	r0, r4
 800a772:	d107      	bne.n	800a784 <_dtoa_r+0xb1c>
 800a774:	f000 fc74 	bl	800b060 <__multadd>
 800a778:	4680      	mov	r8, r0
 800a77a:	4607      	mov	r7, r0
 800a77c:	9b01      	ldr	r3, [sp, #4]
 800a77e:	3301      	adds	r3, #1
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	e775      	b.n	800a670 <_dtoa_r+0xa08>
 800a784:	f000 fc6c 	bl	800b060 <__multadd>
 800a788:	4639      	mov	r1, r7
 800a78a:	4680      	mov	r8, r0
 800a78c:	2300      	movs	r3, #0
 800a78e:	220a      	movs	r2, #10
 800a790:	4620      	mov	r0, r4
 800a792:	f000 fc65 	bl	800b060 <__multadd>
 800a796:	4607      	mov	r7, r0
 800a798:	e7f0      	b.n	800a77c <_dtoa_r+0xb14>
 800a79a:	f1b9 0f00 	cmp.w	r9, #0
 800a79e:	9a00      	ldr	r2, [sp, #0]
 800a7a0:	bfcc      	ite	gt
 800a7a2:	464d      	movgt	r5, r9
 800a7a4:	2501      	movle	r5, #1
 800a7a6:	4415      	add	r5, r2
 800a7a8:	f04f 0800 	mov.w	r8, #0
 800a7ac:	4659      	mov	r1, fp
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	9301      	str	r3, [sp, #4]
 800a7b4:	f000 fe4e 	bl	800b454 <__lshift>
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4683      	mov	fp, r0
 800a7bc:	f000 feb6 	bl	800b52c <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dcb2      	bgt.n	800a72a <_dtoa_r+0xac2>
 800a7c4:	d102      	bne.n	800a7cc <_dtoa_r+0xb64>
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	07db      	lsls	r3, r3, #31
 800a7ca:	d4ae      	bmi.n	800a72a <_dtoa_r+0xac2>
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	461d      	mov	r5, r3
 800a7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7d4:	2a30      	cmp	r2, #48	; 0x30
 800a7d6:	d0fa      	beq.n	800a7ce <_dtoa_r+0xb66>
 800a7d8:	e6f7      	b.n	800a5ca <_dtoa_r+0x962>
 800a7da:	9a00      	ldr	r2, [sp, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d1a5      	bne.n	800a72c <_dtoa_r+0xac4>
 800a7e0:	f10a 0a01 	add.w	sl, sl, #1
 800a7e4:	2331      	movs	r3, #49	; 0x31
 800a7e6:	e779      	b.n	800a6dc <_dtoa_r+0xa74>
 800a7e8:	4b13      	ldr	r3, [pc, #76]	; (800a838 <_dtoa_r+0xbd0>)
 800a7ea:	f7ff baaf 	b.w	8009d4c <_dtoa_r+0xe4>
 800a7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f47f aa86 	bne.w	8009d02 <_dtoa_r+0x9a>
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <_dtoa_r+0xbd4>)
 800a7f8:	f7ff baa8 	b.w	8009d4c <_dtoa_r+0xe4>
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	dc03      	bgt.n	800a80a <_dtoa_r+0xba2>
 800a802:	9b05      	ldr	r3, [sp, #20]
 800a804:	2b02      	cmp	r3, #2
 800a806:	f73f aec9 	bgt.w	800a59c <_dtoa_r+0x934>
 800a80a:	9d00      	ldr	r5, [sp, #0]
 800a80c:	4631      	mov	r1, r6
 800a80e:	4658      	mov	r0, fp
 800a810:	f7ff f99e 	bl	8009b50 <quorem>
 800a814:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a818:	f805 3b01 	strb.w	r3, [r5], #1
 800a81c:	9a00      	ldr	r2, [sp, #0]
 800a81e:	1aaa      	subs	r2, r5, r2
 800a820:	4591      	cmp	r9, r2
 800a822:	ddba      	ble.n	800a79a <_dtoa_r+0xb32>
 800a824:	4659      	mov	r1, fp
 800a826:	2300      	movs	r3, #0
 800a828:	220a      	movs	r2, #10
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fc18 	bl	800b060 <__multadd>
 800a830:	4683      	mov	fp, r0
 800a832:	e7eb      	b.n	800a80c <_dtoa_r+0xba4>
 800a834:	0800d2b4 	.word	0x0800d2b4
 800a838:	0800d4b9 	.word	0x0800d4b9
 800a83c:	0800d231 	.word	0x0800d231

0800a840 <rshift>:
 800a840:	6903      	ldr	r3, [r0, #16]
 800a842:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a84a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a84e:	f100 0414 	add.w	r4, r0, #20
 800a852:	dd45      	ble.n	800a8e0 <rshift+0xa0>
 800a854:	f011 011f 	ands.w	r1, r1, #31
 800a858:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a85c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a860:	d10c      	bne.n	800a87c <rshift+0x3c>
 800a862:	f100 0710 	add.w	r7, r0, #16
 800a866:	4629      	mov	r1, r5
 800a868:	42b1      	cmp	r1, r6
 800a86a:	d334      	bcc.n	800a8d6 <rshift+0x96>
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	1eea      	subs	r2, r5, #3
 800a872:	4296      	cmp	r6, r2
 800a874:	bf38      	it	cc
 800a876:	2300      	movcc	r3, #0
 800a878:	4423      	add	r3, r4
 800a87a:	e015      	b.n	800a8a8 <rshift+0x68>
 800a87c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a880:	f1c1 0820 	rsb	r8, r1, #32
 800a884:	40cf      	lsrs	r7, r1
 800a886:	f105 0e04 	add.w	lr, r5, #4
 800a88a:	46a1      	mov	r9, r4
 800a88c:	4576      	cmp	r6, lr
 800a88e:	46f4      	mov	ip, lr
 800a890:	d815      	bhi.n	800a8be <rshift+0x7e>
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	009a      	lsls	r2, r3, #2
 800a896:	3a04      	subs	r2, #4
 800a898:	3501      	adds	r5, #1
 800a89a:	42ae      	cmp	r6, r5
 800a89c:	bf38      	it	cc
 800a89e:	2200      	movcc	r2, #0
 800a8a0:	18a3      	adds	r3, r4, r2
 800a8a2:	50a7      	str	r7, [r4, r2]
 800a8a4:	b107      	cbz	r7, 800a8a8 <rshift+0x68>
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	1b1a      	subs	r2, r3, r4
 800a8aa:	42a3      	cmp	r3, r4
 800a8ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8b0:	bf08      	it	eq
 800a8b2:	2300      	moveq	r3, #0
 800a8b4:	6102      	str	r2, [r0, #16]
 800a8b6:	bf08      	it	eq
 800a8b8:	6143      	streq	r3, [r0, #20]
 800a8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8be:	f8dc c000 	ldr.w	ip, [ip]
 800a8c2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8c6:	ea4c 0707 	orr.w	r7, ip, r7
 800a8ca:	f849 7b04 	str.w	r7, [r9], #4
 800a8ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8d2:	40cf      	lsrs	r7, r1
 800a8d4:	e7da      	b.n	800a88c <rshift+0x4c>
 800a8d6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8da:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8de:	e7c3      	b.n	800a868 <rshift+0x28>
 800a8e0:	4623      	mov	r3, r4
 800a8e2:	e7e1      	b.n	800a8a8 <rshift+0x68>

0800a8e4 <__hexdig_fun>:
 800a8e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8e8:	2b09      	cmp	r3, #9
 800a8ea:	d802      	bhi.n	800a8f2 <__hexdig_fun+0xe>
 800a8ec:	3820      	subs	r0, #32
 800a8ee:	b2c0      	uxtb	r0, r0
 800a8f0:	4770      	bx	lr
 800a8f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d801      	bhi.n	800a8fe <__hexdig_fun+0x1a>
 800a8fa:	3847      	subs	r0, #71	; 0x47
 800a8fc:	e7f7      	b.n	800a8ee <__hexdig_fun+0xa>
 800a8fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a902:	2b05      	cmp	r3, #5
 800a904:	d801      	bhi.n	800a90a <__hexdig_fun+0x26>
 800a906:	3827      	subs	r0, #39	; 0x27
 800a908:	e7f1      	b.n	800a8ee <__hexdig_fun+0xa>
 800a90a:	2000      	movs	r0, #0
 800a90c:	4770      	bx	lr
	...

0800a910 <__gethex>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	ed2d 8b02 	vpush	{d8}
 800a918:	b089      	sub	sp, #36	; 0x24
 800a91a:	ee08 0a10 	vmov	s16, r0
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	4bbc      	ldr	r3, [pc, #752]	; (800ac14 <__gethex+0x304>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	468b      	mov	fp, r1
 800a92a:	4690      	mov	r8, r2
 800a92c:	f7f5 fc70 	bl	8000210 <strlen>
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	f8db 2000 	ldr.w	r2, [fp]
 800a936:	4403      	add	r3, r0
 800a938:	4682      	mov	sl, r0
 800a93a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a93e:	9305      	str	r3, [sp, #20]
 800a940:	1c93      	adds	r3, r2, #2
 800a942:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a946:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a94a:	32fe      	adds	r2, #254	; 0xfe
 800a94c:	18d1      	adds	r1, r2, r3
 800a94e:	461f      	mov	r7, r3
 800a950:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a954:	9100      	str	r1, [sp, #0]
 800a956:	2830      	cmp	r0, #48	; 0x30
 800a958:	d0f8      	beq.n	800a94c <__gethex+0x3c>
 800a95a:	f7ff ffc3 	bl	800a8e4 <__hexdig_fun>
 800a95e:	4604      	mov	r4, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	d13a      	bne.n	800a9da <__gethex+0xca>
 800a964:	9901      	ldr	r1, [sp, #4]
 800a966:	4652      	mov	r2, sl
 800a968:	4638      	mov	r0, r7
 800a96a:	f001 fd6b 	bl	800c444 <strncmp>
 800a96e:	4605      	mov	r5, r0
 800a970:	2800      	cmp	r0, #0
 800a972:	d168      	bne.n	800aa46 <__gethex+0x136>
 800a974:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a978:	eb07 060a 	add.w	r6, r7, sl
 800a97c:	f7ff ffb2 	bl	800a8e4 <__hexdig_fun>
 800a980:	2800      	cmp	r0, #0
 800a982:	d062      	beq.n	800aa4a <__gethex+0x13a>
 800a984:	4633      	mov	r3, r6
 800a986:	7818      	ldrb	r0, [r3, #0]
 800a988:	2830      	cmp	r0, #48	; 0x30
 800a98a:	461f      	mov	r7, r3
 800a98c:	f103 0301 	add.w	r3, r3, #1
 800a990:	d0f9      	beq.n	800a986 <__gethex+0x76>
 800a992:	f7ff ffa7 	bl	800a8e4 <__hexdig_fun>
 800a996:	2301      	movs	r3, #1
 800a998:	fab0 f480 	clz	r4, r0
 800a99c:	0964      	lsrs	r4, r4, #5
 800a99e:	4635      	mov	r5, r6
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	463a      	mov	r2, r7
 800a9a4:	4616      	mov	r6, r2
 800a9a6:	3201      	adds	r2, #1
 800a9a8:	7830      	ldrb	r0, [r6, #0]
 800a9aa:	f7ff ff9b 	bl	800a8e4 <__hexdig_fun>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d1f8      	bne.n	800a9a4 <__gethex+0x94>
 800a9b2:	9901      	ldr	r1, [sp, #4]
 800a9b4:	4652      	mov	r2, sl
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f001 fd44 	bl	800c444 <strncmp>
 800a9bc:	b980      	cbnz	r0, 800a9e0 <__gethex+0xd0>
 800a9be:	b94d      	cbnz	r5, 800a9d4 <__gethex+0xc4>
 800a9c0:	eb06 050a 	add.w	r5, r6, sl
 800a9c4:	462a      	mov	r2, r5
 800a9c6:	4616      	mov	r6, r2
 800a9c8:	3201      	adds	r2, #1
 800a9ca:	7830      	ldrb	r0, [r6, #0]
 800a9cc:	f7ff ff8a 	bl	800a8e4 <__hexdig_fun>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d1f8      	bne.n	800a9c6 <__gethex+0xb6>
 800a9d4:	1bad      	subs	r5, r5, r6
 800a9d6:	00ad      	lsls	r5, r5, #2
 800a9d8:	e004      	b.n	800a9e4 <__gethex+0xd4>
 800a9da:	2400      	movs	r4, #0
 800a9dc:	4625      	mov	r5, r4
 800a9de:	e7e0      	b.n	800a9a2 <__gethex+0x92>
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	d1f7      	bne.n	800a9d4 <__gethex+0xc4>
 800a9e4:	7833      	ldrb	r3, [r6, #0]
 800a9e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9ea:	2b50      	cmp	r3, #80	; 0x50
 800a9ec:	d13b      	bne.n	800aa66 <__gethex+0x156>
 800a9ee:	7873      	ldrb	r3, [r6, #1]
 800a9f0:	2b2b      	cmp	r3, #43	; 0x2b
 800a9f2:	d02c      	beq.n	800aa4e <__gethex+0x13e>
 800a9f4:	2b2d      	cmp	r3, #45	; 0x2d
 800a9f6:	d02e      	beq.n	800aa56 <__gethex+0x146>
 800a9f8:	1c71      	adds	r1, r6, #1
 800a9fa:	f04f 0900 	mov.w	r9, #0
 800a9fe:	7808      	ldrb	r0, [r1, #0]
 800aa00:	f7ff ff70 	bl	800a8e4 <__hexdig_fun>
 800aa04:	1e43      	subs	r3, r0, #1
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b18      	cmp	r3, #24
 800aa0a:	d82c      	bhi.n	800aa66 <__gethex+0x156>
 800aa0c:	f1a0 0210 	sub.w	r2, r0, #16
 800aa10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa14:	f7ff ff66 	bl	800a8e4 <__hexdig_fun>
 800aa18:	1e43      	subs	r3, r0, #1
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	2b18      	cmp	r3, #24
 800aa1e:	d91d      	bls.n	800aa5c <__gethex+0x14c>
 800aa20:	f1b9 0f00 	cmp.w	r9, #0
 800aa24:	d000      	beq.n	800aa28 <__gethex+0x118>
 800aa26:	4252      	negs	r2, r2
 800aa28:	4415      	add	r5, r2
 800aa2a:	f8cb 1000 	str.w	r1, [fp]
 800aa2e:	b1e4      	cbz	r4, 800aa6a <__gethex+0x15a>
 800aa30:	9b00      	ldr	r3, [sp, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	bf14      	ite	ne
 800aa36:	2700      	movne	r7, #0
 800aa38:	2706      	moveq	r7, #6
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	b009      	add	sp, #36	; 0x24
 800aa3e:	ecbd 8b02 	vpop	{d8}
 800aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa46:	463e      	mov	r6, r7
 800aa48:	4625      	mov	r5, r4
 800aa4a:	2401      	movs	r4, #1
 800aa4c:	e7ca      	b.n	800a9e4 <__gethex+0xd4>
 800aa4e:	f04f 0900 	mov.w	r9, #0
 800aa52:	1cb1      	adds	r1, r6, #2
 800aa54:	e7d3      	b.n	800a9fe <__gethex+0xee>
 800aa56:	f04f 0901 	mov.w	r9, #1
 800aa5a:	e7fa      	b.n	800aa52 <__gethex+0x142>
 800aa5c:	230a      	movs	r3, #10
 800aa5e:	fb03 0202 	mla	r2, r3, r2, r0
 800aa62:	3a10      	subs	r2, #16
 800aa64:	e7d4      	b.n	800aa10 <__gethex+0x100>
 800aa66:	4631      	mov	r1, r6
 800aa68:	e7df      	b.n	800aa2a <__gethex+0x11a>
 800aa6a:	1bf3      	subs	r3, r6, r7
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	4621      	mov	r1, r4
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	dc0b      	bgt.n	800aa8c <__gethex+0x17c>
 800aa74:	ee18 0a10 	vmov	r0, s16
 800aa78:	f000 fa90 	bl	800af9c <_Balloc>
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	b940      	cbnz	r0, 800aa92 <__gethex+0x182>
 800aa80:	4b65      	ldr	r3, [pc, #404]	; (800ac18 <__gethex+0x308>)
 800aa82:	4602      	mov	r2, r0
 800aa84:	21de      	movs	r1, #222	; 0xde
 800aa86:	4865      	ldr	r0, [pc, #404]	; (800ac1c <__gethex+0x30c>)
 800aa88:	f001 fdb4 	bl	800c5f4 <__assert_func>
 800aa8c:	3101      	adds	r1, #1
 800aa8e:	105b      	asrs	r3, r3, #1
 800aa90:	e7ee      	b.n	800aa70 <__gethex+0x160>
 800aa92:	f100 0914 	add.w	r9, r0, #20
 800aa96:	f04f 0b00 	mov.w	fp, #0
 800aa9a:	f1ca 0301 	rsb	r3, sl, #1
 800aa9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800aaa2:	f8cd b000 	str.w	fp, [sp]
 800aaa6:	9306      	str	r3, [sp, #24]
 800aaa8:	42b7      	cmp	r7, r6
 800aaaa:	d340      	bcc.n	800ab2e <__gethex+0x21e>
 800aaac:	9802      	ldr	r0, [sp, #8]
 800aaae:	9b00      	ldr	r3, [sp, #0]
 800aab0:	f840 3b04 	str.w	r3, [r0], #4
 800aab4:	eba0 0009 	sub.w	r0, r0, r9
 800aab8:	1080      	asrs	r0, r0, #2
 800aaba:	0146      	lsls	r6, r0, #5
 800aabc:	6120      	str	r0, [r4, #16]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fb62 	bl	800b188 <__hi0bits>
 800aac4:	1a30      	subs	r0, r6, r0
 800aac6:	f8d8 6000 	ldr.w	r6, [r8]
 800aaca:	42b0      	cmp	r0, r6
 800aacc:	dd63      	ble.n	800ab96 <__gethex+0x286>
 800aace:	1b87      	subs	r7, r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fefc 	bl	800b8d0 <__any_on>
 800aad8:	4682      	mov	sl, r0
 800aada:	b1a8      	cbz	r0, 800ab08 <__gethex+0x1f8>
 800aadc:	1e7b      	subs	r3, r7, #1
 800aade:	1159      	asrs	r1, r3, #5
 800aae0:	f003 021f 	and.w	r2, r3, #31
 800aae4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aae8:	f04f 0a01 	mov.w	sl, #1
 800aaec:	fa0a f202 	lsl.w	r2, sl, r2
 800aaf0:	420a      	tst	r2, r1
 800aaf2:	d009      	beq.n	800ab08 <__gethex+0x1f8>
 800aaf4:	4553      	cmp	r3, sl
 800aaf6:	dd05      	ble.n	800ab04 <__gethex+0x1f4>
 800aaf8:	1eb9      	subs	r1, r7, #2
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fee8 	bl	800b8d0 <__any_on>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d145      	bne.n	800ab90 <__gethex+0x280>
 800ab04:	f04f 0a02 	mov.w	sl, #2
 800ab08:	4639      	mov	r1, r7
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f7ff fe98 	bl	800a840 <rshift>
 800ab10:	443d      	add	r5, r7
 800ab12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab16:	42ab      	cmp	r3, r5
 800ab18:	da4c      	bge.n	800abb4 <__gethex+0x2a4>
 800ab1a:	ee18 0a10 	vmov	r0, s16
 800ab1e:	4621      	mov	r1, r4
 800ab20:	f000 fa7c 	bl	800b01c <_Bfree>
 800ab24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab26:	2300      	movs	r3, #0
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	27a3      	movs	r7, #163	; 0xa3
 800ab2c:	e785      	b.n	800aa3a <__gethex+0x12a>
 800ab2e:	1e73      	subs	r3, r6, #1
 800ab30:	9a05      	ldr	r2, [sp, #20]
 800ab32:	9303      	str	r3, [sp, #12]
 800ab34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d019      	beq.n	800ab70 <__gethex+0x260>
 800ab3c:	f1bb 0f20 	cmp.w	fp, #32
 800ab40:	d107      	bne.n	800ab52 <__gethex+0x242>
 800ab42:	9b02      	ldr	r3, [sp, #8]
 800ab44:	9a00      	ldr	r2, [sp, #0]
 800ab46:	f843 2b04 	str.w	r2, [r3], #4
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	9300      	str	r3, [sp, #0]
 800ab50:	469b      	mov	fp, r3
 800ab52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab56:	f7ff fec5 	bl	800a8e4 <__hexdig_fun>
 800ab5a:	9b00      	ldr	r3, [sp, #0]
 800ab5c:	f000 000f 	and.w	r0, r0, #15
 800ab60:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab64:	4303      	orrs	r3, r0
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	f10b 0b04 	add.w	fp, fp, #4
 800ab6c:	9b03      	ldr	r3, [sp, #12]
 800ab6e:	e00d      	b.n	800ab8c <__gethex+0x27c>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	9a06      	ldr	r2, [sp, #24]
 800ab74:	4413      	add	r3, r2
 800ab76:	42bb      	cmp	r3, r7
 800ab78:	d3e0      	bcc.n	800ab3c <__gethex+0x22c>
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	9901      	ldr	r1, [sp, #4]
 800ab7e:	9307      	str	r3, [sp, #28]
 800ab80:	4652      	mov	r2, sl
 800ab82:	f001 fc5f 	bl	800c444 <strncmp>
 800ab86:	9b07      	ldr	r3, [sp, #28]
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d1d7      	bne.n	800ab3c <__gethex+0x22c>
 800ab8c:	461e      	mov	r6, r3
 800ab8e:	e78b      	b.n	800aaa8 <__gethex+0x198>
 800ab90:	f04f 0a03 	mov.w	sl, #3
 800ab94:	e7b8      	b.n	800ab08 <__gethex+0x1f8>
 800ab96:	da0a      	bge.n	800abae <__gethex+0x29e>
 800ab98:	1a37      	subs	r7, r6, r0
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	ee18 0a10 	vmov	r0, s16
 800aba0:	463a      	mov	r2, r7
 800aba2:	f000 fc57 	bl	800b454 <__lshift>
 800aba6:	1bed      	subs	r5, r5, r7
 800aba8:	4604      	mov	r4, r0
 800abaa:	f100 0914 	add.w	r9, r0, #20
 800abae:	f04f 0a00 	mov.w	sl, #0
 800abb2:	e7ae      	b.n	800ab12 <__gethex+0x202>
 800abb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abb8:	42a8      	cmp	r0, r5
 800abba:	dd72      	ble.n	800aca2 <__gethex+0x392>
 800abbc:	1b45      	subs	r5, r0, r5
 800abbe:	42ae      	cmp	r6, r5
 800abc0:	dc36      	bgt.n	800ac30 <__gethex+0x320>
 800abc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d02a      	beq.n	800ac20 <__gethex+0x310>
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d02c      	beq.n	800ac28 <__gethex+0x318>
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d115      	bne.n	800abfe <__gethex+0x2ee>
 800abd2:	42ae      	cmp	r6, r5
 800abd4:	d113      	bne.n	800abfe <__gethex+0x2ee>
 800abd6:	2e01      	cmp	r6, #1
 800abd8:	d10b      	bne.n	800abf2 <__gethex+0x2e2>
 800abda:	9a04      	ldr	r2, [sp, #16]
 800abdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	2301      	movs	r3, #1
 800abe4:	6123      	str	r3, [r4, #16]
 800abe6:	f8c9 3000 	str.w	r3, [r9]
 800abea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abec:	2762      	movs	r7, #98	; 0x62
 800abee:	601c      	str	r4, [r3, #0]
 800abf0:	e723      	b.n	800aa3a <__gethex+0x12a>
 800abf2:	1e71      	subs	r1, r6, #1
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fe6b 	bl	800b8d0 <__any_on>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1ed      	bne.n	800abda <__gethex+0x2ca>
 800abfe:	ee18 0a10 	vmov	r0, s16
 800ac02:	4621      	mov	r1, r4
 800ac04:	f000 fa0a 	bl	800b01c <_Bfree>
 800ac08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	2750      	movs	r7, #80	; 0x50
 800ac10:	e713      	b.n	800aa3a <__gethex+0x12a>
 800ac12:	bf00      	nop
 800ac14:	0800d330 	.word	0x0800d330
 800ac18:	0800d2b4 	.word	0x0800d2b4
 800ac1c:	0800d2c5 	.word	0x0800d2c5
 800ac20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1eb      	bne.n	800abfe <__gethex+0x2ee>
 800ac26:	e7d8      	b.n	800abda <__gethex+0x2ca>
 800ac28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1d5      	bne.n	800abda <__gethex+0x2ca>
 800ac2e:	e7e6      	b.n	800abfe <__gethex+0x2ee>
 800ac30:	1e6f      	subs	r7, r5, #1
 800ac32:	f1ba 0f00 	cmp.w	sl, #0
 800ac36:	d131      	bne.n	800ac9c <__gethex+0x38c>
 800ac38:	b127      	cbz	r7, 800ac44 <__gethex+0x334>
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 fe47 	bl	800b8d0 <__any_on>
 800ac42:	4682      	mov	sl, r0
 800ac44:	117b      	asrs	r3, r7, #5
 800ac46:	2101      	movs	r1, #1
 800ac48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac4c:	f007 071f 	and.w	r7, r7, #31
 800ac50:	fa01 f707 	lsl.w	r7, r1, r7
 800ac54:	421f      	tst	r7, r3
 800ac56:	4629      	mov	r1, r5
 800ac58:	4620      	mov	r0, r4
 800ac5a:	bf18      	it	ne
 800ac5c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac60:	1b76      	subs	r6, r6, r5
 800ac62:	f7ff fded 	bl	800a840 <rshift>
 800ac66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac6a:	2702      	movs	r7, #2
 800ac6c:	f1ba 0f00 	cmp.w	sl, #0
 800ac70:	d048      	beq.n	800ad04 <__gethex+0x3f4>
 800ac72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d015      	beq.n	800aca6 <__gethex+0x396>
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d017      	beq.n	800acae <__gethex+0x39e>
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d109      	bne.n	800ac96 <__gethex+0x386>
 800ac82:	f01a 0f02 	tst.w	sl, #2
 800ac86:	d006      	beq.n	800ac96 <__gethex+0x386>
 800ac88:	f8d9 0000 	ldr.w	r0, [r9]
 800ac8c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac90:	f01a 0f01 	tst.w	sl, #1
 800ac94:	d10e      	bne.n	800acb4 <__gethex+0x3a4>
 800ac96:	f047 0710 	orr.w	r7, r7, #16
 800ac9a:	e033      	b.n	800ad04 <__gethex+0x3f4>
 800ac9c:	f04f 0a01 	mov.w	sl, #1
 800aca0:	e7d0      	b.n	800ac44 <__gethex+0x334>
 800aca2:	2701      	movs	r7, #1
 800aca4:	e7e2      	b.n	800ac6c <__gethex+0x35c>
 800aca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aca8:	f1c3 0301 	rsb	r3, r3, #1
 800acac:	9315      	str	r3, [sp, #84]	; 0x54
 800acae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0f0      	beq.n	800ac96 <__gethex+0x386>
 800acb4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acb8:	f104 0314 	add.w	r3, r4, #20
 800acbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acc4:	f04f 0c00 	mov.w	ip, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f853 2b04 	ldr.w	r2, [r3], #4
 800acce:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acd2:	d01c      	beq.n	800ad0e <__gethex+0x3fe>
 800acd4:	3201      	adds	r2, #1
 800acd6:	6002      	str	r2, [r0, #0]
 800acd8:	2f02      	cmp	r7, #2
 800acda:	f104 0314 	add.w	r3, r4, #20
 800acde:	d13f      	bne.n	800ad60 <__gethex+0x450>
 800ace0:	f8d8 2000 	ldr.w	r2, [r8]
 800ace4:	3a01      	subs	r2, #1
 800ace6:	42b2      	cmp	r2, r6
 800ace8:	d10a      	bne.n	800ad00 <__gethex+0x3f0>
 800acea:	1171      	asrs	r1, r6, #5
 800acec:	2201      	movs	r2, #1
 800acee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acf2:	f006 061f 	and.w	r6, r6, #31
 800acf6:	fa02 f606 	lsl.w	r6, r2, r6
 800acfa:	421e      	tst	r6, r3
 800acfc:	bf18      	it	ne
 800acfe:	4617      	movne	r7, r2
 800ad00:	f047 0720 	orr.w	r7, r7, #32
 800ad04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad06:	601c      	str	r4, [r3, #0]
 800ad08:	9b04      	ldr	r3, [sp, #16]
 800ad0a:	601d      	str	r5, [r3, #0]
 800ad0c:	e695      	b.n	800aa3a <__gethex+0x12a>
 800ad0e:	4299      	cmp	r1, r3
 800ad10:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad14:	d8d8      	bhi.n	800acc8 <__gethex+0x3b8>
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	459b      	cmp	fp, r3
 800ad1a:	db19      	blt.n	800ad50 <__gethex+0x440>
 800ad1c:	6861      	ldr	r1, [r4, #4]
 800ad1e:	ee18 0a10 	vmov	r0, s16
 800ad22:	3101      	adds	r1, #1
 800ad24:	f000 f93a 	bl	800af9c <_Balloc>
 800ad28:	4681      	mov	r9, r0
 800ad2a:	b918      	cbnz	r0, 800ad34 <__gethex+0x424>
 800ad2c:	4b1a      	ldr	r3, [pc, #104]	; (800ad98 <__gethex+0x488>)
 800ad2e:	4602      	mov	r2, r0
 800ad30:	2184      	movs	r1, #132	; 0x84
 800ad32:	e6a8      	b.n	800aa86 <__gethex+0x176>
 800ad34:	6922      	ldr	r2, [r4, #16]
 800ad36:	3202      	adds	r2, #2
 800ad38:	f104 010c 	add.w	r1, r4, #12
 800ad3c:	0092      	lsls	r2, r2, #2
 800ad3e:	300c      	adds	r0, #12
 800ad40:	f000 f91e 	bl	800af80 <memcpy>
 800ad44:	4621      	mov	r1, r4
 800ad46:	ee18 0a10 	vmov	r0, s16
 800ad4a:	f000 f967 	bl	800b01c <_Bfree>
 800ad4e:	464c      	mov	r4, r9
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	1c5a      	adds	r2, r3, #1
 800ad54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad58:	6122      	str	r2, [r4, #16]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	615a      	str	r2, [r3, #20]
 800ad5e:	e7bb      	b.n	800acd8 <__gethex+0x3c8>
 800ad60:	6922      	ldr	r2, [r4, #16]
 800ad62:	455a      	cmp	r2, fp
 800ad64:	dd0b      	ble.n	800ad7e <__gethex+0x46e>
 800ad66:	2101      	movs	r1, #1
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f7ff fd69 	bl	800a840 <rshift>
 800ad6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad72:	3501      	adds	r5, #1
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	f6ff aed0 	blt.w	800ab1a <__gethex+0x20a>
 800ad7a:	2701      	movs	r7, #1
 800ad7c:	e7c0      	b.n	800ad00 <__gethex+0x3f0>
 800ad7e:	f016 061f 	ands.w	r6, r6, #31
 800ad82:	d0fa      	beq.n	800ad7a <__gethex+0x46a>
 800ad84:	449a      	add	sl, r3
 800ad86:	f1c6 0620 	rsb	r6, r6, #32
 800ad8a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ad8e:	f000 f9fb 	bl	800b188 <__hi0bits>
 800ad92:	42b0      	cmp	r0, r6
 800ad94:	dbe7      	blt.n	800ad66 <__gethex+0x456>
 800ad96:	e7f0      	b.n	800ad7a <__gethex+0x46a>
 800ad98:	0800d2b4 	.word	0x0800d2b4

0800ad9c <L_shift>:
 800ad9c:	f1c2 0208 	rsb	r2, r2, #8
 800ada0:	0092      	lsls	r2, r2, #2
 800ada2:	b570      	push	{r4, r5, r6, lr}
 800ada4:	f1c2 0620 	rsb	r6, r2, #32
 800ada8:	6843      	ldr	r3, [r0, #4]
 800adaa:	6804      	ldr	r4, [r0, #0]
 800adac:	fa03 f506 	lsl.w	r5, r3, r6
 800adb0:	432c      	orrs	r4, r5
 800adb2:	40d3      	lsrs	r3, r2
 800adb4:	6004      	str	r4, [r0, #0]
 800adb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800adba:	4288      	cmp	r0, r1
 800adbc:	d3f4      	bcc.n	800ada8 <L_shift+0xc>
 800adbe:	bd70      	pop	{r4, r5, r6, pc}

0800adc0 <__match>:
 800adc0:	b530      	push	{r4, r5, lr}
 800adc2:	6803      	ldr	r3, [r0, #0]
 800adc4:	3301      	adds	r3, #1
 800adc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adca:	b914      	cbnz	r4, 800add2 <__match+0x12>
 800adcc:	6003      	str	r3, [r0, #0]
 800adce:	2001      	movs	r0, #1
 800add0:	bd30      	pop	{r4, r5, pc}
 800add2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adda:	2d19      	cmp	r5, #25
 800addc:	bf98      	it	ls
 800adde:	3220      	addls	r2, #32
 800ade0:	42a2      	cmp	r2, r4
 800ade2:	d0f0      	beq.n	800adc6 <__match+0x6>
 800ade4:	2000      	movs	r0, #0
 800ade6:	e7f3      	b.n	800add0 <__match+0x10>

0800ade8 <__hexnan>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	680b      	ldr	r3, [r1, #0]
 800adee:	6801      	ldr	r1, [r0, #0]
 800adf0:	115e      	asrs	r6, r3, #5
 800adf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800adf6:	f013 031f 	ands.w	r3, r3, #31
 800adfa:	b087      	sub	sp, #28
 800adfc:	bf18      	it	ne
 800adfe:	3604      	addne	r6, #4
 800ae00:	2500      	movs	r5, #0
 800ae02:	1f37      	subs	r7, r6, #4
 800ae04:	4682      	mov	sl, r0
 800ae06:	4690      	mov	r8, r2
 800ae08:	9301      	str	r3, [sp, #4]
 800ae0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae0e:	46b9      	mov	r9, r7
 800ae10:	463c      	mov	r4, r7
 800ae12:	9502      	str	r5, [sp, #8]
 800ae14:	46ab      	mov	fp, r5
 800ae16:	784a      	ldrb	r2, [r1, #1]
 800ae18:	1c4b      	adds	r3, r1, #1
 800ae1a:	9303      	str	r3, [sp, #12]
 800ae1c:	b342      	cbz	r2, 800ae70 <__hexnan+0x88>
 800ae1e:	4610      	mov	r0, r2
 800ae20:	9105      	str	r1, [sp, #20]
 800ae22:	9204      	str	r2, [sp, #16]
 800ae24:	f7ff fd5e 	bl	800a8e4 <__hexdig_fun>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d14f      	bne.n	800aecc <__hexnan+0xe4>
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	9905      	ldr	r1, [sp, #20]
 800ae30:	2a20      	cmp	r2, #32
 800ae32:	d818      	bhi.n	800ae66 <__hexnan+0x7e>
 800ae34:	9b02      	ldr	r3, [sp, #8]
 800ae36:	459b      	cmp	fp, r3
 800ae38:	dd13      	ble.n	800ae62 <__hexnan+0x7a>
 800ae3a:	454c      	cmp	r4, r9
 800ae3c:	d206      	bcs.n	800ae4c <__hexnan+0x64>
 800ae3e:	2d07      	cmp	r5, #7
 800ae40:	dc04      	bgt.n	800ae4c <__hexnan+0x64>
 800ae42:	462a      	mov	r2, r5
 800ae44:	4649      	mov	r1, r9
 800ae46:	4620      	mov	r0, r4
 800ae48:	f7ff ffa8 	bl	800ad9c <L_shift>
 800ae4c:	4544      	cmp	r4, r8
 800ae4e:	d950      	bls.n	800aef2 <__hexnan+0x10a>
 800ae50:	2300      	movs	r3, #0
 800ae52:	f1a4 0904 	sub.w	r9, r4, #4
 800ae56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ae5e:	464c      	mov	r4, r9
 800ae60:	461d      	mov	r5, r3
 800ae62:	9903      	ldr	r1, [sp, #12]
 800ae64:	e7d7      	b.n	800ae16 <__hexnan+0x2e>
 800ae66:	2a29      	cmp	r2, #41	; 0x29
 800ae68:	d156      	bne.n	800af18 <__hexnan+0x130>
 800ae6a:	3102      	adds	r1, #2
 800ae6c:	f8ca 1000 	str.w	r1, [sl]
 800ae70:	f1bb 0f00 	cmp.w	fp, #0
 800ae74:	d050      	beq.n	800af18 <__hexnan+0x130>
 800ae76:	454c      	cmp	r4, r9
 800ae78:	d206      	bcs.n	800ae88 <__hexnan+0xa0>
 800ae7a:	2d07      	cmp	r5, #7
 800ae7c:	dc04      	bgt.n	800ae88 <__hexnan+0xa0>
 800ae7e:	462a      	mov	r2, r5
 800ae80:	4649      	mov	r1, r9
 800ae82:	4620      	mov	r0, r4
 800ae84:	f7ff ff8a 	bl	800ad9c <L_shift>
 800ae88:	4544      	cmp	r4, r8
 800ae8a:	d934      	bls.n	800aef6 <__hexnan+0x10e>
 800ae8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ae90:	4623      	mov	r3, r4
 800ae92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae9a:	429f      	cmp	r7, r3
 800ae9c:	d2f9      	bcs.n	800ae92 <__hexnan+0xaa>
 800ae9e:	1b3b      	subs	r3, r7, r4
 800aea0:	f023 0303 	bic.w	r3, r3, #3
 800aea4:	3304      	adds	r3, #4
 800aea6:	3401      	adds	r4, #1
 800aea8:	3e03      	subs	r6, #3
 800aeaa:	42b4      	cmp	r4, r6
 800aeac:	bf88      	it	hi
 800aeae:	2304      	movhi	r3, #4
 800aeb0:	4443      	add	r3, r8
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f843 2b04 	str.w	r2, [r3], #4
 800aeb8:	429f      	cmp	r7, r3
 800aeba:	d2fb      	bcs.n	800aeb4 <__hexnan+0xcc>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	b91b      	cbnz	r3, 800aec8 <__hexnan+0xe0>
 800aec0:	4547      	cmp	r7, r8
 800aec2:	d127      	bne.n	800af14 <__hexnan+0x12c>
 800aec4:	2301      	movs	r3, #1
 800aec6:	603b      	str	r3, [r7, #0]
 800aec8:	2005      	movs	r0, #5
 800aeca:	e026      	b.n	800af1a <__hexnan+0x132>
 800aecc:	3501      	adds	r5, #1
 800aece:	2d08      	cmp	r5, #8
 800aed0:	f10b 0b01 	add.w	fp, fp, #1
 800aed4:	dd06      	ble.n	800aee4 <__hexnan+0xfc>
 800aed6:	4544      	cmp	r4, r8
 800aed8:	d9c3      	bls.n	800ae62 <__hexnan+0x7a>
 800aeda:	2300      	movs	r3, #0
 800aedc:	f844 3c04 	str.w	r3, [r4, #-4]
 800aee0:	2501      	movs	r5, #1
 800aee2:	3c04      	subs	r4, #4
 800aee4:	6822      	ldr	r2, [r4, #0]
 800aee6:	f000 000f 	and.w	r0, r0, #15
 800aeea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	e7b7      	b.n	800ae62 <__hexnan+0x7a>
 800aef2:	2508      	movs	r5, #8
 800aef4:	e7b5      	b.n	800ae62 <__hexnan+0x7a>
 800aef6:	9b01      	ldr	r3, [sp, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0df      	beq.n	800aebc <__hexnan+0xd4>
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295
 800af00:	f1c3 0320 	rsb	r3, r3, #32
 800af04:	fa22 f303 	lsr.w	r3, r2, r3
 800af08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af0c:	401a      	ands	r2, r3
 800af0e:	f846 2c04 	str.w	r2, [r6, #-4]
 800af12:	e7d3      	b.n	800aebc <__hexnan+0xd4>
 800af14:	3f04      	subs	r7, #4
 800af16:	e7d1      	b.n	800aebc <__hexnan+0xd4>
 800af18:	2004      	movs	r0, #4
 800af1a:	b007      	add	sp, #28
 800af1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af20 <_localeconv_r>:
 800af20:	4800      	ldr	r0, [pc, #0]	; (800af24 <_localeconv_r+0x4>)
 800af22:	4770      	bx	lr
 800af24:	200001cc 	.word	0x200001cc

0800af28 <_lseek_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4d07      	ldr	r5, [pc, #28]	; (800af48 <_lseek_r+0x20>)
 800af2c:	4604      	mov	r4, r0
 800af2e:	4608      	mov	r0, r1
 800af30:	4611      	mov	r1, r2
 800af32:	2200      	movs	r2, #0
 800af34:	602a      	str	r2, [r5, #0]
 800af36:	461a      	mov	r2, r3
 800af38:	f7f7 f9d0 	bl	80022dc <_lseek>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_lseek_r+0x1e>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_lseek_r+0x1e>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	200008bc 	.word	0x200008bc

0800af4c <malloc>:
 800af4c:	4b02      	ldr	r3, [pc, #8]	; (800af58 <malloc+0xc>)
 800af4e:	4601      	mov	r1, r0
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	f000 bd3d 	b.w	800b9d0 <_malloc_r>
 800af56:	bf00      	nop
 800af58:	20000074 	.word	0x20000074

0800af5c <__ascii_mbtowc>:
 800af5c:	b082      	sub	sp, #8
 800af5e:	b901      	cbnz	r1, 800af62 <__ascii_mbtowc+0x6>
 800af60:	a901      	add	r1, sp, #4
 800af62:	b142      	cbz	r2, 800af76 <__ascii_mbtowc+0x1a>
 800af64:	b14b      	cbz	r3, 800af7a <__ascii_mbtowc+0x1e>
 800af66:	7813      	ldrb	r3, [r2, #0]
 800af68:	600b      	str	r3, [r1, #0]
 800af6a:	7812      	ldrb	r2, [r2, #0]
 800af6c:	1e10      	subs	r0, r2, #0
 800af6e:	bf18      	it	ne
 800af70:	2001      	movne	r0, #1
 800af72:	b002      	add	sp, #8
 800af74:	4770      	bx	lr
 800af76:	4610      	mov	r0, r2
 800af78:	e7fb      	b.n	800af72 <__ascii_mbtowc+0x16>
 800af7a:	f06f 0001 	mvn.w	r0, #1
 800af7e:	e7f8      	b.n	800af72 <__ascii_mbtowc+0x16>

0800af80 <memcpy>:
 800af80:	440a      	add	r2, r1
 800af82:	4291      	cmp	r1, r2
 800af84:	f100 33ff 	add.w	r3, r0, #4294967295
 800af88:	d100      	bne.n	800af8c <memcpy+0xc>
 800af8a:	4770      	bx	lr
 800af8c:	b510      	push	{r4, lr}
 800af8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af96:	4291      	cmp	r1, r2
 800af98:	d1f9      	bne.n	800af8e <memcpy+0xe>
 800af9a:	bd10      	pop	{r4, pc}

0800af9c <_Balloc>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afa0:	4604      	mov	r4, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	b976      	cbnz	r6, 800afc4 <_Balloc+0x28>
 800afa6:	2010      	movs	r0, #16
 800afa8:	f7ff ffd0 	bl	800af4c <malloc>
 800afac:	4602      	mov	r2, r0
 800afae:	6260      	str	r0, [r4, #36]	; 0x24
 800afb0:	b920      	cbnz	r0, 800afbc <_Balloc+0x20>
 800afb2:	4b18      	ldr	r3, [pc, #96]	; (800b014 <_Balloc+0x78>)
 800afb4:	4818      	ldr	r0, [pc, #96]	; (800b018 <_Balloc+0x7c>)
 800afb6:	2166      	movs	r1, #102	; 0x66
 800afb8:	f001 fb1c 	bl	800c5f4 <__assert_func>
 800afbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc0:	6006      	str	r6, [r0, #0]
 800afc2:	60c6      	str	r6, [r0, #12]
 800afc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afc6:	68f3      	ldr	r3, [r6, #12]
 800afc8:	b183      	cbz	r3, 800afec <_Balloc+0x50>
 800afca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afd2:	b9b8      	cbnz	r0, 800b004 <_Balloc+0x68>
 800afd4:	2101      	movs	r1, #1
 800afd6:	fa01 f605 	lsl.w	r6, r1, r5
 800afda:	1d72      	adds	r2, r6, #5
 800afdc:	0092      	lsls	r2, r2, #2
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fc97 	bl	800b912 <_calloc_r>
 800afe4:	b160      	cbz	r0, 800b000 <_Balloc+0x64>
 800afe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afea:	e00e      	b.n	800b00a <_Balloc+0x6e>
 800afec:	2221      	movs	r2, #33	; 0x21
 800afee:	2104      	movs	r1, #4
 800aff0:	4620      	mov	r0, r4
 800aff2:	f000 fc8e 	bl	800b912 <_calloc_r>
 800aff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aff8:	60f0      	str	r0, [r6, #12]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e4      	bne.n	800afca <_Balloc+0x2e>
 800b000:	2000      	movs	r0, #0
 800b002:	bd70      	pop	{r4, r5, r6, pc}
 800b004:	6802      	ldr	r2, [r0, #0]
 800b006:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b00a:	2300      	movs	r3, #0
 800b00c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b010:	e7f7      	b.n	800b002 <_Balloc+0x66>
 800b012:	bf00      	nop
 800b014:	0800d23e 	.word	0x0800d23e
 800b018:	0800d344 	.word	0x0800d344

0800b01c <_Bfree>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b020:	4605      	mov	r5, r0
 800b022:	460c      	mov	r4, r1
 800b024:	b976      	cbnz	r6, 800b044 <_Bfree+0x28>
 800b026:	2010      	movs	r0, #16
 800b028:	f7ff ff90 	bl	800af4c <malloc>
 800b02c:	4602      	mov	r2, r0
 800b02e:	6268      	str	r0, [r5, #36]	; 0x24
 800b030:	b920      	cbnz	r0, 800b03c <_Bfree+0x20>
 800b032:	4b09      	ldr	r3, [pc, #36]	; (800b058 <_Bfree+0x3c>)
 800b034:	4809      	ldr	r0, [pc, #36]	; (800b05c <_Bfree+0x40>)
 800b036:	218a      	movs	r1, #138	; 0x8a
 800b038:	f001 fadc 	bl	800c5f4 <__assert_func>
 800b03c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b040:	6006      	str	r6, [r0, #0]
 800b042:	60c6      	str	r6, [r0, #12]
 800b044:	b13c      	cbz	r4, 800b056 <_Bfree+0x3a>
 800b046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b048:	6862      	ldr	r2, [r4, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b050:	6021      	str	r1, [r4, #0]
 800b052:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b056:	bd70      	pop	{r4, r5, r6, pc}
 800b058:	0800d23e 	.word	0x0800d23e
 800b05c:	0800d344 	.word	0x0800d344

0800b060 <__multadd>:
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	690e      	ldr	r6, [r1, #16]
 800b066:	4607      	mov	r7, r0
 800b068:	4698      	mov	r8, r3
 800b06a:	460c      	mov	r4, r1
 800b06c:	f101 0014 	add.w	r0, r1, #20
 800b070:	2300      	movs	r3, #0
 800b072:	6805      	ldr	r5, [r0, #0]
 800b074:	b2a9      	uxth	r1, r5
 800b076:	fb02 8101 	mla	r1, r2, r1, r8
 800b07a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b07e:	0c2d      	lsrs	r5, r5, #16
 800b080:	fb02 c505 	mla	r5, r2, r5, ip
 800b084:	b289      	uxth	r1, r1
 800b086:	3301      	adds	r3, #1
 800b088:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b08c:	429e      	cmp	r6, r3
 800b08e:	f840 1b04 	str.w	r1, [r0], #4
 800b092:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b096:	dcec      	bgt.n	800b072 <__multadd+0x12>
 800b098:	f1b8 0f00 	cmp.w	r8, #0
 800b09c:	d022      	beq.n	800b0e4 <__multadd+0x84>
 800b09e:	68a3      	ldr	r3, [r4, #8]
 800b0a0:	42b3      	cmp	r3, r6
 800b0a2:	dc19      	bgt.n	800b0d8 <__multadd+0x78>
 800b0a4:	6861      	ldr	r1, [r4, #4]
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	f7ff ff77 	bl	800af9c <_Balloc>
 800b0ae:	4605      	mov	r5, r0
 800b0b0:	b928      	cbnz	r0, 800b0be <__multadd+0x5e>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <__multadd+0x8c>)
 800b0b6:	480e      	ldr	r0, [pc, #56]	; (800b0f0 <__multadd+0x90>)
 800b0b8:	21b5      	movs	r1, #181	; 0xb5
 800b0ba:	f001 fa9b 	bl	800c5f4 <__assert_func>
 800b0be:	6922      	ldr	r2, [r4, #16]
 800b0c0:	3202      	adds	r2, #2
 800b0c2:	f104 010c 	add.w	r1, r4, #12
 800b0c6:	0092      	lsls	r2, r2, #2
 800b0c8:	300c      	adds	r0, #12
 800b0ca:	f7ff ff59 	bl	800af80 <memcpy>
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7ff ffa3 	bl	800b01c <_Bfree>
 800b0d6:	462c      	mov	r4, r5
 800b0d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0dc:	3601      	adds	r6, #1
 800b0de:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0e2:	6126      	str	r6, [r4, #16]
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ea:	bf00      	nop
 800b0ec:	0800d2b4 	.word	0x0800d2b4
 800b0f0:	0800d344 	.word	0x0800d344

0800b0f4 <__s2b>:
 800b0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	461f      	mov	r7, r3
 800b0fe:	2209      	movs	r2, #9
 800b100:	3308      	adds	r3, #8
 800b102:	4606      	mov	r6, r0
 800b104:	fb93 f3f2 	sdiv	r3, r3, r2
 800b108:	2100      	movs	r1, #0
 800b10a:	2201      	movs	r2, #1
 800b10c:	429a      	cmp	r2, r3
 800b10e:	db09      	blt.n	800b124 <__s2b+0x30>
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff ff43 	bl	800af9c <_Balloc>
 800b116:	b940      	cbnz	r0, 800b12a <__s2b+0x36>
 800b118:	4602      	mov	r2, r0
 800b11a:	4b19      	ldr	r3, [pc, #100]	; (800b180 <__s2b+0x8c>)
 800b11c:	4819      	ldr	r0, [pc, #100]	; (800b184 <__s2b+0x90>)
 800b11e:	21ce      	movs	r1, #206	; 0xce
 800b120:	f001 fa68 	bl	800c5f4 <__assert_func>
 800b124:	0052      	lsls	r2, r2, #1
 800b126:	3101      	adds	r1, #1
 800b128:	e7f0      	b.n	800b10c <__s2b+0x18>
 800b12a:	9b08      	ldr	r3, [sp, #32]
 800b12c:	6143      	str	r3, [r0, #20]
 800b12e:	2d09      	cmp	r5, #9
 800b130:	f04f 0301 	mov.w	r3, #1
 800b134:	6103      	str	r3, [r0, #16]
 800b136:	dd16      	ble.n	800b166 <__s2b+0x72>
 800b138:	f104 0909 	add.w	r9, r4, #9
 800b13c:	46c8      	mov	r8, r9
 800b13e:	442c      	add	r4, r5
 800b140:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b144:	4601      	mov	r1, r0
 800b146:	3b30      	subs	r3, #48	; 0x30
 800b148:	220a      	movs	r2, #10
 800b14a:	4630      	mov	r0, r6
 800b14c:	f7ff ff88 	bl	800b060 <__multadd>
 800b150:	45a0      	cmp	r8, r4
 800b152:	d1f5      	bne.n	800b140 <__s2b+0x4c>
 800b154:	f1a5 0408 	sub.w	r4, r5, #8
 800b158:	444c      	add	r4, r9
 800b15a:	1b2d      	subs	r5, r5, r4
 800b15c:	1963      	adds	r3, r4, r5
 800b15e:	42bb      	cmp	r3, r7
 800b160:	db04      	blt.n	800b16c <__s2b+0x78>
 800b162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b166:	340a      	adds	r4, #10
 800b168:	2509      	movs	r5, #9
 800b16a:	e7f6      	b.n	800b15a <__s2b+0x66>
 800b16c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b170:	4601      	mov	r1, r0
 800b172:	3b30      	subs	r3, #48	; 0x30
 800b174:	220a      	movs	r2, #10
 800b176:	4630      	mov	r0, r6
 800b178:	f7ff ff72 	bl	800b060 <__multadd>
 800b17c:	e7ee      	b.n	800b15c <__s2b+0x68>
 800b17e:	bf00      	nop
 800b180:	0800d2b4 	.word	0x0800d2b4
 800b184:	0800d344 	.word	0x0800d344

0800b188 <__hi0bits>:
 800b188:	0c03      	lsrs	r3, r0, #16
 800b18a:	041b      	lsls	r3, r3, #16
 800b18c:	b9d3      	cbnz	r3, 800b1c4 <__hi0bits+0x3c>
 800b18e:	0400      	lsls	r0, r0, #16
 800b190:	2310      	movs	r3, #16
 800b192:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b196:	bf04      	itt	eq
 800b198:	0200      	lsleq	r0, r0, #8
 800b19a:	3308      	addeq	r3, #8
 800b19c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1a0:	bf04      	itt	eq
 800b1a2:	0100      	lsleq	r0, r0, #4
 800b1a4:	3304      	addeq	r3, #4
 800b1a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1aa:	bf04      	itt	eq
 800b1ac:	0080      	lsleq	r0, r0, #2
 800b1ae:	3302      	addeq	r3, #2
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	db05      	blt.n	800b1c0 <__hi0bits+0x38>
 800b1b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1b8:	f103 0301 	add.w	r3, r3, #1
 800b1bc:	bf08      	it	eq
 800b1be:	2320      	moveq	r3, #32
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	4770      	bx	lr
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e7e4      	b.n	800b192 <__hi0bits+0xa>

0800b1c8 <__lo0bits>:
 800b1c8:	6803      	ldr	r3, [r0, #0]
 800b1ca:	f013 0207 	ands.w	r2, r3, #7
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	d00b      	beq.n	800b1ea <__lo0bits+0x22>
 800b1d2:	07da      	lsls	r2, r3, #31
 800b1d4:	d424      	bmi.n	800b220 <__lo0bits+0x58>
 800b1d6:	0798      	lsls	r0, r3, #30
 800b1d8:	bf49      	itett	mi
 800b1da:	085b      	lsrmi	r3, r3, #1
 800b1dc:	089b      	lsrpl	r3, r3, #2
 800b1de:	2001      	movmi	r0, #1
 800b1e0:	600b      	strmi	r3, [r1, #0]
 800b1e2:	bf5c      	itt	pl
 800b1e4:	600b      	strpl	r3, [r1, #0]
 800b1e6:	2002      	movpl	r0, #2
 800b1e8:	4770      	bx	lr
 800b1ea:	b298      	uxth	r0, r3
 800b1ec:	b9b0      	cbnz	r0, 800b21c <__lo0bits+0x54>
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	2010      	movs	r0, #16
 800b1f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1f6:	bf04      	itt	eq
 800b1f8:	0a1b      	lsreq	r3, r3, #8
 800b1fa:	3008      	addeq	r0, #8
 800b1fc:	071a      	lsls	r2, r3, #28
 800b1fe:	bf04      	itt	eq
 800b200:	091b      	lsreq	r3, r3, #4
 800b202:	3004      	addeq	r0, #4
 800b204:	079a      	lsls	r2, r3, #30
 800b206:	bf04      	itt	eq
 800b208:	089b      	lsreq	r3, r3, #2
 800b20a:	3002      	addeq	r0, #2
 800b20c:	07da      	lsls	r2, r3, #31
 800b20e:	d403      	bmi.n	800b218 <__lo0bits+0x50>
 800b210:	085b      	lsrs	r3, r3, #1
 800b212:	f100 0001 	add.w	r0, r0, #1
 800b216:	d005      	beq.n	800b224 <__lo0bits+0x5c>
 800b218:	600b      	str	r3, [r1, #0]
 800b21a:	4770      	bx	lr
 800b21c:	4610      	mov	r0, r2
 800b21e:	e7e8      	b.n	800b1f2 <__lo0bits+0x2a>
 800b220:	2000      	movs	r0, #0
 800b222:	4770      	bx	lr
 800b224:	2020      	movs	r0, #32
 800b226:	4770      	bx	lr

0800b228 <__i2b>:
 800b228:	b510      	push	{r4, lr}
 800b22a:	460c      	mov	r4, r1
 800b22c:	2101      	movs	r1, #1
 800b22e:	f7ff feb5 	bl	800af9c <_Balloc>
 800b232:	4602      	mov	r2, r0
 800b234:	b928      	cbnz	r0, 800b242 <__i2b+0x1a>
 800b236:	4b05      	ldr	r3, [pc, #20]	; (800b24c <__i2b+0x24>)
 800b238:	4805      	ldr	r0, [pc, #20]	; (800b250 <__i2b+0x28>)
 800b23a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b23e:	f001 f9d9 	bl	800c5f4 <__assert_func>
 800b242:	2301      	movs	r3, #1
 800b244:	6144      	str	r4, [r0, #20]
 800b246:	6103      	str	r3, [r0, #16]
 800b248:	bd10      	pop	{r4, pc}
 800b24a:	bf00      	nop
 800b24c:	0800d2b4 	.word	0x0800d2b4
 800b250:	0800d344 	.word	0x0800d344

0800b254 <__multiply>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	4614      	mov	r4, r2
 800b25a:	690a      	ldr	r2, [r1, #16]
 800b25c:	6923      	ldr	r3, [r4, #16]
 800b25e:	429a      	cmp	r2, r3
 800b260:	bfb8      	it	lt
 800b262:	460b      	movlt	r3, r1
 800b264:	460d      	mov	r5, r1
 800b266:	bfbc      	itt	lt
 800b268:	4625      	movlt	r5, r4
 800b26a:	461c      	movlt	r4, r3
 800b26c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b270:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b274:	68ab      	ldr	r3, [r5, #8]
 800b276:	6869      	ldr	r1, [r5, #4]
 800b278:	eb0a 0709 	add.w	r7, sl, r9
 800b27c:	42bb      	cmp	r3, r7
 800b27e:	b085      	sub	sp, #20
 800b280:	bfb8      	it	lt
 800b282:	3101      	addlt	r1, #1
 800b284:	f7ff fe8a 	bl	800af9c <_Balloc>
 800b288:	b930      	cbnz	r0, 800b298 <__multiply+0x44>
 800b28a:	4602      	mov	r2, r0
 800b28c:	4b42      	ldr	r3, [pc, #264]	; (800b398 <__multiply+0x144>)
 800b28e:	4843      	ldr	r0, [pc, #268]	; (800b39c <__multiply+0x148>)
 800b290:	f240 115d 	movw	r1, #349	; 0x15d
 800b294:	f001 f9ae 	bl	800c5f4 <__assert_func>
 800b298:	f100 0614 	add.w	r6, r0, #20
 800b29c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2a0:	4633      	mov	r3, r6
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	4543      	cmp	r3, r8
 800b2a6:	d31e      	bcc.n	800b2e6 <__multiply+0x92>
 800b2a8:	f105 0c14 	add.w	ip, r5, #20
 800b2ac:	f104 0314 	add.w	r3, r4, #20
 800b2b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b2b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b2b8:	9202      	str	r2, [sp, #8]
 800b2ba:	ebac 0205 	sub.w	r2, ip, r5
 800b2be:	3a15      	subs	r2, #21
 800b2c0:	f022 0203 	bic.w	r2, r2, #3
 800b2c4:	3204      	adds	r2, #4
 800b2c6:	f105 0115 	add.w	r1, r5, #21
 800b2ca:	458c      	cmp	ip, r1
 800b2cc:	bf38      	it	cc
 800b2ce:	2204      	movcc	r2, #4
 800b2d0:	9201      	str	r2, [sp, #4]
 800b2d2:	9a02      	ldr	r2, [sp, #8]
 800b2d4:	9303      	str	r3, [sp, #12]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d808      	bhi.n	800b2ec <__multiply+0x98>
 800b2da:	2f00      	cmp	r7, #0
 800b2dc:	dc55      	bgt.n	800b38a <__multiply+0x136>
 800b2de:	6107      	str	r7, [r0, #16]
 800b2e0:	b005      	add	sp, #20
 800b2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e6:	f843 2b04 	str.w	r2, [r3], #4
 800b2ea:	e7db      	b.n	800b2a4 <__multiply+0x50>
 800b2ec:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2f0:	f1ba 0f00 	cmp.w	sl, #0
 800b2f4:	d020      	beq.n	800b338 <__multiply+0xe4>
 800b2f6:	f105 0e14 	add.w	lr, r5, #20
 800b2fa:	46b1      	mov	r9, r6
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b302:	f8d9 b000 	ldr.w	fp, [r9]
 800b306:	b2a1      	uxth	r1, r4
 800b308:	fa1f fb8b 	uxth.w	fp, fp
 800b30c:	fb0a b101 	mla	r1, sl, r1, fp
 800b310:	4411      	add	r1, r2
 800b312:	f8d9 2000 	ldr.w	r2, [r9]
 800b316:	0c24      	lsrs	r4, r4, #16
 800b318:	0c12      	lsrs	r2, r2, #16
 800b31a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b31e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b322:	b289      	uxth	r1, r1
 800b324:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b328:	45f4      	cmp	ip, lr
 800b32a:	f849 1b04 	str.w	r1, [r9], #4
 800b32e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b332:	d8e4      	bhi.n	800b2fe <__multiply+0xaa>
 800b334:	9901      	ldr	r1, [sp, #4]
 800b336:	5072      	str	r2, [r6, r1]
 800b338:	9a03      	ldr	r2, [sp, #12]
 800b33a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b33e:	3304      	adds	r3, #4
 800b340:	f1b9 0f00 	cmp.w	r9, #0
 800b344:	d01f      	beq.n	800b386 <__multiply+0x132>
 800b346:	6834      	ldr	r4, [r6, #0]
 800b348:	f105 0114 	add.w	r1, r5, #20
 800b34c:	46b6      	mov	lr, r6
 800b34e:	f04f 0a00 	mov.w	sl, #0
 800b352:	880a      	ldrh	r2, [r1, #0]
 800b354:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b358:	fb09 b202 	mla	r2, r9, r2, fp
 800b35c:	4492      	add	sl, r2
 800b35e:	b2a4      	uxth	r4, r4
 800b360:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b364:	f84e 4b04 	str.w	r4, [lr], #4
 800b368:	f851 4b04 	ldr.w	r4, [r1], #4
 800b36c:	f8be 2000 	ldrh.w	r2, [lr]
 800b370:	0c24      	lsrs	r4, r4, #16
 800b372:	fb09 2404 	mla	r4, r9, r4, r2
 800b376:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b37a:	458c      	cmp	ip, r1
 800b37c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b380:	d8e7      	bhi.n	800b352 <__multiply+0xfe>
 800b382:	9a01      	ldr	r2, [sp, #4]
 800b384:	50b4      	str	r4, [r6, r2]
 800b386:	3604      	adds	r6, #4
 800b388:	e7a3      	b.n	800b2d2 <__multiply+0x7e>
 800b38a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1a5      	bne.n	800b2de <__multiply+0x8a>
 800b392:	3f01      	subs	r7, #1
 800b394:	e7a1      	b.n	800b2da <__multiply+0x86>
 800b396:	bf00      	nop
 800b398:	0800d2b4 	.word	0x0800d2b4
 800b39c:	0800d344 	.word	0x0800d344

0800b3a0 <__pow5mult>:
 800b3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	4615      	mov	r5, r2
 800b3a6:	f012 0203 	ands.w	r2, r2, #3
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460f      	mov	r7, r1
 800b3ae:	d007      	beq.n	800b3c0 <__pow5mult+0x20>
 800b3b0:	4c25      	ldr	r4, [pc, #148]	; (800b448 <__pow5mult+0xa8>)
 800b3b2:	3a01      	subs	r2, #1
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3ba:	f7ff fe51 	bl	800b060 <__multadd>
 800b3be:	4607      	mov	r7, r0
 800b3c0:	10ad      	asrs	r5, r5, #2
 800b3c2:	d03d      	beq.n	800b440 <__pow5mult+0xa0>
 800b3c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3c6:	b97c      	cbnz	r4, 800b3e8 <__pow5mult+0x48>
 800b3c8:	2010      	movs	r0, #16
 800b3ca:	f7ff fdbf 	bl	800af4c <malloc>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b3d2:	b928      	cbnz	r0, 800b3e0 <__pow5mult+0x40>
 800b3d4:	4b1d      	ldr	r3, [pc, #116]	; (800b44c <__pow5mult+0xac>)
 800b3d6:	481e      	ldr	r0, [pc, #120]	; (800b450 <__pow5mult+0xb0>)
 800b3d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3dc:	f001 f90a 	bl	800c5f4 <__assert_func>
 800b3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3e4:	6004      	str	r4, [r0, #0]
 800b3e6:	60c4      	str	r4, [r0, #12]
 800b3e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3f0:	b94c      	cbnz	r4, 800b406 <__pow5mult+0x66>
 800b3f2:	f240 2171 	movw	r1, #625	; 0x271
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ff16 	bl	800b228 <__i2b>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b402:	4604      	mov	r4, r0
 800b404:	6003      	str	r3, [r0, #0]
 800b406:	f04f 0900 	mov.w	r9, #0
 800b40a:	07eb      	lsls	r3, r5, #31
 800b40c:	d50a      	bpl.n	800b424 <__pow5mult+0x84>
 800b40e:	4639      	mov	r1, r7
 800b410:	4622      	mov	r2, r4
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff ff1e 	bl	800b254 <__multiply>
 800b418:	4639      	mov	r1, r7
 800b41a:	4680      	mov	r8, r0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fdfd 	bl	800b01c <_Bfree>
 800b422:	4647      	mov	r7, r8
 800b424:	106d      	asrs	r5, r5, #1
 800b426:	d00b      	beq.n	800b440 <__pow5mult+0xa0>
 800b428:	6820      	ldr	r0, [r4, #0]
 800b42a:	b938      	cbnz	r0, 800b43c <__pow5mult+0x9c>
 800b42c:	4622      	mov	r2, r4
 800b42e:	4621      	mov	r1, r4
 800b430:	4630      	mov	r0, r6
 800b432:	f7ff ff0f 	bl	800b254 <__multiply>
 800b436:	6020      	str	r0, [r4, #0]
 800b438:	f8c0 9000 	str.w	r9, [r0]
 800b43c:	4604      	mov	r4, r0
 800b43e:	e7e4      	b.n	800b40a <__pow5mult+0x6a>
 800b440:	4638      	mov	r0, r7
 800b442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b446:	bf00      	nop
 800b448:	0800d498 	.word	0x0800d498
 800b44c:	0800d23e 	.word	0x0800d23e
 800b450:	0800d344 	.word	0x0800d344

0800b454 <__lshift>:
 800b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	6849      	ldr	r1, [r1, #4]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	4607      	mov	r7, r0
 800b466:	4691      	mov	r9, r2
 800b468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b46c:	f108 0601 	add.w	r6, r8, #1
 800b470:	42b3      	cmp	r3, r6
 800b472:	db0b      	blt.n	800b48c <__lshift+0x38>
 800b474:	4638      	mov	r0, r7
 800b476:	f7ff fd91 	bl	800af9c <_Balloc>
 800b47a:	4605      	mov	r5, r0
 800b47c:	b948      	cbnz	r0, 800b492 <__lshift+0x3e>
 800b47e:	4602      	mov	r2, r0
 800b480:	4b28      	ldr	r3, [pc, #160]	; (800b524 <__lshift+0xd0>)
 800b482:	4829      	ldr	r0, [pc, #164]	; (800b528 <__lshift+0xd4>)
 800b484:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b488:	f001 f8b4 	bl	800c5f4 <__assert_func>
 800b48c:	3101      	adds	r1, #1
 800b48e:	005b      	lsls	r3, r3, #1
 800b490:	e7ee      	b.n	800b470 <__lshift+0x1c>
 800b492:	2300      	movs	r3, #0
 800b494:	f100 0114 	add.w	r1, r0, #20
 800b498:	f100 0210 	add.w	r2, r0, #16
 800b49c:	4618      	mov	r0, r3
 800b49e:	4553      	cmp	r3, sl
 800b4a0:	db33      	blt.n	800b50a <__lshift+0xb6>
 800b4a2:	6920      	ldr	r0, [r4, #16]
 800b4a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4a8:	f104 0314 	add.w	r3, r4, #20
 800b4ac:	f019 091f 	ands.w	r9, r9, #31
 800b4b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4b8:	d02b      	beq.n	800b512 <__lshift+0xbe>
 800b4ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b4be:	468a      	mov	sl, r1
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	6818      	ldr	r0, [r3, #0]
 800b4c4:	fa00 f009 	lsl.w	r0, r0, r9
 800b4c8:	4302      	orrs	r2, r0
 800b4ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b4ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d2:	459c      	cmp	ip, r3
 800b4d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4d8:	d8f3      	bhi.n	800b4c2 <__lshift+0x6e>
 800b4da:	ebac 0304 	sub.w	r3, ip, r4
 800b4de:	3b15      	subs	r3, #21
 800b4e0:	f023 0303 	bic.w	r3, r3, #3
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	f104 0015 	add.w	r0, r4, #21
 800b4ea:	4584      	cmp	ip, r0
 800b4ec:	bf38      	it	cc
 800b4ee:	2304      	movcc	r3, #4
 800b4f0:	50ca      	str	r2, [r1, r3]
 800b4f2:	b10a      	cbz	r2, 800b4f8 <__lshift+0xa4>
 800b4f4:	f108 0602 	add.w	r6, r8, #2
 800b4f8:	3e01      	subs	r6, #1
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	612e      	str	r6, [r5, #16]
 800b4fe:	4621      	mov	r1, r4
 800b500:	f7ff fd8c 	bl	800b01c <_Bfree>
 800b504:	4628      	mov	r0, r5
 800b506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b50e:	3301      	adds	r3, #1
 800b510:	e7c5      	b.n	800b49e <__lshift+0x4a>
 800b512:	3904      	subs	r1, #4
 800b514:	f853 2b04 	ldr.w	r2, [r3], #4
 800b518:	f841 2f04 	str.w	r2, [r1, #4]!
 800b51c:	459c      	cmp	ip, r3
 800b51e:	d8f9      	bhi.n	800b514 <__lshift+0xc0>
 800b520:	e7ea      	b.n	800b4f8 <__lshift+0xa4>
 800b522:	bf00      	nop
 800b524:	0800d2b4 	.word	0x0800d2b4
 800b528:	0800d344 	.word	0x0800d344

0800b52c <__mcmp>:
 800b52c:	b530      	push	{r4, r5, lr}
 800b52e:	6902      	ldr	r2, [r0, #16]
 800b530:	690c      	ldr	r4, [r1, #16]
 800b532:	1b12      	subs	r2, r2, r4
 800b534:	d10e      	bne.n	800b554 <__mcmp+0x28>
 800b536:	f100 0314 	add.w	r3, r0, #20
 800b53a:	3114      	adds	r1, #20
 800b53c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b540:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b544:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b548:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b54c:	42a5      	cmp	r5, r4
 800b54e:	d003      	beq.n	800b558 <__mcmp+0x2c>
 800b550:	d305      	bcc.n	800b55e <__mcmp+0x32>
 800b552:	2201      	movs	r2, #1
 800b554:	4610      	mov	r0, r2
 800b556:	bd30      	pop	{r4, r5, pc}
 800b558:	4283      	cmp	r3, r0
 800b55a:	d3f3      	bcc.n	800b544 <__mcmp+0x18>
 800b55c:	e7fa      	b.n	800b554 <__mcmp+0x28>
 800b55e:	f04f 32ff 	mov.w	r2, #4294967295
 800b562:	e7f7      	b.n	800b554 <__mcmp+0x28>

0800b564 <__mdiff>:
 800b564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	460c      	mov	r4, r1
 800b56a:	4606      	mov	r6, r0
 800b56c:	4611      	mov	r1, r2
 800b56e:	4620      	mov	r0, r4
 800b570:	4617      	mov	r7, r2
 800b572:	f7ff ffdb 	bl	800b52c <__mcmp>
 800b576:	1e05      	subs	r5, r0, #0
 800b578:	d110      	bne.n	800b59c <__mdiff+0x38>
 800b57a:	4629      	mov	r1, r5
 800b57c:	4630      	mov	r0, r6
 800b57e:	f7ff fd0d 	bl	800af9c <_Balloc>
 800b582:	b930      	cbnz	r0, 800b592 <__mdiff+0x2e>
 800b584:	4b39      	ldr	r3, [pc, #228]	; (800b66c <__mdiff+0x108>)
 800b586:	4602      	mov	r2, r0
 800b588:	f240 2132 	movw	r1, #562	; 0x232
 800b58c:	4838      	ldr	r0, [pc, #224]	; (800b670 <__mdiff+0x10c>)
 800b58e:	f001 f831 	bl	800c5f4 <__assert_func>
 800b592:	2301      	movs	r3, #1
 800b594:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59c:	bfa4      	itt	ge
 800b59e:	463b      	movge	r3, r7
 800b5a0:	4627      	movge	r7, r4
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	bfa6      	itte	ge
 800b5a8:	461c      	movge	r4, r3
 800b5aa:	2500      	movge	r5, #0
 800b5ac:	2501      	movlt	r5, #1
 800b5ae:	f7ff fcf5 	bl	800af9c <_Balloc>
 800b5b2:	b920      	cbnz	r0, 800b5be <__mdiff+0x5a>
 800b5b4:	4b2d      	ldr	r3, [pc, #180]	; (800b66c <__mdiff+0x108>)
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5bc:	e7e6      	b.n	800b58c <__mdiff+0x28>
 800b5be:	693e      	ldr	r6, [r7, #16]
 800b5c0:	60c5      	str	r5, [r0, #12]
 800b5c2:	6925      	ldr	r5, [r4, #16]
 800b5c4:	f107 0114 	add.w	r1, r7, #20
 800b5c8:	f104 0914 	add.w	r9, r4, #20
 800b5cc:	f100 0e14 	add.w	lr, r0, #20
 800b5d0:	f107 0210 	add.w	r2, r7, #16
 800b5d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b5d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b5dc:	46f2      	mov	sl, lr
 800b5de:	2700      	movs	r7, #0
 800b5e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5e8:	fa1f f883 	uxth.w	r8, r3
 800b5ec:	fa17 f78b 	uxtah	r7, r7, fp
 800b5f0:	0c1b      	lsrs	r3, r3, #16
 800b5f2:	eba7 0808 	sub.w	r8, r7, r8
 800b5f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5fe:	fa1f f888 	uxth.w	r8, r8
 800b602:	141f      	asrs	r7, r3, #16
 800b604:	454d      	cmp	r5, r9
 800b606:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b60a:	f84a 3b04 	str.w	r3, [sl], #4
 800b60e:	d8e7      	bhi.n	800b5e0 <__mdiff+0x7c>
 800b610:	1b2b      	subs	r3, r5, r4
 800b612:	3b15      	subs	r3, #21
 800b614:	f023 0303 	bic.w	r3, r3, #3
 800b618:	3304      	adds	r3, #4
 800b61a:	3415      	adds	r4, #21
 800b61c:	42a5      	cmp	r5, r4
 800b61e:	bf38      	it	cc
 800b620:	2304      	movcc	r3, #4
 800b622:	4419      	add	r1, r3
 800b624:	4473      	add	r3, lr
 800b626:	469e      	mov	lr, r3
 800b628:	460d      	mov	r5, r1
 800b62a:	4565      	cmp	r5, ip
 800b62c:	d30e      	bcc.n	800b64c <__mdiff+0xe8>
 800b62e:	f10c 0203 	add.w	r2, ip, #3
 800b632:	1a52      	subs	r2, r2, r1
 800b634:	f022 0203 	bic.w	r2, r2, #3
 800b638:	3903      	subs	r1, #3
 800b63a:	458c      	cmp	ip, r1
 800b63c:	bf38      	it	cc
 800b63e:	2200      	movcc	r2, #0
 800b640:	441a      	add	r2, r3
 800b642:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b646:	b17b      	cbz	r3, 800b668 <__mdiff+0x104>
 800b648:	6106      	str	r6, [r0, #16]
 800b64a:	e7a5      	b.n	800b598 <__mdiff+0x34>
 800b64c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b650:	fa17 f488 	uxtah	r4, r7, r8
 800b654:	1422      	asrs	r2, r4, #16
 800b656:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b65a:	b2a4      	uxth	r4, r4
 800b65c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b660:	f84e 4b04 	str.w	r4, [lr], #4
 800b664:	1417      	asrs	r7, r2, #16
 800b666:	e7e0      	b.n	800b62a <__mdiff+0xc6>
 800b668:	3e01      	subs	r6, #1
 800b66a:	e7ea      	b.n	800b642 <__mdiff+0xde>
 800b66c:	0800d2b4 	.word	0x0800d2b4
 800b670:	0800d344 	.word	0x0800d344

0800b674 <__ulp>:
 800b674:	b082      	sub	sp, #8
 800b676:	ed8d 0b00 	vstr	d0, [sp]
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	4912      	ldr	r1, [pc, #72]	; (800b6c8 <__ulp+0x54>)
 800b67e:	4019      	ands	r1, r3
 800b680:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b684:	2900      	cmp	r1, #0
 800b686:	dd05      	ble.n	800b694 <__ulp+0x20>
 800b688:	2200      	movs	r2, #0
 800b68a:	460b      	mov	r3, r1
 800b68c:	ec43 2b10 	vmov	d0, r2, r3
 800b690:	b002      	add	sp, #8
 800b692:	4770      	bx	lr
 800b694:	4249      	negs	r1, r1
 800b696:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b69a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b69e:	f04f 0200 	mov.w	r2, #0
 800b6a2:	f04f 0300 	mov.w	r3, #0
 800b6a6:	da04      	bge.n	800b6b2 <__ulp+0x3e>
 800b6a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b6ac:	fa41 f300 	asr.w	r3, r1, r0
 800b6b0:	e7ec      	b.n	800b68c <__ulp+0x18>
 800b6b2:	f1a0 0114 	sub.w	r1, r0, #20
 800b6b6:	291e      	cmp	r1, #30
 800b6b8:	bfda      	itte	le
 800b6ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b6be:	fa20 f101 	lsrle.w	r1, r0, r1
 800b6c2:	2101      	movgt	r1, #1
 800b6c4:	460a      	mov	r2, r1
 800b6c6:	e7e1      	b.n	800b68c <__ulp+0x18>
 800b6c8:	7ff00000 	.word	0x7ff00000

0800b6cc <__b2d>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	6905      	ldr	r5, [r0, #16]
 800b6d0:	f100 0714 	add.w	r7, r0, #20
 800b6d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b6d8:	1f2e      	subs	r6, r5, #4
 800b6da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f7ff fd52 	bl	800b188 <__hi0bits>
 800b6e4:	f1c0 0320 	rsb	r3, r0, #32
 800b6e8:	280a      	cmp	r0, #10
 800b6ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b768 <__b2d+0x9c>
 800b6ee:	600b      	str	r3, [r1, #0]
 800b6f0:	dc14      	bgt.n	800b71c <__b2d+0x50>
 800b6f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b6f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b6fa:	42b7      	cmp	r7, r6
 800b6fc:	ea41 030c 	orr.w	r3, r1, ip
 800b700:	bf34      	ite	cc
 800b702:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b706:	2100      	movcs	r1, #0
 800b708:	3015      	adds	r0, #21
 800b70a:	fa04 f000 	lsl.w	r0, r4, r0
 800b70e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b712:	ea40 0201 	orr.w	r2, r0, r1
 800b716:	ec43 2b10 	vmov	d0, r2, r3
 800b71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b71c:	42b7      	cmp	r7, r6
 800b71e:	bf3a      	itte	cc
 800b720:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b724:	f1a5 0608 	subcc.w	r6, r5, #8
 800b728:	2100      	movcs	r1, #0
 800b72a:	380b      	subs	r0, #11
 800b72c:	d017      	beq.n	800b75e <__b2d+0x92>
 800b72e:	f1c0 0c20 	rsb	ip, r0, #32
 800b732:	fa04 f500 	lsl.w	r5, r4, r0
 800b736:	42be      	cmp	r6, r7
 800b738:	fa21 f40c 	lsr.w	r4, r1, ip
 800b73c:	ea45 0504 	orr.w	r5, r5, r4
 800b740:	bf8c      	ite	hi
 800b742:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b746:	2400      	movls	r4, #0
 800b748:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b74c:	fa01 f000 	lsl.w	r0, r1, r0
 800b750:	fa24 f40c 	lsr.w	r4, r4, ip
 800b754:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b758:	ea40 0204 	orr.w	r2, r0, r4
 800b75c:	e7db      	b.n	800b716 <__b2d+0x4a>
 800b75e:	ea44 030c 	orr.w	r3, r4, ip
 800b762:	460a      	mov	r2, r1
 800b764:	e7d7      	b.n	800b716 <__b2d+0x4a>
 800b766:	bf00      	nop
 800b768:	3ff00000 	.word	0x3ff00000

0800b76c <__d2b>:
 800b76c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4689      	mov	r9, r1
 800b772:	2101      	movs	r1, #1
 800b774:	ec57 6b10 	vmov	r6, r7, d0
 800b778:	4690      	mov	r8, r2
 800b77a:	f7ff fc0f 	bl	800af9c <_Balloc>
 800b77e:	4604      	mov	r4, r0
 800b780:	b930      	cbnz	r0, 800b790 <__d2b+0x24>
 800b782:	4602      	mov	r2, r0
 800b784:	4b25      	ldr	r3, [pc, #148]	; (800b81c <__d2b+0xb0>)
 800b786:	4826      	ldr	r0, [pc, #152]	; (800b820 <__d2b+0xb4>)
 800b788:	f240 310a 	movw	r1, #778	; 0x30a
 800b78c:	f000 ff32 	bl	800c5f4 <__assert_func>
 800b790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b798:	bb35      	cbnz	r5, 800b7e8 <__d2b+0x7c>
 800b79a:	2e00      	cmp	r6, #0
 800b79c:	9301      	str	r3, [sp, #4]
 800b79e:	d028      	beq.n	800b7f2 <__d2b+0x86>
 800b7a0:	4668      	mov	r0, sp
 800b7a2:	9600      	str	r6, [sp, #0]
 800b7a4:	f7ff fd10 	bl	800b1c8 <__lo0bits>
 800b7a8:	9900      	ldr	r1, [sp, #0]
 800b7aa:	b300      	cbz	r0, 800b7ee <__d2b+0x82>
 800b7ac:	9a01      	ldr	r2, [sp, #4]
 800b7ae:	f1c0 0320 	rsb	r3, r0, #32
 800b7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b6:	430b      	orrs	r3, r1
 800b7b8:	40c2      	lsrs	r2, r0
 800b7ba:	6163      	str	r3, [r4, #20]
 800b7bc:	9201      	str	r2, [sp, #4]
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	61a3      	str	r3, [r4, #24]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	bf14      	ite	ne
 800b7c6:	2202      	movne	r2, #2
 800b7c8:	2201      	moveq	r2, #1
 800b7ca:	6122      	str	r2, [r4, #16]
 800b7cc:	b1d5      	cbz	r5, 800b804 <__d2b+0x98>
 800b7ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7d2:	4405      	add	r5, r0
 800b7d4:	f8c9 5000 	str.w	r5, [r9]
 800b7d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7dc:	f8c8 0000 	str.w	r0, [r8]
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	b003      	add	sp, #12
 800b7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7ec:	e7d5      	b.n	800b79a <__d2b+0x2e>
 800b7ee:	6161      	str	r1, [r4, #20]
 800b7f0:	e7e5      	b.n	800b7be <__d2b+0x52>
 800b7f2:	a801      	add	r0, sp, #4
 800b7f4:	f7ff fce8 	bl	800b1c8 <__lo0bits>
 800b7f8:	9b01      	ldr	r3, [sp, #4]
 800b7fa:	6163      	str	r3, [r4, #20]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	6122      	str	r2, [r4, #16]
 800b800:	3020      	adds	r0, #32
 800b802:	e7e3      	b.n	800b7cc <__d2b+0x60>
 800b804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b80c:	f8c9 0000 	str.w	r0, [r9]
 800b810:	6918      	ldr	r0, [r3, #16]
 800b812:	f7ff fcb9 	bl	800b188 <__hi0bits>
 800b816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b81a:	e7df      	b.n	800b7dc <__d2b+0x70>
 800b81c:	0800d2b4 	.word	0x0800d2b4
 800b820:	0800d344 	.word	0x0800d344

0800b824 <__ratio>:
 800b824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	4688      	mov	r8, r1
 800b82a:	4669      	mov	r1, sp
 800b82c:	4681      	mov	r9, r0
 800b82e:	f7ff ff4d 	bl	800b6cc <__b2d>
 800b832:	a901      	add	r1, sp, #4
 800b834:	4640      	mov	r0, r8
 800b836:	ec55 4b10 	vmov	r4, r5, d0
 800b83a:	f7ff ff47 	bl	800b6cc <__b2d>
 800b83e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b842:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b846:	eba3 0c02 	sub.w	ip, r3, r2
 800b84a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b854:	ec51 0b10 	vmov	r0, r1, d0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfd6      	itet	le
 800b85c:	460a      	movle	r2, r1
 800b85e:	462a      	movgt	r2, r5
 800b860:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b864:	468b      	mov	fp, r1
 800b866:	462f      	mov	r7, r5
 800b868:	bfd4      	ite	le
 800b86a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b86e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b872:	4620      	mov	r0, r4
 800b874:	ee10 2a10 	vmov	r2, s0
 800b878:	465b      	mov	r3, fp
 800b87a:	4639      	mov	r1, r7
 800b87c:	f7f5 f806 	bl	800088c <__aeabi_ddiv>
 800b880:	ec41 0b10 	vmov	d0, r0, r1
 800b884:	b003      	add	sp, #12
 800b886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b88a <__copybits>:
 800b88a:	3901      	subs	r1, #1
 800b88c:	b570      	push	{r4, r5, r6, lr}
 800b88e:	1149      	asrs	r1, r1, #5
 800b890:	6914      	ldr	r4, [r2, #16]
 800b892:	3101      	adds	r1, #1
 800b894:	f102 0314 	add.w	r3, r2, #20
 800b898:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b89c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8a0:	1f05      	subs	r5, r0, #4
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	d30c      	bcc.n	800b8c0 <__copybits+0x36>
 800b8a6:	1aa3      	subs	r3, r4, r2
 800b8a8:	3b11      	subs	r3, #17
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	3211      	adds	r2, #17
 800b8b0:	42a2      	cmp	r2, r4
 800b8b2:	bf88      	it	hi
 800b8b4:	2300      	movhi	r3, #0
 800b8b6:	4418      	add	r0, r3
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4288      	cmp	r0, r1
 800b8bc:	d305      	bcc.n	800b8ca <__copybits+0x40>
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8c8:	e7eb      	b.n	800b8a2 <__copybits+0x18>
 800b8ca:	f840 3b04 	str.w	r3, [r0], #4
 800b8ce:	e7f4      	b.n	800b8ba <__copybits+0x30>

0800b8d0 <__any_on>:
 800b8d0:	f100 0214 	add.w	r2, r0, #20
 800b8d4:	6900      	ldr	r0, [r0, #16]
 800b8d6:	114b      	asrs	r3, r1, #5
 800b8d8:	4298      	cmp	r0, r3
 800b8da:	b510      	push	{r4, lr}
 800b8dc:	db11      	blt.n	800b902 <__any_on+0x32>
 800b8de:	dd0a      	ble.n	800b8f6 <__any_on+0x26>
 800b8e0:	f011 011f 	ands.w	r1, r1, #31
 800b8e4:	d007      	beq.n	800b8f6 <__any_on+0x26>
 800b8e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b8ea:	fa24 f001 	lsr.w	r0, r4, r1
 800b8ee:	fa00 f101 	lsl.w	r1, r0, r1
 800b8f2:	428c      	cmp	r4, r1
 800b8f4:	d10b      	bne.n	800b90e <__any_on+0x3e>
 800b8f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d803      	bhi.n	800b906 <__any_on+0x36>
 800b8fe:	2000      	movs	r0, #0
 800b900:	bd10      	pop	{r4, pc}
 800b902:	4603      	mov	r3, r0
 800b904:	e7f7      	b.n	800b8f6 <__any_on+0x26>
 800b906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b90a:	2900      	cmp	r1, #0
 800b90c:	d0f5      	beq.n	800b8fa <__any_on+0x2a>
 800b90e:	2001      	movs	r0, #1
 800b910:	e7f6      	b.n	800b900 <__any_on+0x30>

0800b912 <_calloc_r>:
 800b912:	b513      	push	{r0, r1, r4, lr}
 800b914:	434a      	muls	r2, r1
 800b916:	4611      	mov	r1, r2
 800b918:	9201      	str	r2, [sp, #4]
 800b91a:	f000 f859 	bl	800b9d0 <_malloc_r>
 800b91e:	4604      	mov	r4, r0
 800b920:	b118      	cbz	r0, 800b92a <_calloc_r+0x18>
 800b922:	9a01      	ldr	r2, [sp, #4]
 800b924:	2100      	movs	r1, #0
 800b926:	f7fc fad1 	bl	8007ecc <memset>
 800b92a:	4620      	mov	r0, r4
 800b92c:	b002      	add	sp, #8
 800b92e:	bd10      	pop	{r4, pc}

0800b930 <_free_r>:
 800b930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b932:	2900      	cmp	r1, #0
 800b934:	d048      	beq.n	800b9c8 <_free_r+0x98>
 800b936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b93a:	9001      	str	r0, [sp, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f1a1 0404 	sub.w	r4, r1, #4
 800b942:	bfb8      	it	lt
 800b944:	18e4      	addlt	r4, r4, r3
 800b946:	f001 f859 	bl	800c9fc <__malloc_lock>
 800b94a:	4a20      	ldr	r2, [pc, #128]	; (800b9cc <_free_r+0x9c>)
 800b94c:	9801      	ldr	r0, [sp, #4]
 800b94e:	6813      	ldr	r3, [r2, #0]
 800b950:	4615      	mov	r5, r2
 800b952:	b933      	cbnz	r3, 800b962 <_free_r+0x32>
 800b954:	6063      	str	r3, [r4, #4]
 800b956:	6014      	str	r4, [r2, #0]
 800b958:	b003      	add	sp, #12
 800b95a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b95e:	f001 b853 	b.w	800ca08 <__malloc_unlock>
 800b962:	42a3      	cmp	r3, r4
 800b964:	d90b      	bls.n	800b97e <_free_r+0x4e>
 800b966:	6821      	ldr	r1, [r4, #0]
 800b968:	1862      	adds	r2, r4, r1
 800b96a:	4293      	cmp	r3, r2
 800b96c:	bf04      	itt	eq
 800b96e:	681a      	ldreq	r2, [r3, #0]
 800b970:	685b      	ldreq	r3, [r3, #4]
 800b972:	6063      	str	r3, [r4, #4]
 800b974:	bf04      	itt	eq
 800b976:	1852      	addeq	r2, r2, r1
 800b978:	6022      	streq	r2, [r4, #0]
 800b97a:	602c      	str	r4, [r5, #0]
 800b97c:	e7ec      	b.n	800b958 <_free_r+0x28>
 800b97e:	461a      	mov	r2, r3
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	b10b      	cbz	r3, 800b988 <_free_r+0x58>
 800b984:	42a3      	cmp	r3, r4
 800b986:	d9fa      	bls.n	800b97e <_free_r+0x4e>
 800b988:	6811      	ldr	r1, [r2, #0]
 800b98a:	1855      	adds	r5, r2, r1
 800b98c:	42a5      	cmp	r5, r4
 800b98e:	d10b      	bne.n	800b9a8 <_free_r+0x78>
 800b990:	6824      	ldr	r4, [r4, #0]
 800b992:	4421      	add	r1, r4
 800b994:	1854      	adds	r4, r2, r1
 800b996:	42a3      	cmp	r3, r4
 800b998:	6011      	str	r1, [r2, #0]
 800b99a:	d1dd      	bne.n	800b958 <_free_r+0x28>
 800b99c:	681c      	ldr	r4, [r3, #0]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	6053      	str	r3, [r2, #4]
 800b9a2:	4421      	add	r1, r4
 800b9a4:	6011      	str	r1, [r2, #0]
 800b9a6:	e7d7      	b.n	800b958 <_free_r+0x28>
 800b9a8:	d902      	bls.n	800b9b0 <_free_r+0x80>
 800b9aa:	230c      	movs	r3, #12
 800b9ac:	6003      	str	r3, [r0, #0]
 800b9ae:	e7d3      	b.n	800b958 <_free_r+0x28>
 800b9b0:	6825      	ldr	r5, [r4, #0]
 800b9b2:	1961      	adds	r1, r4, r5
 800b9b4:	428b      	cmp	r3, r1
 800b9b6:	bf04      	itt	eq
 800b9b8:	6819      	ldreq	r1, [r3, #0]
 800b9ba:	685b      	ldreq	r3, [r3, #4]
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	bf04      	itt	eq
 800b9c0:	1949      	addeq	r1, r1, r5
 800b9c2:	6021      	streq	r1, [r4, #0]
 800b9c4:	6054      	str	r4, [r2, #4]
 800b9c6:	e7c7      	b.n	800b958 <_free_r+0x28>
 800b9c8:	b003      	add	sp, #12
 800b9ca:	bd30      	pop	{r4, r5, pc}
 800b9cc:	2000026c 	.word	0x2000026c

0800b9d0 <_malloc_r>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	1ccd      	adds	r5, r1, #3
 800b9d4:	f025 0503 	bic.w	r5, r5, #3
 800b9d8:	3508      	adds	r5, #8
 800b9da:	2d0c      	cmp	r5, #12
 800b9dc:	bf38      	it	cc
 800b9de:	250c      	movcc	r5, #12
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	db01      	blt.n	800b9ea <_malloc_r+0x1a>
 800b9e6:	42a9      	cmp	r1, r5
 800b9e8:	d903      	bls.n	800b9f2 <_malloc_r+0x22>
 800b9ea:	230c      	movs	r3, #12
 800b9ec:	6033      	str	r3, [r6, #0]
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9f2:	f001 f803 	bl	800c9fc <__malloc_lock>
 800b9f6:	4921      	ldr	r1, [pc, #132]	; (800ba7c <_malloc_r+0xac>)
 800b9f8:	680a      	ldr	r2, [r1, #0]
 800b9fa:	4614      	mov	r4, r2
 800b9fc:	b99c      	cbnz	r4, 800ba26 <_malloc_r+0x56>
 800b9fe:	4f20      	ldr	r7, [pc, #128]	; (800ba80 <_malloc_r+0xb0>)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	b923      	cbnz	r3, 800ba0e <_malloc_r+0x3e>
 800ba04:	4621      	mov	r1, r4
 800ba06:	4630      	mov	r0, r6
 800ba08:	f000 fcd2 	bl	800c3b0 <_sbrk_r>
 800ba0c:	6038      	str	r0, [r7, #0]
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4630      	mov	r0, r6
 800ba12:	f000 fccd 	bl	800c3b0 <_sbrk_r>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d123      	bne.n	800ba62 <_malloc_r+0x92>
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	6033      	str	r3, [r6, #0]
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f000 fff2 	bl	800ca08 <__malloc_unlock>
 800ba24:	e7e3      	b.n	800b9ee <_malloc_r+0x1e>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	1b5b      	subs	r3, r3, r5
 800ba2a:	d417      	bmi.n	800ba5c <_malloc_r+0x8c>
 800ba2c:	2b0b      	cmp	r3, #11
 800ba2e:	d903      	bls.n	800ba38 <_malloc_r+0x68>
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	441c      	add	r4, r3
 800ba34:	6025      	str	r5, [r4, #0]
 800ba36:	e004      	b.n	800ba42 <_malloc_r+0x72>
 800ba38:	6863      	ldr	r3, [r4, #4]
 800ba3a:	42a2      	cmp	r2, r4
 800ba3c:	bf0c      	ite	eq
 800ba3e:	600b      	streq	r3, [r1, #0]
 800ba40:	6053      	strne	r3, [r2, #4]
 800ba42:	4630      	mov	r0, r6
 800ba44:	f000 ffe0 	bl	800ca08 <__malloc_unlock>
 800ba48:	f104 000b 	add.w	r0, r4, #11
 800ba4c:	1d23      	adds	r3, r4, #4
 800ba4e:	f020 0007 	bic.w	r0, r0, #7
 800ba52:	1ac2      	subs	r2, r0, r3
 800ba54:	d0cc      	beq.n	800b9f0 <_malloc_r+0x20>
 800ba56:	1a1b      	subs	r3, r3, r0
 800ba58:	50a3      	str	r3, [r4, r2]
 800ba5a:	e7c9      	b.n	800b9f0 <_malloc_r+0x20>
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	6864      	ldr	r4, [r4, #4]
 800ba60:	e7cc      	b.n	800b9fc <_malloc_r+0x2c>
 800ba62:	1cc4      	adds	r4, r0, #3
 800ba64:	f024 0403 	bic.w	r4, r4, #3
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d0e3      	beq.n	800ba34 <_malloc_r+0x64>
 800ba6c:	1a21      	subs	r1, r4, r0
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f000 fc9e 	bl	800c3b0 <_sbrk_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	d1dd      	bne.n	800ba34 <_malloc_r+0x64>
 800ba78:	e7cf      	b.n	800ba1a <_malloc_r+0x4a>
 800ba7a:	bf00      	nop
 800ba7c:	2000026c 	.word	0x2000026c
 800ba80:	20000270 	.word	0x20000270

0800ba84 <__ssputs_r>:
 800ba84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba88:	688e      	ldr	r6, [r1, #8]
 800ba8a:	429e      	cmp	r6, r3
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	4690      	mov	r8, r2
 800ba92:	461f      	mov	r7, r3
 800ba94:	d838      	bhi.n	800bb08 <__ssputs_r+0x84>
 800ba96:	898a      	ldrh	r2, [r1, #12]
 800ba98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba9c:	d032      	beq.n	800bb04 <__ssputs_r+0x80>
 800ba9e:	6825      	ldr	r5, [r4, #0]
 800baa0:	6909      	ldr	r1, [r1, #16]
 800baa2:	eba5 0901 	sub.w	r9, r5, r1
 800baa6:	6965      	ldr	r5, [r4, #20]
 800baa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bab0:	3301      	adds	r3, #1
 800bab2:	444b      	add	r3, r9
 800bab4:	106d      	asrs	r5, r5, #1
 800bab6:	429d      	cmp	r5, r3
 800bab8:	bf38      	it	cc
 800baba:	461d      	movcc	r5, r3
 800babc:	0553      	lsls	r3, r2, #21
 800babe:	d531      	bpl.n	800bb24 <__ssputs_r+0xa0>
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7ff ff85 	bl	800b9d0 <_malloc_r>
 800bac6:	4606      	mov	r6, r0
 800bac8:	b950      	cbnz	r0, 800bae0 <__ssputs_r+0x5c>
 800baca:	230c      	movs	r3, #12
 800bacc:	f8ca 3000 	str.w	r3, [sl]
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bad6:	81a3      	strh	r3, [r4, #12]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae0:	6921      	ldr	r1, [r4, #16]
 800bae2:	464a      	mov	r2, r9
 800bae4:	f7ff fa4c 	bl	800af80 <memcpy>
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800baee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	6126      	str	r6, [r4, #16]
 800baf6:	6165      	str	r5, [r4, #20]
 800baf8:	444e      	add	r6, r9
 800bafa:	eba5 0509 	sub.w	r5, r5, r9
 800bafe:	6026      	str	r6, [r4, #0]
 800bb00:	60a5      	str	r5, [r4, #8]
 800bb02:	463e      	mov	r6, r7
 800bb04:	42be      	cmp	r6, r7
 800bb06:	d900      	bls.n	800bb0a <__ssputs_r+0x86>
 800bb08:	463e      	mov	r6, r7
 800bb0a:	4632      	mov	r2, r6
 800bb0c:	6820      	ldr	r0, [r4, #0]
 800bb0e:	4641      	mov	r1, r8
 800bb10:	f000 ff5a 	bl	800c9c8 <memmove>
 800bb14:	68a3      	ldr	r3, [r4, #8]
 800bb16:	6822      	ldr	r2, [r4, #0]
 800bb18:	1b9b      	subs	r3, r3, r6
 800bb1a:	4432      	add	r2, r6
 800bb1c:	60a3      	str	r3, [r4, #8]
 800bb1e:	6022      	str	r2, [r4, #0]
 800bb20:	2000      	movs	r0, #0
 800bb22:	e7db      	b.n	800badc <__ssputs_r+0x58>
 800bb24:	462a      	mov	r2, r5
 800bb26:	f000 ff75 	bl	800ca14 <_realloc_r>
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d1e1      	bne.n	800baf4 <__ssputs_r+0x70>
 800bb30:	6921      	ldr	r1, [r4, #16]
 800bb32:	4650      	mov	r0, sl
 800bb34:	f7ff fefc 	bl	800b930 <_free_r>
 800bb38:	e7c7      	b.n	800baca <__ssputs_r+0x46>
	...

0800bb3c <_svfiprintf_r>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	4698      	mov	r8, r3
 800bb42:	898b      	ldrh	r3, [r1, #12]
 800bb44:	061b      	lsls	r3, r3, #24
 800bb46:	b09d      	sub	sp, #116	; 0x74
 800bb48:	4607      	mov	r7, r0
 800bb4a:	460d      	mov	r5, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	d50e      	bpl.n	800bb6e <_svfiprintf_r+0x32>
 800bb50:	690b      	ldr	r3, [r1, #16]
 800bb52:	b963      	cbnz	r3, 800bb6e <_svfiprintf_r+0x32>
 800bb54:	2140      	movs	r1, #64	; 0x40
 800bb56:	f7ff ff3b 	bl	800b9d0 <_malloc_r>
 800bb5a:	6028      	str	r0, [r5, #0]
 800bb5c:	6128      	str	r0, [r5, #16]
 800bb5e:	b920      	cbnz	r0, 800bb6a <_svfiprintf_r+0x2e>
 800bb60:	230c      	movs	r3, #12
 800bb62:	603b      	str	r3, [r7, #0]
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295
 800bb68:	e0d1      	b.n	800bd0e <_svfiprintf_r+0x1d2>
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	616b      	str	r3, [r5, #20]
 800bb6e:	2300      	movs	r3, #0
 800bb70:	9309      	str	r3, [sp, #36]	; 0x24
 800bb72:	2320      	movs	r3, #32
 800bb74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb78:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb7c:	2330      	movs	r3, #48	; 0x30
 800bb7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd28 <_svfiprintf_r+0x1ec>
 800bb82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb86:	f04f 0901 	mov.w	r9, #1
 800bb8a:	4623      	mov	r3, r4
 800bb8c:	469a      	mov	sl, r3
 800bb8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb92:	b10a      	cbz	r2, 800bb98 <_svfiprintf_r+0x5c>
 800bb94:	2a25      	cmp	r2, #37	; 0x25
 800bb96:	d1f9      	bne.n	800bb8c <_svfiprintf_r+0x50>
 800bb98:	ebba 0b04 	subs.w	fp, sl, r4
 800bb9c:	d00b      	beq.n	800bbb6 <_svfiprintf_r+0x7a>
 800bb9e:	465b      	mov	r3, fp
 800bba0:	4622      	mov	r2, r4
 800bba2:	4629      	mov	r1, r5
 800bba4:	4638      	mov	r0, r7
 800bba6:	f7ff ff6d 	bl	800ba84 <__ssputs_r>
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f000 80aa 	beq.w	800bd04 <_svfiprintf_r+0x1c8>
 800bbb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbb2:	445a      	add	r2, fp
 800bbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80a2 	beq.w	800bd04 <_svfiprintf_r+0x1c8>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbca:	f10a 0a01 	add.w	sl, sl, #1
 800bbce:	9304      	str	r3, [sp, #16]
 800bbd0:	9307      	str	r3, [sp, #28]
 800bbd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbd6:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd8:	4654      	mov	r4, sl
 800bbda:	2205      	movs	r2, #5
 800bbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe0:	4851      	ldr	r0, [pc, #324]	; (800bd28 <_svfiprintf_r+0x1ec>)
 800bbe2:	f7f4 fb1d 	bl	8000220 <memchr>
 800bbe6:	9a04      	ldr	r2, [sp, #16]
 800bbe8:	b9d8      	cbnz	r0, 800bc22 <_svfiprintf_r+0xe6>
 800bbea:	06d0      	lsls	r0, r2, #27
 800bbec:	bf44      	itt	mi
 800bbee:	2320      	movmi	r3, #32
 800bbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf4:	0711      	lsls	r1, r2, #28
 800bbf6:	bf44      	itt	mi
 800bbf8:	232b      	movmi	r3, #43	; 0x2b
 800bbfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbfe:	f89a 3000 	ldrb.w	r3, [sl]
 800bc02:	2b2a      	cmp	r3, #42	; 0x2a
 800bc04:	d015      	beq.n	800bc32 <_svfiprintf_r+0xf6>
 800bc06:	9a07      	ldr	r2, [sp, #28]
 800bc08:	4654      	mov	r4, sl
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	4621      	mov	r1, r4
 800bc12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc16:	3b30      	subs	r3, #48	; 0x30
 800bc18:	2b09      	cmp	r3, #9
 800bc1a:	d94e      	bls.n	800bcba <_svfiprintf_r+0x17e>
 800bc1c:	b1b0      	cbz	r0, 800bc4c <_svfiprintf_r+0x110>
 800bc1e:	9207      	str	r2, [sp, #28]
 800bc20:	e014      	b.n	800bc4c <_svfiprintf_r+0x110>
 800bc22:	eba0 0308 	sub.w	r3, r0, r8
 800bc26:	fa09 f303 	lsl.w	r3, r9, r3
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	46a2      	mov	sl, r4
 800bc30:	e7d2      	b.n	800bbd8 <_svfiprintf_r+0x9c>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	1d19      	adds	r1, r3, #4
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	9103      	str	r1, [sp, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	bfbb      	ittet	lt
 800bc3e:	425b      	neglt	r3, r3
 800bc40:	f042 0202 	orrlt.w	r2, r2, #2
 800bc44:	9307      	strge	r3, [sp, #28]
 800bc46:	9307      	strlt	r3, [sp, #28]
 800bc48:	bfb8      	it	lt
 800bc4a:	9204      	strlt	r2, [sp, #16]
 800bc4c:	7823      	ldrb	r3, [r4, #0]
 800bc4e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc50:	d10c      	bne.n	800bc6c <_svfiprintf_r+0x130>
 800bc52:	7863      	ldrb	r3, [r4, #1]
 800bc54:	2b2a      	cmp	r3, #42	; 0x2a
 800bc56:	d135      	bne.n	800bcc4 <_svfiprintf_r+0x188>
 800bc58:	9b03      	ldr	r3, [sp, #12]
 800bc5a:	1d1a      	adds	r2, r3, #4
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	9203      	str	r2, [sp, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	bfb8      	it	lt
 800bc64:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc68:	3402      	adds	r4, #2
 800bc6a:	9305      	str	r3, [sp, #20]
 800bc6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd38 <_svfiprintf_r+0x1fc>
 800bc70:	7821      	ldrb	r1, [r4, #0]
 800bc72:	2203      	movs	r2, #3
 800bc74:	4650      	mov	r0, sl
 800bc76:	f7f4 fad3 	bl	8000220 <memchr>
 800bc7a:	b140      	cbz	r0, 800bc8e <_svfiprintf_r+0x152>
 800bc7c:	2340      	movs	r3, #64	; 0x40
 800bc7e:	eba0 000a 	sub.w	r0, r0, sl
 800bc82:	fa03 f000 	lsl.w	r0, r3, r0
 800bc86:	9b04      	ldr	r3, [sp, #16]
 800bc88:	4303      	orrs	r3, r0
 800bc8a:	3401      	adds	r4, #1
 800bc8c:	9304      	str	r3, [sp, #16]
 800bc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc92:	4826      	ldr	r0, [pc, #152]	; (800bd2c <_svfiprintf_r+0x1f0>)
 800bc94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc98:	2206      	movs	r2, #6
 800bc9a:	f7f4 fac1 	bl	8000220 <memchr>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	d038      	beq.n	800bd14 <_svfiprintf_r+0x1d8>
 800bca2:	4b23      	ldr	r3, [pc, #140]	; (800bd30 <_svfiprintf_r+0x1f4>)
 800bca4:	bb1b      	cbnz	r3, 800bcee <_svfiprintf_r+0x1b2>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	3307      	adds	r3, #7
 800bcaa:	f023 0307 	bic.w	r3, r3, #7
 800bcae:	3308      	adds	r3, #8
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb4:	4433      	add	r3, r6
 800bcb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb8:	e767      	b.n	800bb8a <_svfiprintf_r+0x4e>
 800bcba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	e7a5      	b.n	800bc10 <_svfiprintf_r+0xd4>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	3401      	adds	r4, #1
 800bcc8:	9305      	str	r3, [sp, #20]
 800bcca:	4619      	mov	r1, r3
 800bccc:	f04f 0c0a 	mov.w	ip, #10
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd6:	3a30      	subs	r2, #48	; 0x30
 800bcd8:	2a09      	cmp	r2, #9
 800bcda:	d903      	bls.n	800bce4 <_svfiprintf_r+0x1a8>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c5      	beq.n	800bc6c <_svfiprintf_r+0x130>
 800bce0:	9105      	str	r1, [sp, #20]
 800bce2:	e7c3      	b.n	800bc6c <_svfiprintf_r+0x130>
 800bce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce8:	4604      	mov	r4, r0
 800bcea:	2301      	movs	r3, #1
 800bcec:	e7f0      	b.n	800bcd0 <_svfiprintf_r+0x194>
 800bcee:	ab03      	add	r3, sp, #12
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <_svfiprintf_r+0x1f8>)
 800bcf6:	a904      	add	r1, sp, #16
 800bcf8:	4638      	mov	r0, r7
 800bcfa:	f7fc f98f 	bl	800801c <_printf_float>
 800bcfe:	1c42      	adds	r2, r0, #1
 800bd00:	4606      	mov	r6, r0
 800bd02:	d1d6      	bne.n	800bcb2 <_svfiprintf_r+0x176>
 800bd04:	89ab      	ldrh	r3, [r5, #12]
 800bd06:	065b      	lsls	r3, r3, #25
 800bd08:	f53f af2c 	bmi.w	800bb64 <_svfiprintf_r+0x28>
 800bd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd0e:	b01d      	add	sp, #116	; 0x74
 800bd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd14:	ab03      	add	r3, sp, #12
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <_svfiprintf_r+0x1f8>)
 800bd1c:	a904      	add	r1, sp, #16
 800bd1e:	4638      	mov	r0, r7
 800bd20:	f7fc fc20 	bl	8008564 <_printf_i>
 800bd24:	e7eb      	b.n	800bcfe <_svfiprintf_r+0x1c2>
 800bd26:	bf00      	nop
 800bd28:	0800d4a4 	.word	0x0800d4a4
 800bd2c:	0800d4ae 	.word	0x0800d4ae
 800bd30:	0800801d 	.word	0x0800801d
 800bd34:	0800ba85 	.word	0x0800ba85
 800bd38:	0800d4aa 	.word	0x0800d4aa

0800bd3c <_sungetc_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	1c4b      	adds	r3, r1, #1
 800bd40:	4614      	mov	r4, r2
 800bd42:	d103      	bne.n	800bd4c <_sungetc_r+0x10>
 800bd44:	f04f 35ff 	mov.w	r5, #4294967295
 800bd48:	4628      	mov	r0, r5
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	8993      	ldrh	r3, [r2, #12]
 800bd4e:	f023 0320 	bic.w	r3, r3, #32
 800bd52:	8193      	strh	r3, [r2, #12]
 800bd54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd56:	6852      	ldr	r2, [r2, #4]
 800bd58:	b2cd      	uxtb	r5, r1
 800bd5a:	b18b      	cbz	r3, 800bd80 <_sungetc_r+0x44>
 800bd5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	dd08      	ble.n	800bd74 <_sungetc_r+0x38>
 800bd62:	6823      	ldr	r3, [r4, #0]
 800bd64:	1e5a      	subs	r2, r3, #1
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd6c:	6863      	ldr	r3, [r4, #4]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	6063      	str	r3, [r4, #4]
 800bd72:	e7e9      	b.n	800bd48 <_sungetc_r+0xc>
 800bd74:	4621      	mov	r1, r4
 800bd76:	f000 fbf5 	bl	800c564 <__submore>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d0f1      	beq.n	800bd62 <_sungetc_r+0x26>
 800bd7e:	e7e1      	b.n	800bd44 <_sungetc_r+0x8>
 800bd80:	6921      	ldr	r1, [r4, #16]
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	b151      	cbz	r1, 800bd9c <_sungetc_r+0x60>
 800bd86:	4299      	cmp	r1, r3
 800bd88:	d208      	bcs.n	800bd9c <_sungetc_r+0x60>
 800bd8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bd8e:	42a9      	cmp	r1, r5
 800bd90:	d104      	bne.n	800bd9c <_sungetc_r+0x60>
 800bd92:	3b01      	subs	r3, #1
 800bd94:	3201      	adds	r2, #1
 800bd96:	6023      	str	r3, [r4, #0]
 800bd98:	6062      	str	r2, [r4, #4]
 800bd9a:	e7d5      	b.n	800bd48 <_sungetc_r+0xc>
 800bd9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bda0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bda4:	6363      	str	r3, [r4, #52]	; 0x34
 800bda6:	2303      	movs	r3, #3
 800bda8:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdaa:	4623      	mov	r3, r4
 800bdac:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e7dc      	b.n	800bd70 <_sungetc_r+0x34>

0800bdb6 <__ssrefill_r>:
 800bdb6:	b510      	push	{r4, lr}
 800bdb8:	460c      	mov	r4, r1
 800bdba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bdbc:	b169      	cbz	r1, 800bdda <__ssrefill_r+0x24>
 800bdbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc2:	4299      	cmp	r1, r3
 800bdc4:	d001      	beq.n	800bdca <__ssrefill_r+0x14>
 800bdc6:	f7ff fdb3 	bl	800b930 <_free_r>
 800bdca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	2000      	movs	r0, #0
 800bdd0:	6360      	str	r0, [r4, #52]	; 0x34
 800bdd2:	b113      	cbz	r3, 800bdda <__ssrefill_r+0x24>
 800bdd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	bd10      	pop	{r4, pc}
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	2300      	movs	r3, #0
 800bde0:	6063      	str	r3, [r4, #4]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f043 0320 	orr.w	r3, r3, #32
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	f04f 30ff 	mov.w	r0, #4294967295
 800bdee:	e7f3      	b.n	800bdd8 <__ssrefill_r+0x22>

0800bdf0 <__ssvfiscanf_r>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	460c      	mov	r4, r1
 800bdf6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800be00:	49b2      	ldr	r1, [pc, #712]	; (800c0cc <__ssvfiscanf_r+0x2dc>)
 800be02:	91a0      	str	r1, [sp, #640]	; 0x280
 800be04:	f10d 0804 	add.w	r8, sp, #4
 800be08:	49b1      	ldr	r1, [pc, #708]	; (800c0d0 <__ssvfiscanf_r+0x2e0>)
 800be0a:	4fb2      	ldr	r7, [pc, #712]	; (800c0d4 <__ssvfiscanf_r+0x2e4>)
 800be0c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c0d8 <__ssvfiscanf_r+0x2e8>
 800be10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800be14:	4606      	mov	r6, r0
 800be16:	91a1      	str	r1, [sp, #644]	; 0x284
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	f892 a000 	ldrb.w	sl, [r2]
 800be1e:	f1ba 0f00 	cmp.w	sl, #0
 800be22:	f000 8151 	beq.w	800c0c8 <__ssvfiscanf_r+0x2d8>
 800be26:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800be2a:	f013 0308 	ands.w	r3, r3, #8
 800be2e:	f102 0501 	add.w	r5, r2, #1
 800be32:	d019      	beq.n	800be68 <__ssvfiscanf_r+0x78>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd0f      	ble.n	800be5a <__ssvfiscanf_r+0x6a>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	5cba      	ldrb	r2, [r7, r2]
 800be40:	0712      	lsls	r2, r2, #28
 800be42:	d401      	bmi.n	800be48 <__ssvfiscanf_r+0x58>
 800be44:	462a      	mov	r2, r5
 800be46:	e7e8      	b.n	800be1a <__ssvfiscanf_r+0x2a>
 800be48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800be4a:	3201      	adds	r2, #1
 800be4c:	9245      	str	r2, [sp, #276]	; 0x114
 800be4e:	6862      	ldr	r2, [r4, #4]
 800be50:	3301      	adds	r3, #1
 800be52:	3a01      	subs	r2, #1
 800be54:	6062      	str	r2, [r4, #4]
 800be56:	6023      	str	r3, [r4, #0]
 800be58:	e7ec      	b.n	800be34 <__ssvfiscanf_r+0x44>
 800be5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be5c:	4621      	mov	r1, r4
 800be5e:	4630      	mov	r0, r6
 800be60:	4798      	blx	r3
 800be62:	2800      	cmp	r0, #0
 800be64:	d0e9      	beq.n	800be3a <__ssvfiscanf_r+0x4a>
 800be66:	e7ed      	b.n	800be44 <__ssvfiscanf_r+0x54>
 800be68:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800be6c:	f040 8083 	bne.w	800bf76 <__ssvfiscanf_r+0x186>
 800be70:	9341      	str	r3, [sp, #260]	; 0x104
 800be72:	9343      	str	r3, [sp, #268]	; 0x10c
 800be74:	7853      	ldrb	r3, [r2, #1]
 800be76:	2b2a      	cmp	r3, #42	; 0x2a
 800be78:	bf02      	ittt	eq
 800be7a:	2310      	moveq	r3, #16
 800be7c:	1c95      	addeq	r5, r2, #2
 800be7e:	9341      	streq	r3, [sp, #260]	; 0x104
 800be80:	220a      	movs	r2, #10
 800be82:	46ab      	mov	fp, r5
 800be84:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800be88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800be8c:	2b09      	cmp	r3, #9
 800be8e:	d91d      	bls.n	800becc <__ssvfiscanf_r+0xdc>
 800be90:	4891      	ldr	r0, [pc, #580]	; (800c0d8 <__ssvfiscanf_r+0x2e8>)
 800be92:	2203      	movs	r2, #3
 800be94:	f7f4 f9c4 	bl	8000220 <memchr>
 800be98:	b140      	cbz	r0, 800beac <__ssvfiscanf_r+0xbc>
 800be9a:	2301      	movs	r3, #1
 800be9c:	eba0 0009 	sub.w	r0, r0, r9
 800bea0:	fa03 f000 	lsl.w	r0, r3, r0
 800bea4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bea6:	4318      	orrs	r0, r3
 800bea8:	9041      	str	r0, [sp, #260]	; 0x104
 800beaa:	465d      	mov	r5, fp
 800beac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800beb0:	2b78      	cmp	r3, #120	; 0x78
 800beb2:	d806      	bhi.n	800bec2 <__ssvfiscanf_r+0xd2>
 800beb4:	2b57      	cmp	r3, #87	; 0x57
 800beb6:	d810      	bhi.n	800beda <__ssvfiscanf_r+0xea>
 800beb8:	2b25      	cmp	r3, #37	; 0x25
 800beba:	d05c      	beq.n	800bf76 <__ssvfiscanf_r+0x186>
 800bebc:	d856      	bhi.n	800bf6c <__ssvfiscanf_r+0x17c>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d074      	beq.n	800bfac <__ssvfiscanf_r+0x1bc>
 800bec2:	2303      	movs	r3, #3
 800bec4:	9347      	str	r3, [sp, #284]	; 0x11c
 800bec6:	230a      	movs	r3, #10
 800bec8:	9342      	str	r3, [sp, #264]	; 0x108
 800beca:	e081      	b.n	800bfd0 <__ssvfiscanf_r+0x1e0>
 800becc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bece:	fb02 1303 	mla	r3, r2, r3, r1
 800bed2:	3b30      	subs	r3, #48	; 0x30
 800bed4:	9343      	str	r3, [sp, #268]	; 0x10c
 800bed6:	465d      	mov	r5, fp
 800bed8:	e7d3      	b.n	800be82 <__ssvfiscanf_r+0x92>
 800beda:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bede:	2a20      	cmp	r2, #32
 800bee0:	d8ef      	bhi.n	800bec2 <__ssvfiscanf_r+0xd2>
 800bee2:	a101      	add	r1, pc, #4	; (adr r1, 800bee8 <__ssvfiscanf_r+0xf8>)
 800bee4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bee8:	0800bfbb 	.word	0x0800bfbb
 800beec:	0800bec3 	.word	0x0800bec3
 800bef0:	0800bec3 	.word	0x0800bec3
 800bef4:	0800c019 	.word	0x0800c019
 800bef8:	0800bec3 	.word	0x0800bec3
 800befc:	0800bec3 	.word	0x0800bec3
 800bf00:	0800bec3 	.word	0x0800bec3
 800bf04:	0800bec3 	.word	0x0800bec3
 800bf08:	0800bec3 	.word	0x0800bec3
 800bf0c:	0800bec3 	.word	0x0800bec3
 800bf10:	0800bec3 	.word	0x0800bec3
 800bf14:	0800c02f 	.word	0x0800c02f
 800bf18:	0800c005 	.word	0x0800c005
 800bf1c:	0800bf73 	.word	0x0800bf73
 800bf20:	0800bf73 	.word	0x0800bf73
 800bf24:	0800bf73 	.word	0x0800bf73
 800bf28:	0800bec3 	.word	0x0800bec3
 800bf2c:	0800c009 	.word	0x0800c009
 800bf30:	0800bec3 	.word	0x0800bec3
 800bf34:	0800bec3 	.word	0x0800bec3
 800bf38:	0800bec3 	.word	0x0800bec3
 800bf3c:	0800bec3 	.word	0x0800bec3
 800bf40:	0800c03f 	.word	0x0800c03f
 800bf44:	0800c011 	.word	0x0800c011
 800bf48:	0800bfb3 	.word	0x0800bfb3
 800bf4c:	0800bec3 	.word	0x0800bec3
 800bf50:	0800bec3 	.word	0x0800bec3
 800bf54:	0800c03b 	.word	0x0800c03b
 800bf58:	0800bec3 	.word	0x0800bec3
 800bf5c:	0800c005 	.word	0x0800c005
 800bf60:	0800bec3 	.word	0x0800bec3
 800bf64:	0800bec3 	.word	0x0800bec3
 800bf68:	0800bfbb 	.word	0x0800bfbb
 800bf6c:	3b45      	subs	r3, #69	; 0x45
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d8a7      	bhi.n	800bec2 <__ssvfiscanf_r+0xd2>
 800bf72:	2305      	movs	r3, #5
 800bf74:	e02b      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800bf76:	6863      	ldr	r3, [r4, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dd0d      	ble.n	800bf98 <__ssvfiscanf_r+0x1a8>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	4552      	cmp	r2, sl
 800bf82:	f040 80a1 	bne.w	800c0c8 <__ssvfiscanf_r+0x2d8>
 800bf86:	3301      	adds	r3, #1
 800bf88:	6862      	ldr	r2, [r4, #4]
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bf8e:	3a01      	subs	r2, #1
 800bf90:	3301      	adds	r3, #1
 800bf92:	6062      	str	r2, [r4, #4]
 800bf94:	9345      	str	r3, [sp, #276]	; 0x114
 800bf96:	e755      	b.n	800be44 <__ssvfiscanf_r+0x54>
 800bf98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4798      	blx	r3
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d0eb      	beq.n	800bf7c <__ssvfiscanf_r+0x18c>
 800bfa4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f040 8084 	bne.w	800c0b4 <__ssvfiscanf_r+0x2c4>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e086      	b.n	800c0c0 <__ssvfiscanf_r+0x2d0>
 800bfb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfb4:	f042 0220 	orr.w	r2, r2, #32
 800bfb8:	9241      	str	r2, [sp, #260]	; 0x104
 800bfba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfc0:	9241      	str	r2, [sp, #260]	; 0x104
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	2b6f      	cmp	r3, #111	; 0x6f
 800bfc6:	9242      	str	r2, [sp, #264]	; 0x108
 800bfc8:	bf34      	ite	cc
 800bfca:	2303      	movcc	r3, #3
 800bfcc:	2304      	movcs	r3, #4
 800bfce:	9347      	str	r3, [sp, #284]	; 0x11c
 800bfd0:	6863      	ldr	r3, [r4, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	dd41      	ble.n	800c05a <__ssvfiscanf_r+0x26a>
 800bfd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bfd8:	0659      	lsls	r1, r3, #25
 800bfda:	d404      	bmi.n	800bfe6 <__ssvfiscanf_r+0x1f6>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	5cba      	ldrb	r2, [r7, r2]
 800bfe2:	0712      	lsls	r2, r2, #28
 800bfe4:	d440      	bmi.n	800c068 <__ssvfiscanf_r+0x278>
 800bfe6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	dc4f      	bgt.n	800c08c <__ssvfiscanf_r+0x29c>
 800bfec:	466b      	mov	r3, sp
 800bfee:	4622      	mov	r2, r4
 800bff0:	a941      	add	r1, sp, #260	; 0x104
 800bff2:	4630      	mov	r0, r6
 800bff4:	f000 f874 	bl	800c0e0 <_scanf_chars>
 800bff8:	2801      	cmp	r0, #1
 800bffa:	d065      	beq.n	800c0c8 <__ssvfiscanf_r+0x2d8>
 800bffc:	2802      	cmp	r0, #2
 800bffe:	f47f af21 	bne.w	800be44 <__ssvfiscanf_r+0x54>
 800c002:	e7cf      	b.n	800bfa4 <__ssvfiscanf_r+0x1b4>
 800c004:	220a      	movs	r2, #10
 800c006:	e7dd      	b.n	800bfc4 <__ssvfiscanf_r+0x1d4>
 800c008:	2300      	movs	r3, #0
 800c00a:	9342      	str	r3, [sp, #264]	; 0x108
 800c00c:	2303      	movs	r3, #3
 800c00e:	e7de      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c010:	2308      	movs	r3, #8
 800c012:	9342      	str	r3, [sp, #264]	; 0x108
 800c014:	2304      	movs	r3, #4
 800c016:	e7da      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c018:	4629      	mov	r1, r5
 800c01a:	4640      	mov	r0, r8
 800c01c:	f000 f9d8 	bl	800c3d0 <__sccl>
 800c020:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c026:	9341      	str	r3, [sp, #260]	; 0x104
 800c028:	4605      	mov	r5, r0
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7cf      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c02e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c034:	9341      	str	r3, [sp, #260]	; 0x104
 800c036:	2300      	movs	r3, #0
 800c038:	e7c9      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c03a:	2302      	movs	r3, #2
 800c03c:	e7c7      	b.n	800bfce <__ssvfiscanf_r+0x1de>
 800c03e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c040:	06c3      	lsls	r3, r0, #27
 800c042:	f53f aeff 	bmi.w	800be44 <__ssvfiscanf_r+0x54>
 800c046:	9b00      	ldr	r3, [sp, #0]
 800c048:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c04a:	1d19      	adds	r1, r3, #4
 800c04c:	9100      	str	r1, [sp, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	07c0      	lsls	r0, r0, #31
 800c052:	bf4c      	ite	mi
 800c054:	801a      	strhmi	r2, [r3, #0]
 800c056:	601a      	strpl	r2, [r3, #0]
 800c058:	e6f4      	b.n	800be44 <__ssvfiscanf_r+0x54>
 800c05a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c05c:	4621      	mov	r1, r4
 800c05e:	4630      	mov	r0, r6
 800c060:	4798      	blx	r3
 800c062:	2800      	cmp	r0, #0
 800c064:	d0b7      	beq.n	800bfd6 <__ssvfiscanf_r+0x1e6>
 800c066:	e79d      	b.n	800bfa4 <__ssvfiscanf_r+0x1b4>
 800c068:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c06a:	3201      	adds	r2, #1
 800c06c:	9245      	str	r2, [sp, #276]	; 0x114
 800c06e:	6862      	ldr	r2, [r4, #4]
 800c070:	3a01      	subs	r2, #1
 800c072:	2a00      	cmp	r2, #0
 800c074:	6062      	str	r2, [r4, #4]
 800c076:	dd02      	ble.n	800c07e <__ssvfiscanf_r+0x28e>
 800c078:	3301      	adds	r3, #1
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	e7ae      	b.n	800bfdc <__ssvfiscanf_r+0x1ec>
 800c07e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c080:	4621      	mov	r1, r4
 800c082:	4630      	mov	r0, r6
 800c084:	4798      	blx	r3
 800c086:	2800      	cmp	r0, #0
 800c088:	d0a8      	beq.n	800bfdc <__ssvfiscanf_r+0x1ec>
 800c08a:	e78b      	b.n	800bfa4 <__ssvfiscanf_r+0x1b4>
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	dc06      	bgt.n	800c09e <__ssvfiscanf_r+0x2ae>
 800c090:	466b      	mov	r3, sp
 800c092:	4622      	mov	r2, r4
 800c094:	a941      	add	r1, sp, #260	; 0x104
 800c096:	4630      	mov	r0, r6
 800c098:	f000 f87a 	bl	800c190 <_scanf_i>
 800c09c:	e7ac      	b.n	800bff8 <__ssvfiscanf_r+0x208>
 800c09e:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <__ssvfiscanf_r+0x2ec>)
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f43f aecf 	beq.w	800be44 <__ssvfiscanf_r+0x54>
 800c0a6:	466b      	mov	r3, sp
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	a941      	add	r1, sp, #260	; 0x104
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f7fc fb7f 	bl	80087b0 <_scanf_float>
 800c0b2:	e7a1      	b.n	800bff8 <__ssvfiscanf_r+0x208>
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c0ba:	bf18      	it	ne
 800c0bc:	f04f 30ff 	movne.w	r0, #4294967295
 800c0c0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0ca:	e7f9      	b.n	800c0c0 <__ssvfiscanf_r+0x2d0>
 800c0cc:	0800bd3d 	.word	0x0800bd3d
 800c0d0:	0800bdb7 	.word	0x0800bdb7
 800c0d4:	0800d131 	.word	0x0800d131
 800c0d8:	0800d4aa 	.word	0x0800d4aa
 800c0dc:	080087b1 	.word	0x080087b1

0800c0e0 <_scanf_chars>:
 800c0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e4:	4615      	mov	r5, r2
 800c0e6:	688a      	ldr	r2, [r1, #8]
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	b932      	cbnz	r2, 800c0fc <_scanf_chars+0x1c>
 800c0ee:	698a      	ldr	r2, [r1, #24]
 800c0f0:	2a00      	cmp	r2, #0
 800c0f2:	bf0c      	ite	eq
 800c0f4:	2201      	moveq	r2, #1
 800c0f6:	f04f 32ff 	movne.w	r2, #4294967295
 800c0fa:	608a      	str	r2, [r1, #8]
 800c0fc:	6822      	ldr	r2, [r4, #0]
 800c0fe:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c18c <_scanf_chars+0xac>
 800c102:	06d1      	lsls	r1, r2, #27
 800c104:	bf5f      	itttt	pl
 800c106:	681a      	ldrpl	r2, [r3, #0]
 800c108:	1d11      	addpl	r1, r2, #4
 800c10a:	6019      	strpl	r1, [r3, #0]
 800c10c:	6816      	ldrpl	r6, [r2, #0]
 800c10e:	2700      	movs	r7, #0
 800c110:	69a0      	ldr	r0, [r4, #24]
 800c112:	b188      	cbz	r0, 800c138 <_scanf_chars+0x58>
 800c114:	2801      	cmp	r0, #1
 800c116:	d107      	bne.n	800c128 <_scanf_chars+0x48>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	6963      	ldr	r3, [r4, #20]
 800c11e:	5c9b      	ldrb	r3, [r3, r2]
 800c120:	b953      	cbnz	r3, 800c138 <_scanf_chars+0x58>
 800c122:	bb27      	cbnz	r7, 800c16e <_scanf_chars+0x8e>
 800c124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c128:	2802      	cmp	r0, #2
 800c12a:	d120      	bne.n	800c16e <_scanf_chars+0x8e>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c134:	071b      	lsls	r3, r3, #28
 800c136:	d41a      	bmi.n	800c16e <_scanf_chars+0x8e>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	06da      	lsls	r2, r3, #27
 800c13c:	bf5e      	ittt	pl
 800c13e:	682b      	ldrpl	r3, [r5, #0]
 800c140:	781b      	ldrbpl	r3, [r3, #0]
 800c142:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c146:	682a      	ldr	r2, [r5, #0]
 800c148:	686b      	ldr	r3, [r5, #4]
 800c14a:	3201      	adds	r2, #1
 800c14c:	602a      	str	r2, [r5, #0]
 800c14e:	68a2      	ldr	r2, [r4, #8]
 800c150:	3b01      	subs	r3, #1
 800c152:	3a01      	subs	r2, #1
 800c154:	606b      	str	r3, [r5, #4]
 800c156:	3701      	adds	r7, #1
 800c158:	60a2      	str	r2, [r4, #8]
 800c15a:	b142      	cbz	r2, 800c16e <_scanf_chars+0x8e>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	dcd7      	bgt.n	800c110 <_scanf_chars+0x30>
 800c160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c164:	4629      	mov	r1, r5
 800c166:	4640      	mov	r0, r8
 800c168:	4798      	blx	r3
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d0d0      	beq.n	800c110 <_scanf_chars+0x30>
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	f013 0310 	ands.w	r3, r3, #16
 800c174:	d105      	bne.n	800c182 <_scanf_chars+0xa2>
 800c176:	68e2      	ldr	r2, [r4, #12]
 800c178:	3201      	adds	r2, #1
 800c17a:	60e2      	str	r2, [r4, #12]
 800c17c:	69a2      	ldr	r2, [r4, #24]
 800c17e:	b102      	cbz	r2, 800c182 <_scanf_chars+0xa2>
 800c180:	7033      	strb	r3, [r6, #0]
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	441f      	add	r7, r3
 800c186:	6127      	str	r7, [r4, #16]
 800c188:	2000      	movs	r0, #0
 800c18a:	e7cb      	b.n	800c124 <_scanf_chars+0x44>
 800c18c:	0800d131 	.word	0x0800d131

0800c190 <_scanf_i>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	4698      	mov	r8, r3
 800c196:	4b74      	ldr	r3, [pc, #464]	; (800c368 <_scanf_i+0x1d8>)
 800c198:	460c      	mov	r4, r1
 800c19a:	4682      	mov	sl, r0
 800c19c:	4616      	mov	r6, r2
 800c19e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	ab03      	add	r3, sp, #12
 800c1a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1aa:	4b70      	ldr	r3, [pc, #448]	; (800c36c <_scanf_i+0x1dc>)
 800c1ac:	69a1      	ldr	r1, [r4, #24]
 800c1ae:	4a70      	ldr	r2, [pc, #448]	; (800c370 <_scanf_i+0x1e0>)
 800c1b0:	2903      	cmp	r1, #3
 800c1b2:	bf18      	it	ne
 800c1b4:	461a      	movne	r2, r3
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	9201      	str	r2, [sp, #4]
 800c1ba:	1e5a      	subs	r2, r3, #1
 800c1bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1c0:	bf88      	it	hi
 800c1c2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1c6:	4627      	mov	r7, r4
 800c1c8:	bf82      	ittt	hi
 800c1ca:	eb03 0905 	addhi.w	r9, r3, r5
 800c1ce:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1d2:	60a3      	strhi	r3, [r4, #8]
 800c1d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c1d8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c1dc:	bf98      	it	ls
 800c1de:	f04f 0900 	movls.w	r9, #0
 800c1e2:	6023      	str	r3, [r4, #0]
 800c1e4:	463d      	mov	r5, r7
 800c1e6:	f04f 0b00 	mov.w	fp, #0
 800c1ea:	6831      	ldr	r1, [r6, #0]
 800c1ec:	ab03      	add	r3, sp, #12
 800c1ee:	7809      	ldrb	r1, [r1, #0]
 800c1f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	f7f4 f813 	bl	8000220 <memchr>
 800c1fa:	b328      	cbz	r0, 800c248 <_scanf_i+0xb8>
 800c1fc:	f1bb 0f01 	cmp.w	fp, #1
 800c200:	d159      	bne.n	800c2b6 <_scanf_i+0x126>
 800c202:	6862      	ldr	r2, [r4, #4]
 800c204:	b92a      	cbnz	r2, 800c212 <_scanf_i+0x82>
 800c206:	6822      	ldr	r2, [r4, #0]
 800c208:	2308      	movs	r3, #8
 800c20a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c20e:	6063      	str	r3, [r4, #4]
 800c210:	6022      	str	r2, [r4, #0]
 800c212:	6822      	ldr	r2, [r4, #0]
 800c214:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c218:	6022      	str	r2, [r4, #0]
 800c21a:	68a2      	ldr	r2, [r4, #8]
 800c21c:	1e51      	subs	r1, r2, #1
 800c21e:	60a1      	str	r1, [r4, #8]
 800c220:	b192      	cbz	r2, 800c248 <_scanf_i+0xb8>
 800c222:	6832      	ldr	r2, [r6, #0]
 800c224:	1c51      	adds	r1, r2, #1
 800c226:	6031      	str	r1, [r6, #0]
 800c228:	7812      	ldrb	r2, [r2, #0]
 800c22a:	f805 2b01 	strb.w	r2, [r5], #1
 800c22e:	6872      	ldr	r2, [r6, #4]
 800c230:	3a01      	subs	r2, #1
 800c232:	2a00      	cmp	r2, #0
 800c234:	6072      	str	r2, [r6, #4]
 800c236:	dc07      	bgt.n	800c248 <_scanf_i+0xb8>
 800c238:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c23c:	4631      	mov	r1, r6
 800c23e:	4650      	mov	r0, sl
 800c240:	4790      	blx	r2
 800c242:	2800      	cmp	r0, #0
 800c244:	f040 8085 	bne.w	800c352 <_scanf_i+0x1c2>
 800c248:	f10b 0b01 	add.w	fp, fp, #1
 800c24c:	f1bb 0f03 	cmp.w	fp, #3
 800c250:	d1cb      	bne.n	800c1ea <_scanf_i+0x5a>
 800c252:	6863      	ldr	r3, [r4, #4]
 800c254:	b90b      	cbnz	r3, 800c25a <_scanf_i+0xca>
 800c256:	230a      	movs	r3, #10
 800c258:	6063      	str	r3, [r4, #4]
 800c25a:	6863      	ldr	r3, [r4, #4]
 800c25c:	4945      	ldr	r1, [pc, #276]	; (800c374 <_scanf_i+0x1e4>)
 800c25e:	6960      	ldr	r0, [r4, #20]
 800c260:	1ac9      	subs	r1, r1, r3
 800c262:	f000 f8b5 	bl	800c3d0 <__sccl>
 800c266:	f04f 0b00 	mov.w	fp, #0
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	6822      	ldr	r2, [r4, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d03d      	beq.n	800c2ee <_scanf_i+0x15e>
 800c272:	6831      	ldr	r1, [r6, #0]
 800c274:	6960      	ldr	r0, [r4, #20]
 800c276:	f891 c000 	ldrb.w	ip, [r1]
 800c27a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c27e:	2800      	cmp	r0, #0
 800c280:	d035      	beq.n	800c2ee <_scanf_i+0x15e>
 800c282:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c286:	d124      	bne.n	800c2d2 <_scanf_i+0x142>
 800c288:	0510      	lsls	r0, r2, #20
 800c28a:	d522      	bpl.n	800c2d2 <_scanf_i+0x142>
 800c28c:	f10b 0b01 	add.w	fp, fp, #1
 800c290:	f1b9 0f00 	cmp.w	r9, #0
 800c294:	d003      	beq.n	800c29e <_scanf_i+0x10e>
 800c296:	3301      	adds	r3, #1
 800c298:	f109 39ff 	add.w	r9, r9, #4294967295
 800c29c:	60a3      	str	r3, [r4, #8]
 800c29e:	6873      	ldr	r3, [r6, #4]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	6073      	str	r3, [r6, #4]
 800c2a6:	dd1b      	ble.n	800c2e0 <_scanf_i+0x150>
 800c2a8:	6833      	ldr	r3, [r6, #0]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	6033      	str	r3, [r6, #0]
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	60a3      	str	r3, [r4, #8]
 800c2b4:	e7d9      	b.n	800c26a <_scanf_i+0xda>
 800c2b6:	f1bb 0f02 	cmp.w	fp, #2
 800c2ba:	d1ae      	bne.n	800c21a <_scanf_i+0x8a>
 800c2bc:	6822      	ldr	r2, [r4, #0]
 800c2be:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c2c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c2c6:	d1bf      	bne.n	800c248 <_scanf_i+0xb8>
 800c2c8:	2310      	movs	r3, #16
 800c2ca:	6063      	str	r3, [r4, #4]
 800c2cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2d0:	e7a2      	b.n	800c218 <_scanf_i+0x88>
 800c2d2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c2d6:	6022      	str	r2, [r4, #0]
 800c2d8:	780b      	ldrb	r3, [r1, #0]
 800c2da:	f805 3b01 	strb.w	r3, [r5], #1
 800c2de:	e7de      	b.n	800c29e <_scanf_i+0x10e>
 800c2e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4650      	mov	r0, sl
 800c2e8:	4798      	blx	r3
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0df      	beq.n	800c2ae <_scanf_i+0x11e>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	05d9      	lsls	r1, r3, #23
 800c2f2:	d50d      	bpl.n	800c310 <_scanf_i+0x180>
 800c2f4:	42bd      	cmp	r5, r7
 800c2f6:	d909      	bls.n	800c30c <_scanf_i+0x17c>
 800c2f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c300:	4632      	mov	r2, r6
 800c302:	4650      	mov	r0, sl
 800c304:	4798      	blx	r3
 800c306:	f105 39ff 	add.w	r9, r5, #4294967295
 800c30a:	464d      	mov	r5, r9
 800c30c:	42bd      	cmp	r5, r7
 800c30e:	d028      	beq.n	800c362 <_scanf_i+0x1d2>
 800c310:	6822      	ldr	r2, [r4, #0]
 800c312:	f012 0210 	ands.w	r2, r2, #16
 800c316:	d113      	bne.n	800c340 <_scanf_i+0x1b0>
 800c318:	702a      	strb	r2, [r5, #0]
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	9e01      	ldr	r6, [sp, #4]
 800c31e:	4639      	mov	r1, r7
 800c320:	4650      	mov	r0, sl
 800c322:	47b0      	blx	r6
 800c324:	f8d8 3000 	ldr.w	r3, [r8]
 800c328:	6821      	ldr	r1, [r4, #0]
 800c32a:	1d1a      	adds	r2, r3, #4
 800c32c:	f8c8 2000 	str.w	r2, [r8]
 800c330:	f011 0f20 	tst.w	r1, #32
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	d00f      	beq.n	800c358 <_scanf_i+0x1c8>
 800c338:	6018      	str	r0, [r3, #0]
 800c33a:	68e3      	ldr	r3, [r4, #12]
 800c33c:	3301      	adds	r3, #1
 800c33e:	60e3      	str	r3, [r4, #12]
 800c340:	1bed      	subs	r5, r5, r7
 800c342:	44ab      	add	fp, r5
 800c344:	6925      	ldr	r5, [r4, #16]
 800c346:	445d      	add	r5, fp
 800c348:	6125      	str	r5, [r4, #16]
 800c34a:	2000      	movs	r0, #0
 800c34c:	b007      	add	sp, #28
 800c34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c352:	f04f 0b00 	mov.w	fp, #0
 800c356:	e7ca      	b.n	800c2ee <_scanf_i+0x15e>
 800c358:	07ca      	lsls	r2, r1, #31
 800c35a:	bf4c      	ite	mi
 800c35c:	8018      	strhmi	r0, [r3, #0]
 800c35e:	6018      	strpl	r0, [r3, #0]
 800c360:	e7eb      	b.n	800c33a <_scanf_i+0x1aa>
 800c362:	2001      	movs	r0, #1
 800c364:	e7f2      	b.n	800c34c <_scanf_i+0x1bc>
 800c366:	bf00      	nop
 800c368:	0800d07c 	.word	0x0800d07c
 800c36c:	0800c561 	.word	0x0800c561
 800c370:	08009ac9 	.word	0x08009ac9
 800c374:	0800d4ce 	.word	0x0800d4ce

0800c378 <_read_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d07      	ldr	r5, [pc, #28]	; (800c398 <_read_r+0x20>)
 800c37c:	4604      	mov	r4, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	4611      	mov	r1, r2
 800c382:	2200      	movs	r2, #0
 800c384:	602a      	str	r2, [r5, #0]
 800c386:	461a      	mov	r2, r3
 800c388:	f7f5 ff48 	bl	800221c <_read>
 800c38c:	1c43      	adds	r3, r0, #1
 800c38e:	d102      	bne.n	800c396 <_read_r+0x1e>
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	b103      	cbz	r3, 800c396 <_read_r+0x1e>
 800c394:	6023      	str	r3, [r4, #0]
 800c396:	bd38      	pop	{r3, r4, r5, pc}
 800c398:	200008bc 	.word	0x200008bc
 800c39c:	00000000 	.word	0x00000000

0800c3a0 <nan>:
 800c3a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3a8 <nan+0x8>
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	00000000 	.word	0x00000000
 800c3ac:	7ff80000 	.word	0x7ff80000

0800c3b0 <_sbrk_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	4d06      	ldr	r5, [pc, #24]	; (800c3cc <_sbrk_r+0x1c>)
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	4608      	mov	r0, r1
 800c3ba:	602b      	str	r3, [r5, #0]
 800c3bc:	f7f5 ff9c 	bl	80022f8 <_sbrk>
 800c3c0:	1c43      	adds	r3, r0, #1
 800c3c2:	d102      	bne.n	800c3ca <_sbrk_r+0x1a>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	b103      	cbz	r3, 800c3ca <_sbrk_r+0x1a>
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	bd38      	pop	{r3, r4, r5, pc}
 800c3cc:	200008bc 	.word	0x200008bc

0800c3d0 <__sccl>:
 800c3d0:	b570      	push	{r4, r5, r6, lr}
 800c3d2:	780b      	ldrb	r3, [r1, #0]
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	2b5e      	cmp	r3, #94	; 0x5e
 800c3d8:	bf0b      	itete	eq
 800c3da:	784b      	ldrbeq	r3, [r1, #1]
 800c3dc:	1c48      	addne	r0, r1, #1
 800c3de:	1c88      	addeq	r0, r1, #2
 800c3e0:	2200      	movne	r2, #0
 800c3e2:	bf08      	it	eq
 800c3e4:	2201      	moveq	r2, #1
 800c3e6:	1e61      	subs	r1, r4, #1
 800c3e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c3ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c3f0:	42a9      	cmp	r1, r5
 800c3f2:	d1fb      	bne.n	800c3ec <__sccl+0x1c>
 800c3f4:	b90b      	cbnz	r3, 800c3fa <__sccl+0x2a>
 800c3f6:	3801      	subs	r0, #1
 800c3f8:	bd70      	pop	{r4, r5, r6, pc}
 800c3fa:	f082 0101 	eor.w	r1, r2, #1
 800c3fe:	54e1      	strb	r1, [r4, r3]
 800c400:	1c42      	adds	r2, r0, #1
 800c402:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c406:	2d2d      	cmp	r5, #45	; 0x2d
 800c408:	f102 36ff 	add.w	r6, r2, #4294967295
 800c40c:	4610      	mov	r0, r2
 800c40e:	d006      	beq.n	800c41e <__sccl+0x4e>
 800c410:	2d5d      	cmp	r5, #93	; 0x5d
 800c412:	d0f1      	beq.n	800c3f8 <__sccl+0x28>
 800c414:	b90d      	cbnz	r5, 800c41a <__sccl+0x4a>
 800c416:	4630      	mov	r0, r6
 800c418:	e7ee      	b.n	800c3f8 <__sccl+0x28>
 800c41a:	462b      	mov	r3, r5
 800c41c:	e7ef      	b.n	800c3fe <__sccl+0x2e>
 800c41e:	7816      	ldrb	r6, [r2, #0]
 800c420:	2e5d      	cmp	r6, #93	; 0x5d
 800c422:	d0fa      	beq.n	800c41a <__sccl+0x4a>
 800c424:	42b3      	cmp	r3, r6
 800c426:	dcf8      	bgt.n	800c41a <__sccl+0x4a>
 800c428:	4618      	mov	r0, r3
 800c42a:	3001      	adds	r0, #1
 800c42c:	4286      	cmp	r6, r0
 800c42e:	5421      	strb	r1, [r4, r0]
 800c430:	dcfb      	bgt.n	800c42a <__sccl+0x5a>
 800c432:	43d8      	mvns	r0, r3
 800c434:	4430      	add	r0, r6
 800c436:	1c5d      	adds	r5, r3, #1
 800c438:	42b3      	cmp	r3, r6
 800c43a:	bfa8      	it	ge
 800c43c:	2000      	movge	r0, #0
 800c43e:	182b      	adds	r3, r5, r0
 800c440:	3202      	adds	r2, #2
 800c442:	e7de      	b.n	800c402 <__sccl+0x32>

0800c444 <strncmp>:
 800c444:	b510      	push	{r4, lr}
 800c446:	b16a      	cbz	r2, 800c464 <strncmp+0x20>
 800c448:	3901      	subs	r1, #1
 800c44a:	1884      	adds	r4, r0, r2
 800c44c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c450:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c454:	4293      	cmp	r3, r2
 800c456:	d103      	bne.n	800c460 <strncmp+0x1c>
 800c458:	42a0      	cmp	r0, r4
 800c45a:	d001      	beq.n	800c460 <strncmp+0x1c>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1f5      	bne.n	800c44c <strncmp+0x8>
 800c460:	1a98      	subs	r0, r3, r2
 800c462:	bd10      	pop	{r4, pc}
 800c464:	4610      	mov	r0, r2
 800c466:	e7fc      	b.n	800c462 <strncmp+0x1e>

0800c468 <_strtoul_l.isra.0>:
 800c468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c46c:	4e3b      	ldr	r6, [pc, #236]	; (800c55c <_strtoul_l.isra.0+0xf4>)
 800c46e:	4686      	mov	lr, r0
 800c470:	468c      	mov	ip, r1
 800c472:	4660      	mov	r0, ip
 800c474:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c478:	5da5      	ldrb	r5, [r4, r6]
 800c47a:	f015 0508 	ands.w	r5, r5, #8
 800c47e:	d1f8      	bne.n	800c472 <_strtoul_l.isra.0+0xa>
 800c480:	2c2d      	cmp	r4, #45	; 0x2d
 800c482:	d134      	bne.n	800c4ee <_strtoul_l.isra.0+0x86>
 800c484:	f89c 4000 	ldrb.w	r4, [ip]
 800c488:	f04f 0801 	mov.w	r8, #1
 800c48c:	f100 0c02 	add.w	ip, r0, #2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d05e      	beq.n	800c552 <_strtoul_l.isra.0+0xea>
 800c494:	2b10      	cmp	r3, #16
 800c496:	d10c      	bne.n	800c4b2 <_strtoul_l.isra.0+0x4a>
 800c498:	2c30      	cmp	r4, #48	; 0x30
 800c49a:	d10a      	bne.n	800c4b2 <_strtoul_l.isra.0+0x4a>
 800c49c:	f89c 0000 	ldrb.w	r0, [ip]
 800c4a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c4a4:	2858      	cmp	r0, #88	; 0x58
 800c4a6:	d14f      	bne.n	800c548 <_strtoul_l.isra.0+0xe0>
 800c4a8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c4ac:	2310      	movs	r3, #16
 800c4ae:	f10c 0c02 	add.w	ip, ip, #2
 800c4b2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4b6:	2500      	movs	r5, #0
 800c4b8:	fbb7 f7f3 	udiv	r7, r7, r3
 800c4bc:	fb03 f907 	mul.w	r9, r3, r7
 800c4c0:	ea6f 0909 	mvn.w	r9, r9
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c4ca:	2e09      	cmp	r6, #9
 800c4cc:	d818      	bhi.n	800c500 <_strtoul_l.isra.0+0x98>
 800c4ce:	4634      	mov	r4, r6
 800c4d0:	42a3      	cmp	r3, r4
 800c4d2:	dd24      	ble.n	800c51e <_strtoul_l.isra.0+0xb6>
 800c4d4:	2d00      	cmp	r5, #0
 800c4d6:	db1f      	blt.n	800c518 <_strtoul_l.isra.0+0xb0>
 800c4d8:	4287      	cmp	r7, r0
 800c4da:	d31d      	bcc.n	800c518 <_strtoul_l.isra.0+0xb0>
 800c4dc:	d101      	bne.n	800c4e2 <_strtoul_l.isra.0+0x7a>
 800c4de:	45a1      	cmp	r9, r4
 800c4e0:	db1a      	blt.n	800c518 <_strtoul_l.isra.0+0xb0>
 800c4e2:	fb00 4003 	mla	r0, r0, r3, r4
 800c4e6:	2501      	movs	r5, #1
 800c4e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c4ec:	e7eb      	b.n	800c4c6 <_strtoul_l.isra.0+0x5e>
 800c4ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c4f0:	bf08      	it	eq
 800c4f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c4f6:	46a8      	mov	r8, r5
 800c4f8:	bf08      	it	eq
 800c4fa:	f100 0c02 	addeq.w	ip, r0, #2
 800c4fe:	e7c7      	b.n	800c490 <_strtoul_l.isra.0+0x28>
 800c500:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c504:	2e19      	cmp	r6, #25
 800c506:	d801      	bhi.n	800c50c <_strtoul_l.isra.0+0xa4>
 800c508:	3c37      	subs	r4, #55	; 0x37
 800c50a:	e7e1      	b.n	800c4d0 <_strtoul_l.isra.0+0x68>
 800c50c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c510:	2e19      	cmp	r6, #25
 800c512:	d804      	bhi.n	800c51e <_strtoul_l.isra.0+0xb6>
 800c514:	3c57      	subs	r4, #87	; 0x57
 800c516:	e7db      	b.n	800c4d0 <_strtoul_l.isra.0+0x68>
 800c518:	f04f 35ff 	mov.w	r5, #4294967295
 800c51c:	e7e4      	b.n	800c4e8 <_strtoul_l.isra.0+0x80>
 800c51e:	2d00      	cmp	r5, #0
 800c520:	da07      	bge.n	800c532 <_strtoul_l.isra.0+0xca>
 800c522:	2322      	movs	r3, #34	; 0x22
 800c524:	f8ce 3000 	str.w	r3, [lr]
 800c528:	f04f 30ff 	mov.w	r0, #4294967295
 800c52c:	b942      	cbnz	r2, 800c540 <_strtoul_l.isra.0+0xd8>
 800c52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c532:	f1b8 0f00 	cmp.w	r8, #0
 800c536:	d000      	beq.n	800c53a <_strtoul_l.isra.0+0xd2>
 800c538:	4240      	negs	r0, r0
 800c53a:	2a00      	cmp	r2, #0
 800c53c:	d0f7      	beq.n	800c52e <_strtoul_l.isra.0+0xc6>
 800c53e:	b10d      	cbz	r5, 800c544 <_strtoul_l.isra.0+0xdc>
 800c540:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c544:	6011      	str	r1, [r2, #0]
 800c546:	e7f2      	b.n	800c52e <_strtoul_l.isra.0+0xc6>
 800c548:	2430      	movs	r4, #48	; 0x30
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1b1      	bne.n	800c4b2 <_strtoul_l.isra.0+0x4a>
 800c54e:	2308      	movs	r3, #8
 800c550:	e7af      	b.n	800c4b2 <_strtoul_l.isra.0+0x4a>
 800c552:	2c30      	cmp	r4, #48	; 0x30
 800c554:	d0a2      	beq.n	800c49c <_strtoul_l.isra.0+0x34>
 800c556:	230a      	movs	r3, #10
 800c558:	e7ab      	b.n	800c4b2 <_strtoul_l.isra.0+0x4a>
 800c55a:	bf00      	nop
 800c55c:	0800d131 	.word	0x0800d131

0800c560 <_strtoul_r>:
 800c560:	f7ff bf82 	b.w	800c468 <_strtoul_l.isra.0>

0800c564 <__submore>:
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	460c      	mov	r4, r1
 800c56a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c570:	4299      	cmp	r1, r3
 800c572:	d11d      	bne.n	800c5b0 <__submore+0x4c>
 800c574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c578:	f7ff fa2a 	bl	800b9d0 <_malloc_r>
 800c57c:	b918      	cbnz	r0, 800c586 <__submore+0x22>
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c58c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c590:	6360      	str	r0, [r4, #52]	; 0x34
 800c592:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c596:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c59a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c59e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c5a2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c5a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c5aa:	6020      	str	r0, [r4, #0]
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	e7e8      	b.n	800c582 <__submore+0x1e>
 800c5b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c5b2:	0077      	lsls	r7, r6, #1
 800c5b4:	463a      	mov	r2, r7
 800c5b6:	f000 fa2d 	bl	800ca14 <_realloc_r>
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d0de      	beq.n	800c57e <__submore+0x1a>
 800c5c0:	eb00 0806 	add.w	r8, r0, r6
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	4632      	mov	r2, r6
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	f7fe fcd9 	bl	800af80 <memcpy>
 800c5ce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c5d2:	f8c4 8000 	str.w	r8, [r4]
 800c5d6:	e7e9      	b.n	800c5ac <__submore+0x48>

0800c5d8 <__ascii_wctomb>:
 800c5d8:	b149      	cbz	r1, 800c5ee <__ascii_wctomb+0x16>
 800c5da:	2aff      	cmp	r2, #255	; 0xff
 800c5dc:	bf85      	ittet	hi
 800c5de:	238a      	movhi	r3, #138	; 0x8a
 800c5e0:	6003      	strhi	r3, [r0, #0]
 800c5e2:	700a      	strbls	r2, [r1, #0]
 800c5e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5e8:	bf98      	it	ls
 800c5ea:	2001      	movls	r0, #1
 800c5ec:	4770      	bx	lr
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	4770      	bx	lr
	...

0800c5f4 <__assert_func>:
 800c5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	4b09      	ldr	r3, [pc, #36]	; (800c620 <__assert_func+0x2c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4605      	mov	r5, r0
 800c600:	68d8      	ldr	r0, [r3, #12]
 800c602:	b14c      	cbz	r4, 800c618 <__assert_func+0x24>
 800c604:	4b07      	ldr	r3, [pc, #28]	; (800c624 <__assert_func+0x30>)
 800c606:	9100      	str	r1, [sp, #0]
 800c608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c60c:	4906      	ldr	r1, [pc, #24]	; (800c628 <__assert_func+0x34>)
 800c60e:	462b      	mov	r3, r5
 800c610:	f000 f9a6 	bl	800c960 <fiprintf>
 800c614:	f000 fc3e 	bl	800ce94 <abort>
 800c618:	4b04      	ldr	r3, [pc, #16]	; (800c62c <__assert_func+0x38>)
 800c61a:	461c      	mov	r4, r3
 800c61c:	e7f3      	b.n	800c606 <__assert_func+0x12>
 800c61e:	bf00      	nop
 800c620:	20000074 	.word	0x20000074
 800c624:	0800d4d0 	.word	0x0800d4d0
 800c628:	0800d4dd 	.word	0x0800d4dd
 800c62c:	0800d50b 	.word	0x0800d50b

0800c630 <__sflush_r>:
 800c630:	898a      	ldrh	r2, [r1, #12]
 800c632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c636:	4605      	mov	r5, r0
 800c638:	0710      	lsls	r0, r2, #28
 800c63a:	460c      	mov	r4, r1
 800c63c:	d458      	bmi.n	800c6f0 <__sflush_r+0xc0>
 800c63e:	684b      	ldr	r3, [r1, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	dc05      	bgt.n	800c650 <__sflush_r+0x20>
 800c644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	dc02      	bgt.n	800c650 <__sflush_r+0x20>
 800c64a:	2000      	movs	r0, #0
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c652:	2e00      	cmp	r6, #0
 800c654:	d0f9      	beq.n	800c64a <__sflush_r+0x1a>
 800c656:	2300      	movs	r3, #0
 800c658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c65c:	682f      	ldr	r7, [r5, #0]
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	d032      	beq.n	800c6c8 <__sflush_r+0x98>
 800c662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	075a      	lsls	r2, r3, #29
 800c668:	d505      	bpl.n	800c676 <__sflush_r+0x46>
 800c66a:	6863      	ldr	r3, [r4, #4]
 800c66c:	1ac0      	subs	r0, r0, r3
 800c66e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c670:	b10b      	cbz	r3, 800c676 <__sflush_r+0x46>
 800c672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c674:	1ac0      	subs	r0, r0, r3
 800c676:	2300      	movs	r3, #0
 800c678:	4602      	mov	r2, r0
 800c67a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c67c:	6a21      	ldr	r1, [r4, #32]
 800c67e:	4628      	mov	r0, r5
 800c680:	47b0      	blx	r6
 800c682:	1c43      	adds	r3, r0, #1
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	d106      	bne.n	800c696 <__sflush_r+0x66>
 800c688:	6829      	ldr	r1, [r5, #0]
 800c68a:	291d      	cmp	r1, #29
 800c68c:	d82c      	bhi.n	800c6e8 <__sflush_r+0xb8>
 800c68e:	4a2a      	ldr	r2, [pc, #168]	; (800c738 <__sflush_r+0x108>)
 800c690:	40ca      	lsrs	r2, r1
 800c692:	07d6      	lsls	r6, r2, #31
 800c694:	d528      	bpl.n	800c6e8 <__sflush_r+0xb8>
 800c696:	2200      	movs	r2, #0
 800c698:	6062      	str	r2, [r4, #4]
 800c69a:	04d9      	lsls	r1, r3, #19
 800c69c:	6922      	ldr	r2, [r4, #16]
 800c69e:	6022      	str	r2, [r4, #0]
 800c6a0:	d504      	bpl.n	800c6ac <__sflush_r+0x7c>
 800c6a2:	1c42      	adds	r2, r0, #1
 800c6a4:	d101      	bne.n	800c6aa <__sflush_r+0x7a>
 800c6a6:	682b      	ldr	r3, [r5, #0]
 800c6a8:	b903      	cbnz	r3, 800c6ac <__sflush_r+0x7c>
 800c6aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ae:	602f      	str	r7, [r5, #0]
 800c6b0:	2900      	cmp	r1, #0
 800c6b2:	d0ca      	beq.n	800c64a <__sflush_r+0x1a>
 800c6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6b8:	4299      	cmp	r1, r3
 800c6ba:	d002      	beq.n	800c6c2 <__sflush_r+0x92>
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f7ff f937 	bl	800b930 <_free_r>
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c6c6:	e7c1      	b.n	800c64c <__sflush_r+0x1c>
 800c6c8:	6a21      	ldr	r1, [r4, #32]
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b0      	blx	r6
 800c6d0:	1c41      	adds	r1, r0, #1
 800c6d2:	d1c7      	bne.n	800c664 <__sflush_r+0x34>
 800c6d4:	682b      	ldr	r3, [r5, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d0c4      	beq.n	800c664 <__sflush_r+0x34>
 800c6da:	2b1d      	cmp	r3, #29
 800c6dc:	d001      	beq.n	800c6e2 <__sflush_r+0xb2>
 800c6de:	2b16      	cmp	r3, #22
 800c6e0:	d101      	bne.n	800c6e6 <__sflush_r+0xb6>
 800c6e2:	602f      	str	r7, [r5, #0]
 800c6e4:	e7b1      	b.n	800c64a <__sflush_r+0x1a>
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ec:	81a3      	strh	r3, [r4, #12]
 800c6ee:	e7ad      	b.n	800c64c <__sflush_r+0x1c>
 800c6f0:	690f      	ldr	r7, [r1, #16]
 800c6f2:	2f00      	cmp	r7, #0
 800c6f4:	d0a9      	beq.n	800c64a <__sflush_r+0x1a>
 800c6f6:	0793      	lsls	r3, r2, #30
 800c6f8:	680e      	ldr	r6, [r1, #0]
 800c6fa:	bf08      	it	eq
 800c6fc:	694b      	ldreq	r3, [r1, #20]
 800c6fe:	600f      	str	r7, [r1, #0]
 800c700:	bf18      	it	ne
 800c702:	2300      	movne	r3, #0
 800c704:	eba6 0807 	sub.w	r8, r6, r7
 800c708:	608b      	str	r3, [r1, #8]
 800c70a:	f1b8 0f00 	cmp.w	r8, #0
 800c70e:	dd9c      	ble.n	800c64a <__sflush_r+0x1a>
 800c710:	6a21      	ldr	r1, [r4, #32]
 800c712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c714:	4643      	mov	r3, r8
 800c716:	463a      	mov	r2, r7
 800c718:	4628      	mov	r0, r5
 800c71a:	47b0      	blx	r6
 800c71c:	2800      	cmp	r0, #0
 800c71e:	dc06      	bgt.n	800c72e <__sflush_r+0xfe>
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	f04f 30ff 	mov.w	r0, #4294967295
 800c72c:	e78e      	b.n	800c64c <__sflush_r+0x1c>
 800c72e:	4407      	add	r7, r0
 800c730:	eba8 0800 	sub.w	r8, r8, r0
 800c734:	e7e9      	b.n	800c70a <__sflush_r+0xda>
 800c736:	bf00      	nop
 800c738:	20400001 	.word	0x20400001

0800c73c <_fflush_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	690b      	ldr	r3, [r1, #16]
 800c740:	4605      	mov	r5, r0
 800c742:	460c      	mov	r4, r1
 800c744:	b913      	cbnz	r3, 800c74c <_fflush_r+0x10>
 800c746:	2500      	movs	r5, #0
 800c748:	4628      	mov	r0, r5
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	b118      	cbz	r0, 800c756 <_fflush_r+0x1a>
 800c74e:	6983      	ldr	r3, [r0, #24]
 800c750:	b90b      	cbnz	r3, 800c756 <_fflush_r+0x1a>
 800c752:	f000 f887 	bl	800c864 <__sinit>
 800c756:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <_fflush_r+0x6c>)
 800c758:	429c      	cmp	r4, r3
 800c75a:	d11b      	bne.n	800c794 <_fflush_r+0x58>
 800c75c:	686c      	ldr	r4, [r5, #4]
 800c75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d0ef      	beq.n	800c746 <_fflush_r+0xa>
 800c766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c768:	07d0      	lsls	r0, r2, #31
 800c76a:	d404      	bmi.n	800c776 <_fflush_r+0x3a>
 800c76c:	0599      	lsls	r1, r3, #22
 800c76e:	d402      	bmi.n	800c776 <_fflush_r+0x3a>
 800c770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c772:	f000 f927 	bl	800c9c4 <__retarget_lock_acquire_recursive>
 800c776:	4628      	mov	r0, r5
 800c778:	4621      	mov	r1, r4
 800c77a:	f7ff ff59 	bl	800c630 <__sflush_r>
 800c77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c780:	07da      	lsls	r2, r3, #31
 800c782:	4605      	mov	r5, r0
 800c784:	d4e0      	bmi.n	800c748 <_fflush_r+0xc>
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	059b      	lsls	r3, r3, #22
 800c78a:	d4dd      	bmi.n	800c748 <_fflush_r+0xc>
 800c78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c78e:	f000 f91a 	bl	800c9c6 <__retarget_lock_release_recursive>
 800c792:	e7d9      	b.n	800c748 <_fflush_r+0xc>
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <_fflush_r+0x70>)
 800c796:	429c      	cmp	r4, r3
 800c798:	d101      	bne.n	800c79e <_fflush_r+0x62>
 800c79a:	68ac      	ldr	r4, [r5, #8]
 800c79c:	e7df      	b.n	800c75e <_fflush_r+0x22>
 800c79e:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <_fflush_r+0x74>)
 800c7a0:	429c      	cmp	r4, r3
 800c7a2:	bf08      	it	eq
 800c7a4:	68ec      	ldreq	r4, [r5, #12]
 800c7a6:	e7da      	b.n	800c75e <_fflush_r+0x22>
 800c7a8:	0800d52c 	.word	0x0800d52c
 800c7ac:	0800d54c 	.word	0x0800d54c
 800c7b0:	0800d50c 	.word	0x0800d50c

0800c7b4 <std>:
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	b510      	push	{r4, lr}
 800c7b8:	4604      	mov	r4, r0
 800c7ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c7be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7c2:	6083      	str	r3, [r0, #8]
 800c7c4:	8181      	strh	r1, [r0, #12]
 800c7c6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7c8:	81c2      	strh	r2, [r0, #14]
 800c7ca:	6183      	str	r3, [r0, #24]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	2208      	movs	r2, #8
 800c7d0:	305c      	adds	r0, #92	; 0x5c
 800c7d2:	f7fb fb7b 	bl	8007ecc <memset>
 800c7d6:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <std+0x38>)
 800c7d8:	6263      	str	r3, [r4, #36]	; 0x24
 800c7da:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <std+0x3c>)
 800c7dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7de:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <std+0x40>)
 800c7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7e2:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <std+0x44>)
 800c7e4:	6224      	str	r4, [r4, #32]
 800c7e6:	6323      	str	r3, [r4, #48]	; 0x30
 800c7e8:	bd10      	pop	{r4, pc}
 800c7ea:	bf00      	nop
 800c7ec:	08008cdd 	.word	0x08008cdd
 800c7f0:	08008d03 	.word	0x08008d03
 800c7f4:	08008d3b 	.word	0x08008d3b
 800c7f8:	08008d5f 	.word	0x08008d5f

0800c7fc <_cleanup_r>:
 800c7fc:	4901      	ldr	r1, [pc, #4]	; (800c804 <_cleanup_r+0x8>)
 800c7fe:	f000 b8c1 	b.w	800c984 <_fwalk_reent>
 800c802:	bf00      	nop
 800c804:	0800c73d 	.word	0x0800c73d

0800c808 <__sfmoreglue>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	1e4a      	subs	r2, r1, #1
 800c80c:	2568      	movs	r5, #104	; 0x68
 800c80e:	4355      	muls	r5, r2
 800c810:	460e      	mov	r6, r1
 800c812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c816:	f7ff f8db 	bl	800b9d0 <_malloc_r>
 800c81a:	4604      	mov	r4, r0
 800c81c:	b140      	cbz	r0, 800c830 <__sfmoreglue+0x28>
 800c81e:	2100      	movs	r1, #0
 800c820:	e9c0 1600 	strd	r1, r6, [r0]
 800c824:	300c      	adds	r0, #12
 800c826:	60a0      	str	r0, [r4, #8]
 800c828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c82c:	f7fb fb4e 	bl	8007ecc <memset>
 800c830:	4620      	mov	r0, r4
 800c832:	bd70      	pop	{r4, r5, r6, pc}

0800c834 <__sfp_lock_acquire>:
 800c834:	4801      	ldr	r0, [pc, #4]	; (800c83c <__sfp_lock_acquire+0x8>)
 800c836:	f000 b8c5 	b.w	800c9c4 <__retarget_lock_acquire_recursive>
 800c83a:	bf00      	nop
 800c83c:	200008c8 	.word	0x200008c8

0800c840 <__sfp_lock_release>:
 800c840:	4801      	ldr	r0, [pc, #4]	; (800c848 <__sfp_lock_release+0x8>)
 800c842:	f000 b8c0 	b.w	800c9c6 <__retarget_lock_release_recursive>
 800c846:	bf00      	nop
 800c848:	200008c8 	.word	0x200008c8

0800c84c <__sinit_lock_acquire>:
 800c84c:	4801      	ldr	r0, [pc, #4]	; (800c854 <__sinit_lock_acquire+0x8>)
 800c84e:	f000 b8b9 	b.w	800c9c4 <__retarget_lock_acquire_recursive>
 800c852:	bf00      	nop
 800c854:	200008c3 	.word	0x200008c3

0800c858 <__sinit_lock_release>:
 800c858:	4801      	ldr	r0, [pc, #4]	; (800c860 <__sinit_lock_release+0x8>)
 800c85a:	f000 b8b4 	b.w	800c9c6 <__retarget_lock_release_recursive>
 800c85e:	bf00      	nop
 800c860:	200008c3 	.word	0x200008c3

0800c864 <__sinit>:
 800c864:	b510      	push	{r4, lr}
 800c866:	4604      	mov	r4, r0
 800c868:	f7ff fff0 	bl	800c84c <__sinit_lock_acquire>
 800c86c:	69a3      	ldr	r3, [r4, #24]
 800c86e:	b11b      	cbz	r3, 800c878 <__sinit+0x14>
 800c870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c874:	f7ff bff0 	b.w	800c858 <__sinit_lock_release>
 800c878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c87c:	6523      	str	r3, [r4, #80]	; 0x50
 800c87e:	4b13      	ldr	r3, [pc, #76]	; (800c8cc <__sinit+0x68>)
 800c880:	4a13      	ldr	r2, [pc, #76]	; (800c8d0 <__sinit+0x6c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	62a2      	str	r2, [r4, #40]	; 0x28
 800c886:	42a3      	cmp	r3, r4
 800c888:	bf04      	itt	eq
 800c88a:	2301      	moveq	r3, #1
 800c88c:	61a3      	streq	r3, [r4, #24]
 800c88e:	4620      	mov	r0, r4
 800c890:	f000 f820 	bl	800c8d4 <__sfp>
 800c894:	6060      	str	r0, [r4, #4]
 800c896:	4620      	mov	r0, r4
 800c898:	f000 f81c 	bl	800c8d4 <__sfp>
 800c89c:	60a0      	str	r0, [r4, #8]
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f000 f818 	bl	800c8d4 <__sfp>
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	60e0      	str	r0, [r4, #12]
 800c8a8:	2104      	movs	r1, #4
 800c8aa:	6860      	ldr	r0, [r4, #4]
 800c8ac:	f7ff ff82 	bl	800c7b4 <std>
 800c8b0:	68a0      	ldr	r0, [r4, #8]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	2109      	movs	r1, #9
 800c8b6:	f7ff ff7d 	bl	800c7b4 <std>
 800c8ba:	68e0      	ldr	r0, [r4, #12]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	2112      	movs	r1, #18
 800c8c0:	f7ff ff78 	bl	800c7b4 <std>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	61a3      	str	r3, [r4, #24]
 800c8c8:	e7d2      	b.n	800c870 <__sinit+0xc>
 800c8ca:	bf00      	nop
 800c8cc:	0800d0a4 	.word	0x0800d0a4
 800c8d0:	0800c7fd 	.word	0x0800c7fd

0800c8d4 <__sfp>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	4607      	mov	r7, r0
 800c8d8:	f7ff ffac 	bl	800c834 <__sfp_lock_acquire>
 800c8dc:	4b1e      	ldr	r3, [pc, #120]	; (800c958 <__sfp+0x84>)
 800c8de:	681e      	ldr	r6, [r3, #0]
 800c8e0:	69b3      	ldr	r3, [r6, #24]
 800c8e2:	b913      	cbnz	r3, 800c8ea <__sfp+0x16>
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f7ff ffbd 	bl	800c864 <__sinit>
 800c8ea:	3648      	adds	r6, #72	; 0x48
 800c8ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	d503      	bpl.n	800c8fc <__sfp+0x28>
 800c8f4:	6833      	ldr	r3, [r6, #0]
 800c8f6:	b30b      	cbz	r3, 800c93c <__sfp+0x68>
 800c8f8:	6836      	ldr	r6, [r6, #0]
 800c8fa:	e7f7      	b.n	800c8ec <__sfp+0x18>
 800c8fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c900:	b9d5      	cbnz	r5, 800c938 <__sfp+0x64>
 800c902:	4b16      	ldr	r3, [pc, #88]	; (800c95c <__sfp+0x88>)
 800c904:	60e3      	str	r3, [r4, #12]
 800c906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c90a:	6665      	str	r5, [r4, #100]	; 0x64
 800c90c:	f000 f859 	bl	800c9c2 <__retarget_lock_init_recursive>
 800c910:	f7ff ff96 	bl	800c840 <__sfp_lock_release>
 800c914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c91c:	6025      	str	r5, [r4, #0]
 800c91e:	61a5      	str	r5, [r4, #24]
 800c920:	2208      	movs	r2, #8
 800c922:	4629      	mov	r1, r5
 800c924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c928:	f7fb fad0 	bl	8007ecc <memset>
 800c92c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c934:	4620      	mov	r0, r4
 800c936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c938:	3468      	adds	r4, #104	; 0x68
 800c93a:	e7d9      	b.n	800c8f0 <__sfp+0x1c>
 800c93c:	2104      	movs	r1, #4
 800c93e:	4638      	mov	r0, r7
 800c940:	f7ff ff62 	bl	800c808 <__sfmoreglue>
 800c944:	4604      	mov	r4, r0
 800c946:	6030      	str	r0, [r6, #0]
 800c948:	2800      	cmp	r0, #0
 800c94a:	d1d5      	bne.n	800c8f8 <__sfp+0x24>
 800c94c:	f7ff ff78 	bl	800c840 <__sfp_lock_release>
 800c950:	230c      	movs	r3, #12
 800c952:	603b      	str	r3, [r7, #0]
 800c954:	e7ee      	b.n	800c934 <__sfp+0x60>
 800c956:	bf00      	nop
 800c958:	0800d0a4 	.word	0x0800d0a4
 800c95c:	ffff0001 	.word	0xffff0001

0800c960 <fiprintf>:
 800c960:	b40e      	push	{r1, r2, r3}
 800c962:	b503      	push	{r0, r1, lr}
 800c964:	4601      	mov	r1, r0
 800c966:	ab03      	add	r3, sp, #12
 800c968:	4805      	ldr	r0, [pc, #20]	; (800c980 <fiprintf+0x20>)
 800c96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c96e:	6800      	ldr	r0, [r0, #0]
 800c970:	9301      	str	r3, [sp, #4]
 800c972:	f000 f89f 	bl	800cab4 <_vfiprintf_r>
 800c976:	b002      	add	sp, #8
 800c978:	f85d eb04 	ldr.w	lr, [sp], #4
 800c97c:	b003      	add	sp, #12
 800c97e:	4770      	bx	lr
 800c980:	20000074 	.word	0x20000074

0800c984 <_fwalk_reent>:
 800c984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c988:	4606      	mov	r6, r0
 800c98a:	4688      	mov	r8, r1
 800c98c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c990:	2700      	movs	r7, #0
 800c992:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c996:	f1b9 0901 	subs.w	r9, r9, #1
 800c99a:	d505      	bpl.n	800c9a8 <_fwalk_reent+0x24>
 800c99c:	6824      	ldr	r4, [r4, #0]
 800c99e:	2c00      	cmp	r4, #0
 800c9a0:	d1f7      	bne.n	800c992 <_fwalk_reent+0xe>
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9a8:	89ab      	ldrh	r3, [r5, #12]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d907      	bls.n	800c9be <_fwalk_reent+0x3a>
 800c9ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	d003      	beq.n	800c9be <_fwalk_reent+0x3a>
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	47c0      	blx	r8
 800c9bc:	4307      	orrs	r7, r0
 800c9be:	3568      	adds	r5, #104	; 0x68
 800c9c0:	e7e9      	b.n	800c996 <_fwalk_reent+0x12>

0800c9c2 <__retarget_lock_init_recursive>:
 800c9c2:	4770      	bx	lr

0800c9c4 <__retarget_lock_acquire_recursive>:
 800c9c4:	4770      	bx	lr

0800c9c6 <__retarget_lock_release_recursive>:
 800c9c6:	4770      	bx	lr

0800c9c8 <memmove>:
 800c9c8:	4288      	cmp	r0, r1
 800c9ca:	b510      	push	{r4, lr}
 800c9cc:	eb01 0402 	add.w	r4, r1, r2
 800c9d0:	d902      	bls.n	800c9d8 <memmove+0x10>
 800c9d2:	4284      	cmp	r4, r0
 800c9d4:	4623      	mov	r3, r4
 800c9d6:	d807      	bhi.n	800c9e8 <memmove+0x20>
 800c9d8:	1e43      	subs	r3, r0, #1
 800c9da:	42a1      	cmp	r1, r4
 800c9dc:	d008      	beq.n	800c9f0 <memmove+0x28>
 800c9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9e6:	e7f8      	b.n	800c9da <memmove+0x12>
 800c9e8:	4402      	add	r2, r0
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	428a      	cmp	r2, r1
 800c9ee:	d100      	bne.n	800c9f2 <memmove+0x2a>
 800c9f0:	bd10      	pop	{r4, pc}
 800c9f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9fa:	e7f7      	b.n	800c9ec <memmove+0x24>

0800c9fc <__malloc_lock>:
 800c9fc:	4801      	ldr	r0, [pc, #4]	; (800ca04 <__malloc_lock+0x8>)
 800c9fe:	f7ff bfe1 	b.w	800c9c4 <__retarget_lock_acquire_recursive>
 800ca02:	bf00      	nop
 800ca04:	200008c4 	.word	0x200008c4

0800ca08 <__malloc_unlock>:
 800ca08:	4801      	ldr	r0, [pc, #4]	; (800ca10 <__malloc_unlock+0x8>)
 800ca0a:	f7ff bfdc 	b.w	800c9c6 <__retarget_lock_release_recursive>
 800ca0e:	bf00      	nop
 800ca10:	200008c4 	.word	0x200008c4

0800ca14 <_realloc_r>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	4607      	mov	r7, r0
 800ca18:	4614      	mov	r4, r2
 800ca1a:	460e      	mov	r6, r1
 800ca1c:	b921      	cbnz	r1, 800ca28 <_realloc_r+0x14>
 800ca1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca22:	4611      	mov	r1, r2
 800ca24:	f7fe bfd4 	b.w	800b9d0 <_malloc_r>
 800ca28:	b922      	cbnz	r2, 800ca34 <_realloc_r+0x20>
 800ca2a:	f7fe ff81 	bl	800b930 <_free_r>
 800ca2e:	4625      	mov	r5, r4
 800ca30:	4628      	mov	r0, r5
 800ca32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca34:	f000 fa9a 	bl	800cf6c <_malloc_usable_size_r>
 800ca38:	42a0      	cmp	r0, r4
 800ca3a:	d20f      	bcs.n	800ca5c <_realloc_r+0x48>
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4638      	mov	r0, r7
 800ca40:	f7fe ffc6 	bl	800b9d0 <_malloc_r>
 800ca44:	4605      	mov	r5, r0
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d0f2      	beq.n	800ca30 <_realloc_r+0x1c>
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	f7fe fa97 	bl	800af80 <memcpy>
 800ca52:	4631      	mov	r1, r6
 800ca54:	4638      	mov	r0, r7
 800ca56:	f7fe ff6b 	bl	800b930 <_free_r>
 800ca5a:	e7e9      	b.n	800ca30 <_realloc_r+0x1c>
 800ca5c:	4635      	mov	r5, r6
 800ca5e:	e7e7      	b.n	800ca30 <_realloc_r+0x1c>

0800ca60 <__sfputc_r>:
 800ca60:	6893      	ldr	r3, [r2, #8]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	b410      	push	{r4}
 800ca68:	6093      	str	r3, [r2, #8]
 800ca6a:	da08      	bge.n	800ca7e <__sfputc_r+0x1e>
 800ca6c:	6994      	ldr	r4, [r2, #24]
 800ca6e:	42a3      	cmp	r3, r4
 800ca70:	db01      	blt.n	800ca76 <__sfputc_r+0x16>
 800ca72:	290a      	cmp	r1, #10
 800ca74:	d103      	bne.n	800ca7e <__sfputc_r+0x1e>
 800ca76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca7a:	f000 b94b 	b.w	800cd14 <__swbuf_r>
 800ca7e:	6813      	ldr	r3, [r2, #0]
 800ca80:	1c58      	adds	r0, r3, #1
 800ca82:	6010      	str	r0, [r2, #0]
 800ca84:	7019      	strb	r1, [r3, #0]
 800ca86:	4608      	mov	r0, r1
 800ca88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca8c:	4770      	bx	lr

0800ca8e <__sfputs_r>:
 800ca8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	4614      	mov	r4, r2
 800ca96:	18d5      	adds	r5, r2, r3
 800ca98:	42ac      	cmp	r4, r5
 800ca9a:	d101      	bne.n	800caa0 <__sfputs_r+0x12>
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e007      	b.n	800cab0 <__sfputs_r+0x22>
 800caa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa4:	463a      	mov	r2, r7
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7ff ffda 	bl	800ca60 <__sfputc_r>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d1f3      	bne.n	800ca98 <__sfputs_r+0xa>
 800cab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cab4 <_vfiprintf_r>:
 800cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab8:	460d      	mov	r5, r1
 800caba:	b09d      	sub	sp, #116	; 0x74
 800cabc:	4614      	mov	r4, r2
 800cabe:	4698      	mov	r8, r3
 800cac0:	4606      	mov	r6, r0
 800cac2:	b118      	cbz	r0, 800cacc <_vfiprintf_r+0x18>
 800cac4:	6983      	ldr	r3, [r0, #24]
 800cac6:	b90b      	cbnz	r3, 800cacc <_vfiprintf_r+0x18>
 800cac8:	f7ff fecc 	bl	800c864 <__sinit>
 800cacc:	4b89      	ldr	r3, [pc, #548]	; (800ccf4 <_vfiprintf_r+0x240>)
 800cace:	429d      	cmp	r5, r3
 800cad0:	d11b      	bne.n	800cb0a <_vfiprintf_r+0x56>
 800cad2:	6875      	ldr	r5, [r6, #4]
 800cad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cad6:	07d9      	lsls	r1, r3, #31
 800cad8:	d405      	bmi.n	800cae6 <_vfiprintf_r+0x32>
 800cada:	89ab      	ldrh	r3, [r5, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d402      	bmi.n	800cae6 <_vfiprintf_r+0x32>
 800cae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cae2:	f7ff ff6f 	bl	800c9c4 <__retarget_lock_acquire_recursive>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	071b      	lsls	r3, r3, #28
 800caea:	d501      	bpl.n	800caf0 <_vfiprintf_r+0x3c>
 800caec:	692b      	ldr	r3, [r5, #16]
 800caee:	b9eb      	cbnz	r3, 800cb2c <_vfiprintf_r+0x78>
 800caf0:	4629      	mov	r1, r5
 800caf2:	4630      	mov	r0, r6
 800caf4:	f000 f960 	bl	800cdb8 <__swsetup_r>
 800caf8:	b1c0      	cbz	r0, 800cb2c <_vfiprintf_r+0x78>
 800cafa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cafc:	07dc      	lsls	r4, r3, #31
 800cafe:	d50e      	bpl.n	800cb1e <_vfiprintf_r+0x6a>
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295
 800cb04:	b01d      	add	sp, #116	; 0x74
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	4b7b      	ldr	r3, [pc, #492]	; (800ccf8 <_vfiprintf_r+0x244>)
 800cb0c:	429d      	cmp	r5, r3
 800cb0e:	d101      	bne.n	800cb14 <_vfiprintf_r+0x60>
 800cb10:	68b5      	ldr	r5, [r6, #8]
 800cb12:	e7df      	b.n	800cad4 <_vfiprintf_r+0x20>
 800cb14:	4b79      	ldr	r3, [pc, #484]	; (800ccfc <_vfiprintf_r+0x248>)
 800cb16:	429d      	cmp	r5, r3
 800cb18:	bf08      	it	eq
 800cb1a:	68f5      	ldreq	r5, [r6, #12]
 800cb1c:	e7da      	b.n	800cad4 <_vfiprintf_r+0x20>
 800cb1e:	89ab      	ldrh	r3, [r5, #12]
 800cb20:	0598      	lsls	r0, r3, #22
 800cb22:	d4ed      	bmi.n	800cb00 <_vfiprintf_r+0x4c>
 800cb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb26:	f7ff ff4e 	bl	800c9c6 <__retarget_lock_release_recursive>
 800cb2a:	e7e9      	b.n	800cb00 <_vfiprintf_r+0x4c>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb30:	2320      	movs	r3, #32
 800cb32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb36:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb3a:	2330      	movs	r3, #48	; 0x30
 800cb3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd00 <_vfiprintf_r+0x24c>
 800cb40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb44:	f04f 0901 	mov.w	r9, #1
 800cb48:	4623      	mov	r3, r4
 800cb4a:	469a      	mov	sl, r3
 800cb4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb50:	b10a      	cbz	r2, 800cb56 <_vfiprintf_r+0xa2>
 800cb52:	2a25      	cmp	r2, #37	; 0x25
 800cb54:	d1f9      	bne.n	800cb4a <_vfiprintf_r+0x96>
 800cb56:	ebba 0b04 	subs.w	fp, sl, r4
 800cb5a:	d00b      	beq.n	800cb74 <_vfiprintf_r+0xc0>
 800cb5c:	465b      	mov	r3, fp
 800cb5e:	4622      	mov	r2, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	4630      	mov	r0, r6
 800cb64:	f7ff ff93 	bl	800ca8e <__sfputs_r>
 800cb68:	3001      	adds	r0, #1
 800cb6a:	f000 80aa 	beq.w	800ccc2 <_vfiprintf_r+0x20e>
 800cb6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb70:	445a      	add	r2, fp
 800cb72:	9209      	str	r2, [sp, #36]	; 0x24
 800cb74:	f89a 3000 	ldrb.w	r3, [sl]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 80a2 	beq.w	800ccc2 <_vfiprintf_r+0x20e>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f04f 32ff 	mov.w	r2, #4294967295
 800cb84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb88:	f10a 0a01 	add.w	sl, sl, #1
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	9307      	str	r3, [sp, #28]
 800cb90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb94:	931a      	str	r3, [sp, #104]	; 0x68
 800cb96:	4654      	mov	r4, sl
 800cb98:	2205      	movs	r2, #5
 800cb9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9e:	4858      	ldr	r0, [pc, #352]	; (800cd00 <_vfiprintf_r+0x24c>)
 800cba0:	f7f3 fb3e 	bl	8000220 <memchr>
 800cba4:	9a04      	ldr	r2, [sp, #16]
 800cba6:	b9d8      	cbnz	r0, 800cbe0 <_vfiprintf_r+0x12c>
 800cba8:	06d1      	lsls	r1, r2, #27
 800cbaa:	bf44      	itt	mi
 800cbac:	2320      	movmi	r3, #32
 800cbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb2:	0713      	lsls	r3, r2, #28
 800cbb4:	bf44      	itt	mi
 800cbb6:	232b      	movmi	r3, #43	; 0x2b
 800cbb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbbc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc2:	d015      	beq.n	800cbf0 <_vfiprintf_r+0x13c>
 800cbc4:	9a07      	ldr	r2, [sp, #28]
 800cbc6:	4654      	mov	r4, sl
 800cbc8:	2000      	movs	r0, #0
 800cbca:	f04f 0c0a 	mov.w	ip, #10
 800cbce:	4621      	mov	r1, r4
 800cbd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbd4:	3b30      	subs	r3, #48	; 0x30
 800cbd6:	2b09      	cmp	r3, #9
 800cbd8:	d94e      	bls.n	800cc78 <_vfiprintf_r+0x1c4>
 800cbda:	b1b0      	cbz	r0, 800cc0a <_vfiprintf_r+0x156>
 800cbdc:	9207      	str	r2, [sp, #28]
 800cbde:	e014      	b.n	800cc0a <_vfiprintf_r+0x156>
 800cbe0:	eba0 0308 	sub.w	r3, r0, r8
 800cbe4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	9304      	str	r3, [sp, #16]
 800cbec:	46a2      	mov	sl, r4
 800cbee:	e7d2      	b.n	800cb96 <_vfiprintf_r+0xe2>
 800cbf0:	9b03      	ldr	r3, [sp, #12]
 800cbf2:	1d19      	adds	r1, r3, #4
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	9103      	str	r1, [sp, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bfbb      	ittet	lt
 800cbfc:	425b      	neglt	r3, r3
 800cbfe:	f042 0202 	orrlt.w	r2, r2, #2
 800cc02:	9307      	strge	r3, [sp, #28]
 800cc04:	9307      	strlt	r3, [sp, #28]
 800cc06:	bfb8      	it	lt
 800cc08:	9204      	strlt	r2, [sp, #16]
 800cc0a:	7823      	ldrb	r3, [r4, #0]
 800cc0c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc0e:	d10c      	bne.n	800cc2a <_vfiprintf_r+0x176>
 800cc10:	7863      	ldrb	r3, [r4, #1]
 800cc12:	2b2a      	cmp	r3, #42	; 0x2a
 800cc14:	d135      	bne.n	800cc82 <_vfiprintf_r+0x1ce>
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	1d1a      	adds	r2, r3, #4
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	9203      	str	r2, [sp, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfb8      	it	lt
 800cc22:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc26:	3402      	adds	r4, #2
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd10 <_vfiprintf_r+0x25c>
 800cc2e:	7821      	ldrb	r1, [r4, #0]
 800cc30:	2203      	movs	r2, #3
 800cc32:	4650      	mov	r0, sl
 800cc34:	f7f3 faf4 	bl	8000220 <memchr>
 800cc38:	b140      	cbz	r0, 800cc4c <_vfiprintf_r+0x198>
 800cc3a:	2340      	movs	r3, #64	; 0x40
 800cc3c:	eba0 000a 	sub.w	r0, r0, sl
 800cc40:	fa03 f000 	lsl.w	r0, r3, r0
 800cc44:	9b04      	ldr	r3, [sp, #16]
 800cc46:	4303      	orrs	r3, r0
 800cc48:	3401      	adds	r4, #1
 800cc4a:	9304      	str	r3, [sp, #16]
 800cc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc50:	482c      	ldr	r0, [pc, #176]	; (800cd04 <_vfiprintf_r+0x250>)
 800cc52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc56:	2206      	movs	r2, #6
 800cc58:	f7f3 fae2 	bl	8000220 <memchr>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d03f      	beq.n	800cce0 <_vfiprintf_r+0x22c>
 800cc60:	4b29      	ldr	r3, [pc, #164]	; (800cd08 <_vfiprintf_r+0x254>)
 800cc62:	bb1b      	cbnz	r3, 800ccac <_vfiprintf_r+0x1f8>
 800cc64:	9b03      	ldr	r3, [sp, #12]
 800cc66:	3307      	adds	r3, #7
 800cc68:	f023 0307 	bic.w	r3, r3, #7
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc72:	443b      	add	r3, r7
 800cc74:	9309      	str	r3, [sp, #36]	; 0x24
 800cc76:	e767      	b.n	800cb48 <_vfiprintf_r+0x94>
 800cc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e7a5      	b.n	800cbce <_vfiprintf_r+0x11a>
 800cc82:	2300      	movs	r3, #0
 800cc84:	3401      	adds	r4, #1
 800cc86:	9305      	str	r3, [sp, #20]
 800cc88:	4619      	mov	r1, r3
 800cc8a:	f04f 0c0a 	mov.w	ip, #10
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc94:	3a30      	subs	r2, #48	; 0x30
 800cc96:	2a09      	cmp	r2, #9
 800cc98:	d903      	bls.n	800cca2 <_vfiprintf_r+0x1ee>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c5      	beq.n	800cc2a <_vfiprintf_r+0x176>
 800cc9e:	9105      	str	r1, [sp, #20]
 800cca0:	e7c3      	b.n	800cc2a <_vfiprintf_r+0x176>
 800cca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cca6:	4604      	mov	r4, r0
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7f0      	b.n	800cc8e <_vfiprintf_r+0x1da>
 800ccac:	ab03      	add	r3, sp, #12
 800ccae:	9300      	str	r3, [sp, #0]
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	4b16      	ldr	r3, [pc, #88]	; (800cd0c <_vfiprintf_r+0x258>)
 800ccb4:	a904      	add	r1, sp, #16
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f7fb f9b0 	bl	800801c <_printf_float>
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	1c78      	adds	r0, r7, #1
 800ccc0:	d1d6      	bne.n	800cc70 <_vfiprintf_r+0x1bc>
 800ccc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccc4:	07d9      	lsls	r1, r3, #31
 800ccc6:	d405      	bmi.n	800ccd4 <_vfiprintf_r+0x220>
 800ccc8:	89ab      	ldrh	r3, [r5, #12]
 800ccca:	059a      	lsls	r2, r3, #22
 800cccc:	d402      	bmi.n	800ccd4 <_vfiprintf_r+0x220>
 800ccce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd0:	f7ff fe79 	bl	800c9c6 <__retarget_lock_release_recursive>
 800ccd4:	89ab      	ldrh	r3, [r5, #12]
 800ccd6:	065b      	lsls	r3, r3, #25
 800ccd8:	f53f af12 	bmi.w	800cb00 <_vfiprintf_r+0x4c>
 800ccdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccde:	e711      	b.n	800cb04 <_vfiprintf_r+0x50>
 800cce0:	ab03      	add	r3, sp, #12
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	462a      	mov	r2, r5
 800cce6:	4b09      	ldr	r3, [pc, #36]	; (800cd0c <_vfiprintf_r+0x258>)
 800cce8:	a904      	add	r1, sp, #16
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7fb fc3a 	bl	8008564 <_printf_i>
 800ccf0:	e7e4      	b.n	800ccbc <_vfiprintf_r+0x208>
 800ccf2:	bf00      	nop
 800ccf4:	0800d52c 	.word	0x0800d52c
 800ccf8:	0800d54c 	.word	0x0800d54c
 800ccfc:	0800d50c 	.word	0x0800d50c
 800cd00:	0800d4a4 	.word	0x0800d4a4
 800cd04:	0800d4ae 	.word	0x0800d4ae
 800cd08:	0800801d 	.word	0x0800801d
 800cd0c:	0800ca8f 	.word	0x0800ca8f
 800cd10:	0800d4aa 	.word	0x0800d4aa

0800cd14 <__swbuf_r>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	460e      	mov	r6, r1
 800cd18:	4614      	mov	r4, r2
 800cd1a:	4605      	mov	r5, r0
 800cd1c:	b118      	cbz	r0, 800cd26 <__swbuf_r+0x12>
 800cd1e:	6983      	ldr	r3, [r0, #24]
 800cd20:	b90b      	cbnz	r3, 800cd26 <__swbuf_r+0x12>
 800cd22:	f7ff fd9f 	bl	800c864 <__sinit>
 800cd26:	4b21      	ldr	r3, [pc, #132]	; (800cdac <__swbuf_r+0x98>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	d12b      	bne.n	800cd84 <__swbuf_r+0x70>
 800cd2c:	686c      	ldr	r4, [r5, #4]
 800cd2e:	69a3      	ldr	r3, [r4, #24]
 800cd30:	60a3      	str	r3, [r4, #8]
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	071a      	lsls	r2, r3, #28
 800cd36:	d52f      	bpl.n	800cd98 <__swbuf_r+0x84>
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	b36b      	cbz	r3, 800cd98 <__swbuf_r+0x84>
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	6820      	ldr	r0, [r4, #0]
 800cd40:	1ac0      	subs	r0, r0, r3
 800cd42:	6963      	ldr	r3, [r4, #20]
 800cd44:	b2f6      	uxtb	r6, r6
 800cd46:	4283      	cmp	r3, r0
 800cd48:	4637      	mov	r7, r6
 800cd4a:	dc04      	bgt.n	800cd56 <__swbuf_r+0x42>
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f7ff fcf4 	bl	800c73c <_fflush_r>
 800cd54:	bb30      	cbnz	r0, 800cda4 <__swbuf_r+0x90>
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	3b01      	subs	r3, #1
 800cd5a:	60a3      	str	r3, [r4, #8]
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	6022      	str	r2, [r4, #0]
 800cd62:	701e      	strb	r6, [r3, #0]
 800cd64:	6963      	ldr	r3, [r4, #20]
 800cd66:	3001      	adds	r0, #1
 800cd68:	4283      	cmp	r3, r0
 800cd6a:	d004      	beq.n	800cd76 <__swbuf_r+0x62>
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	07db      	lsls	r3, r3, #31
 800cd70:	d506      	bpl.n	800cd80 <__swbuf_r+0x6c>
 800cd72:	2e0a      	cmp	r6, #10
 800cd74:	d104      	bne.n	800cd80 <__swbuf_r+0x6c>
 800cd76:	4621      	mov	r1, r4
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f7ff fcdf 	bl	800c73c <_fflush_r>
 800cd7e:	b988      	cbnz	r0, 800cda4 <__swbuf_r+0x90>
 800cd80:	4638      	mov	r0, r7
 800cd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd84:	4b0a      	ldr	r3, [pc, #40]	; (800cdb0 <__swbuf_r+0x9c>)
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d101      	bne.n	800cd8e <__swbuf_r+0x7a>
 800cd8a:	68ac      	ldr	r4, [r5, #8]
 800cd8c:	e7cf      	b.n	800cd2e <__swbuf_r+0x1a>
 800cd8e:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <__swbuf_r+0xa0>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	bf08      	it	eq
 800cd94:	68ec      	ldreq	r4, [r5, #12]
 800cd96:	e7ca      	b.n	800cd2e <__swbuf_r+0x1a>
 800cd98:	4621      	mov	r1, r4
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f000 f80c 	bl	800cdb8 <__swsetup_r>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d0cb      	beq.n	800cd3c <__swbuf_r+0x28>
 800cda4:	f04f 37ff 	mov.w	r7, #4294967295
 800cda8:	e7ea      	b.n	800cd80 <__swbuf_r+0x6c>
 800cdaa:	bf00      	nop
 800cdac:	0800d52c 	.word	0x0800d52c
 800cdb0:	0800d54c 	.word	0x0800d54c
 800cdb4:	0800d50c 	.word	0x0800d50c

0800cdb8 <__swsetup_r>:
 800cdb8:	4b32      	ldr	r3, [pc, #200]	; (800ce84 <__swsetup_r+0xcc>)
 800cdba:	b570      	push	{r4, r5, r6, lr}
 800cdbc:	681d      	ldr	r5, [r3, #0]
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	b125      	cbz	r5, 800cdce <__swsetup_r+0x16>
 800cdc4:	69ab      	ldr	r3, [r5, #24]
 800cdc6:	b913      	cbnz	r3, 800cdce <__swsetup_r+0x16>
 800cdc8:	4628      	mov	r0, r5
 800cdca:	f7ff fd4b 	bl	800c864 <__sinit>
 800cdce:	4b2e      	ldr	r3, [pc, #184]	; (800ce88 <__swsetup_r+0xd0>)
 800cdd0:	429c      	cmp	r4, r3
 800cdd2:	d10f      	bne.n	800cdf4 <__swsetup_r+0x3c>
 800cdd4:	686c      	ldr	r4, [r5, #4]
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cddc:	0719      	lsls	r1, r3, #28
 800cdde:	d42c      	bmi.n	800ce3a <__swsetup_r+0x82>
 800cde0:	06dd      	lsls	r5, r3, #27
 800cde2:	d411      	bmi.n	800ce08 <__swsetup_r+0x50>
 800cde4:	2309      	movs	r3, #9
 800cde6:	6033      	str	r3, [r6, #0]
 800cde8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf2:	e03e      	b.n	800ce72 <__swsetup_r+0xba>
 800cdf4:	4b25      	ldr	r3, [pc, #148]	; (800ce8c <__swsetup_r+0xd4>)
 800cdf6:	429c      	cmp	r4, r3
 800cdf8:	d101      	bne.n	800cdfe <__swsetup_r+0x46>
 800cdfa:	68ac      	ldr	r4, [r5, #8]
 800cdfc:	e7eb      	b.n	800cdd6 <__swsetup_r+0x1e>
 800cdfe:	4b24      	ldr	r3, [pc, #144]	; (800ce90 <__swsetup_r+0xd8>)
 800ce00:	429c      	cmp	r4, r3
 800ce02:	bf08      	it	eq
 800ce04:	68ec      	ldreq	r4, [r5, #12]
 800ce06:	e7e6      	b.n	800cdd6 <__swsetup_r+0x1e>
 800ce08:	0758      	lsls	r0, r3, #29
 800ce0a:	d512      	bpl.n	800ce32 <__swsetup_r+0x7a>
 800ce0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce0e:	b141      	cbz	r1, 800ce22 <__swsetup_r+0x6a>
 800ce10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce14:	4299      	cmp	r1, r3
 800ce16:	d002      	beq.n	800ce1e <__swsetup_r+0x66>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7fe fd89 	bl	800b930 <_free_r>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	6363      	str	r3, [r4, #52]	; 0x34
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce28:	81a3      	strh	r3, [r4, #12]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6063      	str	r3, [r4, #4]
 800ce2e:	6923      	ldr	r3, [r4, #16]
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f043 0308 	orr.w	r3, r3, #8
 800ce38:	81a3      	strh	r3, [r4, #12]
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	b94b      	cbnz	r3, 800ce52 <__swsetup_r+0x9a>
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce48:	d003      	beq.n	800ce52 <__swsetup_r+0x9a>
 800ce4a:	4621      	mov	r1, r4
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f000 f84d 	bl	800ceec <__smakebuf_r>
 800ce52:	89a0      	ldrh	r0, [r4, #12]
 800ce54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce58:	f010 0301 	ands.w	r3, r0, #1
 800ce5c:	d00a      	beq.n	800ce74 <__swsetup_r+0xbc>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60a3      	str	r3, [r4, #8]
 800ce62:	6963      	ldr	r3, [r4, #20]
 800ce64:	425b      	negs	r3, r3
 800ce66:	61a3      	str	r3, [r4, #24]
 800ce68:	6923      	ldr	r3, [r4, #16]
 800ce6a:	b943      	cbnz	r3, 800ce7e <__swsetup_r+0xc6>
 800ce6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce70:	d1ba      	bne.n	800cde8 <__swsetup_r+0x30>
 800ce72:	bd70      	pop	{r4, r5, r6, pc}
 800ce74:	0781      	lsls	r1, r0, #30
 800ce76:	bf58      	it	pl
 800ce78:	6963      	ldrpl	r3, [r4, #20]
 800ce7a:	60a3      	str	r3, [r4, #8]
 800ce7c:	e7f4      	b.n	800ce68 <__swsetup_r+0xb0>
 800ce7e:	2000      	movs	r0, #0
 800ce80:	e7f7      	b.n	800ce72 <__swsetup_r+0xba>
 800ce82:	bf00      	nop
 800ce84:	20000074 	.word	0x20000074
 800ce88:	0800d52c 	.word	0x0800d52c
 800ce8c:	0800d54c 	.word	0x0800d54c
 800ce90:	0800d50c 	.word	0x0800d50c

0800ce94 <abort>:
 800ce94:	b508      	push	{r3, lr}
 800ce96:	2006      	movs	r0, #6
 800ce98:	f000 f898 	bl	800cfcc <raise>
 800ce9c:	2001      	movs	r0, #1
 800ce9e:	f7f5 f9b3 	bl	8002208 <_exit>

0800cea2 <__swhatbuf_r>:
 800cea2:	b570      	push	{r4, r5, r6, lr}
 800cea4:	460e      	mov	r6, r1
 800cea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceaa:	2900      	cmp	r1, #0
 800ceac:	b096      	sub	sp, #88	; 0x58
 800ceae:	4614      	mov	r4, r2
 800ceb0:	461d      	mov	r5, r3
 800ceb2:	da07      	bge.n	800cec4 <__swhatbuf_r+0x22>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	602b      	str	r3, [r5, #0]
 800ceb8:	89b3      	ldrh	r3, [r6, #12]
 800ceba:	061a      	lsls	r2, r3, #24
 800cebc:	d410      	bmi.n	800cee0 <__swhatbuf_r+0x3e>
 800cebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cec2:	e00e      	b.n	800cee2 <__swhatbuf_r+0x40>
 800cec4:	466a      	mov	r2, sp
 800cec6:	f000 f89d 	bl	800d004 <_fstat_r>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	dbf2      	blt.n	800ceb4 <__swhatbuf_r+0x12>
 800cece:	9a01      	ldr	r2, [sp, #4]
 800ced0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ced4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ced8:	425a      	negs	r2, r3
 800ceda:	415a      	adcs	r2, r3
 800cedc:	602a      	str	r2, [r5, #0]
 800cede:	e7ee      	b.n	800cebe <__swhatbuf_r+0x1c>
 800cee0:	2340      	movs	r3, #64	; 0x40
 800cee2:	2000      	movs	r0, #0
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	b016      	add	sp, #88	; 0x58
 800cee8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ceec <__smakebuf_r>:
 800ceec:	898b      	ldrh	r3, [r1, #12]
 800ceee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cef0:	079d      	lsls	r5, r3, #30
 800cef2:	4606      	mov	r6, r0
 800cef4:	460c      	mov	r4, r1
 800cef6:	d507      	bpl.n	800cf08 <__smakebuf_r+0x1c>
 800cef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	6123      	str	r3, [r4, #16]
 800cf00:	2301      	movs	r3, #1
 800cf02:	6163      	str	r3, [r4, #20]
 800cf04:	b002      	add	sp, #8
 800cf06:	bd70      	pop	{r4, r5, r6, pc}
 800cf08:	ab01      	add	r3, sp, #4
 800cf0a:	466a      	mov	r2, sp
 800cf0c:	f7ff ffc9 	bl	800cea2 <__swhatbuf_r>
 800cf10:	9900      	ldr	r1, [sp, #0]
 800cf12:	4605      	mov	r5, r0
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7fe fd5b 	bl	800b9d0 <_malloc_r>
 800cf1a:	b948      	cbnz	r0, 800cf30 <__smakebuf_r+0x44>
 800cf1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf20:	059a      	lsls	r2, r3, #22
 800cf22:	d4ef      	bmi.n	800cf04 <__smakebuf_r+0x18>
 800cf24:	f023 0303 	bic.w	r3, r3, #3
 800cf28:	f043 0302 	orr.w	r3, r3, #2
 800cf2c:	81a3      	strh	r3, [r4, #12]
 800cf2e:	e7e3      	b.n	800cef8 <__smakebuf_r+0xc>
 800cf30:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <__smakebuf_r+0x7c>)
 800cf32:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	6020      	str	r0, [r4, #0]
 800cf38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf3c:	81a3      	strh	r3, [r4, #12]
 800cf3e:	9b00      	ldr	r3, [sp, #0]
 800cf40:	6163      	str	r3, [r4, #20]
 800cf42:	9b01      	ldr	r3, [sp, #4]
 800cf44:	6120      	str	r0, [r4, #16]
 800cf46:	b15b      	cbz	r3, 800cf60 <__smakebuf_r+0x74>
 800cf48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f000 f86b 	bl	800d028 <_isatty_r>
 800cf52:	b128      	cbz	r0, 800cf60 <__smakebuf_r+0x74>
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	f023 0303 	bic.w	r3, r3, #3
 800cf5a:	f043 0301 	orr.w	r3, r3, #1
 800cf5e:	81a3      	strh	r3, [r4, #12]
 800cf60:	89a0      	ldrh	r0, [r4, #12]
 800cf62:	4305      	orrs	r5, r0
 800cf64:	81a5      	strh	r5, [r4, #12]
 800cf66:	e7cd      	b.n	800cf04 <__smakebuf_r+0x18>
 800cf68:	0800c7fd 	.word	0x0800c7fd

0800cf6c <_malloc_usable_size_r>:
 800cf6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf70:	1f18      	subs	r0, r3, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bfbc      	itt	lt
 800cf76:	580b      	ldrlt	r3, [r1, r0]
 800cf78:	18c0      	addlt	r0, r0, r3
 800cf7a:	4770      	bx	lr

0800cf7c <_raise_r>:
 800cf7c:	291f      	cmp	r1, #31
 800cf7e:	b538      	push	{r3, r4, r5, lr}
 800cf80:	4604      	mov	r4, r0
 800cf82:	460d      	mov	r5, r1
 800cf84:	d904      	bls.n	800cf90 <_raise_r+0x14>
 800cf86:	2316      	movs	r3, #22
 800cf88:	6003      	str	r3, [r0, #0]
 800cf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8e:	bd38      	pop	{r3, r4, r5, pc}
 800cf90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf92:	b112      	cbz	r2, 800cf9a <_raise_r+0x1e>
 800cf94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf98:	b94b      	cbnz	r3, 800cfae <_raise_r+0x32>
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f000 f830 	bl	800d000 <_getpid_r>
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4601      	mov	r1, r0
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfaa:	f000 b817 	b.w	800cfdc <_kill_r>
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d00a      	beq.n	800cfc8 <_raise_r+0x4c>
 800cfb2:	1c59      	adds	r1, r3, #1
 800cfb4:	d103      	bne.n	800cfbe <_raise_r+0x42>
 800cfb6:	2316      	movs	r3, #22
 800cfb8:	6003      	str	r3, [r0, #0]
 800cfba:	2001      	movs	r0, #1
 800cfbc:	e7e7      	b.n	800cf8e <_raise_r+0x12>
 800cfbe:	2400      	movs	r4, #0
 800cfc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	4798      	blx	r3
 800cfc8:	2000      	movs	r0, #0
 800cfca:	e7e0      	b.n	800cf8e <_raise_r+0x12>

0800cfcc <raise>:
 800cfcc:	4b02      	ldr	r3, [pc, #8]	; (800cfd8 <raise+0xc>)
 800cfce:	4601      	mov	r1, r0
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f7ff bfd3 	b.w	800cf7c <_raise_r>
 800cfd6:	bf00      	nop
 800cfd8:	20000074 	.word	0x20000074

0800cfdc <_kill_r>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	4d07      	ldr	r5, [pc, #28]	; (800cffc <_kill_r+0x20>)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	4608      	mov	r0, r1
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	f7f5 f8fd 	bl	80021e8 <_kill>
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	d102      	bne.n	800cff8 <_kill_r+0x1c>
 800cff2:	682b      	ldr	r3, [r5, #0]
 800cff4:	b103      	cbz	r3, 800cff8 <_kill_r+0x1c>
 800cff6:	6023      	str	r3, [r4, #0]
 800cff8:	bd38      	pop	{r3, r4, r5, pc}
 800cffa:	bf00      	nop
 800cffc:	200008bc 	.word	0x200008bc

0800d000 <_getpid_r>:
 800d000:	f7f5 b8ea 	b.w	80021d8 <_getpid>

0800d004 <_fstat_r>:
 800d004:	b538      	push	{r3, r4, r5, lr}
 800d006:	4d07      	ldr	r5, [pc, #28]	; (800d024 <_fstat_r+0x20>)
 800d008:	2300      	movs	r3, #0
 800d00a:	4604      	mov	r4, r0
 800d00c:	4608      	mov	r0, r1
 800d00e:	4611      	mov	r1, r2
 800d010:	602b      	str	r3, [r5, #0]
 800d012:	f7f5 f948 	bl	80022a6 <_fstat>
 800d016:	1c43      	adds	r3, r0, #1
 800d018:	d102      	bne.n	800d020 <_fstat_r+0x1c>
 800d01a:	682b      	ldr	r3, [r5, #0]
 800d01c:	b103      	cbz	r3, 800d020 <_fstat_r+0x1c>
 800d01e:	6023      	str	r3, [r4, #0]
 800d020:	bd38      	pop	{r3, r4, r5, pc}
 800d022:	bf00      	nop
 800d024:	200008bc 	.word	0x200008bc

0800d028 <_isatty_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d06      	ldr	r5, [pc, #24]	; (800d044 <_isatty_r+0x1c>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	602b      	str	r3, [r5, #0]
 800d034:	f7f5 f947 	bl	80022c6 <_isatty>
 800d038:	1c43      	adds	r3, r0, #1
 800d03a:	d102      	bne.n	800d042 <_isatty_r+0x1a>
 800d03c:	682b      	ldr	r3, [r5, #0]
 800d03e:	b103      	cbz	r3, 800d042 <_isatty_r+0x1a>
 800d040:	6023      	str	r3, [r4, #0]
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	200008bc 	.word	0x200008bc

0800d048 <_init>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr

0800d054 <_fini>:
 800d054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d056:	bf00      	nop
 800d058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d05a:	bc08      	pop	{r3}
 800d05c:	469e      	mov	lr, r3
 800d05e:	4770      	bx	lr
