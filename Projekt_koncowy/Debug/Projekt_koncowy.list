
Projekt_koncowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800d080  0800d080  0001d080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d58c  0800d58c  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800d58c  0800d58c  0001d58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d594  0800d594  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d594  0800d594  0001d594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d598  0800d598  0001d598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800d59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000248  0800d7e4  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  0800d7e4  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec9e  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a83  00000000  00000000  0003ef16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  000429a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  00043f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029598  00000000  00000000  00045358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bba2  00000000  00000000  0006e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5b46  00000000  00000000  0008a492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ffd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000730c  00000000  00000000  0018002c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d068 	.word	0x0800d068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800d068 	.word	0x0800d068

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	b299      	uxth	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f107 020f 	add.w	r2, r7, #15
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	f001 fff3 	bl	8003038 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8001052:	2310      	movs	r3, #16
 8001054:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	f001 ffe4 	bl	8003038 <HAL_I2C_Master_Transmit>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b299      	uxth	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	f002 f8c3 	bl	8003220 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	7b7a      	ldrb	r2, [r7, #13]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010c0 <BH1750_ReadIlluminance_lux+0x48>
 80010ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	3f99999a 	.word	0x3f99999a

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f001 ff0a 	bl	8002f18 <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 fdbb 	bl	8001c84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f002 fbf3 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 fdb2 	bl	8001c84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f002 fc35 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 fda9 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000274 	.word	0x20000274
 800113c:	40005400 	.word	0x40005400
 8001140:	20404768 	.word	0x20404768

08001144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_I2C_MspInit+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d128      	bne.n	80011b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001190:	2304      	movs	r3, #4
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_I2C_MspInit+0x84>)
 800119c:	f001 fcac 	bl	8002af8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 fe4c 	bl	8002e80 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7d9b      	ldrb	r3, [r3, #22]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d115      	bne.n	800121c <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2204      	movs	r2, #4
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f842 	bl	800128c <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2204      	movs	r2, #4
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f839 	bl	800128c <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 800121a:	e005      	b.n	8001228 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2208      	movs	r2, #8
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f832 	bl	800128c <lcd_write>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6898      	ldr	r0, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	899b      	ldrh	r3, [r3, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	f001 fe1a 	bl	8002e80 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d9b      	ldrb	r3, [r3, #22]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d111      	bne.n	8001278 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2204      	movs	r2, #4
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f814 	bl	800128c <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2204      	movs	r2, #4
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f80b 	bl	800128c <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001276:	e005      	b.n	8001284 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2208      	movs	r2, #8
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f804 	bl	800128c <lcd_write>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f001 fdea 	bl	8002e80 <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e019      	b.n	80012e6 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	8819      	ldrh	r1, [r3, #0]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	fa42 f303 	asr.w	r3, r2, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f001 fdd0 	bl	8002e80 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3e1      	bcc.n	80012b2 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6918      	ldr	r0, [r3, #16]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	8a9b      	ldrh	r3, [r3, #20]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f001 fdc1 	bl	8002e80 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 80012fe:	2132      	movs	r1, #50	; 0x32
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f804 	bl	800130e <lcd_delay_us>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fdc6 	bl	8004eb8 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 800132c:	bf00      	nop
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f8      	bhi.n	800132e <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fe29 	bl	8004f98 <HAL_TIM_Base_Stop>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 800135c:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffd4 	bl	800130e <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7d9b      	ldrb	r3, [r3, #22]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d120      	bne.n	80013b0 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 800136e:	2103      	movs	r1, #3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff2b 	bl	80011cc <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001376:	f241 0167 	movw	r1, #4199	; 0x1067
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffc7 	bl	800130e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001380:	2103      	movs	r1, #3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff22 	bl	80011cc <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001388:	21c8      	movs	r1, #200	; 0xc8
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffbf 	bl	800130e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001390:	2103      	movs	r1, #3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff1a 	bl	80011cc <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001398:	2102      	movs	r1, #2
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff16 	bl	80011cc <lcd_write_command>

    hlcd->IsInitialized = 1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80013a6:	2128      	movs	r1, #40	; 0x28
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff0f 	bl	80011cc <lcd_write_command>
 80013ae:	e01f      	b.n	80013f0 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7d9b      	ldrb	r3, [r3, #22]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11b      	bne.n	80013f0 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013b8:	2130      	movs	r1, #48	; 0x30
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff06 	bl	80011cc <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80013c0:	f241 0167 	movw	r1, #4199	; 0x1067
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffa2 	bl	800130e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013ca:	2130      	movs	r1, #48	; 0x30
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fefd 	bl	80011cc <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80013d2:	21c8      	movs	r1, #200	; 0xc8
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff9a 	bl	800130e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013da:	2130      	movs	r1, #48	; 0x30
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fef5 	bl	80011cc <lcd_write_command>

	hlcd->IsInitialized = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 80013e8:	2138      	movs	r1, #56	; 0x38
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff feee 	bl	80011cc <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 80013f0:	2101      	movs	r1, #1
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff feea 	bl	80011cc <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 80013f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff86 	bl	800130e <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001402:	210c      	movs	r1, #12
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fee1 	bl	80011cc <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800140a:	2106      	movs	r1, #6
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fedd 	bl	80011cc <lcd_write_command>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e00a      	b.n	8001440 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fefb 	bl	8001230 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfc      	ldrb	r4, [r7, #15]
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f7fe fee4 	bl	8000210 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	429c      	cmp	r4, r3
 800144c:	d3ed      	bcc.n	800142a <LCD_printStr+0x10>
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
 8001464:	4613      	mov	r3, r2
 8001466:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <LCD_SetCursor+0x30>)
 800146c:	5cd2      	ldrb	r2, [r2, r3]
 800146e:	78bb      	ldrb	r3, [r7, #2]
 8001470:	4413      	add	r3, r2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b80      	subs	r3, #128	; 0x80
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fea6 	bl	80011cc <lcd_write_command>
  #endif
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800d0a8 	.word	0x0800d0a8

0800148c <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 800148c:	b40e      	push	{r1, r2, r3}
 800148e:	b580      	push	{r7, lr}
 8001490:	b095      	sub	sp, #84	; 0x54
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001496:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800149a:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80014a4:	4618      	mov	r0, r3
 80014a6:	f008 fb37 	bl	8009b18 <vsiprintf>
  LCD_printStr(hlcd, buffer);
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4619      	mov	r1, r3
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ffb2 	bl	800141a <LCD_printStr>
  va_end(args);
}
 80014b6:	bf00      	nop
 80014b8:	3754      	adds	r7, #84	; 0x54
 80014ba:	46bd      	mov	sp, r7
 80014bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014c0:	b003      	add	sp, #12
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_Btn_Pin) {
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014d4:	d117      	bne.n	8001506 <HAL_GPIO_EXTI_Callback+0x42>
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80014d6:	2101      	movs	r1, #1
 80014d8:	4827      	ldr	r0, [pc, #156]	; (8001578 <HAL_GPIO_EXTI_Callback+0xb4>)
 80014da:	f001 fcea 	bl	8002eb2 <HAL_GPIO_TogglePin>
		uart_flag = !uart_flag;
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_GPIO_EXTI_Callback+0xb8>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bf14      	ite	ne
 80014e6:	2301      	movne	r3, #1
 80014e8:	2300      	moveq	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f083 0301 	eor.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_GPIO_EXTI_Callback+0xb8>)
 80014fa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*) msg_str, strlen("999."));
 80014fc:	2204      	movs	r2, #4
 80014fe:	4920      	ldr	r1, [pc, #128]	; (8001580 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001500:	4820      	ldr	r0, [pc, #128]	; (8001584 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001502:	f004 ffda 	bl	80064ba <HAL_UART_Receive_IT>
	}
	if(GPIO_Pin == GPIO_PIN_5) {
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	2b20      	cmp	r3, #32
 800150a:	d130      	bne.n	800156e <HAL_GPIO_EXTI_Callback+0xaa>
		if((HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_4))&&set_point<999)
 800150c:	2110      	movs	r1, #16
 800150e:	481e      	ldr	r0, [pc, #120]	; (8001588 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001510:	f001 fc9e 	bl	8002e50 <HAL_GPIO_ReadPin>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d014      	beq.n	8001544 <HAL_GPIO_EXTI_Callback+0x80>
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001590 <HAL_GPIO_EXTI_Callback+0xcc>
 8001524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	d50a      	bpl.n	8001544 <HAL_GPIO_EXTI_Callback+0x80>
			set_point = set_point + 10;
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001538:	ee77 7a87 	vadd.f32	s15, s15, s14
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
		else if(set_point>10)
			set_point = set_point - 10;
	}
}
 8001542:	e014      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xaa>
		else if(set_point>10)
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800154e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	dc00      	bgt.n	800155a <HAL_GPIO_EXTI_Callback+0x96>
}
 8001558:	e009      	b.n	800156e <HAL_GPIO_EXTI_Callback+0xaa>
			set_point = set_point - 10;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_GPIO_EXTI_Callback+0xc8>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40020400 	.word	0x40020400
 800157c:	2000004c 	.word	0x2000004c
 8001580:	2000084c 	.word	0x2000084c
 8001584:	2000030c 	.word	0x2000030c
 8001588:	40021400 	.word	0x40021400
 800158c:	20000048 	.word	0x20000048
 8001590:	4479c000 	.word	0x4479c000

08001594 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b090      	sub	sp, #64	; 0x40
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM4) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d11d      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x4e>
		__HAL_TIM_SET_AUTORELOAD(htim, 100);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2264      	movs	r2, #100	; 0x64
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2264      	movs	r2, #100	; 0x64
 80015b2:	60da      	str	r2, [r3, #12]

		LCD_SetCursor(&hlcd1, 0, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2100      	movs	r1, #0
 80015b8:	4844      	ldr	r0, [pc, #272]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015ba:	f7ff ff4d 	bl	8001458 <LCD_SetCursor>
		snprintf(text, MAX_LENGTH, "%.2f", light); // @suppress("Float formatting support")
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffe0 	bl	8000588 <__aeabi_f2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	e9cd 2300 	strd	r2, r3, [sp]
 80015d0:	4a40      	ldr	r2, [pc, #256]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80015d2:	211e      	movs	r1, #30
 80015d4:	4840      	ldr	r0, [pc, #256]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015d6:	f007 fb0f 	bl	8008bf8 <sniprintf>
		LCD_printf(&hlcd1, text);
 80015da:	493f      	ldr	r1, [pc, #252]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015dc:	483b      	ldr	r0, [pc, #236]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015de:	f7ff ff55 	bl	800148c <LCD_printf>

	}

	if (htim->Instance == TIM2) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d168      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x12a>
		char str_buffer[32];
		int n;

		light = BH1750_ReadIlluminance_lux(hbh1750);
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x148>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fd41 	bl	8001078 <BH1750_ReadIlluminance_lux>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]

		float pwm_duty_f = (calculate_discrete_pid(&pid1, set_point, light));
 8001600:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001608:	ed93 7a00 	vldr	s14, [r3]
 800160c:	eef0 0a47 	vmov.f32	s1, s14
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	4833      	ldr	r0, [pc, #204]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001616:	f000 fb3b 	bl	8001c90 <calculate_discrete_pid>
 800161a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		uint32_t pwm_duty = (int) pwm_duty_f;
 800161e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001626:	ee17 3a90 	vmov	r3, s15
 800162a:	633b      	str	r3, [r7, #48]	; 0x30

		if (pwm_duty <= 999) {
 800162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001632:	d208      	bcs.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xb2>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_duty);
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
 8001644:	e014      	b.n	8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 999);
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty % 999);
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001658:	fba3 0302 	umull	r0, r3, r3, r2
 800165c:	1ad0      	subs	r0, r2, r3
 800165e:	0840      	lsrs	r0, r0, #1
 8001660:	4403      	add	r3, r0
 8001662:	0a5b      	lsrs	r3, r3, #9
 8001664:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001668:	fb00 f303 	mul.w	r3, r0, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	634b      	str	r3, [r1, #52]	; 0x34
		}

		n = sprintf(str_buffer, "{\"Light\":%6d}", (int) light);
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	ee17 2a90 	vmov	r2, s15
 8001682:	491b      	ldr	r1, [pc, #108]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001684:	4618      	mov	r0, r3
 8001686:	f007 faeb 	bl	8008c60 <siprintf>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c

		str_buffer[n] = '\r';
 800168c:	f107 020c 	add.w	r2, r7, #12
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	4413      	add	r3, r2
 8001694:	220d      	movs	r2, #13
 8001696:	701a      	strb	r2, [r3, #0]
		str_buffer[n + 1] = '\n';
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	3301      	adds	r3, #1
 800169c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80016a0:	4413      	add	r3, r2
 80016a2:	220a      	movs	r2, #10
 80016a4:	f803 2c2c 	strb.w	r2, [r3, #-44]
		HAL_UART_Transmit(&huart3, (uint8_t*) str_buffer, n + 2, 1000);
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3302      	adds	r3, #2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 010c 	add.w	r1, r7, #12
 80016b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016ba:	f004 fe6b 	bl	8006394 <HAL_UART_Transmit>
	}
}
 80016be:	bf00      	nop
 80016c0:	3738      	adds	r7, #56	; 0x38
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000800 	.word	0x40000800
 80016cc:	20000024 	.word	0x20000024
 80016d0:	20000264 	.word	0x20000264
 80016d4:	0800d080 	.word	0x0800d080
 80016d8:	2000082c 	.word	0x2000082c
 80016dc:	20000044 	.word	0x20000044
 80016e0:	20000048 	.word	0x20000048
 80016e4:	20000050 	.word	0x20000050
 80016e8:	200007e0 	.word	0x200007e0
 80016ec:	06680a41 	.word	0x06680a41
 80016f0:	0800d088 	.word	0x0800d088
 80016f4:	2000030c 	.word	0x2000030c

080016f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if ((huart->Instance == USART3) && uart_flag == 1) {
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_UART_RxCpltCallback+0x6c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d127      	bne.n	800175a <HAL_UART_RxCpltCallback+0x62>
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_UART_RxCpltCallback+0x70>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d023      	beq.n	800175a <HAL_UART_RxCpltCallback+0x62>

		HAL_TIM_Base_Stop_IT(&htim2);
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <HAL_UART_RxCpltCallback+0x74>)
 8001714:	f003 fce0 	bl	80050d8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim4);
 8001718:	4815      	ldr	r0, [pc, #84]	; (8001770 <HAL_UART_RxCpltCallback+0x78>)
 800171a:	f003 fcdd 	bl	80050d8 <HAL_TIM_Base_Stop_IT>

		sscanf(msg_str, "%f", &set_point); // @suppress("Float formatting support")
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_UART_RxCpltCallback+0x7c>)
 8001720:	4915      	ldr	r1, [pc, #84]	; (8001778 <HAL_UART_RxCpltCallback+0x80>)
 8001722:	4816      	ldr	r0, [pc, #88]	; (800177c <HAL_UART_RxCpltCallback+0x84>)
 8001724:	f007 fabc 	bl	8008ca0 <siscanf>

		for(int i=0; i<10; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e007      	b.n	800173e <HAL_UART_RxCpltCallback+0x46>
		{
			msg_str[i] = '\0';
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <HAL_UART_RxCpltCallback+0x84>)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<10; i++)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3301      	adds	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b09      	cmp	r3, #9
 8001742:	ddf4      	ble.n	800172e <HAL_UART_RxCpltCallback+0x36>
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*) msg_str, strlen("999."));
 8001744:	2204      	movs	r2, #4
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <HAL_UART_RxCpltCallback+0x84>)
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <HAL_UART_RxCpltCallback+0x88>)
 800174a:	f004 feb6 	bl	80064ba <HAL_UART_Receive_IT>

		HAL_TIM_Base_Start_IT(&htim2);
 800174e:	4807      	ldr	r0, [pc, #28]	; (800176c <HAL_UART_RxCpltCallback+0x74>)
 8001750:	f003 fc4a 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim4);
 8001754:	4806      	ldr	r0, [pc, #24]	; (8001770 <HAL_UART_RxCpltCallback+0x78>)
 8001756:	f003 fc47 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
	}
}
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40004800 	.word	0x40004800
 8001768:	2000004c 	.word	0x2000004c
 800176c:	2000086c 	.word	0x2000086c
 8001770:	200002c0 	.word	0x200002c0
 8001774:	20000048 	.word	0x20000048
 8001778:	0800d098 	.word	0x0800d098
 800177c:	2000084c 	.word	0x2000084c
 8001780:	2000030c 	.word	0x2000030c

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001788:	f000 ff88 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178c:	f000 f83a 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f000 f928 	bl	80019e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001794:	f000 f8c8 	bl	8001928 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001798:	f000 f8f6 	bl	8001988 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800179c:	f000 fe50 	bl	8002440 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017a0:	f7ff fc90 	bl	80010c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80017a4:	f000 fdfe 	bl	80023a4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80017a8:	f000 ff00 	bl	80025ac <MX_TIM5_Init>
  MX_TIM4_Init();
 80017ac:	f000 feb0 	bl	8002510 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017b0:	2108      	movs	r1, #8
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <main+0x64>)
 80017b4:	f003 fd16 	bl	80051e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017b8:	2100      	movs	r1, #0
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <main+0x64>)
 80017bc:	f003 fd12 	bl	80051e4 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart3, (uint8_t*) msg_str, strlen("999"));
 80017c0:	2203      	movs	r2, #3
 80017c2:	490a      	ldr	r1, [pc, #40]	; (80017ec <main+0x68>)
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <main+0x6c>)
 80017c6:	f004 fe78 	bl	80064ba <HAL_UART_Receive_IT>
	BH1750_Init(hbh1750);
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <main+0x70>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fc2c 	bl	800102c <BH1750_Init>
	LCD_Init(&hlcd1);
 80017d4:	4808      	ldr	r0, [pc, #32]	; (80017f8 <main+0x74>)
 80017d6:	f7ff fdba 	bl	800134e <LCD_Init>

	HAL_TIM_Base_Start_IT(&htim2);
 80017da:	4808      	ldr	r0, [pc, #32]	; (80017fc <main+0x78>)
 80017dc:	f003 fc04 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80017e0:	4807      	ldr	r0, [pc, #28]	; (8001800 <main+0x7c>)
 80017e2:	f003 fc01 	bl	8004fe8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80017e6:	e7fe      	b.n	80017e6 <main+0x62>
 80017e8:	200007e0 	.word	0x200007e0
 80017ec:	2000084c 	.word	0x2000084c
 80017f0:	2000030c 	.word	0x2000030c
 80017f4:	20000044 	.word	0x20000044
 80017f8:	20000024 	.word	0x20000024
 80017fc:	2000086c 	.word	0x2000086c
 8001800:	200002c0 	.word	0x200002c0

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0b4      	sub	sp, #208	; 0xd0
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800180e:	2230      	movs	r2, #48	; 0x30
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f006 fb68 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 0308 	add.w	r3, r7, #8
 800182c:	2284      	movs	r2, #132	; 0x84
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f006 fb59 	bl	8007ee8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001836:	f002 fa41 	bl	8003cbc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <SystemClock_Config+0x118>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a37      	ldr	r2, [pc, #220]	; (800191c <SystemClock_Config+0x118>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <SystemClock_Config+0x118>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <SystemClock_Config+0x11c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800185a:	4a31      	ldr	r2, [pc, #196]	; (8001920 <SystemClock_Config+0x11c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <SystemClock_Config+0x11c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186e:	2301      	movs	r3, #1
 8001870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800188a:	2304      	movs	r3, #4
 800188c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001890:	2348      	movs	r3, #72	; 0x48
 8001892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800189c:	2303      	movs	r3, #3
 800189e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fa18 	bl	8003cdc <HAL_RCC_OscConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80018b2:	f000 f9e7 	bl	8001c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b6:	230f      	movs	r3, #15
 80018b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018da:	2102      	movs	r1, #2
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fca1 	bl	8004224 <HAL_RCC_ClockConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80018e8:	f000 f9cc 	bl	8001c84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <SystemClock_Config+0x120>)
 80018ee:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fe90 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800190e:	f000 f9b9 	bl	8001c84 <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	37d0      	adds	r7, #208	; 0xd0
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000
 8001924:	00204100 	.word	0x00204100

08001928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_USART3_UART_Init+0x58>)
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <MX_USART3_UART_Init+0x5c>)
 8001930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_USART3_UART_Init+0x58>)
 8001934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART3_UART_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_USART3_UART_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART3_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART3_UART_Init+0x58>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART3_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART3_UART_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART3_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART3_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART3_UART_Init+0x58>)
 800196c:	f004 fcc4 	bl	80062f8 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001976:	f000 f985 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000030c 	.word	0x2000030c
 8001984:	40004800 	.word	0x40004800

08001988 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001996:	2206      	movs	r2, #6
 8001998:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199c:	2202      	movs	r2, #2
 800199e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019cc:	f002 f82d 	bl	8003a2a <HAL_PCD_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019d6:	f000 f955 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000390 	.word	0x20000390

080019e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b9b      	ldr	r3, [pc, #620]	; (8001c68 <MX_GPIO_Init+0x284>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a9a      	ldr	r2, [pc, #616]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b98      	ldr	r3, [pc, #608]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a12:	4b95      	ldr	r3, [pc, #596]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a18:	f043 0320 	orr.w	r3, r3, #32
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b92      	ldr	r3, [pc, #584]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	4b8f      	ldr	r3, [pc, #572]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a8e      	ldr	r2, [pc, #568]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a88      	ldr	r2, [pc, #544]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b86      	ldr	r3, [pc, #536]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b83      	ldr	r3, [pc, #524]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a82      	ldr	r2, [pc, #520]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b80      	ldr	r3, [pc, #512]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a7c      	ldr	r2, [pc, #496]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a8a:	4b77      	ldr	r3, [pc, #476]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a76      	ldr	r2, [pc, #472]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b74      	ldr	r3, [pc, #464]	; (8001c68 <MX_GPIO_Init+0x284>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2110      	movs	r1, #16
 8001aa6:	4871      	ldr	r0, [pc, #452]	; (8001c6c <MX_GPIO_Init+0x288>)
 8001aa8:	f001 f9ea 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LCD_RS_Pin|LCD_D4_Pin
 8001aac:	2200      	movs	r2, #0
 8001aae:	f24c 01b1 	movw	r1, #49329	; 0xc0b1
 8001ab2:	486f      	ldr	r0, [pc, #444]	; (8001c70 <MX_GPIO_Init+0x28c>)
 8001ab4:	f001 f9e4 	bl	8002e80 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	486d      	ldr	r0, [pc, #436]	; (8001c74 <MX_GPIO_Init+0x290>)
 8001abe:	f001 f9df 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	21c0      	movs	r1, #192	; 0xc0
 8001ac6:	486c      	ldr	r0, [pc, #432]	; (8001c78 <MX_GPIO_Init+0x294>)
 8001ac8:	f001 f9da 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001acc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ad2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4865      	ldr	r0, [pc, #404]	; (8001c78 <MX_GPIO_Init+0x294>)
 8001ae4:	f001 f808 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	4860      	ldr	r0, [pc, #384]	; (8001c7c <MX_GPIO_Init+0x298>)
 8001afc:	f000 fffc 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b00:	2320      	movs	r3, #32
 8001b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b0e:	f107 031c 	add.w	r3, r7, #28
 8001b12:	4619      	mov	r1, r3
 8001b14:	4859      	ldr	r0, [pc, #356]	; (8001c7c <MX_GPIO_Init+0x298>)
 8001b16:	f000 ffef 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b1a:	2332      	movs	r3, #50	; 0x32
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b2a:	230b      	movs	r3, #11
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4850      	ldr	r0, [pc, #320]	; (8001c78 <MX_GPIO_Init+0x294>)
 8001b36:	f000 ffdf 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b3a:	2386      	movs	r3, #134	; 0x86
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b4a:	230b      	movs	r3, #11
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4845      	ldr	r0, [pc, #276]	; (8001c6c <MX_GPIO_Init+0x288>)
 8001b56:	f000 ffcf 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	483e      	ldr	r0, [pc, #248]	; (8001c6c <MX_GPIO_Init+0x288>)
 8001b72:	f000 ffc1 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LCD_RS_Pin LCD_D4_Pin
                           LCD_D6_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LCD_RS_Pin|LCD_D4_Pin
 8001b76:	f24c 03b1 	movw	r3, #49329	; 0xc0b1
 8001b7a:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4838      	ldr	r0, [pc, #224]	; (8001c70 <MX_GPIO_Init+0x28c>)
 8001b90:	f000 ffb2 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ba6:	230b      	movs	r3, #11
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482f      	ldr	r0, [pc, #188]	; (8001c70 <MX_GPIO_Init+0x28c>)
 8001bb2:	f000 ffa1 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bb6:	2340      	movs	r3, #64	; 0x40
 8001bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4829      	ldr	r0, [pc, #164]	; (8001c74 <MX_GPIO_Init+0x290>)
 8001bce:	f000 ff93 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	4823      	ldr	r0, [pc, #140]	; (8001c74 <MX_GPIO_Init+0x290>)
 8001be6:	f000 ff87 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_D7_Pin;
 8001bea:	23c0      	movs	r3, #192	; 0xc0
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	481d      	ldr	r0, [pc, #116]	; (8001c78 <MX_GPIO_Init+0x294>)
 8001c02:	f000 ff79 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001c06:	2318      	movs	r3, #24
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <MX_GPIO_Init+0x29c>)
 8001c1a:	f000 ff6d 	bl	8002af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c30:	230b      	movs	r3, #11
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480e      	ldr	r0, [pc, #56]	; (8001c74 <MX_GPIO_Init+0x290>)
 8001c3c:	f000 ff5c 	bl	8002af8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2017      	movs	r0, #23
 8001c46:	f000 fe8e 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c4a:	2017      	movs	r0, #23
 8001c4c:	f000 fea7 	bl	800299e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	2028      	movs	r0, #40	; 0x28
 8001c56:	f000 fe86 	bl	8002966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c5a:	2028      	movs	r0, #40	; 0x28
 8001c5c:	f000 fe9f 	bl	800299e <HAL_NVIC_EnableIRQ>

}
 8001c60:	bf00      	nop
 8001c62:	3730      	adds	r7, #48	; 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40021800 	.word	0x40021800
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40020c00 	.word	0x40020c00

08001c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c8c:	e7fe      	b.n	8001c8c <Error_Handler+0x8>
	...

08001c90 <calculate_discrete_pid>:
 * @param[in] pid Pid struct
 * @param[in] float value of setpoint
 * @param[in] float value of measurement
 * @return value of control signal
 */
float calculate_discrete_pid(pid *pid, float setpoint, float measured) {
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b08c      	sub	sp, #48	; 0x30
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c9c:	edc7 0a01 	vstr	s1, [r7, #4]
	float u = 0, P, I, D, error, integral, derivative;
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28

	error = setpoint - measured;
 8001ca6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//proportional part
	P = pid->p.Kp * error;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	edc7 7a08 	vstr	s15, [r7, #32]

	//integral part
	integral = pid->previous_integral + (error + pid->previous_error); //numerical integrator without anti-windup
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001cd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce0:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->previous_integral = integral;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki * integral * (pid->p.dt / 2.0);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf8:	ee17 0a90 	vmov	r0, s15
 8001cfc:	f7fe fc44 	bl	8000588 <__aeabi_f2d>
 8001d00:	4604      	mov	r4, r0
 8001d02:	460d      	mov	r5, r1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc3d 	bl	8000588 <__aeabi_f2d>
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001d16:	f7fe fdb9 	bl	800088c <__aeabi_ddiv>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fc89 	bl	8000638 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe ff7b 	bl	8000c28 <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]

	//derivative part
	derivative = (error - pid->previous_error) / pid->p.dt; //numerical derivative without filter
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d3c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d40:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4e:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->previous_error = error;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d56:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd * derivative;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a04 	vstr	s15, [r7, #16]

	//sum of all parts
	u = P + I + D; //without saturation
 8001d6a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float u_sat = 0;
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (u < 0)
 8001d88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d503      	bpl.n	8001d9e <calculate_discrete_pid+0x10e>
		u_sat = 0;
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9c:	e00d      	b.n	8001dba <calculate_discrete_pid+0x12a>
	else if (u > 1998)
 8001d9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001da2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001dcc <calculate_discrete_pid+0x13c>
 8001da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd02      	ble.n	8001db6 <calculate_discrete_pid+0x126>
		u_sat = 1998;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <calculate_discrete_pid+0x140>)
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001db4:	e001      	b.n	8001dba <calculate_discrete_pid+0x12a>
	else
		u_sat = u;
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c

	return u_sat;
 8001dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbc:	ee07 3a90 	vmov	s15, r3
}
 8001dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc4:	3730      	adds	r7, #48	; 0x30
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	44f9c000 	.word	0x44f9c000
 8001dd0:	44f9c000 	.word	0x44f9c000

08001dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_MspInit+0x44>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_MspInit+0x44>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_MspInit+0x44>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_MspInit+0x44>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a08      	ldr	r2, [pc, #32]	; (8001e18 <HAL_MspInit+0x44>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_MspInit+0x44>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2c:	d114      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f000 fd8b 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e50:	201c      	movs	r0, #28
 8001e52:	f000 fda4 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e56:	e032      	b.n	8001ebe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_TIM_Base_MspInit+0xb0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d114      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	201e      	movs	r0, #30
 8001e80:	f000 fd71 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e84:	201e      	movs	r0, #30
 8001e86:	f000 fd8a 	bl	800299e <HAL_NVIC_EnableIRQ>
}
 8001e8a:	e018      	b.n	8001ebe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM5)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_TIM_Base_MspInit+0xb4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d113      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_TIM_Base_MspInit+0xac>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2032      	movs	r0, #50	; 0x32
 8001eb4:	f000 fd57 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001eb8:	2032      	movs	r0, #50	; 0x32
 8001eba:	f000 fd70 	bl	800299e <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00

08001ed4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <HAL_TIM_PWM_MspInit+0x44>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d113      	bne.n	8001f0e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_TIM_PWM_MspInit+0x48>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <HAL_TIM_PWM_MspInit+0x48>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_TIM_PWM_MspInit+0x48>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	201d      	movs	r0, #29
 8001f04:	f000 fd2f 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f08:	201d      	movs	r0, #29
 8001f0a:	f000 fd48 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40023800 	.word	0x40023800

08001f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_TIM_MspPostInit+0x9c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d138      	bne.n	8001fb4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_TIM_MspPostInit+0xa0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <HAL_TIM_MspPostInit+0xa0>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_TIM_MspPostInit+0xa0>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <HAL_TIM_MspPostInit+0xa0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <HAL_TIM_MspPostInit+0xa0>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <HAL_TIM_MspPostInit+0xa0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f82:	2302      	movs	r3, #2
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <HAL_TIM_MspPostInit+0xa4>)
 8001f8e:	f000 fdb3 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <HAL_TIM_MspPostInit+0xa8>)
 8001fb0:	f000 fda2 	bl	8002af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fb4:	bf00      	nop
 8001fb6:	3728      	adds	r7, #40	; 0x28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020800 	.word	0x40020800

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_UART_MspInit+0x8c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d130      	bne.n	8002050 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_UART_MspInit+0x90>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_UART_MspInit+0x90>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_UART_MspInit+0x90>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_UART_MspInit+0x90>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a14      	ldr	r2, [pc, #80]	; (800205c <HAL_UART_MspInit+0x90>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_UART_MspInit+0x90>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002030:	2307      	movs	r3, #7
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <HAL_UART_MspInit+0x94>)
 800203c:	f000 fd5c 	bl	8002af8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2027      	movs	r0, #39	; 0x27
 8002046:	f000 fc8e 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800204a:	2027      	movs	r0, #39	; 0x27
 800204c:	f000 fca7 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40004800 	.word	0x40004800
 800205c:	40023800 	.word	0x40023800
 8002060:	40020c00 	.word	0x40020c00

08002064 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002084:	d141      	bne.n	800210a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800209e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80020a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020b0:	230a      	movs	r3, #10
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4817      	ldr	r0, [pc, #92]	; (8002118 <HAL_PCD_MspInit+0xb4>)
 80020bc:	f000 fd1c 	bl	8002af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4810      	ldr	r0, [pc, #64]	; (8002118 <HAL_PCD_MspInit+0xb4>)
 80020d6:	f000 fd0f 	bl	8002af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 80020dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020de:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6353      	str	r3, [r2, #52]	; 0x34
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 80020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_PCD_MspInit+0xb0>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40020000 	.word	0x40020000

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002168:	f000 fade 	bl	8002728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002174:	2020      	movs	r0, #32
 8002176:	f000 feb7 	bl	8002ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM2_IRQHandler+0x10>)
 8002186:	f003 f927 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000086c 	.word	0x2000086c

08002194 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM3_IRQHandler+0x10>)
 800219a:	f003 f91d 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200007e0 	.word	0x200007e0

080021a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM4_IRQHandler+0x10>)
 80021ae:	f003 f913 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002c0 	.word	0x200002c0

080021bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <USART3_IRQHandler+0x10>)
 80021c2:	f004 f9c9 	bl	8006558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000030c 	.word	0x2000030c

080021d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021d8:	f000 fe86 	bl	8002ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM5_IRQHandler+0x10>)
 80021e6:	f003 f8f7 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000794 	.word	0x20000794

080021f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_kill>:

int _kill(int pid, int sig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800220e:	f005 fe41 	bl	8007e94 <__errno>
 8002212:	4603      	mov	r3, r0
 8002214:	2216      	movs	r2, #22
 8002216:	601a      	str	r2, [r3, #0]
	return -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_exit>:

void _exit (int status)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffe7 	bl	8002204 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002236:	e7fe      	b.n	8002236 <_exit+0x12>

08002238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e00a      	b.n	8002260 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800224a:	f3af 8000 	nop.w
 800224e:	4601      	mov	r1, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	60ba      	str	r2, [r7, #8]
 8002256:	b2ca      	uxtb	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbf0      	blt.n	800224a <_read+0x12>
	}

return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e009      	b.n	8002298 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf1      	blt.n	8002284 <_write+0x12>
	}
	return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_close>:

int _close(int file)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	return -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d2:	605a      	str	r2, [r3, #4]
	return 0;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_isatty>:

int _isatty(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
	return 1;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <_sbrk+0x5c>)
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <_sbrk+0x60>)
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_sbrk+0x64>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <_sbrk+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002344:	f005 fda6 	bl	8007e94 <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	220c      	movs	r2, #12
 800234c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e009      	b.n	8002368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_sbrk+0x64>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20050000 	.word	0x20050000
 8002374:	00000400 	.word	0x00000400
 8002378:	20000268 	.word	0x20000268
 800237c:	200008d0 	.word	0x200008d0

08002380 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <SystemInit+0x20>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <SystemInit+0x20>)
 800238c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

void MX_TIM2_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <MX_TIM2_Init+0x98>)
 80023c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <MX_TIM2_Init+0x98>)
 80023cc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80023d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <MX_TIM2_Init+0x98>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <MX_TIM2_Init+0x98>)
 80023da:	2263      	movs	r2, #99	; 0x63
 80023dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <MX_TIM2_Init+0x98>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <MX_TIM2_Init+0x98>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ea:	4814      	ldr	r0, [pc, #80]	; (800243c <MX_TIM2_Init+0x98>)
 80023ec:	f002 fd0c 	bl	8004e08 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023f6:	f7ff fc45 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	4619      	mov	r1, r3
 8002406:	480d      	ldr	r0, [pc, #52]	; (800243c <MX_TIM2_Init+0x98>)
 8002408:	f003 fa1a 	bl	8005840 <HAL_TIM_ConfigClockSource>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002412:	f7ff fc37 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4806      	ldr	r0, [pc, #24]	; (800243c <MX_TIM2_Init+0x98>)
 8002424:	f003 febc 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800242e:	f7ff fc29 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000086c 	.word	0x2000086c

08002440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	463b      	mov	r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	615a      	str	r2, [r3, #20]
 8002462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <MX_TIM3_Init+0xc8>)
 8002466:	4a29      	ldr	r2, [pc, #164]	; (800250c <MX_TIM3_Init+0xcc>)
 8002468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <MX_TIM3_Init+0xc8>)
 800246c:	2247      	movs	r2, #71	; 0x47
 800246e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <MX_TIM3_Init+0xc8>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <MX_TIM3_Init+0xc8>)
 8002478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800247c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MX_TIM3_Init+0xc8>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <MX_TIM3_Init+0xc8>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800248a:	481f      	ldr	r0, [pc, #124]	; (8002508 <MX_TIM3_Init+0xc8>)
 800248c:	f002 fe53 	bl	8005136 <HAL_TIM_PWM_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002496:	f7ff fbf5 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4817      	ldr	r0, [pc, #92]	; (8002508 <MX_TIM3_Init+0xc8>)
 80024aa:	f003 fe79 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80024b4:	f7ff fbe6 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b8:	2360      	movs	r3, #96	; 0x60
 80024ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c8:	463b      	mov	r3, r7
 80024ca:	2200      	movs	r2, #0
 80024cc:	4619      	mov	r1, r3
 80024ce:	480e      	ldr	r0, [pc, #56]	; (8002508 <MX_TIM3_Init+0xc8>)
 80024d0:	f003 f8a2 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80024da:	f7ff fbd3 	bl	8001c84 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 80024de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e4:	463b      	mov	r3, r7
 80024e6:	2208      	movs	r2, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	4807      	ldr	r0, [pc, #28]	; (8002508 <MX_TIM3_Init+0xc8>)
 80024ec:	f003 f894 	bl	8005618 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80024f6:	f7ff fbc5 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <MX_TIM3_Init+0xc8>)
 80024fc:	f7ff fd10 	bl	8001f20 <HAL_TIM_MspPostInit>

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200007e0 	.word	0x200007e0
 800250c:	40000400 	.word	0x40000400

08002510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0310 	add.w	r3, r7, #16
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	1d3b      	adds	r3, r7, #4
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <MX_TIM4_Init+0x98>)
 8002532:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 63999;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002536:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800253a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <MX_TIM4_Init+0x94>)
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002544:	2232      	movs	r2, #50	; 0x32
 8002546:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_TIM4_Init+0x94>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002554:	4813      	ldr	r0, [pc, #76]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002556:	f002 fc57 	bl	8004e08 <HAL_TIM_Base_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002560:	f7ff fb90 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <MX_TIM4_Init+0x94>)
 8002572:	f003 f965 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800257c:	f7ff fb82 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM4_Init+0x94>)
 800258e:	f003 fe07 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002598:	f7ff fb74 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200002c0 	.word	0x200002c0
 80025a8:	40000800 	.word	0x40000800

080025ac <MX_TIM5_Init>:


void MX_TIM5_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_TIM5_Init+0x94>)
 80025cc:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <MX_TIM5_Init+0x98>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <MX_TIM5_Init+0x94>)
 80025d2:	2247      	movs	r2, #71	; 0x47
 80025d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM5_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_TIM5_Init+0x94>)
 80025de:	f04f 32ff 	mov.w	r2, #4294967295
 80025e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_TIM5_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_TIM5_Init+0x94>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025f0:	4813      	ldr	r0, [pc, #76]	; (8002640 <MX_TIM5_Init+0x94>)
 80025f2:	f002 fc09 	bl	8004e08 <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80025fc:	f7ff fb42 	bl	8001c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	4619      	mov	r1, r3
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <MX_TIM5_Init+0x94>)
 800260e:	f003 f917 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002618:	f7ff fb34 	bl	8001c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_TIM5_Init+0x94>)
 800262a:	f003 fdb9 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002634:	f7ff fb26 	bl	8001c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000794 	.word	0x20000794
 8002644:	40000c00 	.word	0x40000c00

08002648 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800264e:	490e      	ldr	r1, [pc, #56]	; (8002688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002650:	4a0e      	ldr	r2, [pc, #56]	; (800268c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002654:	e002      	b.n	800265c <LoopCopyDataInit>

08002656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265a:	3304      	adds	r3, #4

0800265c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800265c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002660:	d3f9      	bcc.n	8002656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002664:	4c0b      	ldr	r4, [pc, #44]	; (8002694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002668:	e001      	b.n	800266e <LoopFillZerobss>

0800266a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800266c:	3204      	adds	r2, #4

0800266e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002670:	d3fb      	bcc.n	800266a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002672:	f7ff fe85 	bl	8002380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f005 fc13 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7ff f883 	bl	8001784 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 800268c:	0800d59c 	.word	0x0800d59c
  ldr r2, =_sbss
 8002690:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8002694:	200008cc 	.word	0x200008cc

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_Init+0x28>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_Init+0x28>)
 80026a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026aa:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 f94f 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f000 f808 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b8:	f7ff fb8c 	bl	8001dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f967 	bl	80029ba <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f000 f92f 	bl	8002966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	; (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000068 	.word	0x20000068
 8002720:	20000070 	.word	0x20000070
 8002724:	2000006c 	.word	0x2000006c

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000070 	.word	0x20000070
 800274c:	200008b8 	.word	0x200008b8

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200008b8 	.word	0x200008b8

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000070 	.word	0x20000070

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <__NVIC_SetPriorityGrouping+0x40>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x40>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	05fa0000 	.word	0x05fa0000

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff29 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff ff3e 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff8e 	bl	80028a4 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5d 	bl	8002850 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff31 	bl	8002814 <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffa2 	bl	800290c <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff feb6 	bl	8002750 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d008      	beq.n	8002a04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e052      	b.n	8002aaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0216 	bic.w	r2, r2, #22
 8002a12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d103      	bne.n	8002a34 <HAL_DMA_Abort+0x62>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0208 	bic.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0201 	bic.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a54:	e013      	b.n	8002a7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a56:	f7ff fe7b 	bl	8002750 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d90c      	bls.n	8002a7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e015      	b.n	8002aaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e4      	bne.n	8002a56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00c      	b.n	8002aea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e175      	b.n	8002e04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 8164 	bne.w	8002dfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d005      	beq.n	8002b4e <HAL_GPIO_Init+0x56>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d130      	bne.n	8002bb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 0201 	and.w	r2, r3, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d017      	beq.n	8002bec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80be 	beq.w	8002dfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <HAL_GPIO_Init+0x324>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	4a65      	ldr	r2, [pc, #404]	; (8002e1c <HAL_GPIO_Init+0x324>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_GPIO_Init+0x324>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c9a:	4a61      	ldr	r2, [pc, #388]	; (8002e20 <HAL_GPIO_Init+0x328>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a58      	ldr	r2, [pc, #352]	; (8002e24 <HAL_GPIO_Init+0x32c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d037      	beq.n	8002d36 <HAL_GPIO_Init+0x23e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a57      	ldr	r2, [pc, #348]	; (8002e28 <HAL_GPIO_Init+0x330>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d031      	beq.n	8002d32 <HAL_GPIO_Init+0x23a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a56      	ldr	r2, [pc, #344]	; (8002e2c <HAL_GPIO_Init+0x334>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d02b      	beq.n	8002d2e <HAL_GPIO_Init+0x236>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <HAL_GPIO_Init+0x338>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d025      	beq.n	8002d2a <HAL_GPIO_Init+0x232>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a54      	ldr	r2, [pc, #336]	; (8002e34 <HAL_GPIO_Init+0x33c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01f      	beq.n	8002d26 <HAL_GPIO_Init+0x22e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a53      	ldr	r2, [pc, #332]	; (8002e38 <HAL_GPIO_Init+0x340>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d019      	beq.n	8002d22 <HAL_GPIO_Init+0x22a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a52      	ldr	r2, [pc, #328]	; (8002e3c <HAL_GPIO_Init+0x344>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_GPIO_Init+0x226>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a51      	ldr	r2, [pc, #324]	; (8002e40 <HAL_GPIO_Init+0x348>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00d      	beq.n	8002d1a <HAL_GPIO_Init+0x222>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a50      	ldr	r2, [pc, #320]	; (8002e44 <HAL_GPIO_Init+0x34c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <HAL_GPIO_Init+0x21e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4f      	ldr	r2, [pc, #316]	; (8002e48 <HAL_GPIO_Init+0x350>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_GPIO_Init+0x21a>
 8002d0e:	2309      	movs	r3, #9
 8002d10:	e012      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d12:	230a      	movs	r3, #10
 8002d14:	e010      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d16:	2308      	movs	r3, #8
 8002d18:	e00e      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e00c      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d1e:	2306      	movs	r3, #6
 8002d20:	e00a      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d22:	2305      	movs	r3, #5
 8002d24:	e008      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d26:	2304      	movs	r3, #4
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e004      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e002      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <HAL_GPIO_Init+0x240>
 8002d36:	2300      	movs	r3, #0
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f002 0203 	and.w	r2, r2, #3
 8002d3e:	0092      	lsls	r2, r2, #2
 8002d40:	4093      	lsls	r3, r2
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d48:	4935      	ldr	r1, [pc, #212]	; (8002e20 <HAL_GPIO_Init+0x328>)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	089b      	lsrs	r3, r3, #2
 8002d4e:	3302      	adds	r3, #2
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d7a:	4a34      	ldr	r2, [pc, #208]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dce:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_GPIO_Init+0x354>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	f67f ae86 	bls.w	8002b18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40013800 	.word	0x40013800
 8002e24:	40020000 	.word	0x40020000
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	40020c00 	.word	0x40020c00
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40021400 	.word	0x40021400
 8002e3c:	40021800 	.word	0x40021800
 8002e40:	40021c00 	.word	0x40021c00
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40022400 	.word	0x40022400
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ec4:	887a      	ldrh	r2, [r7, #2]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	041a      	lsls	r2, r3, #16
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	400b      	ands	r3, r1
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	619a      	str	r2, [r3, #24]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d006      	beq.n	8002f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002efe:	4a05      	ldr	r2, [pc, #20]	; (8002f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fadc 	bl	80014c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07f      	b.n	800302a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe f900 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e006      	b.n	8002fa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d104      	bne.n	8002fb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_I2C_Init+0x11c>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	02008000 	.word	0x02008000

08003038 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	461a      	mov	r2, r3
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
 8003048:	4613      	mov	r3, r2
 800304a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	f040 80da 	bne.w	800320e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x30>
 8003064:	2302      	movs	r3, #2
 8003066:	e0d3      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1d8>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003070:	f7ff fb6e 	bl	8002750 <HAL_GetTick>
 8003074:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2319      	movs	r3, #25
 800307c:	2201      	movs	r2, #1
 800307e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f9e6 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0be      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2210      	movs	r2, #16
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	893a      	ldrh	r2, [r7, #8]
 80030b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2bff      	cmp	r3, #255	; 0xff
 80030c2:	d90e      	bls.n	80030e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	22ff      	movs	r2, #255	; 0xff
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	4b51      	ldr	r3, [pc, #324]	; (8003218 <HAL_I2C_Master_Transmit+0x1e0>)
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 fbdc 	bl	8003898 <I2C_TransferConfig>
 80030e0:	e06c      	b.n	80031bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	8979      	ldrh	r1, [r7, #10]
 80030f4:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_I2C_Master_Transmit+0x1e0>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fbcb 	bl	8003898 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003102:	e05b      	b.n	80031bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	6a39      	ldr	r1, [r7, #32]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f9e3 	bl	80034d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e07b      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d034      	beq.n	80031bc <HAL_I2C_Master_Transmit+0x184>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d130      	bne.n	80031bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	2200      	movs	r2, #0
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f975 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04d      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d90e      	bls.n	800319c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	b2da      	uxtb	r2, r3
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fb7f 	bl	8003898 <I2C_TransferConfig>
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fb6e 	bl	8003898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d19e      	bne.n	8003104 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	6a39      	ldr	r1, [r7, #32]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f9c2 	bl	8003554 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01a      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2220      	movs	r2, #32
 80031e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_I2C_Master_Transmit+0x1e4>)
 80031ee:	400b      	ands	r3, r1
 80031f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	80002000 	.word	0x80002000
 800321c:	fe00e800 	.word	0xfe00e800

08003220 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80db 	bne.w	80033f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_I2C_Master_Receive+0x30>
 800324c:	2302      	movs	r3, #2
 800324e:	e0d4      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003258:	f7ff fa7a 	bl	8002750 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2319      	movs	r3, #25
 8003264:	2201      	movs	r2, #1
 8003266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8f2 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0bf      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2222      	movs	r2, #34	; 0x22
 800327e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2210      	movs	r2, #16
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	893a      	ldrh	r2, [r7, #8]
 800329a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2bff      	cmp	r3, #255	; 0xff
 80032aa:	d90e      	bls.n	80032ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	22ff      	movs	r2, #255	; 0xff
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	4b52      	ldr	r3, [pc, #328]	; (8003404 <HAL_I2C_Master_Receive+0x1e4>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fae8 	bl	8003898 <I2C_TransferConfig>
 80032c8:	e06d      	b.n	80033a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_I2C_Master_Receive+0x1e4>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fad7 	bl	8003898 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032ea:	e05c      	b.n	80033a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	6a39      	ldr	r1, [r7, #32]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f96b 	bl	80035cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e07c      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d034      	beq.n	80033a6 <HAL_I2C_Master_Receive+0x186>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d130      	bne.n	80033a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2200      	movs	r2, #0
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f880 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e04d      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2bff      	cmp	r3, #255	; 0xff
 8003366:	d90e      	bls.n	8003386 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	b2da      	uxtb	r2, r3
 8003374:	8979      	ldrh	r1, [r7, #10]
 8003376:	2300      	movs	r3, #0
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fa8a 	bl	8003898 <I2C_TransferConfig>
 8003384:	e00f      	b.n	80033a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	b2da      	uxtb	r2, r3
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fa79 	bl	8003898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d19d      	bne.n	80032ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	6a39      	ldr	r1, [r7, #32]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f8cd 	bl	8003554 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01a      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_I2C_Master_Receive+0x1e8>)
 80033d8:	400b      	ands	r3, r1
 80033da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	80002400 	.word	0x80002400
 8003408:	fe00e800 	.word	0xfe00e800

0800340c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d007      	beq.n	8003448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	619a      	str	r2, [r3, #24]
  }
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	e022      	b.n	80034ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d01e      	beq.n	80034ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7ff f96f 	bl	8002750 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d113      	bne.n	80034ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e00f      	b.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d0cd      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e0:	e02c      	b.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f8ea 	bl	80036c0 <I2C_IsErrorOccurred>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e02a      	b.n	800354c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d01e      	beq.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7ff f927 	bl	8002750 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d1cb      	bne.n	80034e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003560:	e028      	b.n	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f8aa 	bl	80036c0 <I2C_IsErrorOccurred>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e026      	b.n	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7ff f8eb 	bl	8002750 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d113      	bne.n	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e007      	b.n	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d1cf      	bne.n	8003562 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035d8:	e064      	b.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f86e 	bl	80036c0 <I2C_IsErrorOccurred>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e062      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d138      	bne.n	800366e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d105      	bne.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e04e      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b10      	cmp	r3, #16
 8003622:	d107      	bne.n	8003634 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2204      	movs	r2, #4
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
 8003632:	e002      	b.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2220      	movs	r2, #32
 8003640:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800364e:	400b      	ands	r3, r1
 8003650:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e022      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7ff f86f 	bl	8002750 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e007      	b.n	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d193      	bne.n	80035da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	fe00e800 	.word	0xfe00e800

080036c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d075      	beq.n	80037d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036f4:	e056      	b.n	80037a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d052      	beq.n	80037a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7ff f827 	bl	8002750 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_IsErrorOccurred+0x54>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d147      	bne.n	80037a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003726:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003736:	d12e      	bne.n	8003796 <I2C_IsErrorOccurred+0xd6>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373e:	d02a      	beq.n	8003796 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b20      	cmp	r3, #32
 8003744:	d027      	beq.n	8003796 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003754:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003756:	f7fe fffb 	bl	8002750 <HAL_GetTick>
 800375a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800375c:	e01b      	b.n	8003796 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800375e:	f7fe fff7 	bl	8002750 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b19      	cmp	r3, #25
 800376a:	d914      	bls.n	8003796 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d1dc      	bne.n	800375e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d003      	beq.n	80037ba <I2C_IsErrorOccurred+0xfa>
 80037b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d09d      	beq.n	80036f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f043 0308 	orr.w	r3, r3, #8
 8003812:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01c      	beq.n	8003888 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fddc 	bl	800340c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <I2C_IsErrorOccurred+0x1d4>)
 8003860:	400b      	ands	r3, r1
 8003862:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	fe00e800 	.word	0xfe00e800

08003898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	4613      	mov	r3, r2
 80038a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b0:	7a7b      	ldrb	r3, [r7, #9]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038c6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	0d5b      	lsrs	r3, r3, #21
 80038d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <I2C_TransferConfig+0x60>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	43db      	mvns	r3, r3
 80038dc:	ea02 0103 	and.w	r1, r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	03ff63ff 	.word	0x03ff63ff

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2c:	b08f      	sub	sp, #60	; 0x3c
 8003a2e:	af0a      	add	r7, sp, #40	; 0x28
 8003a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e116      	b.n	8003c6a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe fb04 	bl	8002064 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f003 ff74 	bl	8007968 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	687e      	ldr	r6, [r7, #4]
 8003a88:	466d      	mov	r5, sp
 8003a8a:	f106 0410 	add.w	r4, r6, #16
 8003a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a9e:	1d33      	adds	r3, r6, #4
 8003aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aa2:	6838      	ldr	r0, [r7, #0]
 8003aa4:	f003 ff08 	bl	80078b8 <USB_CoreInit>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0d7      	b.n	8003c6a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 ff62 	bl	800798a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e04a      	b.n	8003b62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	333d      	adds	r3, #61	; 0x3d
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	333c      	adds	r3, #60	; 0x3c
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
 8003af8:	b298      	uxth	r0, r3
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3342      	adds	r3, #66	; 0x42
 8003b08:	4602      	mov	r2, r0
 8003b0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b20:	7bfa      	ldrb	r2, [r7, #15]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3344      	adds	r3, #68	; 0x44
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3348      	adds	r3, #72	; 0x48
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3350      	adds	r3, #80	; 0x50
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d3af      	bcc.n	8003acc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	e044      	b.n	8003bfc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b72:	7bfa      	ldrb	r2, [r7, #15]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3b5      	bcc.n	8003b72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	687e      	ldr	r6, [r7, #4]
 8003c0e:	466d      	mov	r5, sp
 8003c10:	f106 0410 	add.w	r4, r6, #16
 8003c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c20:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c24:	1d33      	adds	r3, r6, #4
 8003c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c28:	6838      	ldr	r0, [r7, #0]
 8003c2a:	f003 fefb 	bl	8007a24 <USB_DevInit>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e014      	b.n	8003c6a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f80b 	bl	8003c74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 f8b5 	bl	8007dd2 <USB_DevDisconnect>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	10000003 	.word	0x10000003

08003cbc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e291      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8087 	beq.w	8003e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d00:	4b96      	ldr	r3, [pc, #600]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d00c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0c:	4b93      	ldr	r3, [pc, #588]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d112      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62>
 8003d18:	4b90      	ldr	r3, [pc, #576]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d24:	d10b      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d26:	4b8d      	ldr	r3, [pc, #564]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x130>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d168      	bne.n	8003e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e26b      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x7a>
 8003d48:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a83      	ldr	r2, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e02e      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x9c>
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7e      	ldr	r2, [pc, #504]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b7c      	ldr	r3, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7b      	ldr	r2, [pc, #492]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003d82:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a72      	ldr	r2, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b6c      	ldr	r3, [pc, #432]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6b      	ldr	r2, [pc, #428]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fcc8 	bl	8002750 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fcc4 	bl	8002750 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e21f      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fcb4 	bl	8002750 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fcb0 	bl	8002750 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e20b      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x110>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d069      	beq.n	8003eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e26:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x190>
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1df      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	493d      	ldr	r1, [pc, #244]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e040      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc66 	bl	8002750 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fe fc62 	bl	8002750 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1bd      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4929      	ldr	r1, [pc, #164]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fc42 	bl	8002750 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fe fc3e 	bl	8002750 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e199      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d038      	beq.n	8003f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d019      	beq.n	8003f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fc1f 	bl	8002750 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe fc1b 	bl	8002750 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e176      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x23a>
 8003f34:	e01a      	b.n	8003f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe fc05 	bl	8002750 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fc01 	bl	8002750 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d903      	bls.n	8003f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e15c      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
 8003f5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a4 	beq.w	80040c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a87      	ldr	r2, [pc, #540]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa2:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fae:	4b7f      	ldr	r3, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7e      	ldr	r2, [pc, #504]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe fbc9 	bl	8002750 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe fbc5 	bl	8002750 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	; 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e120      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd4:	4b75      	ldr	r3, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31a>
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	e02d      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x33c>
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a69      	ldr	r2, [pc, #420]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a66      	ldr	r2, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	e01c      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d10c      	bne.n	800403a <HAL_RCC_OscConfig+0x35e>
 8004020:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a60      	ldr	r2, [pc, #384]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a5d      	ldr	r2, [pc, #372]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	e00b      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 800403a:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe fb79 	bl	8002750 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe fb75 	bl	8002750 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0ce      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ee      	beq.n	8004062 <HAL_RCC_OscConfig+0x386>
 8004084:	e014      	b.n	80040b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe fb63 	bl	8002750 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fe fb5f 	bl	8002750 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ee      	bne.n	800408e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80a4 	beq.w	8004214 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040cc:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d06b      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d149      	bne.n	8004174 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a30      	ldr	r2, [pc, #192]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fb30 	bl	8002750 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe fb2c 	bl	8002750 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e087      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	3b01      	subs	r3, #1
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	4313      	orrs	r3, r2
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800413a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe fb00 	bl	8002750 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004154:	f7fe fafc 	bl	8002750 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e057      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x478>
 8004172:	e04f      	b.n	8004214 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004180:	f7fe fae6 	bl	8002750 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004188:	f7fe fae2 	bl	8002750 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e03d      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCC_OscConfig+0x4cc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x4ac>
 80041a6:	e035      	b.n	8004214 <HAL_RCC_OscConfig+0x538>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <HAL_RCC_OscConfig+0x544>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d028      	beq.n	8004210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d121      	bne.n	8004210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d11a      	bne.n	8004210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d111      	bne.n	8004210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	3b01      	subs	r3, #1
 80041fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800

08004224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0d0      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d910      	bls.n	800426c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 020f 	bic.w	r2, r3, #15
 8004252:	4965      	ldr	r1, [pc, #404]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b63      	ldr	r3, [pc, #396]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0b8      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004284:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a58      	ldr	r2, [pc, #352]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800428e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800429c:	4b53      	ldr	r3, [pc, #332]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	4a52      	ldr	r2, [pc, #328]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b50      	ldr	r3, [pc, #320]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	494d      	ldr	r1, [pc, #308]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d040      	beq.n	8004348 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d115      	bne.n	8004306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e07f      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d107      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e073      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06b      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004306:	4b39      	ldr	r3, [pc, #228]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f023 0203 	bic.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4936      	ldr	r1, [pc, #216]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fe fa1a 	bl	8002750 <HAL_GetTick>
 800431c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	e00a      	b.n	8004336 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004320:	f7fe fa16 	bl	8002750 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e053      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004336:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 020c 	and.w	r2, r3, #12
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	429a      	cmp	r2, r3
 8004346:	d1eb      	bne.n	8004320 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004348:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d210      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 020f 	bic.w	r2, r3, #15
 800435e:	4922      	ldr	r1, [pc, #136]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	d001      	beq.n	8004378 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e032      	b.n	80043de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4916      	ldr	r1, [pc, #88]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	490e      	ldr	r1, [pc, #56]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043b6:	f000 f821 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043ba:	4602      	mov	r2, r0
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCC_ClockConfig+0x1c8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	490a      	ldr	r1, [pc, #40]	; (80043f0 <HAL_RCC_ClockConfig+0x1cc>)
 80043c8:	5ccb      	ldrb	r3, [r1, r3]
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1d0>)
 80043d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1d4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe f976 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023c00 	.word	0x40023c00
 80043ec:	40023800 	.word	0x40023800
 80043f0:	0800d0ac 	.word	0x0800d0ac
 80043f4:	20000068 	.word	0x20000068
 80043f8:	2000006c 	.word	0x2000006c

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004414:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b08      	cmp	r3, #8
 800441e:	d00d      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0x40>
 8004420:	2b08      	cmp	r3, #8
 8004422:	f200 80bd 	bhi.w	80045a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x34>
 800442a:	2b04      	cmp	r3, #4
 800442c:	d003      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x3a>
 800442e:	e0b7      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004432:	60bb      	str	r3, [r7, #8]
      break;
 8004434:	e0b7      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004438:	60bb      	str	r3, [r7, #8]
      break;
 800443a:	e0b4      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800443c:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004444:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004446:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d04d      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004452:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	099b      	lsrs	r3, r3, #6
 8004458:	461a      	mov	r2, r3
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	ea02 0800 	and.w	r8, r2, r0
 800446a:	ea03 0901 	and.w	r9, r3, r1
 800446e:	4640      	mov	r0, r8
 8004470:	4649      	mov	r1, r9
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	014b      	lsls	r3, r1, #5
 800447c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004480:	0142      	lsls	r2, r0, #5
 8004482:	4610      	mov	r0, r2
 8004484:	4619      	mov	r1, r3
 8004486:	ebb0 0008 	subs.w	r0, r0, r8
 800448a:	eb61 0109 	sbc.w	r1, r1, r9
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	018b      	lsls	r3, r1, #6
 8004498:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800449c:	0182      	lsls	r2, r0, #6
 800449e:	1a12      	subs	r2, r2, r0
 80044a0:	eb63 0301 	sbc.w	r3, r3, r1
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	00d9      	lsls	r1, r3, #3
 80044ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b2:	00d0      	lsls	r0, r2, #3
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	eb12 0208 	adds.w	r2, r2, r8
 80044bc:	eb43 0309 	adc.w	r3, r3, r9
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	0259      	lsls	r1, r3, #9
 80044ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044ce:	0250      	lsls	r0, r2, #9
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f7fc fbf2 	bl	8000cc8 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e04a      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	461a      	mov	r2, r3
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	ea02 0400 	and.w	r4, r2, r0
 8004506:	ea03 0501 	and.w	r5, r3, r1
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	014b      	lsls	r3, r1, #5
 8004518:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800451c:	0142      	lsls	r2, r0, #5
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	1b00      	subs	r0, r0, r4
 8004524:	eb61 0105 	sbc.w	r1, r1, r5
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	018b      	lsls	r3, r1, #6
 8004532:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004536:	0182      	lsls	r2, r0, #6
 8004538:	1a12      	subs	r2, r2, r0
 800453a:	eb63 0301 	sbc.w	r3, r3, r1
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	00d9      	lsls	r1, r3, #3
 8004548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800454c:	00d0      	lsls	r0, r2, #3
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	1912      	adds	r2, r2, r4
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	0299      	lsls	r1, r3, #10
 8004562:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004566:	0290      	lsls	r0, r2, #10
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f7fc fba6 	bl	8000cc8 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4613      	mov	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	60bb      	str	r3, [r7, #8]
      break;
 800459e:	e002      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045a2:	60bb      	str	r3, [r7, #8]
      break;
 80045a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a6:	68bb      	ldr	r3, [r7, #8]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	007a1200 	.word	0x007a1200

080045c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20000068 	.word	0x20000068

080045d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045dc:	f7ff fff0 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	0800d0bc 	.word	0x0800d0bc

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004604:	f7ff ffdc 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0b5b      	lsrs	r3, r3, #13
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	0800d0bc 	.word	0x0800d0bc

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004650:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a68      	ldr	r2, [pc, #416]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800465a:	6093      	str	r3, [r2, #8]
 800465c:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	4964      	ldr	r1, [pc, #400]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d017      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004682:	4b5d      	ldr	r3, [pc, #372]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	4959      	ldr	r1, [pc, #356]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046be:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	494a      	ldr	r1, [pc, #296]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 808b 	beq.w	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	4a39      	ldr	r2, [pc, #228]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	6413      	str	r3, [r2, #64]	; 0x40
 8004718:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a34      	ldr	r2, [pc, #208]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004730:	f7fe f80e 	bl	8002750 <HAL_GetTick>
 8004734:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fe f80a 	bl	8002750 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e357      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d035      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d02e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004774:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800479c:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d114      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd ffd2 	bl	8002750 <HAL_GetTick>
 80047ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd ffce 	bl	8002750 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e319      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ee      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047de:	d111      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ee:	400b      	ands	r3, r1
 80047f0:	4901      	ldr	r1, [pc, #4]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
 80047f6:	e00b      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40007000 	.word	0x40007000
 8004800:	0ffffcff 	.word	0x0ffffcff
 8004804:	4bb1      	ldr	r3, [pc, #708]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4ab0      	ldr	r2, [pc, #704]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800480a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800480e:	6093      	str	r3, [r2, #8]
 8004810:	4bae      	ldr	r3, [pc, #696]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	49ab      	ldr	r1, [pc, #684]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800481e:	4313      	orrs	r3, r2
 8004820:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800482e:	4ba7      	ldr	r3, [pc, #668]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004834:	4aa5      	ldr	r2, [pc, #660]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800483a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800483e:	4ba3      	ldr	r3, [pc, #652]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004840:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	49a0      	ldr	r1, [pc, #640]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800485c:	4b9b      	ldr	r3, [pc, #620]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486a:	4998      	ldr	r1, [pc, #608]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800487e:	4b93      	ldr	r3, [pc, #588]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488c:	498f      	ldr	r1, [pc, #572]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048a0:	4b8a      	ldr	r3, [pc, #552]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ae:	4987      	ldr	r1, [pc, #540]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048c2:	4b82      	ldr	r3, [pc, #520]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	497e      	ldr	r1, [pc, #504]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e4:	4b79      	ldr	r3, [pc, #484]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	4976      	ldr	r1, [pc, #472]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004906:	4b71      	ldr	r3, [pc, #452]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f023 020c 	bic.w	r2, r3, #12
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	496d      	ldr	r1, [pc, #436]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004928:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	4965      	ldr	r1, [pc, #404]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494a:	4b60      	ldr	r3, [pc, #384]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	495c      	ldr	r1, [pc, #368]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	4954      	ldr	r1, [pc, #336]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800498e:	4b4f      	ldr	r3, [pc, #316]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	494b      	ldr	r1, [pc, #300]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049b0:	4b46      	ldr	r3, [pc, #280]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049be:	4943      	ldr	r1, [pc, #268]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e0:	493a      	ldr	r1, [pc, #232]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f4:	4b35      	ldr	r3, [pc, #212]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a02:	4932      	ldr	r1, [pc, #200]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d011      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a16:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a24:	4929      	ldr	r1, [pc, #164]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a56:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a64:	4919      	ldr	r1, [pc, #100]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a88:	4910      	ldr	r1, [pc, #64]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d006      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80d9 	beq.w	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab0:	f7fd fe4e 	bl	8002750 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ab8:	f7fd fe4a 	bl	8002750 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d904      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e197      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1ed      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d021      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004af0:	4b64      	ldr	r3, [pc, #400]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004afe:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	019a      	lsls	r2, r3, #6
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	071b      	lsls	r3, r3, #28
 8004b24:	4957      	ldr	r1, [pc, #348]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02e      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b56:	d129      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b58:	4b4a      	ldr	r3, [pc, #296]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b66:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6c:	0f1b      	lsrs	r3, r3, #28
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	019a      	lsls	r2, r3, #6
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	071b      	lsls	r3, r3, #28
 8004b8c:	493d      	ldr	r1, [pc, #244]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9a:	f023 021f 	bic.w	r2, r3, #31
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4937      	ldr	r1, [pc, #220]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbe:	0e1b      	lsrs	r3, r3, #24
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bcc:	0f1b      	lsrs	r3, r3, #28
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	019a      	lsls	r2, r3, #6
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	431a      	orrs	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	071b      	lsls	r3, r3, #28
 8004bec:	4925      	ldr	r1, [pc, #148]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	019a      	lsls	r2, r3, #6
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	071b      	lsls	r3, r3, #28
 8004c1c:	4919      	ldr	r1, [pc, #100]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd fd8e 	bl	8002750 <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c38:	f7fd fd8a 	bl	8002750 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0d7      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 80cd 	bne.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fd fd71 	bl	8002750 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c72:	f7fd fd6d 	bl	8002750 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b64      	cmp	r3, #100	; 0x64
 8004c7e:	d903      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0ba      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c88:	4b5e      	ldr	r3, [pc, #376]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c94:	d0ed      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02e      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d12a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cbe:	4b51      	ldr	r3, [pc, #324]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ccc:	4b4d      	ldr	r3, [pc, #308]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	0f1b      	lsrs	r3, r3, #28
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	4944      	ldr	r1, [pc, #272]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cfa:	4b42      	ldr	r3, [pc, #264]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	493d      	ldr	r1, [pc, #244]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d022      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d28:	d11d      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	0e1b      	lsrs	r3, r3, #24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d38:	4b32      	ldr	r3, [pc, #200]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	0f1b      	lsrs	r3, r3, #28
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	431a      	orrs	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	4929      	ldr	r1, [pc, #164]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d028      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	0e1b      	lsrs	r3, r3, #24
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	019a      	lsls	r2, r3, #6
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	071b      	lsls	r3, r3, #28
 8004da6:	4917      	ldr	r1, [pc, #92]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4911      	ldr	r1, [pc, #68]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fd fcbe 	bl	8002750 <HAL_GetTick>
 8004dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dd8:	f7fd fcba 	bl	8002750 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e007      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df6:	d1ef      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800

08004e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e049      	b.n	8004eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc fff4 	bl	8001e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fdec 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e04c      	b.n	8004f6a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <HAL_TIM_Base_Start+0xc0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d022      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eea:	d01d      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <HAL_TIM_Base_Start+0xc4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d018      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <HAL_TIM_Base_Start+0xc8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d013      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <HAL_TIM_Base_Start+0xcc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00e      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <HAL_TIM_Base_Start+0xd0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d009      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <HAL_TIM_Base_Start+0xd4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d004      	beq.n	8004f28 <HAL_TIM_Base_Start+0x70>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1b      	ldr	r2, [pc, #108]	; (8004f90 <HAL_TIM_Base_Start+0xd8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d115      	bne.n	8004f54 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_TIM_Base_Start+0xdc>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d015      	beq.n	8004f66 <HAL_TIM_Base_Start+0xae>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f40:	d011      	beq.n	8004f66 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	e008      	b.n	8004f66 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40010400 	.word	0x40010400
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40001800 	.word	0x40001800
 8004f94:	00010007 	.word	0x00010007

08004f98 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10f      	bne.n	8004fd0 <HAL_TIM_Base_Stop+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a1a      	ldr	r2, [r3, #32]
 8004fb6:	f240 4344 	movw	r3, #1092	; 0x444
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <HAL_TIM_Base_Stop+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e054      	b.n	80050aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d01d      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <HAL_TIM_Base_Start_IT+0xe4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d115      	bne.n	8005094 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <HAL_TIM_Base_Start_IT+0xec>)
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d015      	beq.n	80050a6 <HAL_TIM_Base_Start_IT+0xbe>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005080:	d011      	beq.n	80050a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	e008      	b.n	80050a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40001800 	.word	0x40001800
 80050d4:	00010007 	.word	0x00010007

080050d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0201 	bic.w	r2, r2, #1
 80050ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a1a      	ldr	r2, [r3, #32]
 80050f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10f      	bne.n	8005120 <HAL_TIM_Base_Stop_IT+0x48>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6a1a      	ldr	r2, [r3, #32]
 8005106:	f240 4344 	movw	r3, #1092	; 0x444
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_TIM_Base_Stop_IT+0x48>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e049      	b.n	80051dc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7fc feb9 	bl	8001ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3304      	adds	r3, #4
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f000 fc55 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <HAL_TIM_PWM_Start+0x24>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	bf14      	ite	ne
 8005200:	2301      	movne	r3, #1
 8005202:	2300      	moveq	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	e03c      	b.n	8005282 <HAL_TIM_PWM_Start+0x9e>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b04      	cmp	r3, #4
 800520c:	d109      	bne.n	8005222 <HAL_TIM_PWM_Start+0x3e>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	bf14      	ite	ne
 800521a:	2301      	movne	r3, #1
 800521c:	2300      	moveq	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e02f      	b.n	8005282 <HAL_TIM_PWM_Start+0x9e>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d109      	bne.n	800523c <HAL_TIM_PWM_Start+0x58>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e022      	b.n	8005282 <HAL_TIM_PWM_Start+0x9e>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b0c      	cmp	r3, #12
 8005240:	d109      	bne.n	8005256 <HAL_TIM_PWM_Start+0x72>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b01      	cmp	r3, #1
 800524c:	bf14      	ite	ne
 800524e:	2301      	movne	r3, #1
 8005250:	2300      	moveq	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e015      	b.n	8005282 <HAL_TIM_PWM_Start+0x9e>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d109      	bne.n	8005270 <HAL_TIM_PWM_Start+0x8c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	e008      	b.n	8005282 <HAL_TIM_PWM_Start+0x9e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	bf14      	ite	ne
 800527c:	2301      	movne	r3, #1
 800527e:	2300      	moveq	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e092      	b.n	80053b0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start+0xb6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005298:	e023      	b.n	80052e2 <HAL_TIM_PWM_Start+0xfe>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start+0xc6>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a8:	e01b      	b.n	80052e2 <HAL_TIM_PWM_Start+0xfe>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0xd6>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b8:	e013      	b.n	80052e2 <HAL_TIM_PWM_Start+0xfe>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b0c      	cmp	r3, #12
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0xe6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_PWM_Start+0xfe>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0xf6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	e003      	b.n	80052e2 <HAL_TIM_PWM_Start+0xfe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 ff32 	bl	8006154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <HAL_TIM_PWM_Start+0x1d4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIM_PWM_Start+0x120>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <HAL_TIM_PWM_Start+0x1d8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <HAL_TIM_PWM_Start+0x124>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <HAL_TIM_PWM_Start+0x126>
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a25      	ldr	r2, [pc, #148]	; (80053b8 <HAL_TIM_PWM_Start+0x1d4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d01d      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <HAL_TIM_PWM_Start+0x1dc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <HAL_TIM_PWM_Start+0x1e0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1f      	ldr	r2, [pc, #124]	; (80053c8 <HAL_TIM_PWM_Start+0x1e4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_TIM_PWM_Start+0x1d8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <HAL_TIM_PWM_Start+0x1e8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIM_PWM_Start+0x18a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <HAL_TIM_PWM_Start+0x1ec>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d115      	bne.n	800539a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <HAL_TIM_PWM_Start+0x1f0>)
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d015      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1c8>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005386:	d011      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	e008      	b.n	80053ac <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e000      	b.n	80053ae <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40010400 	.word	0x40010400
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40001800 	.word	0x40001800
 80053d4:	00010007 	.word	0x00010007

080053d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d122      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d11b      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0202 	mvn.w	r2, #2
 8005404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fae4 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fad6 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fae7 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0204 	mvn.w	r2, #4
 8005458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 faba 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 faac 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fabd 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0208 	mvn.w	r2, #8
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2204      	movs	r2, #4
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa90 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa82 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa93 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0210 	mvn.w	r2, #16
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2208      	movs	r2, #8
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa66 	bl	80059e8 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa58 	bl	80059d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa69 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0201 	mvn.w	r2, #1
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fc f81c 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fea4 	bl	80062d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a2:	2b80      	cmp	r3, #128	; 0x80
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fe97 	bl	80062e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d10e      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d107      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fa17 	bl	8005a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d10e      	bne.n	800560e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d107      	bne.n	800560e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0220 	mvn.w	r2, #32
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fe57 	bl	80062bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005632:	2302      	movs	r3, #2
 8005634:	e0ff      	b.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b14      	cmp	r3, #20
 8005642:	f200 80f0 	bhi.w	8005826 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	080056a1 	.word	0x080056a1
 8005650:	08005827 	.word	0x08005827
 8005654:	08005827 	.word	0x08005827
 8005658:	08005827 	.word	0x08005827
 800565c:	080056e1 	.word	0x080056e1
 8005660:	08005827 	.word	0x08005827
 8005664:	08005827 	.word	0x08005827
 8005668:	08005827 	.word	0x08005827
 800566c:	08005723 	.word	0x08005723
 8005670:	08005827 	.word	0x08005827
 8005674:	08005827 	.word	0x08005827
 8005678:	08005827 	.word	0x08005827
 800567c:	08005763 	.word	0x08005763
 8005680:	08005827 	.word	0x08005827
 8005684:	08005827 	.word	0x08005827
 8005688:	08005827 	.word	0x08005827
 800568c:	080057a5 	.word	0x080057a5
 8005690:	08005827 	.word	0x08005827
 8005694:	08005827 	.word	0x08005827
 8005698:	08005827 	.word	0x08005827
 800569c:	080057e5 	.word	0x080057e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fa5c 	bl	8005b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0204 	bic.w	r2, r2, #4
 80056ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
      break;
 80056de:	e0a5      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 faae 	bl	8005c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
      break;
 8005720:	e084      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb05 	bl	8005d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0208 	orr.w	r2, r2, #8
 800573c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0204 	bic.w	r2, r2, #4
 800574c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69d9      	ldr	r1, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
      break;
 8005760:	e064      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fb5b 	bl	8005e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
      break;
 80057a2:	e043      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fb92 	bl	8005ed4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e2:	e023      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fbc4 	bl	8005f78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005824:	e002      	b.n	800582c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
      break;
 800582a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop

08005840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_ConfigClockSource+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e0b4      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x186>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4b56      	ldr	r3, [pc, #344]	; (80059d0 <HAL_TIM_ConfigClockSource+0x190>)
 8005878:	4013      	ands	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005894:	d03e      	beq.n	8005914 <HAL_TIM_ConfigClockSource+0xd4>
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	f200 8087 	bhi.w	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	f000 8086 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x172>
 80058a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058aa:	d87f      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b70      	cmp	r3, #112	; 0x70
 80058ae:	d01a      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0xa6>
 80058b0:	2b70      	cmp	r3, #112	; 0x70
 80058b2:	d87b      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b60      	cmp	r3, #96	; 0x60
 80058b6:	d050      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x11a>
 80058b8:	2b60      	cmp	r3, #96	; 0x60
 80058ba:	d877      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b50      	cmp	r3, #80	; 0x50
 80058be:	d03c      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xfa>
 80058c0:	2b50      	cmp	r3, #80	; 0x50
 80058c2:	d873      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d058      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x13a>
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	d86f      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d064      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	2b30      	cmp	r3, #48	; 0x30
 80058d2:	d86b      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d060      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d867      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d05c      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d05a      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	e062      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6899      	ldr	r1, [r3, #8]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f000 fc0d 	bl	8006114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
      break;
 8005912:	e04f      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6899      	ldr	r1, [r3, #8]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f000 fbf6 	bl	8006114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005936:	609a      	str	r2, [r3, #8]
      break;
 8005938:	e03c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fb6a 	bl	8006020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2150      	movs	r1, #80	; 0x50
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fbc3 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005958:	e02c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	461a      	mov	r2, r3
 8005968:	f000 fb89 	bl	800607e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2160      	movs	r1, #96	; 0x60
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fbb3 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005978:	e01c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fb4a 	bl	8006020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2140      	movs	r1, #64	; 0x40
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fba3 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 8005998:	e00c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f000 fb9a 	bl	80060de <TIM_ITRx_SetConfig>
      break;
 80059aa:	e003      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	fffeff88 	.word	0xfffeff88

080059d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3b      	ldr	r2, [pc, #236]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d027      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d023      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2b      	ldr	r2, [pc, #172]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01f      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d017      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a28      	ldr	r2, [pc, #160]	; (8005b4c <TIM_Base_SetConfig+0x128>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a27      	ldr	r2, [pc, #156]	; (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00f      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <TIM_Base_SetConfig+0x130>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <TIM_Base_SetConfig+0x134>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a24      	ldr	r2, [pc, #144]	; (8005b5c <TIM_Base_SetConfig+0x138>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <TIM_Base_SetConfig+0x13c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	615a      	str	r2, [r3, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	40001800 	.word	0x40001800
 8005b5c:	40001c00 	.word	0x40001c00
 8005b60:	40002000 	.word	0x40002000

08005b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f023 0201 	bic.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <TIM_OC1_SetConfig+0xd8>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 0303 	bic.w	r3, r3, #3
 8005b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0302 	bic.w	r3, r3, #2
 8005bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <TIM_OC1_SetConfig+0xdc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_OC1_SetConfig+0x64>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <TIM_OC1_SetConfig+0xe0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d10c      	bne.n	8005be2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0308 	bic.w	r3, r3, #8
 8005bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 0304 	bic.w	r3, r3, #4
 8005be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <TIM_OC1_SetConfig+0xdc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <TIM_OC1_SetConfig+0x8e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a15      	ldr	r2, [pc, #84]	; (8005c44 <TIM_OC1_SetConfig+0xe0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d111      	bne.n	8005c16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	621a      	str	r2, [r3, #32]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	fffeff8f 	.word	0xfffeff8f
 8005c40:	40010000 	.word	0x40010000
 8005c44:	40010400 	.word	0x40010400

08005c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0210 	bic.w	r2, r3, #16
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <TIM_OC2_SetConfig+0xe4>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0320 	bic.w	r3, r3, #32
 8005c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <TIM_OC2_SetConfig+0xe8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_OC2_SetConfig+0x68>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a22      	ldr	r2, [pc, #136]	; (8005d34 <TIM_OC2_SetConfig+0xec>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d10d      	bne.n	8005ccc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <TIM_OC2_SetConfig+0xe8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC2_SetConfig+0x94>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <TIM_OC2_SetConfig+0xec>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d113      	bne.n	8005d04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	feff8fff 	.word	0xfeff8fff
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <TIM_OC3_SetConfig+0xe0>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a22      	ldr	r2, [pc, #136]	; (8005e1c <TIM_OC3_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0x66>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <TIM_OC3_SetConfig+0xe8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10d      	bne.n	8005dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <TIM_OC3_SetConfig+0xe4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC3_SetConfig+0x92>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a16      	ldr	r2, [pc, #88]	; (8005e20 <TIM_OC3_SetConfig+0xe8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d113      	bne.n	8005df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
}
 8005e0c:	bf00      	nop
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	fffeff8f 	.word	0xfffeff8f
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <TIM_OC4_SetConfig+0xa4>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <TIM_OC4_SetConfig+0xa8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC4_SetConfig+0x68>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <TIM_OC4_SetConfig+0xac>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	019b      	lsls	r3, r3, #6
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	feff8fff 	.word	0xfeff8fff
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <TIM_OC5_SetConfig+0x98>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a12      	ldr	r2, [pc, #72]	; (8005f70 <TIM_OC5_SetConfig+0x9c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC5_SetConfig+0x5e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <TIM_OC5_SetConfig+0xa0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d109      	bne.n	8005f46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	621a      	str	r2, [r3, #32]
}
 8005f60:	bf00      	nop
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	fffeff8f 	.word	0xfffeff8f
 8005f70:	40010000 	.word	0x40010000
 8005f74:	40010400 	.word	0x40010400

08005f78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <TIM_OC6_SetConfig+0x9c>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	051b      	lsls	r3, r3, #20
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <TIM_OC6_SetConfig+0xa0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC6_SetConfig+0x60>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <TIM_OC6_SetConfig+0xa4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d109      	bne.n	8005fec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	029b      	lsls	r3, r3, #10
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	feff8fff 	.word	0xfeff8fff
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400

08006020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0201 	bic.w	r2, r3, #1
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f023 030a 	bic.w	r3, r3, #10
 800605c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f043 0307 	orr.w	r3, r3, #7
 8006100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800612e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	431a      	orrs	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	609a      	str	r2, [r3, #8]
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	2201      	movs	r2, #1
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1a      	ldr	r2, [r3, #32]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	43db      	mvns	r3, r3
 8006176:	401a      	ands	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	431a      	orrs	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e06d      	b.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a30      	ldr	r2, [pc, #192]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a20      	ldr	r2, [pc, #128]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d022      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d01d      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d018      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1c      	ldr	r2, [pc, #112]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d013      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a1a      	ldr	r2, [pc, #104]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00e      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d009      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d004      	beq.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d10c      	bne.n	8006282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800626e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4313      	orrs	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40001800 	.word	0x40001800

080062bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e040      	b.n	800638c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fb fe56 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	; 0x24
 8006324:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fbf8 	bl	8006b2c <UART_SetConfig>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e022      	b.n	800638c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fe4e 	bl	8006ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fed5 	bl	8007134 <UART_CheckIdleState>
 800638a:	4603      	mov	r3, r0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	; 0x28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	f040 8081 	bne.w	80064b0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_UART_Transmit+0x26>
 80063b4:	88fb      	ldrh	r3, [r7, #6]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e079      	b.n	80064b2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_UART_Transmit+0x38>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e072      	b.n	80064b2 <HAL_UART_Transmit+0x11e>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2221      	movs	r2, #33	; 0x21
 80063e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063e2:	f7fc f9b5 	bl	8002750 <HAL_GetTick>
 80063e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006400:	d108      	bne.n	8006414 <HAL_UART_Transmit+0x80>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d104      	bne.n	8006414 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e003      	b.n	800641c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006424:	e02c      	b.n	8006480 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 feb2 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e038      	b.n	80064b2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3302      	adds	r3, #2
 800645a:	61bb      	str	r3, [r7, #24]
 800645c:	e007      	b.n	800646e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	3301      	adds	r3, #1
 800646c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1cc      	bne.n	8006426 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2200      	movs	r2, #0
 8006494:	2140      	movs	r1, #64	; 0x40
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fe7f 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e005      	b.n	80064b2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b08a      	sub	sp, #40	; 0x28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	4613      	mov	r3, r2
 80064c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d13d      	bne.n	800654c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_UART_Receive_IT+0x22>
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e036      	b.n	800654e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <HAL_UART_Receive_IT+0x34>
 80064ea:	2302      	movs	r3, #2
 80064ec:	e02f      	b.n	800654e <HAL_UART_Receive_IT+0x94>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	613b      	str	r3, [r7, #16]
   return(result);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	69f9      	ldr	r1, [r7, #28]
 800652e:	6a3a      	ldr	r2, [r7, #32]
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	61bb      	str	r3, [r7, #24]
   return(result);
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e6      	bne.n	800650a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	461a      	mov	r2, r3
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 feee 	bl	8007324 <UART_Start_Receive_IT>
 8006548:	4603      	mov	r3, r0
 800654a:	e000      	b.n	800654e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800654c:	2302      	movs	r3, #2
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3728      	adds	r7, #40	; 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b0ba      	sub	sp, #232	; 0xe8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800657e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006582:	f640 030f 	movw	r3, #2063	; 0x80f
 8006586:	4013      	ands	r3, r2
 8006588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800658c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d115      	bne.n	80065c0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 828f 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
      }
      return;
 80065be:	e289      	b.n	8006ad4 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8117 	beq.w	80067f8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065da:	4b85      	ldr	r3, [pc, #532]	; (80067f0 <HAL_UART_IRQHandler+0x298>)
 80065dc:	4013      	ands	r3, r2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 810a 	beq.w	80067f8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d011      	beq.n	8006614 <HAL_UART_IRQHandler+0xbc>
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d011      	beq.n	8006644 <HAL_UART_IRQHandler+0xec>
 8006620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2202      	movs	r2, #2
 8006632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800663a:	f043 0204 	orr.w	r2, r3, #4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d011      	beq.n	8006674 <HAL_UART_IRQHandler+0x11c>
 8006650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2204      	movs	r2, #4
 8006662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666a:	f043 0202 	orr.w	r2, r3, #2
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800668c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006690:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2208      	movs	r2, #8
 800669e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a6:	f043 0208 	orr.w	r2, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d012      	beq.n	80066e2 <HAL_UART_IRQHandler+0x18a>
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 81f5 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800671c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800672e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006732:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006736:	2b00      	cmp	r3, #0
 8006738:	d04f      	beq.n	80067da <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 febc 	bl	80074b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d141      	bne.n	80067d2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3308      	adds	r3, #8
 8006776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800677a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800677e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1d9      	bne.n	800674e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d013      	beq.n	80067ca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4a13      	ldr	r2, [pc, #76]	; (80067f4 <HAL_UART_IRQHandler+0x29c>)
 80067a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fc f97f 	bl	8002ab2 <HAL_DMA_Abort_IT>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d017      	beq.n	80067ea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	e00f      	b.n	80067ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f998 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	e00b      	b.n	80067ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f994 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	e007      	b.n	80067ea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f990 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067e8:	e176      	b.n	8006ad8 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ea:	bf00      	nop
    return;
 80067ec:	e174      	b.n	8006ad8 <HAL_UART_IRQHandler+0x580>
 80067ee:	bf00      	nop
 80067f0:	04000120 	.word	0x04000120
 80067f4:	0800757f 	.word	0x0800757f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	f040 8144 	bne.w	8006a8a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	f003 0310 	and.w	r3, r3, #16
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 813d 	beq.w	8006a8a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8136 	beq.w	8006a8a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2210      	movs	r2, #16
 8006824:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006830:	2b40      	cmp	r3, #64	; 0x40
 8006832:	f040 80b2 	bne.w	800699a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006842:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 8148 	beq.w	8006adc <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006856:	429a      	cmp	r2, r3
 8006858:	f080 8140 	bcs.w	8006adc <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006862:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006870:	f000 8085 	beq.w	800697e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800689e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1da      	bne.n	8006874 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e1      	bne.n	80068be <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800690a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3308      	adds	r3, #8
 800691a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800691e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006920:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800692c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e3      	bne.n	80068fa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006946:	e853 3f00 	ldrex	r3, [r3]
 800694a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800694c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694e:	f023 0310 	bic.w	r3, r3, #16
 8006952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006960:	65bb      	str	r3, [r7, #88]	; 0x58
 8006962:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800696e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e4      	bne.n	800693e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4618      	mov	r0, r3
 800697a:	f7fc f82a 	bl	80029d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800698a:	b29b      	uxth	r3, r3
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	b29b      	uxth	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f8be 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006998:	e0a0      	b.n	8006adc <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8092 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80069bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 808d 	beq.w	8006ae0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069e8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e4      	bne.n	80069c6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3308      	adds	r3, #8
 8006a1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a20:	633a      	str	r2, [r7, #48]	; 0x30
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e3      	bne.n	80069fc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f023 0310 	bic.w	r3, r3, #16
 8006a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	69b9      	ldr	r1, [r7, #24]
 8006a6e:	69fa      	ldr	r2, [r7, #28]
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	617b      	str	r3, [r7, #20]
   return(result);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e4      	bne.n	8006a46 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f846 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a88:	e02a      	b.n	8006ae0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00e      	beq.n	8006ab4 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01c      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	4798      	blx	r3
    }
    return;
 8006ab2:	e017      	b.n	8006ae4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d012      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00c      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fd6c 	bl	80075aa <UART_EndTransmit_IT>
    return;
 8006ad2:	e008      	b.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
      return;
 8006ad4:	bf00      	nop
 8006ad6:	e006      	b.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
    return;
 8006ad8:	bf00      	nop
 8006ada:	e004      	b.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
      return;
 8006adc:	bf00      	nop
 8006ade:	e002      	b.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
      return;
 8006ae0:	bf00      	nop
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_IRQHandler+0x58e>
    return;
 8006ae4:	bf00      	nop
  }

}
 8006ae6:	37e8      	adds	r7, #232	; 0xe8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4ba7      	ldr	r3, [pc, #668]	; (8006df4 <UART_SetConfig+0x2c8>)
 8006b58:	4013      	ands	r3, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	6979      	ldr	r1, [r7, #20]
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a95      	ldr	r2, [pc, #596]	; (8006df8 <UART_SetConfig+0x2cc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d120      	bne.n	8006bea <UART_SetConfig+0xbe>
 8006ba8:	4b94      	ldr	r3, [pc, #592]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d816      	bhi.n	8006be4 <UART_SetConfig+0xb8>
 8006bb6:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <UART_SetConfig+0x90>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bcd 	.word	0x08006bcd
 8006bc0:	08006bd9 	.word	0x08006bd9
 8006bc4:	08006bd3 	.word	0x08006bd3
 8006bc8:	08006bdf 	.word	0x08006bdf
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e14f      	b.n	8006e72 <UART_SetConfig+0x346>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e14c      	b.n	8006e72 <UART_SetConfig+0x346>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e149      	b.n	8006e72 <UART_SetConfig+0x346>
 8006bde:	2308      	movs	r3, #8
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e146      	b.n	8006e72 <UART_SetConfig+0x346>
 8006be4:	2310      	movs	r3, #16
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e143      	b.n	8006e72 <UART_SetConfig+0x346>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a84      	ldr	r2, [pc, #528]	; (8006e00 <UART_SetConfig+0x2d4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d132      	bne.n	8006c5a <UART_SetConfig+0x12e>
 8006bf4:	4b81      	ldr	r3, [pc, #516]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	f003 030c 	and.w	r3, r3, #12
 8006bfe:	2b0c      	cmp	r3, #12
 8006c00:	d828      	bhi.n	8006c54 <UART_SetConfig+0x128>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0xdc>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c3d 	.word	0x08006c3d
 8006c0c:	08006c55 	.word	0x08006c55
 8006c10:	08006c55 	.word	0x08006c55
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c49 	.word	0x08006c49
 8006c1c:	08006c55 	.word	0x08006c55
 8006c20:	08006c55 	.word	0x08006c55
 8006c24:	08006c55 	.word	0x08006c55
 8006c28:	08006c43 	.word	0x08006c43
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006c4f 	.word	0x08006c4f
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e117      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c42:	2302      	movs	r3, #2
 8006c44:	77fb      	strb	r3, [r7, #31]
 8006c46:	e114      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e111      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c4e:	2308      	movs	r3, #8
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e10e      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c54:	2310      	movs	r3, #16
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e10b      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a69      	ldr	r2, [pc, #420]	; (8006e04 <UART_SetConfig+0x2d8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d120      	bne.n	8006ca6 <UART_SetConfig+0x17a>
 8006c64:	4b65      	ldr	r3, [pc, #404]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c6e:	2b30      	cmp	r3, #48	; 0x30
 8006c70:	d013      	beq.n	8006c9a <UART_SetConfig+0x16e>
 8006c72:	2b30      	cmp	r3, #48	; 0x30
 8006c74:	d814      	bhi.n	8006ca0 <UART_SetConfig+0x174>
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d009      	beq.n	8006c8e <UART_SetConfig+0x162>
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d810      	bhi.n	8006ca0 <UART_SetConfig+0x174>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <UART_SetConfig+0x15c>
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d006      	beq.n	8006c94 <UART_SetConfig+0x168>
 8006c86:	e00b      	b.n	8006ca0 <UART_SetConfig+0x174>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e0f1      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e0ee      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c94:	2304      	movs	r3, #4
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e0eb      	b.n	8006e72 <UART_SetConfig+0x346>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e0e8      	b.n	8006e72 <UART_SetConfig+0x346>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e0e5      	b.n	8006e72 <UART_SetConfig+0x346>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a57      	ldr	r2, [pc, #348]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d120      	bne.n	8006cf2 <UART_SetConfig+0x1c6>
 8006cb0:	4b52      	ldr	r3, [pc, #328]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cba:	2bc0      	cmp	r3, #192	; 0xc0
 8006cbc:	d013      	beq.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc0:	d814      	bhi.n	8006cec <UART_SetConfig+0x1c0>
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d009      	beq.n	8006cda <UART_SetConfig+0x1ae>
 8006cc6:	2b80      	cmp	r3, #128	; 0x80
 8006cc8:	d810      	bhi.n	8006cec <UART_SetConfig+0x1c0>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <UART_SetConfig+0x1a8>
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d006      	beq.n	8006ce0 <UART_SetConfig+0x1b4>
 8006cd2:	e00b      	b.n	8006cec <UART_SetConfig+0x1c0>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e0cb      	b.n	8006e72 <UART_SetConfig+0x346>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	77fb      	strb	r3, [r7, #31]
 8006cde:	e0c8      	b.n	8006e72 <UART_SetConfig+0x346>
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e0c5      	b.n	8006e72 <UART_SetConfig+0x346>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e0c2      	b.n	8006e72 <UART_SetConfig+0x346>
 8006cec:	2310      	movs	r3, #16
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e0bf      	b.n	8006e72 <UART_SetConfig+0x346>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a45      	ldr	r2, [pc, #276]	; (8006e0c <UART_SetConfig+0x2e0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d125      	bne.n	8006d48 <UART_SetConfig+0x21c>
 8006cfc:	4b3f      	ldr	r3, [pc, #252]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d0a:	d017      	beq.n	8006d3c <UART_SetConfig+0x210>
 8006d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d10:	d817      	bhi.n	8006d42 <UART_SetConfig+0x216>
 8006d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d16:	d00b      	beq.n	8006d30 <UART_SetConfig+0x204>
 8006d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1c:	d811      	bhi.n	8006d42 <UART_SetConfig+0x216>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <UART_SetConfig+0x1fe>
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d26:	d006      	beq.n	8006d36 <UART_SetConfig+0x20a>
 8006d28:	e00b      	b.n	8006d42 <UART_SetConfig+0x216>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	77fb      	strb	r3, [r7, #31]
 8006d2e:	e0a0      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d30:	2302      	movs	r3, #2
 8006d32:	77fb      	strb	r3, [r7, #31]
 8006d34:	e09d      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d36:	2304      	movs	r3, #4
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e09a      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e097      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d42:	2310      	movs	r3, #16
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e094      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a30      	ldr	r2, [pc, #192]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d125      	bne.n	8006d9e <UART_SetConfig+0x272>
 8006d52:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d60:	d017      	beq.n	8006d92 <UART_SetConfig+0x266>
 8006d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d66:	d817      	bhi.n	8006d98 <UART_SetConfig+0x26c>
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d00b      	beq.n	8006d86 <UART_SetConfig+0x25a>
 8006d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d72:	d811      	bhi.n	8006d98 <UART_SetConfig+0x26c>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <UART_SetConfig+0x254>
 8006d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d7c:	d006      	beq.n	8006d8c <UART_SetConfig+0x260>
 8006d7e:	e00b      	b.n	8006d98 <UART_SetConfig+0x26c>
 8006d80:	2301      	movs	r3, #1
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e075      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d86:	2302      	movs	r3, #2
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e072      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e06f      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d92:	2308      	movs	r3, #8
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e06c      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e069      	b.n	8006e72 <UART_SetConfig+0x346>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1c      	ldr	r2, [pc, #112]	; (8006e14 <UART_SetConfig+0x2e8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d137      	bne.n	8006e18 <UART_SetConfig+0x2ec>
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <UART_SetConfig+0x2d0>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006db6:	d017      	beq.n	8006de8 <UART_SetConfig+0x2bc>
 8006db8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dbc:	d817      	bhi.n	8006dee <UART_SetConfig+0x2c2>
 8006dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc2:	d00b      	beq.n	8006ddc <UART_SetConfig+0x2b0>
 8006dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc8:	d811      	bhi.n	8006dee <UART_SetConfig+0x2c2>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <UART_SetConfig+0x2aa>
 8006dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd2:	d006      	beq.n	8006de2 <UART_SetConfig+0x2b6>
 8006dd4:	e00b      	b.n	8006dee <UART_SetConfig+0x2c2>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	77fb      	strb	r3, [r7, #31]
 8006dda:	e04a      	b.n	8006e72 <UART_SetConfig+0x346>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	77fb      	strb	r3, [r7, #31]
 8006de0:	e047      	b.n	8006e72 <UART_SetConfig+0x346>
 8006de2:	2304      	movs	r3, #4
 8006de4:	77fb      	strb	r3, [r7, #31]
 8006de6:	e044      	b.n	8006e72 <UART_SetConfig+0x346>
 8006de8:	2308      	movs	r3, #8
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e041      	b.n	8006e72 <UART_SetConfig+0x346>
 8006dee:	2310      	movs	r3, #16
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e03e      	b.n	8006e72 <UART_SetConfig+0x346>
 8006df4:	efff69f3 	.word	0xefff69f3
 8006df8:	40011000 	.word	0x40011000
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	40004400 	.word	0x40004400
 8006e04:	40004800 	.word	0x40004800
 8006e08:	40004c00 	.word	0x40004c00
 8006e0c:	40005000 	.word	0x40005000
 8006e10:	40011400 	.word	0x40011400
 8006e14:	40007800 	.word	0x40007800
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a71      	ldr	r2, [pc, #452]	; (8006fe4 <UART_SetConfig+0x4b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d125      	bne.n	8006e6e <UART_SetConfig+0x342>
 8006e22:	4b71      	ldr	r3, [pc, #452]	; (8006fe8 <UART_SetConfig+0x4bc>)
 8006e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e30:	d017      	beq.n	8006e62 <UART_SetConfig+0x336>
 8006e32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e36:	d817      	bhi.n	8006e68 <UART_SetConfig+0x33c>
 8006e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3c:	d00b      	beq.n	8006e56 <UART_SetConfig+0x32a>
 8006e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e42:	d811      	bhi.n	8006e68 <UART_SetConfig+0x33c>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <UART_SetConfig+0x324>
 8006e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e4c:	d006      	beq.n	8006e5c <UART_SetConfig+0x330>
 8006e4e:	e00b      	b.n	8006e68 <UART_SetConfig+0x33c>
 8006e50:	2300      	movs	r3, #0
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e00d      	b.n	8006e72 <UART_SetConfig+0x346>
 8006e56:	2302      	movs	r3, #2
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e00a      	b.n	8006e72 <UART_SetConfig+0x346>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e007      	b.n	8006e72 <UART_SetConfig+0x346>
 8006e62:	2308      	movs	r3, #8
 8006e64:	77fb      	strb	r3, [r7, #31]
 8006e66:	e004      	b.n	8006e72 <UART_SetConfig+0x346>
 8006e68:	2310      	movs	r3, #16
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e001      	b.n	8006e72 <UART_SetConfig+0x346>
 8006e6e:	2310      	movs	r3, #16
 8006e70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e7a:	d15a      	bne.n	8006f32 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006e7c:	7ffb      	ldrb	r3, [r7, #31]
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d827      	bhi.n	8006ed2 <UART_SetConfig+0x3a6>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x35c>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ead 	.word	0x08006ead
 8006e8c:	08006eb5 	.word	0x08006eb5
 8006e90:	08006ebd 	.word	0x08006ebd
 8006e94:	08006ed3 	.word	0x08006ed3
 8006e98:	08006ec3 	.word	0x08006ec3
 8006e9c:	08006ed3 	.word	0x08006ed3
 8006ea0:	08006ed3 	.word	0x08006ed3
 8006ea4:	08006ed3 	.word	0x08006ed3
 8006ea8:	08006ecb 	.word	0x08006ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7fd fb94 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	61b8      	str	r0, [r7, #24]
        break;
 8006eb2:	e013      	b.n	8006edc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006eb4:	f7fd fba4 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8006eb8:	61b8      	str	r0, [r7, #24]
        break;
 8006eba:	e00f      	b.n	8006edc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ebc:	4b4b      	ldr	r3, [pc, #300]	; (8006fec <UART_SetConfig+0x4c0>)
 8006ebe:	61bb      	str	r3, [r7, #24]
        break;
 8006ec0:	e00c      	b.n	8006edc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec2:	f7fd fa9b 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8006ec6:	61b8      	str	r0, [r7, #24]
        break;
 8006ec8:	e008      	b.n	8006edc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ece:	61bb      	str	r3, [r7, #24]
        break;
 8006ed0:	e004      	b.n	8006edc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8006eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d074      	beq.n	8006fcc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	005a      	lsls	r2, r3, #1
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	441a      	add	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d916      	bls.n	8006f2c <UART_SetConfig+0x400>
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f04:	d212      	bcs.n	8006f2c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f023 030f 	bic.w	r3, r3, #15
 8006f0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	b29a      	uxth	r2, r3
 8006f1c:	89fb      	ldrh	r3, [r7, #14]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	89fa      	ldrh	r2, [r7, #14]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	e04f      	b.n	8006fcc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	77bb      	strb	r3, [r7, #30]
 8006f30:	e04c      	b.n	8006fcc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f32:	7ffb      	ldrb	r3, [r7, #31]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d828      	bhi.n	8006f8a <UART_SetConfig+0x45e>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <UART_SetConfig+0x414>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f6d 	.word	0x08006f6d
 8006f48:	08006f75 	.word	0x08006f75
 8006f4c:	08006f8b 	.word	0x08006f8b
 8006f50:	08006f7b 	.word	0x08006f7b
 8006f54:	08006f8b 	.word	0x08006f8b
 8006f58:	08006f8b 	.word	0x08006f8b
 8006f5c:	08006f8b 	.word	0x08006f8b
 8006f60:	08006f83 	.word	0x08006f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f64:	f7fd fb38 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8006f68:	61b8      	str	r0, [r7, #24]
        break;
 8006f6a:	e013      	b.n	8006f94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6c:	f7fd fb48 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8006f70:	61b8      	str	r0, [r7, #24]
        break;
 8006f72:	e00f      	b.n	8006f94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f74:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <UART_SetConfig+0x4c0>)
 8006f76:	61bb      	str	r3, [r7, #24]
        break;
 8006f78:	e00c      	b.n	8006f94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fd fa3f 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8006f7e:	61b8      	str	r0, [r7, #24]
        break;
 8006f80:	e008      	b.n	8006f94 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f86:	61bb      	str	r3, [r7, #24]
        break;
 8006f88:	e004      	b.n	8006f94 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	77bb      	strb	r3, [r7, #30]
        break;
 8006f92:	bf00      	nop
    }

    if (pclk != 0U)
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d018      	beq.n	8006fcc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	085a      	lsrs	r2, r3, #1
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b0f      	cmp	r3, #15
 8006fb2:	d909      	bls.n	8006fc8 <UART_SetConfig+0x49c>
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fba:	d205      	bcs.n	8006fc8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	e001      	b.n	8006fcc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006fd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	40007c00 	.word	0x40007c00
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	00f42400 	.word	0x00f42400

08006ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f003 0308 	and.w	r3, r3, #8
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01a      	beq.n	8007106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ee:	d10a      	bne.n	8007106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	605a      	str	r2, [r3, #4]
  }
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af02      	add	r7, sp, #8
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007144:	f7fb fb04 	bl	8002750 <HAL_GetTick>
 8007148:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10e      	bne.n	8007176 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f817 	bl	800719a <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e00d      	b.n	8007192 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b09c      	sub	sp, #112	; 0x70
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071aa:	e0a5      	b.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	f000 80a1 	beq.w	80072f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b6:	f7fb facb 	bl	8002750 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d302      	bcc.n	80071cc <UART_WaitOnFlagUntilTimeout+0x32>
 80071c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d13e      	bne.n	800724a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071e0:	667b      	str	r3, [r7, #100]	; 0x64
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e6      	bne.n	80071cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3308      	adds	r3, #8
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	f023 0301 	bic.w	r3, r3, #1
 8007214:	663b      	str	r3, [r7, #96]	; 0x60
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800721e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007220:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800722c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e5      	bne.n	80071fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2220      	movs	r2, #32
 8007236:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e067      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d04f      	beq.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007266:	d147      	bne.n	80072f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
 8007292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e6      	bne.n	8007272 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3308      	adds	r3, #8
 80072aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	613b      	str	r3, [r7, #16]
   return(result);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f023 0301 	bic.w	r3, r3, #1
 80072ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072c4:	623a      	str	r2, [r7, #32]
 80072c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	69f9      	ldr	r1, [r7, #28]
 80072ca:	6a3a      	ldr	r2, [r7, #32]
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e5      	bne.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e010      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69da      	ldr	r2, [r3, #28]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4013      	ands	r3, r2
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	429a      	cmp	r2, r3
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	429a      	cmp	r2, r3
 8007314:	f43f af4a 	beq.w	80071ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3770      	adds	r7, #112	; 0x70
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007324:	b480      	push	{r7}
 8007326:	b097      	sub	sp, #92	; 0x5c
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	4613      	mov	r3, r2
 8007330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d10e      	bne.n	8007376 <UART_Start_Receive_IT+0x52>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d105      	bne.n	800736c <UART_Start_Receive_IT+0x48>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007366:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800736a:	e02d      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	22ff      	movs	r2, #255	; 0xff
 8007370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007374:	e028      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10d      	bne.n	800739a <UART_Start_Receive_IT+0x76>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <UART_Start_Receive_IT+0x6c>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	22ff      	movs	r2, #255	; 0xff
 800738a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800738e:	e01b      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	227f      	movs	r2, #127	; 0x7f
 8007394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007398:	e016      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073a2:	d10d      	bne.n	80073c0 <UART_Start_Receive_IT+0x9c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <UART_Start_Receive_IT+0x92>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	227f      	movs	r2, #127	; 0x7f
 80073b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073b4:	e008      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	223f      	movs	r2, #63	; 0x3f
 80073ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073be:	e003      	b.n	80073c8 <UART_Start_Receive_IT+0xa4>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2222      	movs	r2, #34	; 0x22
 80073d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3308      	adds	r3, #8
 80073dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	657b      	str	r3, [r7, #84]	; 0x54
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80073f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e5      	bne.n	80073d6 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007412:	d107      	bne.n	8007424 <UART_Start_Receive_IT+0x100>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d103      	bne.n	8007424 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a24      	ldr	r2, [pc, #144]	; (80074b0 <UART_Start_Receive_IT+0x18c>)
 8007420:	665a      	str	r2, [r3, #100]	; 0x64
 8007422:	e002      	b.n	800742a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a23      	ldr	r2, [pc, #140]	; (80074b4 <UART_Start_Receive_IT+0x190>)
 8007428:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d019      	beq.n	800746e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	461a      	mov	r2, r3
 8007456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
 800745a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800745e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e6      	bne.n	800743a <UART_Start_Receive_IT+0x116>
 800746c:	e018      	b.n	80074a0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	613b      	str	r3, [r7, #16]
   return(result);
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f043 0320 	orr.w	r3, r3, #32
 8007482:	653b      	str	r3, [r7, #80]	; 0x50
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800748c:	623b      	str	r3, [r7, #32]
 800748e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	69f9      	ldr	r1, [r7, #28]
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	61bb      	str	r3, [r7, #24]
   return(result);
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	375c      	adds	r7, #92	; 0x5c
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	0800775b 	.word	0x0800775b
 80074b4:	080075ff 	.word	0x080075ff

080074b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b095      	sub	sp, #84	; 0x54
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074de:	643b      	str	r3, [r7, #64]	; 0x40
 80074e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e6      	bne.n	80074c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	61fb      	str	r3, [r7, #28]
   return(result);
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	64bb      	str	r3, [r7, #72]	; 0x48
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e5      	bne.n	80074f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752a:	2b01      	cmp	r3, #1
 800752c:	d118      	bne.n	8007560 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	60bb      	str	r3, [r7, #8]
   return(result);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6979      	ldr	r1, [r7, #20]
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	613b      	str	r3, [r7, #16]
   return(result);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e6      	bne.n	800752e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2220      	movs	r2, #32
 8007564:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007572:	bf00      	nop
 8007574:	3754      	adds	r7, #84	; 0x54
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff faaf 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	60bb      	str	r3, [r7, #8]
   return(result);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	613b      	str	r3, [r7, #16]
   return(result);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fa7b 	bl	8006aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f6:	bf00      	nop
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b096      	sub	sp, #88	; 0x58
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800760c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007614:	2b22      	cmp	r3, #34	; 0x22
 8007616:	f040 8094 	bne.w	8007742 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007624:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007628:	b2d9      	uxtb	r1, r3
 800762a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800762e:	b2da      	uxtb	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007634:	400a      	ands	r2, r1
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d177      	bne.n	8007752 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007672:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007676:	653b      	str	r3, [r7, #80]	; 0x50
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007680:	647b      	str	r3, [r7, #68]	; 0x44
 8007682:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e6      	bne.n	8007662 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	623b      	str	r3, [r7, #32]
   return(result);
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	f023 0301 	bic.w	r3, r3, #1
 80076aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076b4:	633a      	str	r2, [r7, #48]	; 0x30
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e5      	bne.n	8007694 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d12e      	bne.n	800773a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0310 	bic.w	r3, r3, #16
 80076f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	69b9      	ldr	r1, [r7, #24]
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	617b      	str	r3, [r7, #20]
   return(result);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b10      	cmp	r3, #16
 8007720:	d103      	bne.n	800772a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2210      	movs	r2, #16
 8007728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff f9ee 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007738:	e00b      	b.n	8007752 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7f9 ffdc 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8007740:	e007      	b.n	8007752 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0208 	orr.w	r2, r2, #8
 8007750:	619a      	str	r2, [r3, #24]
}
 8007752:	bf00      	nop
 8007754:	3758      	adds	r7, #88	; 0x58
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b096      	sub	sp, #88	; 0x58
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007768:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007770:	2b22      	cmp	r3, #34	; 0x22
 8007772:	f040 8094 	bne.w	800789e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007786:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800778a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800778e:	4013      	ands	r3, r2
 8007790:	b29a      	uxth	r2, r3
 8007792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007794:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d177      	bne.n	80078ae <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
 80077de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e4:	e841 2300 	strex	r3, r2, [r1]
 80077e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1e6      	bne.n	80077be <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	64bb      	str	r3, [r7, #72]	; 0x48
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3308      	adds	r3, #8
 800780e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e5      	bne.n	80077f0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007834:	2b01      	cmp	r3, #1
 8007836:	d12e      	bne.n	8007896 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60bb      	str	r3, [r7, #8]
   return(result);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	647b      	str	r3, [r7, #68]	; 0x44
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6979      	ldr	r1, [r7, #20]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	613b      	str	r3, [r7, #16]
   return(result);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b10      	cmp	r3, #16
 800787c:	d103      	bne.n	8007886 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2210      	movs	r2, #16
 8007884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f940 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007894:	e00b      	b.n	80078ae <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7f9 ff2e 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 800789c:	e007      	b.n	80078ae <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0208 	orr.w	r2, r2, #8
 80078ac:	619a      	str	r2, [r3, #24]
}
 80078ae:	bf00      	nop
 80078b0:	3758      	adds	r7, #88	; 0x58
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078b8:	b084      	sub	sp, #16
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	f107 001c 	add.w	r0, r7, #28
 80078c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d120      	bne.n	8007912 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	4b20      	ldr	r3, [pc, #128]	; (8007964 <USB_CoreInit+0xac>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d105      	bne.n	8007906 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa92 	bl	8007e30 <USB_CoreReset>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
 8007910:	e010      	b.n	8007934 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fa86 	bl	8007e30 <USB_CoreReset>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	2b01      	cmp	r3, #1
 8007938:	d10b      	bne.n	8007952 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f043 0206 	orr.w	r2, r3, #6
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f043 0220 	orr.w	r2, r3, #32
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800795e:	b004      	add	sp, #16
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	ffbdffbf 	.word	0xffbdffbf

08007968 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f023 0201 	bic.w	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	460b      	mov	r3, r1
 8007994:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d115      	bne.n	80079d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079b8:	2001      	movs	r0, #1
 80079ba:	f7fa fed5 	bl	8002768 <HAL_Delay>
      ms++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa25 	bl	8007e14 <USB_GetMode>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d01e      	beq.n	8007a0e <USB_SetCurrentMode+0x84>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b31      	cmp	r3, #49	; 0x31
 80079d4:	d9f0      	bls.n	80079b8 <USB_SetCurrentMode+0x2e>
 80079d6:	e01a      	b.n	8007a0e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d115      	bne.n	8007a0a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079ea:	2001      	movs	r0, #1
 80079ec:	f7fa febc 	bl	8002768 <HAL_Delay>
      ms++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa0c 	bl	8007e14 <USB_GetMode>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <USB_SetCurrentMode+0x84>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b31      	cmp	r3, #49	; 0x31
 8007a06:	d9f0      	bls.n	80079ea <USB_SetCurrentMode+0x60>
 8007a08:	e001      	b.n	8007a0e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e005      	b.n	8007a1a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b32      	cmp	r3, #50	; 0x32
 8007a12:	d101      	bne.n	8007a18 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e000      	b.n	8007a1a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a24:	b084      	sub	sp, #16
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	e009      	b.n	8007a58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	3340      	adds	r3, #64	; 0x40
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3301      	adds	r3, #1
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2b0e      	cmp	r3, #14
 8007a5c:	d9f2      	bls.n	8007a44 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11c      	bne.n	8007a9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e005      	b.n	8007aaa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	4619      	mov	r1, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	680b      	ldr	r3, [r1, #0]
 8007ac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10c      	bne.n	8007aea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f961 	bl	8007da0 <USB_SetDevSpeed>
 8007ade:	e008      	b.n	8007af2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f95c 	bl	8007da0 <USB_SetDevSpeed>
 8007ae8:	e003      	b.n	8007af2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007aea:	2103      	movs	r1, #3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f957 	bl	8007da0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007af2:	2110      	movs	r1, #16
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8f3 	bl	8007ce0 <USB_FlushTxFifo>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f91d 	bl	8007d44 <USB_FlushRxFifo>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	461a      	mov	r2, r3
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	461a      	mov	r2, r3
 8007b34:	2300      	movs	r3, #0
 8007b36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	e043      	b.n	8007bc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b54:	d118      	bne.n	8007b88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	e013      	b.n	8007b9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e008      	b.n	8007b9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b94:	461a      	mov	r2, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	2300      	movs	r3, #0
 8007baa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d3b7      	bcc.n	8007b3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	e043      	b.n	8007c5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bea:	d118      	bne.n	8007c1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	015a      	lsls	r2, r3, #5
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	e013      	b.n	8007c30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c14:	461a      	mov	r2, r3
 8007c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	e008      	b.n	8007c30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	613b      	str	r3, [r7, #16]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d3b7      	bcc.n	8007bd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d105      	bne.n	8007c98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f043 0210 	orr.w	r2, r3, #16
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <USB_DevInit+0x2b4>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f043 0208 	orr.w	r2, r3, #8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d105      	bne.n	8007cc8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <USB_DevInit+0x2b8>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cd4:	b004      	add	sp, #16
 8007cd6:	4770      	bx	lr
 8007cd8:	803c3800 	.word	0x803c3800
 8007cdc:	40000004 	.word	0x40000004

08007ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <USB_FlushTxFifo+0x60>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d901      	bls.n	8007cfe <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e01a      	b.n	8007d34 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	daf3      	bge.n	8007cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	f043 0220 	orr.w	r2, r3, #32
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	4a08      	ldr	r2, [pc, #32]	; (8007d40 <USB_FlushTxFifo+0x60>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e006      	b.n	8007d34 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f003 0320 	and.w	r3, r3, #32
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d0f1      	beq.n	8007d16 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	00030d40 	.word	0x00030d40

08007d44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <USB_FlushRxFifo+0x58>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d901      	bls.n	8007d60 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e017      	b.n	8007d90 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	daf3      	bge.n	8007d50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2210      	movs	r2, #16
 8007d70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3301      	adds	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	4a08      	ldr	r2, [pc, #32]	; (8007d9c <USB_FlushRxFifo+0x58>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d901      	bls.n	8007d82 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e006      	b.n	8007d90 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d0f1      	beq.n	8007d72 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	00030d40 	.word	0x00030d40

08007da0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e00:	f043 0302 	orr.w	r3, r3, #2
 8007e04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	f003 0301 	and.w	r3, r3, #1
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	4a13      	ldr	r2, [pc, #76]	; (8007e90 <USB_CoreReset+0x60>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d901      	bls.n	8007e4c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e01a      	b.n	8007e82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	daf3      	bge.n	8007e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f043 0201 	orr.w	r2, r3, #1
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <USB_CoreReset+0x60>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d0f1      	beq.n	8007e64 <USB_CoreReset+0x34>

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	00030d40 	.word	0x00030d40

08007e94 <__errno>:
 8007e94:	4b01      	ldr	r3, [pc, #4]	; (8007e9c <__errno+0x8>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	20000074 	.word	0x20000074

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f005 f8d8 	bl	800d068 <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	0800d594 	.word	0x0800d594
 8007edc:	0800d594 	.word	0x0800d594
 8007ee0:	0800d594 	.word	0x0800d594
 8007ee4:	0800d598 	.word	0x0800d598

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <__cvt>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	ec55 4b10 	vmov	r4, r5, d0
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	460e      	mov	r6, r1
 8007f04:	4619      	mov	r1, r3
 8007f06:	462b      	mov	r3, r5
 8007f08:	bfbb      	ittet	lt
 8007f0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f0e:	461d      	movlt	r5, r3
 8007f10:	2300      	movge	r3, #0
 8007f12:	232d      	movlt	r3, #45	; 0x2d
 8007f14:	700b      	strb	r3, [r1, #0]
 8007f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f1c:	4691      	mov	r9, r2
 8007f1e:	f023 0820 	bic.w	r8, r3, #32
 8007f22:	bfbc      	itt	lt
 8007f24:	4622      	movlt	r2, r4
 8007f26:	4614      	movlt	r4, r2
 8007f28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f2c:	d005      	beq.n	8007f3a <__cvt+0x42>
 8007f2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f32:	d100      	bne.n	8007f36 <__cvt+0x3e>
 8007f34:	3601      	adds	r6, #1
 8007f36:	2102      	movs	r1, #2
 8007f38:	e000      	b.n	8007f3c <__cvt+0x44>
 8007f3a:	2103      	movs	r1, #3
 8007f3c:	ab03      	add	r3, sp, #12
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	ab02      	add	r3, sp, #8
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	ec45 4b10 	vmov	d0, r4, r5
 8007f48:	4653      	mov	r3, sl
 8007f4a:	4632      	mov	r2, r6
 8007f4c:	f001 fe9c 	bl	8009c88 <_dtoa_r>
 8007f50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f54:	4607      	mov	r7, r0
 8007f56:	d102      	bne.n	8007f5e <__cvt+0x66>
 8007f58:	f019 0f01 	tst.w	r9, #1
 8007f5c:	d022      	beq.n	8007fa4 <__cvt+0xac>
 8007f5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f62:	eb07 0906 	add.w	r9, r7, r6
 8007f66:	d110      	bne.n	8007f8a <__cvt+0x92>
 8007f68:	783b      	ldrb	r3, [r7, #0]
 8007f6a:	2b30      	cmp	r3, #48	; 0x30
 8007f6c:	d10a      	bne.n	8007f84 <__cvt+0x8c>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 8007f7a:	b918      	cbnz	r0, 8007f84 <__cvt+0x8c>
 8007f7c:	f1c6 0601 	rsb	r6, r6, #1
 8007f80:	f8ca 6000 	str.w	r6, [sl]
 8007f84:	f8da 3000 	ldr.w	r3, [sl]
 8007f88:	4499      	add	r9, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	f7f8 fdb9 	bl	8000b08 <__aeabi_dcmpeq>
 8007f96:	b108      	cbz	r0, 8007f9c <__cvt+0xa4>
 8007f98:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f9c:	2230      	movs	r2, #48	; 0x30
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	454b      	cmp	r3, r9
 8007fa2:	d307      	bcc.n	8007fb4 <__cvt+0xbc>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fa8:	1bdb      	subs	r3, r3, r7
 8007faa:	4638      	mov	r0, r7
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	b004      	add	sp, #16
 8007fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	9103      	str	r1, [sp, #12]
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e7f0      	b.n	8007f9e <__cvt+0xa6>

08007fbc <__exponent>:
 8007fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	bfb8      	it	lt
 8007fc4:	4249      	neglt	r1, r1
 8007fc6:	f803 2b02 	strb.w	r2, [r3], #2
 8007fca:	bfb4      	ite	lt
 8007fcc:	222d      	movlt	r2, #45	; 0x2d
 8007fce:	222b      	movge	r2, #43	; 0x2b
 8007fd0:	2909      	cmp	r1, #9
 8007fd2:	7042      	strb	r2, [r0, #1]
 8007fd4:	dd2a      	ble.n	800802c <__exponent+0x70>
 8007fd6:	f10d 0407 	add.w	r4, sp, #7
 8007fda:	46a4      	mov	ip, r4
 8007fdc:	270a      	movs	r7, #10
 8007fde:	46a6      	mov	lr, r4
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fe6:	fb07 1516 	mls	r5, r7, r6, r1
 8007fea:	3530      	adds	r5, #48	; 0x30
 8007fec:	2a63      	cmp	r2, #99	; 0x63
 8007fee:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ff2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	dcf1      	bgt.n	8007fde <__exponent+0x22>
 8007ffa:	3130      	adds	r1, #48	; 0x30
 8007ffc:	f1ae 0502 	sub.w	r5, lr, #2
 8008000:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008004:	1c44      	adds	r4, r0, #1
 8008006:	4629      	mov	r1, r5
 8008008:	4561      	cmp	r1, ip
 800800a:	d30a      	bcc.n	8008022 <__exponent+0x66>
 800800c:	f10d 0209 	add.w	r2, sp, #9
 8008010:	eba2 020e 	sub.w	r2, r2, lr
 8008014:	4565      	cmp	r5, ip
 8008016:	bf88      	it	hi
 8008018:	2200      	movhi	r2, #0
 800801a:	4413      	add	r3, r2
 800801c:	1a18      	subs	r0, r3, r0
 800801e:	b003      	add	sp, #12
 8008020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008026:	f804 2f01 	strb.w	r2, [r4, #1]!
 800802a:	e7ed      	b.n	8008008 <__exponent+0x4c>
 800802c:	2330      	movs	r3, #48	; 0x30
 800802e:	3130      	adds	r1, #48	; 0x30
 8008030:	7083      	strb	r3, [r0, #2]
 8008032:	70c1      	strb	r1, [r0, #3]
 8008034:	1d03      	adds	r3, r0, #4
 8008036:	e7f1      	b.n	800801c <__exponent+0x60>

08008038 <_printf_float>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	ed2d 8b02 	vpush	{d8}
 8008040:	b08d      	sub	sp, #52	; 0x34
 8008042:	460c      	mov	r4, r1
 8008044:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008048:	4616      	mov	r6, r2
 800804a:	461f      	mov	r7, r3
 800804c:	4605      	mov	r5, r0
 800804e:	f002 ff77 	bl	800af40 <_localeconv_r>
 8008052:	f8d0 a000 	ldr.w	sl, [r0]
 8008056:	4650      	mov	r0, sl
 8008058:	f7f8 f8da 	bl	8000210 <strlen>
 800805c:	2300      	movs	r3, #0
 800805e:	930a      	str	r3, [sp, #40]	; 0x28
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	f8d8 3000 	ldr.w	r3, [r8]
 8008068:	f894 b018 	ldrb.w	fp, [r4, #24]
 800806c:	3307      	adds	r3, #7
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	f103 0208 	add.w	r2, r3, #8
 8008076:	f8c8 2000 	str.w	r2, [r8]
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008082:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800808a:	9307      	str	r3, [sp, #28]
 800808c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008090:	ee08 0a10 	vmov	s16, r0
 8008094:	4b9f      	ldr	r3, [pc, #636]	; (8008314 <_printf_float+0x2dc>)
 8008096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800809a:	f04f 32ff 	mov.w	r2, #4294967295
 800809e:	f7f8 fd65 	bl	8000b6c <__aeabi_dcmpun>
 80080a2:	bb88      	cbnz	r0, 8008108 <_printf_float+0xd0>
 80080a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080a8:	4b9a      	ldr	r3, [pc, #616]	; (8008314 <_printf_float+0x2dc>)
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	f7f8 fd3f 	bl	8000b30 <__aeabi_dcmple>
 80080b2:	bb48      	cbnz	r0, 8008108 <_printf_float+0xd0>
 80080b4:	2200      	movs	r2, #0
 80080b6:	2300      	movs	r3, #0
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	f7f8 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80080c0:	b110      	cbz	r0, 80080c8 <_printf_float+0x90>
 80080c2:	232d      	movs	r3, #45	; 0x2d
 80080c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080c8:	4b93      	ldr	r3, [pc, #588]	; (8008318 <_printf_float+0x2e0>)
 80080ca:	4894      	ldr	r0, [pc, #592]	; (800831c <_printf_float+0x2e4>)
 80080cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080d0:	bf94      	ite	ls
 80080d2:	4698      	movls	r8, r3
 80080d4:	4680      	movhi	r8, r0
 80080d6:	2303      	movs	r3, #3
 80080d8:	6123      	str	r3, [r4, #16]
 80080da:	9b05      	ldr	r3, [sp, #20]
 80080dc:	f023 0204 	bic.w	r2, r3, #4
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	f04f 0900 	mov.w	r9, #0
 80080e6:	9700      	str	r7, [sp, #0]
 80080e8:	4633      	mov	r3, r6
 80080ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80080ec:	4621      	mov	r1, r4
 80080ee:	4628      	mov	r0, r5
 80080f0:	f000 f9d8 	bl	80084a4 <_printf_common>
 80080f4:	3001      	adds	r0, #1
 80080f6:	f040 8090 	bne.w	800821a <_printf_float+0x1e2>
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	b00d      	add	sp, #52	; 0x34
 8008100:	ecbd 8b02 	vpop	{d8}
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	4640      	mov	r0, r8
 800810e:	4649      	mov	r1, r9
 8008110:	f7f8 fd2c 	bl	8000b6c <__aeabi_dcmpun>
 8008114:	b140      	cbz	r0, 8008128 <_printf_float+0xf0>
 8008116:	464b      	mov	r3, r9
 8008118:	2b00      	cmp	r3, #0
 800811a:	bfbc      	itt	lt
 800811c:	232d      	movlt	r3, #45	; 0x2d
 800811e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008122:	487f      	ldr	r0, [pc, #508]	; (8008320 <_printf_float+0x2e8>)
 8008124:	4b7f      	ldr	r3, [pc, #508]	; (8008324 <_printf_float+0x2ec>)
 8008126:	e7d1      	b.n	80080cc <_printf_float+0x94>
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800812e:	9206      	str	r2, [sp, #24]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	d13f      	bne.n	80081b4 <_printf_float+0x17c>
 8008134:	2306      	movs	r3, #6
 8008136:	6063      	str	r3, [r4, #4]
 8008138:	9b05      	ldr	r3, [sp, #20]
 800813a:	6861      	ldr	r1, [r4, #4]
 800813c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008140:	2300      	movs	r3, #0
 8008142:	9303      	str	r3, [sp, #12]
 8008144:	ab0a      	add	r3, sp, #40	; 0x28
 8008146:	e9cd b301 	strd	fp, r3, [sp, #4]
 800814a:	ab09      	add	r3, sp, #36	; 0x24
 800814c:	ec49 8b10 	vmov	d0, r8, r9
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	6022      	str	r2, [r4, #0]
 8008154:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008158:	4628      	mov	r0, r5
 800815a:	f7ff fecd 	bl	8007ef8 <__cvt>
 800815e:	9b06      	ldr	r3, [sp, #24]
 8008160:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008162:	2b47      	cmp	r3, #71	; 0x47
 8008164:	4680      	mov	r8, r0
 8008166:	d108      	bne.n	800817a <_printf_float+0x142>
 8008168:	1cc8      	adds	r0, r1, #3
 800816a:	db02      	blt.n	8008172 <_printf_float+0x13a>
 800816c:	6863      	ldr	r3, [r4, #4]
 800816e:	4299      	cmp	r1, r3
 8008170:	dd41      	ble.n	80081f6 <_printf_float+0x1be>
 8008172:	f1ab 0b02 	sub.w	fp, fp, #2
 8008176:	fa5f fb8b 	uxtb.w	fp, fp
 800817a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800817e:	d820      	bhi.n	80081c2 <_printf_float+0x18a>
 8008180:	3901      	subs	r1, #1
 8008182:	465a      	mov	r2, fp
 8008184:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008188:	9109      	str	r1, [sp, #36]	; 0x24
 800818a:	f7ff ff17 	bl	8007fbc <__exponent>
 800818e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008190:	1813      	adds	r3, r2, r0
 8008192:	2a01      	cmp	r2, #1
 8008194:	4681      	mov	r9, r0
 8008196:	6123      	str	r3, [r4, #16]
 8008198:	dc02      	bgt.n	80081a0 <_printf_float+0x168>
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	07d2      	lsls	r2, r2, #31
 800819e:	d501      	bpl.n	80081a4 <_printf_float+0x16c>
 80081a0:	3301      	adds	r3, #1
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d09c      	beq.n	80080e6 <_printf_float+0xae>
 80081ac:	232d      	movs	r3, #45	; 0x2d
 80081ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b2:	e798      	b.n	80080e6 <_printf_float+0xae>
 80081b4:	9a06      	ldr	r2, [sp, #24]
 80081b6:	2a47      	cmp	r2, #71	; 0x47
 80081b8:	d1be      	bne.n	8008138 <_printf_float+0x100>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1bc      	bne.n	8008138 <_printf_float+0x100>
 80081be:	2301      	movs	r3, #1
 80081c0:	e7b9      	b.n	8008136 <_printf_float+0xfe>
 80081c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081c6:	d118      	bne.n	80081fa <_printf_float+0x1c2>
 80081c8:	2900      	cmp	r1, #0
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	dd0b      	ble.n	80081e6 <_printf_float+0x1ae>
 80081ce:	6121      	str	r1, [r4, #16]
 80081d0:	b913      	cbnz	r3, 80081d8 <_printf_float+0x1a0>
 80081d2:	6822      	ldr	r2, [r4, #0]
 80081d4:	07d0      	lsls	r0, r2, #31
 80081d6:	d502      	bpl.n	80081de <_printf_float+0x1a6>
 80081d8:	3301      	adds	r3, #1
 80081da:	440b      	add	r3, r1
 80081dc:	6123      	str	r3, [r4, #16]
 80081de:	65a1      	str	r1, [r4, #88]	; 0x58
 80081e0:	f04f 0900 	mov.w	r9, #0
 80081e4:	e7de      	b.n	80081a4 <_printf_float+0x16c>
 80081e6:	b913      	cbnz	r3, 80081ee <_printf_float+0x1b6>
 80081e8:	6822      	ldr	r2, [r4, #0]
 80081ea:	07d2      	lsls	r2, r2, #31
 80081ec:	d501      	bpl.n	80081f2 <_printf_float+0x1ba>
 80081ee:	3302      	adds	r3, #2
 80081f0:	e7f4      	b.n	80081dc <_printf_float+0x1a4>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7f2      	b.n	80081dc <_printf_float+0x1a4>
 80081f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081fc:	4299      	cmp	r1, r3
 80081fe:	db05      	blt.n	800820c <_printf_float+0x1d4>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	6121      	str	r1, [r4, #16]
 8008204:	07d8      	lsls	r0, r3, #31
 8008206:	d5ea      	bpl.n	80081de <_printf_float+0x1a6>
 8008208:	1c4b      	adds	r3, r1, #1
 800820a:	e7e7      	b.n	80081dc <_printf_float+0x1a4>
 800820c:	2900      	cmp	r1, #0
 800820e:	bfd4      	ite	le
 8008210:	f1c1 0202 	rsble	r2, r1, #2
 8008214:	2201      	movgt	r2, #1
 8008216:	4413      	add	r3, r2
 8008218:	e7e0      	b.n	80081dc <_printf_float+0x1a4>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	055a      	lsls	r2, r3, #21
 800821e:	d407      	bmi.n	8008230 <_printf_float+0x1f8>
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	4642      	mov	r2, r8
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	d12c      	bne.n	8008288 <_printf_float+0x250>
 800822e:	e764      	b.n	80080fa <_printf_float+0xc2>
 8008230:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008234:	f240 80e0 	bls.w	80083f8 <_printf_float+0x3c0>
 8008238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800823c:	2200      	movs	r2, #0
 800823e:	2300      	movs	r3, #0
 8008240:	f7f8 fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8008244:	2800      	cmp	r0, #0
 8008246:	d034      	beq.n	80082b2 <_printf_float+0x27a>
 8008248:	4a37      	ldr	r2, [pc, #220]	; (8008328 <_printf_float+0x2f0>)
 800824a:	2301      	movs	r3, #1
 800824c:	4631      	mov	r1, r6
 800824e:	4628      	mov	r0, r5
 8008250:	47b8      	blx	r7
 8008252:	3001      	adds	r0, #1
 8008254:	f43f af51 	beq.w	80080fa <_printf_float+0xc2>
 8008258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800825c:	429a      	cmp	r2, r3
 800825e:	db02      	blt.n	8008266 <_printf_float+0x22e>
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	07d8      	lsls	r0, r3, #31
 8008264:	d510      	bpl.n	8008288 <_printf_float+0x250>
 8008266:	ee18 3a10 	vmov	r3, s16
 800826a:	4652      	mov	r2, sl
 800826c:	4631      	mov	r1, r6
 800826e:	4628      	mov	r0, r5
 8008270:	47b8      	blx	r7
 8008272:	3001      	adds	r0, #1
 8008274:	f43f af41 	beq.w	80080fa <_printf_float+0xc2>
 8008278:	f04f 0800 	mov.w	r8, #0
 800827c:	f104 091a 	add.w	r9, r4, #26
 8008280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008282:	3b01      	subs	r3, #1
 8008284:	4543      	cmp	r3, r8
 8008286:	dc09      	bgt.n	800829c <_printf_float+0x264>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	079b      	lsls	r3, r3, #30
 800828c:	f100 8105 	bmi.w	800849a <_printf_float+0x462>
 8008290:	68e0      	ldr	r0, [r4, #12]
 8008292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008294:	4298      	cmp	r0, r3
 8008296:	bfb8      	it	lt
 8008298:	4618      	movlt	r0, r3
 800829a:	e730      	b.n	80080fe <_printf_float+0xc6>
 800829c:	2301      	movs	r3, #1
 800829e:	464a      	mov	r2, r9
 80082a0:	4631      	mov	r1, r6
 80082a2:	4628      	mov	r0, r5
 80082a4:	47b8      	blx	r7
 80082a6:	3001      	adds	r0, #1
 80082a8:	f43f af27 	beq.w	80080fa <_printf_float+0xc2>
 80082ac:	f108 0801 	add.w	r8, r8, #1
 80082b0:	e7e6      	b.n	8008280 <_printf_float+0x248>
 80082b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc39      	bgt.n	800832c <_printf_float+0x2f4>
 80082b8:	4a1b      	ldr	r2, [pc, #108]	; (8008328 <_printf_float+0x2f0>)
 80082ba:	2301      	movs	r3, #1
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	f43f af19 	beq.w	80080fa <_printf_float+0xc2>
 80082c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082cc:	4313      	orrs	r3, r2
 80082ce:	d102      	bne.n	80082d6 <_printf_float+0x29e>
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	d5d8      	bpl.n	8008288 <_printf_float+0x250>
 80082d6:	ee18 3a10 	vmov	r3, s16
 80082da:	4652      	mov	r2, sl
 80082dc:	4631      	mov	r1, r6
 80082de:	4628      	mov	r0, r5
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	f43f af09 	beq.w	80080fa <_printf_float+0xc2>
 80082e8:	f04f 0900 	mov.w	r9, #0
 80082ec:	f104 0a1a 	add.w	sl, r4, #26
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	425b      	negs	r3, r3
 80082f4:	454b      	cmp	r3, r9
 80082f6:	dc01      	bgt.n	80082fc <_printf_float+0x2c4>
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	e792      	b.n	8008222 <_printf_float+0x1ea>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4652      	mov	r2, sl
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	f43f aef7 	beq.w	80080fa <_printf_float+0xc2>
 800830c:	f109 0901 	add.w	r9, r9, #1
 8008310:	e7ee      	b.n	80082f0 <_printf_float+0x2b8>
 8008312:	bf00      	nop
 8008314:	7fefffff 	.word	0x7fefffff
 8008318:	0800d0c8 	.word	0x0800d0c8
 800831c:	0800d0cc 	.word	0x0800d0cc
 8008320:	0800d0d4 	.word	0x0800d0d4
 8008324:	0800d0d0 	.word	0x0800d0d0
 8008328:	0800d4d9 	.word	0x0800d4d9
 800832c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008330:	429a      	cmp	r2, r3
 8008332:	bfa8      	it	ge
 8008334:	461a      	movge	r2, r3
 8008336:	2a00      	cmp	r2, #0
 8008338:	4691      	mov	r9, r2
 800833a:	dc37      	bgt.n	80083ac <_printf_float+0x374>
 800833c:	f04f 0b00 	mov.w	fp, #0
 8008340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008344:	f104 021a 	add.w	r2, r4, #26
 8008348:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	eba3 0309 	sub.w	r3, r3, r9
 8008350:	455b      	cmp	r3, fp
 8008352:	dc33      	bgt.n	80083bc <_printf_float+0x384>
 8008354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008358:	429a      	cmp	r2, r3
 800835a:	db3b      	blt.n	80083d4 <_printf_float+0x39c>
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	07da      	lsls	r2, r3, #31
 8008360:	d438      	bmi.n	80083d4 <_printf_float+0x39c>
 8008362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	eba2 0901 	sub.w	r9, r2, r1
 800836e:	4599      	cmp	r9, r3
 8008370:	bfa8      	it	ge
 8008372:	4699      	movge	r9, r3
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	dc35      	bgt.n	80083e6 <_printf_float+0x3ae>
 800837a:	f04f 0800 	mov.w	r8, #0
 800837e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008382:	f104 0a1a 	add.w	sl, r4, #26
 8008386:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	eba3 0309 	sub.w	r3, r3, r9
 8008390:	4543      	cmp	r3, r8
 8008392:	f77f af79 	ble.w	8008288 <_printf_float+0x250>
 8008396:	2301      	movs	r3, #1
 8008398:	4652      	mov	r2, sl
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f aeaa 	beq.w	80080fa <_printf_float+0xc2>
 80083a6:	f108 0801 	add.w	r8, r8, #1
 80083aa:	e7ec      	b.n	8008386 <_printf_float+0x34e>
 80083ac:	4613      	mov	r3, r2
 80083ae:	4631      	mov	r1, r6
 80083b0:	4642      	mov	r2, r8
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	d1c0      	bne.n	800833c <_printf_float+0x304>
 80083ba:	e69e      	b.n	80080fa <_printf_float+0xc2>
 80083bc:	2301      	movs	r3, #1
 80083be:	4631      	mov	r1, r6
 80083c0:	4628      	mov	r0, r5
 80083c2:	9205      	str	r2, [sp, #20]
 80083c4:	47b8      	blx	r7
 80083c6:	3001      	adds	r0, #1
 80083c8:	f43f ae97 	beq.w	80080fa <_printf_float+0xc2>
 80083cc:	9a05      	ldr	r2, [sp, #20]
 80083ce:	f10b 0b01 	add.w	fp, fp, #1
 80083d2:	e7b9      	b.n	8008348 <_printf_float+0x310>
 80083d4:	ee18 3a10 	vmov	r3, s16
 80083d8:	4652      	mov	r2, sl
 80083da:	4631      	mov	r1, r6
 80083dc:	4628      	mov	r0, r5
 80083de:	47b8      	blx	r7
 80083e0:	3001      	adds	r0, #1
 80083e2:	d1be      	bne.n	8008362 <_printf_float+0x32a>
 80083e4:	e689      	b.n	80080fa <_printf_float+0xc2>
 80083e6:	9a05      	ldr	r2, [sp, #20]
 80083e8:	464b      	mov	r3, r9
 80083ea:	4442      	add	r2, r8
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	d1c1      	bne.n	800837a <_printf_float+0x342>
 80083f6:	e680      	b.n	80080fa <_printf_float+0xc2>
 80083f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083fa:	2a01      	cmp	r2, #1
 80083fc:	dc01      	bgt.n	8008402 <_printf_float+0x3ca>
 80083fe:	07db      	lsls	r3, r3, #31
 8008400:	d538      	bpl.n	8008474 <_printf_float+0x43c>
 8008402:	2301      	movs	r3, #1
 8008404:	4642      	mov	r2, r8
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	47b8      	blx	r7
 800840c:	3001      	adds	r0, #1
 800840e:	f43f ae74 	beq.w	80080fa <_printf_float+0xc2>
 8008412:	ee18 3a10 	vmov	r3, s16
 8008416:	4652      	mov	r2, sl
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f ae6b 	beq.w	80080fa <_printf_float+0xc2>
 8008424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 fb6c 	bl	8000b08 <__aeabi_dcmpeq>
 8008430:	b9d8      	cbnz	r0, 800846a <_printf_float+0x432>
 8008432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008434:	f108 0201 	add.w	r2, r8, #1
 8008438:	3b01      	subs	r3, #1
 800843a:	4631      	mov	r1, r6
 800843c:	4628      	mov	r0, r5
 800843e:	47b8      	blx	r7
 8008440:	3001      	adds	r0, #1
 8008442:	d10e      	bne.n	8008462 <_printf_float+0x42a>
 8008444:	e659      	b.n	80080fa <_printf_float+0xc2>
 8008446:	2301      	movs	r3, #1
 8008448:	4652      	mov	r2, sl
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	f43f ae52 	beq.w	80080fa <_printf_float+0xc2>
 8008456:	f108 0801 	add.w	r8, r8, #1
 800845a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845c:	3b01      	subs	r3, #1
 800845e:	4543      	cmp	r3, r8
 8008460:	dcf1      	bgt.n	8008446 <_printf_float+0x40e>
 8008462:	464b      	mov	r3, r9
 8008464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008468:	e6dc      	b.n	8008224 <_printf_float+0x1ec>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	f104 0a1a 	add.w	sl, r4, #26
 8008472:	e7f2      	b.n	800845a <_printf_float+0x422>
 8008474:	2301      	movs	r3, #1
 8008476:	4642      	mov	r2, r8
 8008478:	e7df      	b.n	800843a <_printf_float+0x402>
 800847a:	2301      	movs	r3, #1
 800847c:	464a      	mov	r2, r9
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f ae38 	beq.w	80080fa <_printf_float+0xc2>
 800848a:	f108 0801 	add.w	r8, r8, #1
 800848e:	68e3      	ldr	r3, [r4, #12]
 8008490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008492:	1a5b      	subs	r3, r3, r1
 8008494:	4543      	cmp	r3, r8
 8008496:	dcf0      	bgt.n	800847a <_printf_float+0x442>
 8008498:	e6fa      	b.n	8008290 <_printf_float+0x258>
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	f104 0919 	add.w	r9, r4, #25
 80084a2:	e7f4      	b.n	800848e <_printf_float+0x456>

080084a4 <_printf_common>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	4616      	mov	r6, r2
 80084aa:	4699      	mov	r9, r3
 80084ac:	688a      	ldr	r2, [r1, #8]
 80084ae:	690b      	ldr	r3, [r1, #16]
 80084b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bfb8      	it	lt
 80084b8:	4613      	movlt	r3, r2
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084c0:	4607      	mov	r7, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	b10a      	cbz	r2, 80084ca <_printf_common+0x26>
 80084c6:	3301      	adds	r3, #1
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	0699      	lsls	r1, r3, #26
 80084ce:	bf42      	ittt	mi
 80084d0:	6833      	ldrmi	r3, [r6, #0]
 80084d2:	3302      	addmi	r3, #2
 80084d4:	6033      	strmi	r3, [r6, #0]
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	f015 0506 	ands.w	r5, r5, #6
 80084dc:	d106      	bne.n	80084ec <_printf_common+0x48>
 80084de:	f104 0a19 	add.w	sl, r4, #25
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	6832      	ldr	r2, [r6, #0]
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dc26      	bgt.n	800853a <_printf_common+0x96>
 80084ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084f0:	1e13      	subs	r3, r2, #0
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	bf18      	it	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	0692      	lsls	r2, r2, #26
 80084fa:	d42b      	bmi.n	8008554 <_printf_common+0xb0>
 80084fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008500:	4649      	mov	r1, r9
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	3001      	adds	r0, #1
 8008508:	d01e      	beq.n	8008548 <_printf_common+0xa4>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	68e5      	ldr	r5, [r4, #12]
 800850e:	6832      	ldr	r2, [r6, #0]
 8008510:	f003 0306 	and.w	r3, r3, #6
 8008514:	2b04      	cmp	r3, #4
 8008516:	bf08      	it	eq
 8008518:	1aad      	subeq	r5, r5, r2
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	6922      	ldr	r2, [r4, #16]
 800851e:	bf0c      	ite	eq
 8008520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008524:	2500      	movne	r5, #0
 8008526:	4293      	cmp	r3, r2
 8008528:	bfc4      	itt	gt
 800852a:	1a9b      	subgt	r3, r3, r2
 800852c:	18ed      	addgt	r5, r5, r3
 800852e:	2600      	movs	r6, #0
 8008530:	341a      	adds	r4, #26
 8008532:	42b5      	cmp	r5, r6
 8008534:	d11a      	bne.n	800856c <_printf_common+0xc8>
 8008536:	2000      	movs	r0, #0
 8008538:	e008      	b.n	800854c <_printf_common+0xa8>
 800853a:	2301      	movs	r3, #1
 800853c:	4652      	mov	r2, sl
 800853e:	4649      	mov	r1, r9
 8008540:	4638      	mov	r0, r7
 8008542:	47c0      	blx	r8
 8008544:	3001      	adds	r0, #1
 8008546:	d103      	bne.n	8008550 <_printf_common+0xac>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008550:	3501      	adds	r5, #1
 8008552:	e7c6      	b.n	80084e2 <_printf_common+0x3e>
 8008554:	18e1      	adds	r1, r4, r3
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	2030      	movs	r0, #48	; 0x30
 800855a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800855e:	4422      	add	r2, r4
 8008560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008568:	3302      	adds	r3, #2
 800856a:	e7c7      	b.n	80084fc <_printf_common+0x58>
 800856c:	2301      	movs	r3, #1
 800856e:	4622      	mov	r2, r4
 8008570:	4649      	mov	r1, r9
 8008572:	4638      	mov	r0, r7
 8008574:	47c0      	blx	r8
 8008576:	3001      	adds	r0, #1
 8008578:	d0e6      	beq.n	8008548 <_printf_common+0xa4>
 800857a:	3601      	adds	r6, #1
 800857c:	e7d9      	b.n	8008532 <_printf_common+0x8e>
	...

08008580 <_printf_i>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	460c      	mov	r4, r1
 8008586:	4691      	mov	r9, r2
 8008588:	7e27      	ldrb	r7, [r4, #24]
 800858a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800858c:	2f78      	cmp	r7, #120	; 0x78
 800858e:	4680      	mov	r8, r0
 8008590:	469a      	mov	sl, r3
 8008592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008596:	d807      	bhi.n	80085a8 <_printf_i+0x28>
 8008598:	2f62      	cmp	r7, #98	; 0x62
 800859a:	d80a      	bhi.n	80085b2 <_printf_i+0x32>
 800859c:	2f00      	cmp	r7, #0
 800859e:	f000 80d8 	beq.w	8008752 <_printf_i+0x1d2>
 80085a2:	2f58      	cmp	r7, #88	; 0x58
 80085a4:	f000 80a3 	beq.w	80086ee <_printf_i+0x16e>
 80085a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085b0:	e03a      	b.n	8008628 <_printf_i+0xa8>
 80085b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085b6:	2b15      	cmp	r3, #21
 80085b8:	d8f6      	bhi.n	80085a8 <_printf_i+0x28>
 80085ba:	a001      	add	r0, pc, #4	; (adr r0, 80085c0 <_printf_i+0x40>)
 80085bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085c0:	08008619 	.word	0x08008619
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	080085a9 	.word	0x080085a9
 80085cc:	080085a9 	.word	0x080085a9
 80085d0:	080085a9 	.word	0x080085a9
 80085d4:	080085a9 	.word	0x080085a9
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	080085a9 	.word	0x080085a9
 80085e0:	080085a9 	.word	0x080085a9
 80085e4:	080085a9 	.word	0x080085a9
 80085e8:	080085a9 	.word	0x080085a9
 80085ec:	08008739 	.word	0x08008739
 80085f0:	0800865d 	.word	0x0800865d
 80085f4:	0800871b 	.word	0x0800871b
 80085f8:	080085a9 	.word	0x080085a9
 80085fc:	080085a9 	.word	0x080085a9
 8008600:	0800875b 	.word	0x0800875b
 8008604:	080085a9 	.word	0x080085a9
 8008608:	0800865d 	.word	0x0800865d
 800860c:	080085a9 	.word	0x080085a9
 8008610:	080085a9 	.word	0x080085a9
 8008614:	08008723 	.word	0x08008723
 8008618:	680b      	ldr	r3, [r1, #0]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	600a      	str	r2, [r1, #0]
 8008620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008628:	2301      	movs	r3, #1
 800862a:	e0a3      	b.n	8008774 <_printf_i+0x1f4>
 800862c:	6825      	ldr	r5, [r4, #0]
 800862e:	6808      	ldr	r0, [r1, #0]
 8008630:	062e      	lsls	r6, r5, #24
 8008632:	f100 0304 	add.w	r3, r0, #4
 8008636:	d50a      	bpl.n	800864e <_printf_i+0xce>
 8008638:	6805      	ldr	r5, [r0, #0]
 800863a:	600b      	str	r3, [r1, #0]
 800863c:	2d00      	cmp	r5, #0
 800863e:	da03      	bge.n	8008648 <_printf_i+0xc8>
 8008640:	232d      	movs	r3, #45	; 0x2d
 8008642:	426d      	negs	r5, r5
 8008644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008648:	485e      	ldr	r0, [pc, #376]	; (80087c4 <_printf_i+0x244>)
 800864a:	230a      	movs	r3, #10
 800864c:	e019      	b.n	8008682 <_printf_i+0x102>
 800864e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008652:	6805      	ldr	r5, [r0, #0]
 8008654:	600b      	str	r3, [r1, #0]
 8008656:	bf18      	it	ne
 8008658:	b22d      	sxthne	r5, r5
 800865a:	e7ef      	b.n	800863c <_printf_i+0xbc>
 800865c:	680b      	ldr	r3, [r1, #0]
 800865e:	6825      	ldr	r5, [r4, #0]
 8008660:	1d18      	adds	r0, r3, #4
 8008662:	6008      	str	r0, [r1, #0]
 8008664:	0628      	lsls	r0, r5, #24
 8008666:	d501      	bpl.n	800866c <_printf_i+0xec>
 8008668:	681d      	ldr	r5, [r3, #0]
 800866a:	e002      	b.n	8008672 <_printf_i+0xf2>
 800866c:	0669      	lsls	r1, r5, #25
 800866e:	d5fb      	bpl.n	8008668 <_printf_i+0xe8>
 8008670:	881d      	ldrh	r5, [r3, #0]
 8008672:	4854      	ldr	r0, [pc, #336]	; (80087c4 <_printf_i+0x244>)
 8008674:	2f6f      	cmp	r7, #111	; 0x6f
 8008676:	bf0c      	ite	eq
 8008678:	2308      	moveq	r3, #8
 800867a:	230a      	movne	r3, #10
 800867c:	2100      	movs	r1, #0
 800867e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008682:	6866      	ldr	r6, [r4, #4]
 8008684:	60a6      	str	r6, [r4, #8]
 8008686:	2e00      	cmp	r6, #0
 8008688:	bfa2      	ittt	ge
 800868a:	6821      	ldrge	r1, [r4, #0]
 800868c:	f021 0104 	bicge.w	r1, r1, #4
 8008690:	6021      	strge	r1, [r4, #0]
 8008692:	b90d      	cbnz	r5, 8008698 <_printf_i+0x118>
 8008694:	2e00      	cmp	r6, #0
 8008696:	d04d      	beq.n	8008734 <_printf_i+0x1b4>
 8008698:	4616      	mov	r6, r2
 800869a:	fbb5 f1f3 	udiv	r1, r5, r3
 800869e:	fb03 5711 	mls	r7, r3, r1, r5
 80086a2:	5dc7      	ldrb	r7, [r0, r7]
 80086a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a8:	462f      	mov	r7, r5
 80086aa:	42bb      	cmp	r3, r7
 80086ac:	460d      	mov	r5, r1
 80086ae:	d9f4      	bls.n	800869a <_printf_i+0x11a>
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d10b      	bne.n	80086cc <_printf_i+0x14c>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	07df      	lsls	r7, r3, #31
 80086b8:	d508      	bpl.n	80086cc <_printf_i+0x14c>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	6861      	ldr	r1, [r4, #4]
 80086be:	4299      	cmp	r1, r3
 80086c0:	bfde      	ittt	le
 80086c2:	2330      	movle	r3, #48	; 0x30
 80086c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086cc:	1b92      	subs	r2, r2, r6
 80086ce:	6122      	str	r2, [r4, #16]
 80086d0:	f8cd a000 	str.w	sl, [sp]
 80086d4:	464b      	mov	r3, r9
 80086d6:	aa03      	add	r2, sp, #12
 80086d8:	4621      	mov	r1, r4
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff fee2 	bl	80084a4 <_printf_common>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d14c      	bne.n	800877e <_printf_i+0x1fe>
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	b004      	add	sp, #16
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	4835      	ldr	r0, [pc, #212]	; (80087c4 <_printf_i+0x244>)
 80086f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086f4:	6823      	ldr	r3, [r4, #0]
 80086f6:	680e      	ldr	r6, [r1, #0]
 80086f8:	061f      	lsls	r7, r3, #24
 80086fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80086fe:	600e      	str	r6, [r1, #0]
 8008700:	d514      	bpl.n	800872c <_printf_i+0x1ac>
 8008702:	07d9      	lsls	r1, r3, #31
 8008704:	bf44      	itt	mi
 8008706:	f043 0320 	orrmi.w	r3, r3, #32
 800870a:	6023      	strmi	r3, [r4, #0]
 800870c:	b91d      	cbnz	r5, 8008716 <_printf_i+0x196>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	f023 0320 	bic.w	r3, r3, #32
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	2310      	movs	r3, #16
 8008718:	e7b0      	b.n	800867c <_printf_i+0xfc>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	f043 0320 	orr.w	r3, r3, #32
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	2378      	movs	r3, #120	; 0x78
 8008724:	4828      	ldr	r0, [pc, #160]	; (80087c8 <_printf_i+0x248>)
 8008726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800872a:	e7e3      	b.n	80086f4 <_printf_i+0x174>
 800872c:	065e      	lsls	r6, r3, #25
 800872e:	bf48      	it	mi
 8008730:	b2ad      	uxthmi	r5, r5
 8008732:	e7e6      	b.n	8008702 <_printf_i+0x182>
 8008734:	4616      	mov	r6, r2
 8008736:	e7bb      	b.n	80086b0 <_printf_i+0x130>
 8008738:	680b      	ldr	r3, [r1, #0]
 800873a:	6826      	ldr	r6, [r4, #0]
 800873c:	6960      	ldr	r0, [r4, #20]
 800873e:	1d1d      	adds	r5, r3, #4
 8008740:	600d      	str	r5, [r1, #0]
 8008742:	0635      	lsls	r5, r6, #24
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	d501      	bpl.n	800874c <_printf_i+0x1cc>
 8008748:	6018      	str	r0, [r3, #0]
 800874a:	e002      	b.n	8008752 <_printf_i+0x1d2>
 800874c:	0671      	lsls	r1, r6, #25
 800874e:	d5fb      	bpl.n	8008748 <_printf_i+0x1c8>
 8008750:	8018      	strh	r0, [r3, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	4616      	mov	r6, r2
 8008758:	e7ba      	b.n	80086d0 <_printf_i+0x150>
 800875a:	680b      	ldr	r3, [r1, #0]
 800875c:	1d1a      	adds	r2, r3, #4
 800875e:	600a      	str	r2, [r1, #0]
 8008760:	681e      	ldr	r6, [r3, #0]
 8008762:	6862      	ldr	r2, [r4, #4]
 8008764:	2100      	movs	r1, #0
 8008766:	4630      	mov	r0, r6
 8008768:	f7f7 fd5a 	bl	8000220 <memchr>
 800876c:	b108      	cbz	r0, 8008772 <_printf_i+0x1f2>
 800876e:	1b80      	subs	r0, r0, r6
 8008770:	6060      	str	r0, [r4, #4]
 8008772:	6863      	ldr	r3, [r4, #4]
 8008774:	6123      	str	r3, [r4, #16]
 8008776:	2300      	movs	r3, #0
 8008778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800877c:	e7a8      	b.n	80086d0 <_printf_i+0x150>
 800877e:	6923      	ldr	r3, [r4, #16]
 8008780:	4632      	mov	r2, r6
 8008782:	4649      	mov	r1, r9
 8008784:	4640      	mov	r0, r8
 8008786:	47d0      	blx	sl
 8008788:	3001      	adds	r0, #1
 800878a:	d0ab      	beq.n	80086e4 <_printf_i+0x164>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	079b      	lsls	r3, r3, #30
 8008790:	d413      	bmi.n	80087ba <_printf_i+0x23a>
 8008792:	68e0      	ldr	r0, [r4, #12]
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	4298      	cmp	r0, r3
 8008798:	bfb8      	it	lt
 800879a:	4618      	movlt	r0, r3
 800879c:	e7a4      	b.n	80086e8 <_printf_i+0x168>
 800879e:	2301      	movs	r3, #1
 80087a0:	4632      	mov	r2, r6
 80087a2:	4649      	mov	r1, r9
 80087a4:	4640      	mov	r0, r8
 80087a6:	47d0      	blx	sl
 80087a8:	3001      	adds	r0, #1
 80087aa:	d09b      	beq.n	80086e4 <_printf_i+0x164>
 80087ac:	3501      	adds	r5, #1
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	9903      	ldr	r1, [sp, #12]
 80087b2:	1a5b      	subs	r3, r3, r1
 80087b4:	42ab      	cmp	r3, r5
 80087b6:	dcf2      	bgt.n	800879e <_printf_i+0x21e>
 80087b8:	e7eb      	b.n	8008792 <_printf_i+0x212>
 80087ba:	2500      	movs	r5, #0
 80087bc:	f104 0619 	add.w	r6, r4, #25
 80087c0:	e7f5      	b.n	80087ae <_printf_i+0x22e>
 80087c2:	bf00      	nop
 80087c4:	0800d0d8 	.word	0x0800d0d8
 80087c8:	0800d0e9 	.word	0x0800d0e9

080087cc <_scanf_float>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	b087      	sub	sp, #28
 80087d2:	4617      	mov	r7, r2
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	688b      	ldr	r3, [r1, #8]
 80087d8:	1e5a      	subs	r2, r3, #1
 80087da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087de:	bf83      	ittte	hi
 80087e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087e4:	195b      	addhi	r3, r3, r5
 80087e6:	9302      	strhi	r3, [sp, #8]
 80087e8:	2300      	movls	r3, #0
 80087ea:	bf86      	itte	hi
 80087ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087f0:	608b      	strhi	r3, [r1, #8]
 80087f2:	9302      	strls	r3, [sp, #8]
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	468b      	mov	fp, r1
 80087f8:	2500      	movs	r5, #0
 80087fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8008802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008806:	4680      	mov	r8, r0
 8008808:	460c      	mov	r4, r1
 800880a:	465e      	mov	r6, fp
 800880c:	46aa      	mov	sl, r5
 800880e:	46a9      	mov	r9, r5
 8008810:	9501      	str	r5, [sp, #4]
 8008812:	68a2      	ldr	r2, [r4, #8]
 8008814:	b152      	cbz	r2, 800882c <_scanf_float+0x60>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b4e      	cmp	r3, #78	; 0x4e
 800881c:	d864      	bhi.n	80088e8 <_scanf_float+0x11c>
 800881e:	2b40      	cmp	r3, #64	; 0x40
 8008820:	d83c      	bhi.n	800889c <_scanf_float+0xd0>
 8008822:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008826:	b2c8      	uxtb	r0, r1
 8008828:	280e      	cmp	r0, #14
 800882a:	d93a      	bls.n	80088a2 <_scanf_float+0xd6>
 800882c:	f1b9 0f00 	cmp.w	r9, #0
 8008830:	d003      	beq.n	800883a <_scanf_float+0x6e>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800883e:	f1ba 0f01 	cmp.w	sl, #1
 8008842:	f200 8113 	bhi.w	8008a6c <_scanf_float+0x2a0>
 8008846:	455e      	cmp	r6, fp
 8008848:	f200 8105 	bhi.w	8008a56 <_scanf_float+0x28a>
 800884c:	2501      	movs	r5, #1
 800884e:	4628      	mov	r0, r5
 8008850:	b007      	add	sp, #28
 8008852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008856:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800885a:	2a0d      	cmp	r2, #13
 800885c:	d8e6      	bhi.n	800882c <_scanf_float+0x60>
 800885e:	a101      	add	r1, pc, #4	; (adr r1, 8008864 <_scanf_float+0x98>)
 8008860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008864:	080089a3 	.word	0x080089a3
 8008868:	0800882d 	.word	0x0800882d
 800886c:	0800882d 	.word	0x0800882d
 8008870:	0800882d 	.word	0x0800882d
 8008874:	08008a03 	.word	0x08008a03
 8008878:	080089db 	.word	0x080089db
 800887c:	0800882d 	.word	0x0800882d
 8008880:	0800882d 	.word	0x0800882d
 8008884:	080089b1 	.word	0x080089b1
 8008888:	0800882d 	.word	0x0800882d
 800888c:	0800882d 	.word	0x0800882d
 8008890:	0800882d 	.word	0x0800882d
 8008894:	0800882d 	.word	0x0800882d
 8008898:	08008969 	.word	0x08008969
 800889c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088a0:	e7db      	b.n	800885a <_scanf_float+0x8e>
 80088a2:	290e      	cmp	r1, #14
 80088a4:	d8c2      	bhi.n	800882c <_scanf_float+0x60>
 80088a6:	a001      	add	r0, pc, #4	; (adr r0, 80088ac <_scanf_float+0xe0>)
 80088a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088ac:	0800895b 	.word	0x0800895b
 80088b0:	0800882d 	.word	0x0800882d
 80088b4:	0800895b 	.word	0x0800895b
 80088b8:	080089ef 	.word	0x080089ef
 80088bc:	0800882d 	.word	0x0800882d
 80088c0:	08008909 	.word	0x08008909
 80088c4:	08008945 	.word	0x08008945
 80088c8:	08008945 	.word	0x08008945
 80088cc:	08008945 	.word	0x08008945
 80088d0:	08008945 	.word	0x08008945
 80088d4:	08008945 	.word	0x08008945
 80088d8:	08008945 	.word	0x08008945
 80088dc:	08008945 	.word	0x08008945
 80088e0:	08008945 	.word	0x08008945
 80088e4:	08008945 	.word	0x08008945
 80088e8:	2b6e      	cmp	r3, #110	; 0x6e
 80088ea:	d809      	bhi.n	8008900 <_scanf_float+0x134>
 80088ec:	2b60      	cmp	r3, #96	; 0x60
 80088ee:	d8b2      	bhi.n	8008856 <_scanf_float+0x8a>
 80088f0:	2b54      	cmp	r3, #84	; 0x54
 80088f2:	d077      	beq.n	80089e4 <_scanf_float+0x218>
 80088f4:	2b59      	cmp	r3, #89	; 0x59
 80088f6:	d199      	bne.n	800882c <_scanf_float+0x60>
 80088f8:	2d07      	cmp	r5, #7
 80088fa:	d197      	bne.n	800882c <_scanf_float+0x60>
 80088fc:	2508      	movs	r5, #8
 80088fe:	e029      	b.n	8008954 <_scanf_float+0x188>
 8008900:	2b74      	cmp	r3, #116	; 0x74
 8008902:	d06f      	beq.n	80089e4 <_scanf_float+0x218>
 8008904:	2b79      	cmp	r3, #121	; 0x79
 8008906:	e7f6      	b.n	80088f6 <_scanf_float+0x12a>
 8008908:	6821      	ldr	r1, [r4, #0]
 800890a:	05c8      	lsls	r0, r1, #23
 800890c:	d51a      	bpl.n	8008944 <_scanf_float+0x178>
 800890e:	9b02      	ldr	r3, [sp, #8]
 8008910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008914:	6021      	str	r1, [r4, #0]
 8008916:	f109 0901 	add.w	r9, r9, #1
 800891a:	b11b      	cbz	r3, 8008924 <_scanf_float+0x158>
 800891c:	3b01      	subs	r3, #1
 800891e:	3201      	adds	r2, #1
 8008920:	9302      	str	r3, [sp, #8]
 8008922:	60a2      	str	r2, [r4, #8]
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	3b01      	subs	r3, #1
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	3301      	adds	r3, #1
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3b01      	subs	r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	f340 8084 	ble.w	8008a44 <_scanf_float+0x278>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	3301      	adds	r3, #1
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	e766      	b.n	8008812 <_scanf_float+0x46>
 8008944:	eb1a 0f05 	cmn.w	sl, r5
 8008948:	f47f af70 	bne.w	800882c <_scanf_float+0x60>
 800894c:	6822      	ldr	r2, [r4, #0]
 800894e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	f806 3b01 	strb.w	r3, [r6], #1
 8008958:	e7e4      	b.n	8008924 <_scanf_float+0x158>
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	0610      	lsls	r0, r2, #24
 800895e:	f57f af65 	bpl.w	800882c <_scanf_float+0x60>
 8008962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008966:	e7f4      	b.n	8008952 <_scanf_float+0x186>
 8008968:	f1ba 0f00 	cmp.w	sl, #0
 800896c:	d10e      	bne.n	800898c <_scanf_float+0x1c0>
 800896e:	f1b9 0f00 	cmp.w	r9, #0
 8008972:	d10e      	bne.n	8008992 <_scanf_float+0x1c6>
 8008974:	6822      	ldr	r2, [r4, #0]
 8008976:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800897a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800897e:	d108      	bne.n	8008992 <_scanf_float+0x1c6>
 8008980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008984:	6022      	str	r2, [r4, #0]
 8008986:	f04f 0a01 	mov.w	sl, #1
 800898a:	e7e3      	b.n	8008954 <_scanf_float+0x188>
 800898c:	f1ba 0f02 	cmp.w	sl, #2
 8008990:	d055      	beq.n	8008a3e <_scanf_float+0x272>
 8008992:	2d01      	cmp	r5, #1
 8008994:	d002      	beq.n	800899c <_scanf_float+0x1d0>
 8008996:	2d04      	cmp	r5, #4
 8008998:	f47f af48 	bne.w	800882c <_scanf_float+0x60>
 800899c:	3501      	adds	r5, #1
 800899e:	b2ed      	uxtb	r5, r5
 80089a0:	e7d8      	b.n	8008954 <_scanf_float+0x188>
 80089a2:	f1ba 0f01 	cmp.w	sl, #1
 80089a6:	f47f af41 	bne.w	800882c <_scanf_float+0x60>
 80089aa:	f04f 0a02 	mov.w	sl, #2
 80089ae:	e7d1      	b.n	8008954 <_scanf_float+0x188>
 80089b0:	b97d      	cbnz	r5, 80089d2 <_scanf_float+0x206>
 80089b2:	f1b9 0f00 	cmp.w	r9, #0
 80089b6:	f47f af3c 	bne.w	8008832 <_scanf_float+0x66>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089c4:	f47f af39 	bne.w	800883a <_scanf_float+0x6e>
 80089c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	2501      	movs	r5, #1
 80089d0:	e7c0      	b.n	8008954 <_scanf_float+0x188>
 80089d2:	2d03      	cmp	r5, #3
 80089d4:	d0e2      	beq.n	800899c <_scanf_float+0x1d0>
 80089d6:	2d05      	cmp	r5, #5
 80089d8:	e7de      	b.n	8008998 <_scanf_float+0x1cc>
 80089da:	2d02      	cmp	r5, #2
 80089dc:	f47f af26 	bne.w	800882c <_scanf_float+0x60>
 80089e0:	2503      	movs	r5, #3
 80089e2:	e7b7      	b.n	8008954 <_scanf_float+0x188>
 80089e4:	2d06      	cmp	r5, #6
 80089e6:	f47f af21 	bne.w	800882c <_scanf_float+0x60>
 80089ea:	2507      	movs	r5, #7
 80089ec:	e7b2      	b.n	8008954 <_scanf_float+0x188>
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	0591      	lsls	r1, r2, #22
 80089f2:	f57f af1b 	bpl.w	800882c <_scanf_float+0x60>
 80089f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a00:	e7a8      	b.n	8008954 <_scanf_float+0x188>
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a0c:	d006      	beq.n	8008a1c <_scanf_float+0x250>
 8008a0e:	0550      	lsls	r0, r2, #21
 8008a10:	f57f af0c 	bpl.w	800882c <_scanf_float+0x60>
 8008a14:	f1b9 0f00 	cmp.w	r9, #0
 8008a18:	f43f af0f 	beq.w	800883a <_scanf_float+0x6e>
 8008a1c:	0591      	lsls	r1, r2, #22
 8008a1e:	bf58      	it	pl
 8008a20:	9901      	ldrpl	r1, [sp, #4]
 8008a22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a26:	bf58      	it	pl
 8008a28:	eba9 0101 	subpl.w	r1, r9, r1
 8008a2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a30:	bf58      	it	pl
 8008a32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a36:	6022      	str	r2, [r4, #0]
 8008a38:	f04f 0900 	mov.w	r9, #0
 8008a3c:	e78a      	b.n	8008954 <_scanf_float+0x188>
 8008a3e:	f04f 0a03 	mov.w	sl, #3
 8008a42:	e787      	b.n	8008954 <_scanf_float+0x188>
 8008a44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4640      	mov	r0, r8
 8008a4c:	4798      	blx	r3
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f43f aedf 	beq.w	8008812 <_scanf_float+0x46>
 8008a54:	e6ea      	b.n	800882c <_scanf_float+0x60>
 8008a56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a5e:	463a      	mov	r2, r7
 8008a60:	4640      	mov	r0, r8
 8008a62:	4798      	blx	r3
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	6123      	str	r3, [r4, #16]
 8008a6a:	e6ec      	b.n	8008846 <_scanf_float+0x7a>
 8008a6c:	1e6b      	subs	r3, r5, #1
 8008a6e:	2b06      	cmp	r3, #6
 8008a70:	d825      	bhi.n	8008abe <_scanf_float+0x2f2>
 8008a72:	2d02      	cmp	r5, #2
 8008a74:	d836      	bhi.n	8008ae4 <_scanf_float+0x318>
 8008a76:	455e      	cmp	r6, fp
 8008a78:	f67f aee8 	bls.w	800884c <_scanf_float+0x80>
 8008a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a84:	463a      	mov	r2, r7
 8008a86:	4640      	mov	r0, r8
 8008a88:	4798      	blx	r3
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	6123      	str	r3, [r4, #16]
 8008a90:	e7f1      	b.n	8008a76 <_scanf_float+0x2aa>
 8008a92:	9802      	ldr	r0, [sp, #8]
 8008a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a9c:	9002      	str	r0, [sp, #8]
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4798      	blx	r3
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aae:	fa5f fa8a 	uxtb.w	sl, sl
 8008ab2:	f1ba 0f02 	cmp.w	sl, #2
 8008ab6:	d1ec      	bne.n	8008a92 <_scanf_float+0x2c6>
 8008ab8:	3d03      	subs	r5, #3
 8008aba:	b2ed      	uxtb	r5, r5
 8008abc:	1b76      	subs	r6, r6, r5
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	05da      	lsls	r2, r3, #23
 8008ac2:	d52f      	bpl.n	8008b24 <_scanf_float+0x358>
 8008ac4:	055b      	lsls	r3, r3, #21
 8008ac6:	d510      	bpl.n	8008aea <_scanf_float+0x31e>
 8008ac8:	455e      	cmp	r6, fp
 8008aca:	f67f aebf 	bls.w	800884c <_scanf_float+0x80>
 8008ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ad6:	463a      	mov	r2, r7
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4798      	blx	r3
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	e7f1      	b.n	8008ac8 <_scanf_float+0x2fc>
 8008ae4:	46aa      	mov	sl, r5
 8008ae6:	9602      	str	r6, [sp, #8]
 8008ae8:	e7df      	b.n	8008aaa <_scanf_float+0x2de>
 8008aea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	2965      	cmp	r1, #101	; 0x65
 8008af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008af6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	d00c      	beq.n	8008b18 <_scanf_float+0x34c>
 8008afe:	2945      	cmp	r1, #69	; 0x45
 8008b00:	d00a      	beq.n	8008b18 <_scanf_float+0x34c>
 8008b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b06:	463a      	mov	r2, r7
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4798      	blx	r3
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	1eb5      	subs	r5, r6, #2
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b1c:	463a      	mov	r2, r7
 8008b1e:	4640      	mov	r0, r8
 8008b20:	4798      	blx	r3
 8008b22:	462e      	mov	r6, r5
 8008b24:	6825      	ldr	r5, [r4, #0]
 8008b26:	f015 0510 	ands.w	r5, r5, #16
 8008b2a:	d158      	bne.n	8008bde <_scanf_float+0x412>
 8008b2c:	7035      	strb	r5, [r6, #0]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b38:	d11c      	bne.n	8008b74 <_scanf_float+0x3a8>
 8008b3a:	9b01      	ldr	r3, [sp, #4]
 8008b3c:	454b      	cmp	r3, r9
 8008b3e:	eba3 0209 	sub.w	r2, r3, r9
 8008b42:	d124      	bne.n	8008b8e <_scanf_float+0x3c2>
 8008b44:	2200      	movs	r2, #0
 8008b46:	4659      	mov	r1, fp
 8008b48:	4640      	mov	r0, r8
 8008b4a:	f000 ff43 	bl	80099d4 <_strtod_r>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	6821      	ldr	r1, [r4, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f011 0f02 	tst.w	r1, #2
 8008b58:	ec57 6b10 	vmov	r6, r7, d0
 8008b5c:	f103 0204 	add.w	r2, r3, #4
 8008b60:	d020      	beq.n	8008ba4 <_scanf_float+0x3d8>
 8008b62:	9903      	ldr	r1, [sp, #12]
 8008b64:	600a      	str	r2, [r1, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	e9c3 6700 	strd	r6, r7, [r3]
 8008b6c:	68e3      	ldr	r3, [r4, #12]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60e3      	str	r3, [r4, #12]
 8008b72:	e66c      	b.n	800884e <_scanf_float+0x82>
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0e4      	beq.n	8008b44 <_scanf_float+0x378>
 8008b7a:	9905      	ldr	r1, [sp, #20]
 8008b7c:	230a      	movs	r3, #10
 8008b7e:	462a      	mov	r2, r5
 8008b80:	3101      	adds	r1, #1
 8008b82:	4640      	mov	r0, r8
 8008b84:	f000 ffb0 	bl	8009ae8 <_strtol_r>
 8008b88:	9b04      	ldr	r3, [sp, #16]
 8008b8a:	9e05      	ldr	r6, [sp, #20]
 8008b8c:	1ac2      	subs	r2, r0, r3
 8008b8e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b92:	429e      	cmp	r6, r3
 8008b94:	bf28      	it	cs
 8008b96:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b9a:	4912      	ldr	r1, [pc, #72]	; (8008be4 <_scanf_float+0x418>)
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f000 f85f 	bl	8008c60 <siprintf>
 8008ba2:	e7cf      	b.n	8008b44 <_scanf_float+0x378>
 8008ba4:	f011 0f04 	tst.w	r1, #4
 8008ba8:	9903      	ldr	r1, [sp, #12]
 8008baa:	600a      	str	r2, [r1, #0]
 8008bac:	d1db      	bne.n	8008b66 <_scanf_float+0x39a>
 8008bae:	f8d3 8000 	ldr.w	r8, [r3]
 8008bb2:	ee10 2a10 	vmov	r2, s0
 8008bb6:	ee10 0a10 	vmov	r0, s0
 8008bba:	463b      	mov	r3, r7
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	f7f7 ffd5 	bl	8000b6c <__aeabi_dcmpun>
 8008bc2:	b128      	cbz	r0, 8008bd0 <_scanf_float+0x404>
 8008bc4:	4808      	ldr	r0, [pc, #32]	; (8008be8 <_scanf_float+0x41c>)
 8008bc6:	f000 f811 	bl	8008bec <nanf>
 8008bca:	ed88 0a00 	vstr	s0, [r8]
 8008bce:	e7cd      	b.n	8008b6c <_scanf_float+0x3a0>
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f8 f828 	bl	8000c28 <__aeabi_d2f>
 8008bd8:	f8c8 0000 	str.w	r0, [r8]
 8008bdc:	e7c6      	b.n	8008b6c <_scanf_float+0x3a0>
 8008bde:	2500      	movs	r5, #0
 8008be0:	e635      	b.n	800884e <_scanf_float+0x82>
 8008be2:	bf00      	nop
 8008be4:	0800d0fa 	.word	0x0800d0fa
 8008be8:	0800d52b 	.word	0x0800d52b

08008bec <nanf>:
 8008bec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008bf4 <nanf+0x8>
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	7fc00000 	.word	0x7fc00000

08008bf8 <sniprintf>:
 8008bf8:	b40c      	push	{r2, r3}
 8008bfa:	b530      	push	{r4, r5, lr}
 8008bfc:	4b17      	ldr	r3, [pc, #92]	; (8008c5c <sniprintf+0x64>)
 8008bfe:	1e0c      	subs	r4, r1, #0
 8008c00:	681d      	ldr	r5, [r3, #0]
 8008c02:	b09d      	sub	sp, #116	; 0x74
 8008c04:	da08      	bge.n	8008c18 <sniprintf+0x20>
 8008c06:	238b      	movs	r3, #139	; 0x8b
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	b01d      	add	sp, #116	; 0x74
 8008c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c14:	b002      	add	sp, #8
 8008c16:	4770      	bx	lr
 8008c18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008c1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c20:	bf14      	ite	ne
 8008c22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c26:	4623      	moveq	r3, r4
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c30:	9002      	str	r0, [sp, #8]
 8008c32:	9006      	str	r0, [sp, #24]
 8008c34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c3a:	ab21      	add	r3, sp, #132	; 0x84
 8008c3c:	a902      	add	r1, sp, #8
 8008c3e:	4628      	mov	r0, r5
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	f002 ff8b 	bl	800bb5c <_svfiprintf_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	bfbc      	itt	lt
 8008c4a:	238b      	movlt	r3, #139	; 0x8b
 8008c4c:	602b      	strlt	r3, [r5, #0]
 8008c4e:	2c00      	cmp	r4, #0
 8008c50:	d0dd      	beq.n	8008c0e <sniprintf+0x16>
 8008c52:	9b02      	ldr	r3, [sp, #8]
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	e7d9      	b.n	8008c0e <sniprintf+0x16>
 8008c5a:	bf00      	nop
 8008c5c:	20000074 	.word	0x20000074

08008c60 <siprintf>:
 8008c60:	b40e      	push	{r1, r2, r3}
 8008c62:	b500      	push	{lr}
 8008c64:	b09c      	sub	sp, #112	; 0x70
 8008c66:	ab1d      	add	r3, sp, #116	; 0x74
 8008c68:	9002      	str	r0, [sp, #8]
 8008c6a:	9006      	str	r0, [sp, #24]
 8008c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c70:	4809      	ldr	r0, [pc, #36]	; (8008c98 <siprintf+0x38>)
 8008c72:	9107      	str	r1, [sp, #28]
 8008c74:	9104      	str	r1, [sp, #16]
 8008c76:	4909      	ldr	r1, [pc, #36]	; (8008c9c <siprintf+0x3c>)
 8008c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7c:	9105      	str	r1, [sp, #20]
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	a902      	add	r1, sp, #8
 8008c84:	f002 ff6a 	bl	800bb5c <_svfiprintf_r>
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	b01c      	add	sp, #112	; 0x70
 8008c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c94:	b003      	add	sp, #12
 8008c96:	4770      	bx	lr
 8008c98:	20000074 	.word	0x20000074
 8008c9c:	ffff0208 	.word	0xffff0208

08008ca0 <siscanf>:
 8008ca0:	b40e      	push	{r1, r2, r3}
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	b09f      	sub	sp, #124	; 0x7c
 8008ca6:	ac21      	add	r4, sp, #132	; 0x84
 8008ca8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008cac:	f854 2b04 	ldr.w	r2, [r4], #4
 8008cb0:	9201      	str	r2, [sp, #4]
 8008cb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008cb6:	9004      	str	r0, [sp, #16]
 8008cb8:	9008      	str	r0, [sp, #32]
 8008cba:	f7f7 faa9 	bl	8000210 <strlen>
 8008cbe:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <siscanf+0x50>)
 8008cc0:	9005      	str	r0, [sp, #20]
 8008cc2:	9009      	str	r0, [sp, #36]	; 0x24
 8008cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8008cc6:	480b      	ldr	r0, [pc, #44]	; (8008cf4 <siscanf+0x54>)
 8008cc8:	9a01      	ldr	r2, [sp, #4]
 8008cca:	6800      	ldr	r0, [r0, #0]
 8008ccc:	9403      	str	r4, [sp, #12]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8008cd2:	9316      	str	r3, [sp, #88]	; 0x58
 8008cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008cdc:	a904      	add	r1, sp, #16
 8008cde:	4623      	mov	r3, r4
 8008ce0:	f003 f896 	bl	800be10 <__ssvfiscanf_r>
 8008ce4:	b01f      	add	sp, #124	; 0x7c
 8008ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cea:	b003      	add	sp, #12
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	08008d1b 	.word	0x08008d1b
 8008cf4:	20000074 	.word	0x20000074

08008cf8 <__sread>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d00:	f003 fb4a 	bl	800c398 <_read_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	bfab      	itete	ge
 8008d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d0c:	181b      	addge	r3, r3, r0
 8008d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d12:	bfac      	ite	ge
 8008d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d16:	81a3      	strhlt	r3, [r4, #12]
 8008d18:	bd10      	pop	{r4, pc}

08008d1a <__seofread>:
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	4770      	bx	lr

08008d1e <__swrite>:
 8008d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d22:	461f      	mov	r7, r3
 8008d24:	898b      	ldrh	r3, [r1, #12]
 8008d26:	05db      	lsls	r3, r3, #23
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	d505      	bpl.n	8008d3c <__swrite+0x1e>
 8008d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d34:	2302      	movs	r3, #2
 8008d36:	2200      	movs	r2, #0
 8008d38:	f002 f906 	bl	800af48 <_lseek_r>
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	4632      	mov	r2, r6
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d52:	f000 beeb 	b.w	8009b2c <_write_r>

08008d56 <__sseek>:
 8008d56:	b510      	push	{r4, lr}
 8008d58:	460c      	mov	r4, r1
 8008d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5e:	f002 f8f3 	bl	800af48 <_lseek_r>
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	bf15      	itete	ne
 8008d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d72:	81a3      	strheq	r3, [r4, #12]
 8008d74:	bf18      	it	ne
 8008d76:	81a3      	strhne	r3, [r4, #12]
 8008d78:	bd10      	pop	{r4, pc}

08008d7a <__sclose>:
 8008d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7e:	f000 bee7 	b.w	8009b50 <_close_r>

08008d82 <sulp>:
 8008d82:	b570      	push	{r4, r5, r6, lr}
 8008d84:	4604      	mov	r4, r0
 8008d86:	460d      	mov	r5, r1
 8008d88:	ec45 4b10 	vmov	d0, r4, r5
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	f002 fc81 	bl	800b694 <__ulp>
 8008d92:	ec51 0b10 	vmov	r0, r1, d0
 8008d96:	b17e      	cbz	r6, 8008db8 <sulp+0x36>
 8008d98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dd09      	ble.n	8008db8 <sulp+0x36>
 8008da4:	051b      	lsls	r3, r3, #20
 8008da6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008daa:	2400      	movs	r4, #0
 8008dac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008db0:	4622      	mov	r2, r4
 8008db2:	462b      	mov	r3, r5
 8008db4:	f7f7 fc40 	bl	8000638 <__aeabi_dmul>
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	0000      	movs	r0, r0
 8008dbc:	0000      	movs	r0, r0
	...

08008dc0 <_strtod_l>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	b0a3      	sub	sp, #140	; 0x8c
 8008dc6:	461f      	mov	r7, r3
 8008dc8:	2300      	movs	r3, #0
 8008dca:	931e      	str	r3, [sp, #120]	; 0x78
 8008dcc:	4ba4      	ldr	r3, [pc, #656]	; (8009060 <_strtod_l+0x2a0>)
 8008dce:	9219      	str	r2, [sp, #100]	; 0x64
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	9307      	str	r3, [sp, #28]
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	4688      	mov	r8, r1
 8008dda:	f7f7 fa19 	bl	8000210 <strlen>
 8008dde:	f04f 0a00 	mov.w	sl, #0
 8008de2:	4605      	mov	r5, r0
 8008de4:	f04f 0b00 	mov.w	fp, #0
 8008de8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008dec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	2a2b      	cmp	r2, #43	; 0x2b
 8008df2:	d04c      	beq.n	8008e8e <_strtod_l+0xce>
 8008df4:	d839      	bhi.n	8008e6a <_strtod_l+0xaa>
 8008df6:	2a0d      	cmp	r2, #13
 8008df8:	d832      	bhi.n	8008e60 <_strtod_l+0xa0>
 8008dfa:	2a08      	cmp	r2, #8
 8008dfc:	d832      	bhi.n	8008e64 <_strtod_l+0xa4>
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	d03c      	beq.n	8008e7c <_strtod_l+0xbc>
 8008e02:	2300      	movs	r3, #0
 8008e04:	930e      	str	r3, [sp, #56]	; 0x38
 8008e06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008e08:	7833      	ldrb	r3, [r6, #0]
 8008e0a:	2b30      	cmp	r3, #48	; 0x30
 8008e0c:	f040 80b4 	bne.w	8008f78 <_strtod_l+0x1b8>
 8008e10:	7873      	ldrb	r3, [r6, #1]
 8008e12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e16:	2b58      	cmp	r3, #88	; 0x58
 8008e18:	d16c      	bne.n	8008ef4 <_strtod_l+0x134>
 8008e1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	ab1e      	add	r3, sp, #120	; 0x78
 8008e20:	9702      	str	r7, [sp, #8]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4a8f      	ldr	r2, [pc, #572]	; (8009064 <_strtod_l+0x2a4>)
 8008e26:	ab1f      	add	r3, sp, #124	; 0x7c
 8008e28:	a91d      	add	r1, sp, #116	; 0x74
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f001 fd80 	bl	800a930 <__gethex>
 8008e30:	f010 0707 	ands.w	r7, r0, #7
 8008e34:	4605      	mov	r5, r0
 8008e36:	d005      	beq.n	8008e44 <_strtod_l+0x84>
 8008e38:	2f06      	cmp	r7, #6
 8008e3a:	d12a      	bne.n	8008e92 <_strtod_l+0xd2>
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	2300      	movs	r3, #0
 8008e40:	961d      	str	r6, [sp, #116]	; 0x74
 8008e42:	930e      	str	r3, [sp, #56]	; 0x38
 8008e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 8596 	bne.w	8009978 <_strtod_l+0xbb8>
 8008e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e4e:	b1db      	cbz	r3, 8008e88 <_strtod_l+0xc8>
 8008e50:	4652      	mov	r2, sl
 8008e52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e56:	ec43 2b10 	vmov	d0, r2, r3
 8008e5a:	b023      	add	sp, #140	; 0x8c
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	2a20      	cmp	r2, #32
 8008e62:	d1ce      	bne.n	8008e02 <_strtod_l+0x42>
 8008e64:	3301      	adds	r3, #1
 8008e66:	931d      	str	r3, [sp, #116]	; 0x74
 8008e68:	e7c0      	b.n	8008dec <_strtod_l+0x2c>
 8008e6a:	2a2d      	cmp	r2, #45	; 0x2d
 8008e6c:	d1c9      	bne.n	8008e02 <_strtod_l+0x42>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	920e      	str	r2, [sp, #56]	; 0x38
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	921d      	str	r2, [sp, #116]	; 0x74
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1c4      	bne.n	8008e06 <_strtod_l+0x46>
 8008e7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e7e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f040 8576 	bne.w	8009974 <_strtod_l+0xbb4>
 8008e88:	4652      	mov	r2, sl
 8008e8a:	465b      	mov	r3, fp
 8008e8c:	e7e3      	b.n	8008e56 <_strtod_l+0x96>
 8008e8e:	2200      	movs	r2, #0
 8008e90:	e7ee      	b.n	8008e70 <_strtod_l+0xb0>
 8008e92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e94:	b13a      	cbz	r2, 8008ea6 <_strtod_l+0xe6>
 8008e96:	2135      	movs	r1, #53	; 0x35
 8008e98:	a820      	add	r0, sp, #128	; 0x80
 8008e9a:	f002 fd06 	bl	800b8aa <__copybits>
 8008e9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f002 f8cb 	bl	800b03c <_Bfree>
 8008ea6:	3f01      	subs	r7, #1
 8008ea8:	2f05      	cmp	r7, #5
 8008eaa:	d807      	bhi.n	8008ebc <_strtod_l+0xfc>
 8008eac:	e8df f007 	tbb	[pc, r7]
 8008eb0:	1d180b0e 	.word	0x1d180b0e
 8008eb4:	030e      	.short	0x030e
 8008eb6:	f04f 0b00 	mov.w	fp, #0
 8008eba:	46da      	mov	sl, fp
 8008ebc:	0728      	lsls	r0, r5, #28
 8008ebe:	d5c1      	bpl.n	8008e44 <_strtod_l+0x84>
 8008ec0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ec4:	e7be      	b.n	8008e44 <_strtod_l+0x84>
 8008ec6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008eca:	e7f7      	b.n	8008ebc <_strtod_l+0xfc>
 8008ecc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008ed0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008ed2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ed6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008eda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ede:	e7ed      	b.n	8008ebc <_strtod_l+0xfc>
 8008ee0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009068 <_strtod_l+0x2a8>
 8008ee4:	f04f 0a00 	mov.w	sl, #0
 8008ee8:	e7e8      	b.n	8008ebc <_strtod_l+0xfc>
 8008eea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008eee:	f04f 3aff 	mov.w	sl, #4294967295
 8008ef2:	e7e3      	b.n	8008ebc <_strtod_l+0xfc>
 8008ef4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	921d      	str	r2, [sp, #116]	; 0x74
 8008efa:	785b      	ldrb	r3, [r3, #1]
 8008efc:	2b30      	cmp	r3, #48	; 0x30
 8008efe:	d0f9      	beq.n	8008ef4 <_strtod_l+0x134>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d09f      	beq.n	8008e44 <_strtod_l+0x84>
 8008f04:	2301      	movs	r3, #1
 8008f06:	f04f 0900 	mov.w	r9, #0
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008f14:	464f      	mov	r7, r9
 8008f16:	220a      	movs	r2, #10
 8008f18:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008f1a:	7806      	ldrb	r6, [r0, #0]
 8008f1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f20:	b2d9      	uxtb	r1, r3
 8008f22:	2909      	cmp	r1, #9
 8008f24:	d92a      	bls.n	8008f7c <_strtod_l+0x1bc>
 8008f26:	9907      	ldr	r1, [sp, #28]
 8008f28:	462a      	mov	r2, r5
 8008f2a:	f003 fa9b 	bl	800c464 <strncmp>
 8008f2e:	b398      	cbz	r0, 8008f98 <_strtod_l+0x1d8>
 8008f30:	2000      	movs	r0, #0
 8008f32:	4633      	mov	r3, r6
 8008f34:	463d      	mov	r5, r7
 8008f36:	9007      	str	r0, [sp, #28]
 8008f38:	4602      	mov	r2, r0
 8008f3a:	2b65      	cmp	r3, #101	; 0x65
 8008f3c:	d001      	beq.n	8008f42 <_strtod_l+0x182>
 8008f3e:	2b45      	cmp	r3, #69	; 0x45
 8008f40:	d118      	bne.n	8008f74 <_strtod_l+0x1b4>
 8008f42:	b91d      	cbnz	r5, 8008f4c <_strtod_l+0x18c>
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	4303      	orrs	r3, r0
 8008f48:	d098      	beq.n	8008e7c <_strtod_l+0xbc>
 8008f4a:	2500      	movs	r5, #0
 8008f4c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008f50:	f108 0301 	add.w	r3, r8, #1
 8008f54:	931d      	str	r3, [sp, #116]	; 0x74
 8008f56:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008f5a:	2b2b      	cmp	r3, #43	; 0x2b
 8008f5c:	d075      	beq.n	800904a <_strtod_l+0x28a>
 8008f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8008f60:	d07b      	beq.n	800905a <_strtod_l+0x29a>
 8008f62:	f04f 0c00 	mov.w	ip, #0
 8008f66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008f6a:	2909      	cmp	r1, #9
 8008f6c:	f240 8082 	bls.w	8009074 <_strtod_l+0x2b4>
 8008f70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008f74:	2600      	movs	r6, #0
 8008f76:	e09d      	b.n	80090b4 <_strtod_l+0x2f4>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e7c4      	b.n	8008f06 <_strtod_l+0x146>
 8008f7c:	2f08      	cmp	r7, #8
 8008f7e:	bfd8      	it	le
 8008f80:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f82:	f100 0001 	add.w	r0, r0, #1
 8008f86:	bfda      	itte	le
 8008f88:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f8c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008f92:	3701      	adds	r7, #1
 8008f94:	901d      	str	r0, [sp, #116]	; 0x74
 8008f96:	e7bf      	b.n	8008f18 <_strtod_l+0x158>
 8008f98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f9a:	195a      	adds	r2, r3, r5
 8008f9c:	921d      	str	r2, [sp, #116]	; 0x74
 8008f9e:	5d5b      	ldrb	r3, [r3, r5]
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	d037      	beq.n	8009014 <_strtod_l+0x254>
 8008fa4:	9007      	str	r0, [sp, #28]
 8008fa6:	463d      	mov	r5, r7
 8008fa8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008fac:	2a09      	cmp	r2, #9
 8008fae:	d912      	bls.n	8008fd6 <_strtod_l+0x216>
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	e7c2      	b.n	8008f3a <_strtod_l+0x17a>
 8008fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	921d      	str	r2, [sp, #116]	; 0x74
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	2b30      	cmp	r3, #48	; 0x30
 8008fc0:	d0f8      	beq.n	8008fb4 <_strtod_l+0x1f4>
 8008fc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008fc6:	2a08      	cmp	r2, #8
 8008fc8:	f200 84db 	bhi.w	8009982 <_strtod_l+0xbc2>
 8008fcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008fce:	9007      	str	r0, [sp, #28]
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	920a      	str	r2, [sp, #40]	; 0x28
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	3b30      	subs	r3, #48	; 0x30
 8008fd8:	f100 0201 	add.w	r2, r0, #1
 8008fdc:	d014      	beq.n	8009008 <_strtod_l+0x248>
 8008fde:	9907      	ldr	r1, [sp, #28]
 8008fe0:	4411      	add	r1, r2
 8008fe2:	9107      	str	r1, [sp, #28]
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	eb00 0e05 	add.w	lr, r0, r5
 8008fea:	210a      	movs	r1, #10
 8008fec:	4572      	cmp	r2, lr
 8008fee:	d113      	bne.n	8009018 <_strtod_l+0x258>
 8008ff0:	182a      	adds	r2, r5, r0
 8008ff2:	2a08      	cmp	r2, #8
 8008ff4:	f105 0501 	add.w	r5, r5, #1
 8008ff8:	4405      	add	r5, r0
 8008ffa:	dc1c      	bgt.n	8009036 <_strtod_l+0x276>
 8008ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffe:	220a      	movs	r2, #10
 8009000:	fb02 3301 	mla	r3, r2, r1, r3
 8009004:	9309      	str	r3, [sp, #36]	; 0x24
 8009006:	2200      	movs	r2, #0
 8009008:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800900a:	1c59      	adds	r1, r3, #1
 800900c:	911d      	str	r1, [sp, #116]	; 0x74
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	4610      	mov	r0, r2
 8009012:	e7c9      	b.n	8008fa8 <_strtod_l+0x1e8>
 8009014:	4638      	mov	r0, r7
 8009016:	e7d2      	b.n	8008fbe <_strtod_l+0x1fe>
 8009018:	2a08      	cmp	r2, #8
 800901a:	dc04      	bgt.n	8009026 <_strtod_l+0x266>
 800901c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800901e:	434e      	muls	r6, r1
 8009020:	9609      	str	r6, [sp, #36]	; 0x24
 8009022:	3201      	adds	r2, #1
 8009024:	e7e2      	b.n	8008fec <_strtod_l+0x22c>
 8009026:	f102 0c01 	add.w	ip, r2, #1
 800902a:	f1bc 0f10 	cmp.w	ip, #16
 800902e:	bfd8      	it	le
 8009030:	fb01 f909 	mulle.w	r9, r1, r9
 8009034:	e7f5      	b.n	8009022 <_strtod_l+0x262>
 8009036:	2d10      	cmp	r5, #16
 8009038:	bfdc      	itt	le
 800903a:	220a      	movle	r2, #10
 800903c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009040:	e7e1      	b.n	8009006 <_strtod_l+0x246>
 8009042:	2300      	movs	r3, #0
 8009044:	9307      	str	r3, [sp, #28]
 8009046:	2201      	movs	r2, #1
 8009048:	e77c      	b.n	8008f44 <_strtod_l+0x184>
 800904a:	f04f 0c00 	mov.w	ip, #0
 800904e:	f108 0302 	add.w	r3, r8, #2
 8009052:	931d      	str	r3, [sp, #116]	; 0x74
 8009054:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009058:	e785      	b.n	8008f66 <_strtod_l+0x1a6>
 800905a:	f04f 0c01 	mov.w	ip, #1
 800905e:	e7f6      	b.n	800904e <_strtod_l+0x28e>
 8009060:	0800d350 	.word	0x0800d350
 8009064:	0800d100 	.word	0x0800d100
 8009068:	7ff00000 	.word	0x7ff00000
 800906c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800906e:	1c59      	adds	r1, r3, #1
 8009070:	911d      	str	r1, [sp, #116]	; 0x74
 8009072:	785b      	ldrb	r3, [r3, #1]
 8009074:	2b30      	cmp	r3, #48	; 0x30
 8009076:	d0f9      	beq.n	800906c <_strtod_l+0x2ac>
 8009078:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800907c:	2908      	cmp	r1, #8
 800907e:	f63f af79 	bhi.w	8008f74 <_strtod_l+0x1b4>
 8009082:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009088:	9308      	str	r3, [sp, #32]
 800908a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800908c:	1c59      	adds	r1, r3, #1
 800908e:	911d      	str	r1, [sp, #116]	; 0x74
 8009090:	785b      	ldrb	r3, [r3, #1]
 8009092:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009096:	2e09      	cmp	r6, #9
 8009098:	d937      	bls.n	800910a <_strtod_l+0x34a>
 800909a:	9e08      	ldr	r6, [sp, #32]
 800909c:	1b89      	subs	r1, r1, r6
 800909e:	2908      	cmp	r1, #8
 80090a0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80090a4:	dc02      	bgt.n	80090ac <_strtod_l+0x2ec>
 80090a6:	4576      	cmp	r6, lr
 80090a8:	bfa8      	it	ge
 80090aa:	4676      	movge	r6, lr
 80090ac:	f1bc 0f00 	cmp.w	ip, #0
 80090b0:	d000      	beq.n	80090b4 <_strtod_l+0x2f4>
 80090b2:	4276      	negs	r6, r6
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d14f      	bne.n	8009158 <_strtod_l+0x398>
 80090b8:	9904      	ldr	r1, [sp, #16]
 80090ba:	4301      	orrs	r1, r0
 80090bc:	f47f aec2 	bne.w	8008e44 <_strtod_l+0x84>
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	f47f aedb 	bne.w	8008e7c <_strtod_l+0xbc>
 80090c6:	2b69      	cmp	r3, #105	; 0x69
 80090c8:	d027      	beq.n	800911a <_strtod_l+0x35a>
 80090ca:	dc24      	bgt.n	8009116 <_strtod_l+0x356>
 80090cc:	2b49      	cmp	r3, #73	; 0x49
 80090ce:	d024      	beq.n	800911a <_strtod_l+0x35a>
 80090d0:	2b4e      	cmp	r3, #78	; 0x4e
 80090d2:	f47f aed3 	bne.w	8008e7c <_strtod_l+0xbc>
 80090d6:	499e      	ldr	r1, [pc, #632]	; (8009350 <_strtod_l+0x590>)
 80090d8:	a81d      	add	r0, sp, #116	; 0x74
 80090da:	f001 fe81 	bl	800ade0 <__match>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f43f aecc 	beq.w	8008e7c <_strtod_l+0xbc>
 80090e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b28      	cmp	r3, #40	; 0x28
 80090ea:	d12d      	bne.n	8009148 <_strtod_l+0x388>
 80090ec:	4999      	ldr	r1, [pc, #612]	; (8009354 <_strtod_l+0x594>)
 80090ee:	aa20      	add	r2, sp, #128	; 0x80
 80090f0:	a81d      	add	r0, sp, #116	; 0x74
 80090f2:	f001 fe89 	bl	800ae08 <__hexnan>
 80090f6:	2805      	cmp	r0, #5
 80090f8:	d126      	bne.n	8009148 <_strtod_l+0x388>
 80090fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090fc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009100:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009104:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009108:	e69c      	b.n	8008e44 <_strtod_l+0x84>
 800910a:	210a      	movs	r1, #10
 800910c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009110:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009114:	e7b9      	b.n	800908a <_strtod_l+0x2ca>
 8009116:	2b6e      	cmp	r3, #110	; 0x6e
 8009118:	e7db      	b.n	80090d2 <_strtod_l+0x312>
 800911a:	498f      	ldr	r1, [pc, #572]	; (8009358 <_strtod_l+0x598>)
 800911c:	a81d      	add	r0, sp, #116	; 0x74
 800911e:	f001 fe5f 	bl	800ade0 <__match>
 8009122:	2800      	cmp	r0, #0
 8009124:	f43f aeaa 	beq.w	8008e7c <_strtod_l+0xbc>
 8009128:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800912a:	498c      	ldr	r1, [pc, #560]	; (800935c <_strtod_l+0x59c>)
 800912c:	3b01      	subs	r3, #1
 800912e:	a81d      	add	r0, sp, #116	; 0x74
 8009130:	931d      	str	r3, [sp, #116]	; 0x74
 8009132:	f001 fe55 	bl	800ade0 <__match>
 8009136:	b910      	cbnz	r0, 800913e <_strtod_l+0x37e>
 8009138:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800913a:	3301      	adds	r3, #1
 800913c:	931d      	str	r3, [sp, #116]	; 0x74
 800913e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800936c <_strtod_l+0x5ac>
 8009142:	f04f 0a00 	mov.w	sl, #0
 8009146:	e67d      	b.n	8008e44 <_strtod_l+0x84>
 8009148:	4885      	ldr	r0, [pc, #532]	; (8009360 <_strtod_l+0x5a0>)
 800914a:	f003 f939 	bl	800c3c0 <nan>
 800914e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009152:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009156:	e675      	b.n	8008e44 <_strtod_l+0x84>
 8009158:	9b07      	ldr	r3, [sp, #28]
 800915a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800915c:	1af3      	subs	r3, r6, r3
 800915e:	2f00      	cmp	r7, #0
 8009160:	bf08      	it	eq
 8009162:	462f      	moveq	r7, r5
 8009164:	2d10      	cmp	r5, #16
 8009166:	9308      	str	r3, [sp, #32]
 8009168:	46a8      	mov	r8, r5
 800916a:	bfa8      	it	ge
 800916c:	f04f 0810 	movge.w	r8, #16
 8009170:	f7f7 f9e8 	bl	8000544 <__aeabi_ui2d>
 8009174:	2d09      	cmp	r5, #9
 8009176:	4682      	mov	sl, r0
 8009178:	468b      	mov	fp, r1
 800917a:	dd13      	ble.n	80091a4 <_strtod_l+0x3e4>
 800917c:	4b79      	ldr	r3, [pc, #484]	; (8009364 <_strtod_l+0x5a4>)
 800917e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009182:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009186:	f7f7 fa57 	bl	8000638 <__aeabi_dmul>
 800918a:	4682      	mov	sl, r0
 800918c:	4648      	mov	r0, r9
 800918e:	468b      	mov	fp, r1
 8009190:	f7f7 f9d8 	bl	8000544 <__aeabi_ui2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	f7f7 f896 	bl	80002cc <__adddf3>
 80091a0:	4682      	mov	sl, r0
 80091a2:	468b      	mov	fp, r1
 80091a4:	2d0f      	cmp	r5, #15
 80091a6:	dc38      	bgt.n	800921a <_strtod_l+0x45a>
 80091a8:	9b08      	ldr	r3, [sp, #32]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f43f ae4a 	beq.w	8008e44 <_strtod_l+0x84>
 80091b0:	dd24      	ble.n	80091fc <_strtod_l+0x43c>
 80091b2:	2b16      	cmp	r3, #22
 80091b4:	dc0b      	bgt.n	80091ce <_strtod_l+0x40e>
 80091b6:	4d6b      	ldr	r5, [pc, #428]	; (8009364 <_strtod_l+0x5a4>)
 80091b8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80091bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80091c0:	4652      	mov	r2, sl
 80091c2:	465b      	mov	r3, fp
 80091c4:	f7f7 fa38 	bl	8000638 <__aeabi_dmul>
 80091c8:	4682      	mov	sl, r0
 80091ca:	468b      	mov	fp, r1
 80091cc:	e63a      	b.n	8008e44 <_strtod_l+0x84>
 80091ce:	9a08      	ldr	r2, [sp, #32]
 80091d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80091d4:	4293      	cmp	r3, r2
 80091d6:	db20      	blt.n	800921a <_strtod_l+0x45a>
 80091d8:	4c62      	ldr	r4, [pc, #392]	; (8009364 <_strtod_l+0x5a4>)
 80091da:	f1c5 050f 	rsb	r5, r5, #15
 80091de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091e2:	4652      	mov	r2, sl
 80091e4:	465b      	mov	r3, fp
 80091e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ea:	f7f7 fa25 	bl	8000638 <__aeabi_dmul>
 80091ee:	9b08      	ldr	r3, [sp, #32]
 80091f0:	1b5d      	subs	r5, r3, r5
 80091f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091fa:	e7e3      	b.n	80091c4 <_strtod_l+0x404>
 80091fc:	9b08      	ldr	r3, [sp, #32]
 80091fe:	3316      	adds	r3, #22
 8009200:	db0b      	blt.n	800921a <_strtod_l+0x45a>
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	4a57      	ldr	r2, [pc, #348]	; (8009364 <_strtod_l+0x5a4>)
 8009206:	1b9e      	subs	r6, r3, r6
 8009208:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800920c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009210:	4650      	mov	r0, sl
 8009212:	4659      	mov	r1, fp
 8009214:	f7f7 fb3a 	bl	800088c <__aeabi_ddiv>
 8009218:	e7d6      	b.n	80091c8 <_strtod_l+0x408>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	eba5 0808 	sub.w	r8, r5, r8
 8009220:	4498      	add	r8, r3
 8009222:	f1b8 0f00 	cmp.w	r8, #0
 8009226:	dd71      	ble.n	800930c <_strtod_l+0x54c>
 8009228:	f018 030f 	ands.w	r3, r8, #15
 800922c:	d00a      	beq.n	8009244 <_strtod_l+0x484>
 800922e:	494d      	ldr	r1, [pc, #308]	; (8009364 <_strtod_l+0x5a4>)
 8009230:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009234:	4652      	mov	r2, sl
 8009236:	465b      	mov	r3, fp
 8009238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800923c:	f7f7 f9fc 	bl	8000638 <__aeabi_dmul>
 8009240:	4682      	mov	sl, r0
 8009242:	468b      	mov	fp, r1
 8009244:	f038 080f 	bics.w	r8, r8, #15
 8009248:	d04d      	beq.n	80092e6 <_strtod_l+0x526>
 800924a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800924e:	dd22      	ble.n	8009296 <_strtod_l+0x4d6>
 8009250:	2500      	movs	r5, #0
 8009252:	462e      	mov	r6, r5
 8009254:	9509      	str	r5, [sp, #36]	; 0x24
 8009256:	9507      	str	r5, [sp, #28]
 8009258:	2322      	movs	r3, #34	; 0x22
 800925a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800936c <_strtod_l+0x5ac>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	f04f 0a00 	mov.w	sl, #0
 8009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	f43f adec 	beq.w	8008e44 <_strtod_l+0x84>
 800926c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800926e:	4620      	mov	r0, r4
 8009270:	f001 fee4 	bl	800b03c <_Bfree>
 8009274:	9907      	ldr	r1, [sp, #28]
 8009276:	4620      	mov	r0, r4
 8009278:	f001 fee0 	bl	800b03c <_Bfree>
 800927c:	4631      	mov	r1, r6
 800927e:	4620      	mov	r0, r4
 8009280:	f001 fedc 	bl	800b03c <_Bfree>
 8009284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009286:	4620      	mov	r0, r4
 8009288:	f001 fed8 	bl	800b03c <_Bfree>
 800928c:	4629      	mov	r1, r5
 800928e:	4620      	mov	r0, r4
 8009290:	f001 fed4 	bl	800b03c <_Bfree>
 8009294:	e5d6      	b.n	8008e44 <_strtod_l+0x84>
 8009296:	2300      	movs	r3, #0
 8009298:	ea4f 1828 	mov.w	r8, r8, asr #4
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	4699      	mov	r9, r3
 80092a2:	f1b8 0f01 	cmp.w	r8, #1
 80092a6:	dc21      	bgt.n	80092ec <_strtod_l+0x52c>
 80092a8:	b10b      	cbz	r3, 80092ae <_strtod_l+0x4ee>
 80092aa:	4682      	mov	sl, r0
 80092ac:	468b      	mov	fp, r1
 80092ae:	4b2e      	ldr	r3, [pc, #184]	; (8009368 <_strtod_l+0x5a8>)
 80092b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80092b4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80092b8:	4652      	mov	r2, sl
 80092ba:	465b      	mov	r3, fp
 80092bc:	e9d9 0100 	ldrd	r0, r1, [r9]
 80092c0:	f7f7 f9ba 	bl	8000638 <__aeabi_dmul>
 80092c4:	4b29      	ldr	r3, [pc, #164]	; (800936c <_strtod_l+0x5ac>)
 80092c6:	460a      	mov	r2, r1
 80092c8:	400b      	ands	r3, r1
 80092ca:	4929      	ldr	r1, [pc, #164]	; (8009370 <_strtod_l+0x5b0>)
 80092cc:	428b      	cmp	r3, r1
 80092ce:	4682      	mov	sl, r0
 80092d0:	d8be      	bhi.n	8009250 <_strtod_l+0x490>
 80092d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092d6:	428b      	cmp	r3, r1
 80092d8:	bf86      	itte	hi
 80092da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009374 <_strtod_l+0x5b4>
 80092de:	f04f 3aff 	movhi.w	sl, #4294967295
 80092e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80092e6:	2300      	movs	r3, #0
 80092e8:	9304      	str	r3, [sp, #16]
 80092ea:	e081      	b.n	80093f0 <_strtod_l+0x630>
 80092ec:	f018 0f01 	tst.w	r8, #1
 80092f0:	d007      	beq.n	8009302 <_strtod_l+0x542>
 80092f2:	4b1d      	ldr	r3, [pc, #116]	; (8009368 <_strtod_l+0x5a8>)
 80092f4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	2301      	movs	r3, #1
 8009302:	f109 0901 	add.w	r9, r9, #1
 8009306:	ea4f 0868 	mov.w	r8, r8, asr #1
 800930a:	e7ca      	b.n	80092a2 <_strtod_l+0x4e2>
 800930c:	d0eb      	beq.n	80092e6 <_strtod_l+0x526>
 800930e:	f1c8 0800 	rsb	r8, r8, #0
 8009312:	f018 020f 	ands.w	r2, r8, #15
 8009316:	d00a      	beq.n	800932e <_strtod_l+0x56e>
 8009318:	4b12      	ldr	r3, [pc, #72]	; (8009364 <_strtod_l+0x5a4>)
 800931a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800931e:	4650      	mov	r0, sl
 8009320:	4659      	mov	r1, fp
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f7 fab1 	bl	800088c <__aeabi_ddiv>
 800932a:	4682      	mov	sl, r0
 800932c:	468b      	mov	fp, r1
 800932e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009332:	d0d8      	beq.n	80092e6 <_strtod_l+0x526>
 8009334:	f1b8 0f1f 	cmp.w	r8, #31
 8009338:	dd1e      	ble.n	8009378 <_strtod_l+0x5b8>
 800933a:	2500      	movs	r5, #0
 800933c:	462e      	mov	r6, r5
 800933e:	9509      	str	r5, [sp, #36]	; 0x24
 8009340:	9507      	str	r5, [sp, #28]
 8009342:	2322      	movs	r3, #34	; 0x22
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	f04f 0b00 	mov.w	fp, #0
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	e789      	b.n	8009264 <_strtod_l+0x4a4>
 8009350:	0800d0d5 	.word	0x0800d0d5
 8009354:	0800d114 	.word	0x0800d114
 8009358:	0800d0cd 	.word	0x0800d0cd
 800935c:	0800d254 	.word	0x0800d254
 8009360:	0800d52b 	.word	0x0800d52b
 8009364:	0800d3f0 	.word	0x0800d3f0
 8009368:	0800d3c8 	.word	0x0800d3c8
 800936c:	7ff00000 	.word	0x7ff00000
 8009370:	7ca00000 	.word	0x7ca00000
 8009374:	7fefffff 	.word	0x7fefffff
 8009378:	f018 0310 	ands.w	r3, r8, #16
 800937c:	bf18      	it	ne
 800937e:	236a      	movne	r3, #106	; 0x6a
 8009380:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009738 <_strtod_l+0x978>
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	4650      	mov	r0, sl
 8009388:	4659      	mov	r1, fp
 800938a:	2300      	movs	r3, #0
 800938c:	f018 0f01 	tst.w	r8, #1
 8009390:	d004      	beq.n	800939c <_strtod_l+0x5dc>
 8009392:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009396:	f7f7 f94f 	bl	8000638 <__aeabi_dmul>
 800939a:	2301      	movs	r3, #1
 800939c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80093a0:	f109 0908 	add.w	r9, r9, #8
 80093a4:	d1f2      	bne.n	800938c <_strtod_l+0x5cc>
 80093a6:	b10b      	cbz	r3, 80093ac <_strtod_l+0x5ec>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	b1bb      	cbz	r3, 80093e0 <_strtod_l+0x620>
 80093b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80093b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	4659      	mov	r1, fp
 80093bc:	dd10      	ble.n	80093e0 <_strtod_l+0x620>
 80093be:	2b1f      	cmp	r3, #31
 80093c0:	f340 8128 	ble.w	8009614 <_strtod_l+0x854>
 80093c4:	2b34      	cmp	r3, #52	; 0x34
 80093c6:	bfde      	ittt	le
 80093c8:	3b20      	suble	r3, #32
 80093ca:	f04f 32ff 	movle.w	r2, #4294967295
 80093ce:	fa02 f303 	lslle.w	r3, r2, r3
 80093d2:	f04f 0a00 	mov.w	sl, #0
 80093d6:	bfcc      	ite	gt
 80093d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80093dc:	ea03 0b01 	andle.w	fp, r3, r1
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	4650      	mov	r0, sl
 80093e6:	4659      	mov	r1, fp
 80093e8:	f7f7 fb8e 	bl	8000b08 <__aeabi_dcmpeq>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d1a4      	bne.n	800933a <_strtod_l+0x57a>
 80093f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093f6:	462b      	mov	r3, r5
 80093f8:	463a      	mov	r2, r7
 80093fa:	4620      	mov	r0, r4
 80093fc:	f001 fe8a 	bl	800b114 <__s2b>
 8009400:	9009      	str	r0, [sp, #36]	; 0x24
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f af24 	beq.w	8009250 <_strtod_l+0x490>
 8009408:	9b07      	ldr	r3, [sp, #28]
 800940a:	1b9e      	subs	r6, r3, r6
 800940c:	9b08      	ldr	r3, [sp, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	bfb4      	ite	lt
 8009412:	4633      	movlt	r3, r6
 8009414:	2300      	movge	r3, #0
 8009416:	9310      	str	r3, [sp, #64]	; 0x40
 8009418:	9b08      	ldr	r3, [sp, #32]
 800941a:	2500      	movs	r5, #0
 800941c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009420:	9318      	str	r3, [sp, #96]	; 0x60
 8009422:	462e      	mov	r6, r5
 8009424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009426:	4620      	mov	r0, r4
 8009428:	6859      	ldr	r1, [r3, #4]
 800942a:	f001 fdc7 	bl	800afbc <_Balloc>
 800942e:	9007      	str	r0, [sp, #28]
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f af11 	beq.w	8009258 <_strtod_l+0x498>
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	3202      	adds	r2, #2
 800943c:	f103 010c 	add.w	r1, r3, #12
 8009440:	0092      	lsls	r2, r2, #2
 8009442:	300c      	adds	r0, #12
 8009444:	f001 fdac 	bl	800afa0 <memcpy>
 8009448:	ec4b ab10 	vmov	d0, sl, fp
 800944c:	aa20      	add	r2, sp, #128	; 0x80
 800944e:	a91f      	add	r1, sp, #124	; 0x7c
 8009450:	4620      	mov	r0, r4
 8009452:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009456:	f002 f999 	bl	800b78c <__d2b>
 800945a:	901e      	str	r0, [sp, #120]	; 0x78
 800945c:	2800      	cmp	r0, #0
 800945e:	f43f aefb 	beq.w	8009258 <_strtod_l+0x498>
 8009462:	2101      	movs	r1, #1
 8009464:	4620      	mov	r0, r4
 8009466:	f001 feef 	bl	800b248 <__i2b>
 800946a:	4606      	mov	r6, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	f43f aef3 	beq.w	8009258 <_strtod_l+0x498>
 8009472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009474:	9904      	ldr	r1, [sp, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfab      	itete	ge
 800947a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800947c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800947e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009480:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009484:	bfac      	ite	ge
 8009486:	eb03 0902 	addge.w	r9, r3, r2
 800948a:	1ad7      	sublt	r7, r2, r3
 800948c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800948e:	eba3 0801 	sub.w	r8, r3, r1
 8009492:	4490      	add	r8, r2
 8009494:	4ba3      	ldr	r3, [pc, #652]	; (8009724 <_strtod_l+0x964>)
 8009496:	f108 38ff 	add.w	r8, r8, #4294967295
 800949a:	4598      	cmp	r8, r3
 800949c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80094a0:	f280 80cc 	bge.w	800963c <_strtod_l+0x87c>
 80094a4:	eba3 0308 	sub.w	r3, r3, r8
 80094a8:	2b1f      	cmp	r3, #31
 80094aa:	eba2 0203 	sub.w	r2, r2, r3
 80094ae:	f04f 0101 	mov.w	r1, #1
 80094b2:	f300 80b6 	bgt.w	8009622 <_strtod_l+0x862>
 80094b6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ba:	9311      	str	r3, [sp, #68]	; 0x44
 80094bc:	2300      	movs	r3, #0
 80094be:	930c      	str	r3, [sp, #48]	; 0x30
 80094c0:	eb09 0802 	add.w	r8, r9, r2
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	45c1      	cmp	r9, r8
 80094c8:	4417      	add	r7, r2
 80094ca:	441f      	add	r7, r3
 80094cc:	464b      	mov	r3, r9
 80094ce:	bfa8      	it	ge
 80094d0:	4643      	movge	r3, r8
 80094d2:	42bb      	cmp	r3, r7
 80094d4:	bfa8      	it	ge
 80094d6:	463b      	movge	r3, r7
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfc2      	ittt	gt
 80094dc:	eba8 0803 	subgt.w	r8, r8, r3
 80094e0:	1aff      	subgt	r7, r7, r3
 80094e2:	eba9 0903 	subgt.w	r9, r9, r3
 80094e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dd17      	ble.n	800951c <_strtod_l+0x75c>
 80094ec:	4631      	mov	r1, r6
 80094ee:	461a      	mov	r2, r3
 80094f0:	4620      	mov	r0, r4
 80094f2:	f001 ff65 	bl	800b3c0 <__pow5mult>
 80094f6:	4606      	mov	r6, r0
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f43f aead 	beq.w	8009258 <_strtod_l+0x498>
 80094fe:	4601      	mov	r1, r0
 8009500:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009502:	4620      	mov	r0, r4
 8009504:	f001 feb6 	bl	800b274 <__multiply>
 8009508:	900f      	str	r0, [sp, #60]	; 0x3c
 800950a:	2800      	cmp	r0, #0
 800950c:	f43f aea4 	beq.w	8009258 <_strtod_l+0x498>
 8009510:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009512:	4620      	mov	r0, r4
 8009514:	f001 fd92 	bl	800b03c <_Bfree>
 8009518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800951a:	931e      	str	r3, [sp, #120]	; 0x78
 800951c:	f1b8 0f00 	cmp.w	r8, #0
 8009520:	f300 8091 	bgt.w	8009646 <_strtod_l+0x886>
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd08      	ble.n	800953c <_strtod_l+0x77c>
 800952a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800952c:	9907      	ldr	r1, [sp, #28]
 800952e:	4620      	mov	r0, r4
 8009530:	f001 ff46 	bl	800b3c0 <__pow5mult>
 8009534:	9007      	str	r0, [sp, #28]
 8009536:	2800      	cmp	r0, #0
 8009538:	f43f ae8e 	beq.w	8009258 <_strtod_l+0x498>
 800953c:	2f00      	cmp	r7, #0
 800953e:	dd08      	ble.n	8009552 <_strtod_l+0x792>
 8009540:	9907      	ldr	r1, [sp, #28]
 8009542:	463a      	mov	r2, r7
 8009544:	4620      	mov	r0, r4
 8009546:	f001 ff95 	bl	800b474 <__lshift>
 800954a:	9007      	str	r0, [sp, #28]
 800954c:	2800      	cmp	r0, #0
 800954e:	f43f ae83 	beq.w	8009258 <_strtod_l+0x498>
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	dd08      	ble.n	800956a <_strtod_l+0x7aa>
 8009558:	4631      	mov	r1, r6
 800955a:	464a      	mov	r2, r9
 800955c:	4620      	mov	r0, r4
 800955e:	f001 ff89 	bl	800b474 <__lshift>
 8009562:	4606      	mov	r6, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	f43f ae77 	beq.w	8009258 <_strtod_l+0x498>
 800956a:	9a07      	ldr	r2, [sp, #28]
 800956c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800956e:	4620      	mov	r0, r4
 8009570:	f002 f808 	bl	800b584 <__mdiff>
 8009574:	4605      	mov	r5, r0
 8009576:	2800      	cmp	r0, #0
 8009578:	f43f ae6e 	beq.w	8009258 <_strtod_l+0x498>
 800957c:	68c3      	ldr	r3, [r0, #12]
 800957e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009580:	2300      	movs	r3, #0
 8009582:	60c3      	str	r3, [r0, #12]
 8009584:	4631      	mov	r1, r6
 8009586:	f001 ffe1 	bl	800b54c <__mcmp>
 800958a:	2800      	cmp	r0, #0
 800958c:	da65      	bge.n	800965a <_strtod_l+0x89a>
 800958e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009590:	ea53 030a 	orrs.w	r3, r3, sl
 8009594:	f040 8087 	bne.w	80096a6 <_strtod_l+0x8e6>
 8009598:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 8082 	bne.w	80096a6 <_strtod_l+0x8e6>
 80095a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095a6:	0d1b      	lsrs	r3, r3, #20
 80095a8:	051b      	lsls	r3, r3, #20
 80095aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80095ae:	d97a      	bls.n	80096a6 <_strtod_l+0x8e6>
 80095b0:	696b      	ldr	r3, [r5, #20]
 80095b2:	b913      	cbnz	r3, 80095ba <_strtod_l+0x7fa>
 80095b4:	692b      	ldr	r3, [r5, #16]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	dd75      	ble.n	80096a6 <_strtod_l+0x8e6>
 80095ba:	4629      	mov	r1, r5
 80095bc:	2201      	movs	r2, #1
 80095be:	4620      	mov	r0, r4
 80095c0:	f001 ff58 	bl	800b474 <__lshift>
 80095c4:	4631      	mov	r1, r6
 80095c6:	4605      	mov	r5, r0
 80095c8:	f001 ffc0 	bl	800b54c <__mcmp>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	dd6a      	ble.n	80096a6 <_strtod_l+0x8e6>
 80095d0:	9904      	ldr	r1, [sp, #16]
 80095d2:	4a55      	ldr	r2, [pc, #340]	; (8009728 <_strtod_l+0x968>)
 80095d4:	465b      	mov	r3, fp
 80095d6:	2900      	cmp	r1, #0
 80095d8:	f000 8085 	beq.w	80096e6 <_strtod_l+0x926>
 80095dc:	ea02 010b 	and.w	r1, r2, fp
 80095e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80095e4:	dc7f      	bgt.n	80096e6 <_strtod_l+0x926>
 80095e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80095ea:	f77f aeaa 	ble.w	8009342 <_strtod_l+0x582>
 80095ee:	4a4f      	ldr	r2, [pc, #316]	; (800972c <_strtod_l+0x96c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80095f6:	4650      	mov	r0, sl
 80095f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80095fc:	4659      	mov	r1, fp
 80095fe:	f7f7 f81b 	bl	8000638 <__aeabi_dmul>
 8009602:	460b      	mov	r3, r1
 8009604:	4303      	orrs	r3, r0
 8009606:	bf08      	it	eq
 8009608:	2322      	moveq	r3, #34	; 0x22
 800960a:	4682      	mov	sl, r0
 800960c:	468b      	mov	fp, r1
 800960e:	bf08      	it	eq
 8009610:	6023      	streq	r3, [r4, #0]
 8009612:	e62b      	b.n	800926c <_strtod_l+0x4ac>
 8009614:	f04f 32ff 	mov.w	r2, #4294967295
 8009618:	fa02 f303 	lsl.w	r3, r2, r3
 800961c:	ea03 0a0a 	and.w	sl, r3, sl
 8009620:	e6de      	b.n	80093e0 <_strtod_l+0x620>
 8009622:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009626:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800962a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800962e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009632:	fa01 f308 	lsl.w	r3, r1, r8
 8009636:	930c      	str	r3, [sp, #48]	; 0x30
 8009638:	9111      	str	r1, [sp, #68]	; 0x44
 800963a:	e741      	b.n	80094c0 <_strtod_l+0x700>
 800963c:	2300      	movs	r3, #0
 800963e:	930c      	str	r3, [sp, #48]	; 0x30
 8009640:	2301      	movs	r3, #1
 8009642:	9311      	str	r3, [sp, #68]	; 0x44
 8009644:	e73c      	b.n	80094c0 <_strtod_l+0x700>
 8009646:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009648:	4642      	mov	r2, r8
 800964a:	4620      	mov	r0, r4
 800964c:	f001 ff12 	bl	800b474 <__lshift>
 8009650:	901e      	str	r0, [sp, #120]	; 0x78
 8009652:	2800      	cmp	r0, #0
 8009654:	f47f af66 	bne.w	8009524 <_strtod_l+0x764>
 8009658:	e5fe      	b.n	8009258 <_strtod_l+0x498>
 800965a:	465f      	mov	r7, fp
 800965c:	d16e      	bne.n	800973c <_strtod_l+0x97c>
 800965e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009660:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009664:	b342      	cbz	r2, 80096b8 <_strtod_l+0x8f8>
 8009666:	4a32      	ldr	r2, [pc, #200]	; (8009730 <_strtod_l+0x970>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d128      	bne.n	80096be <_strtod_l+0x8fe>
 800966c:	9b04      	ldr	r3, [sp, #16]
 800966e:	4650      	mov	r0, sl
 8009670:	b1eb      	cbz	r3, 80096ae <_strtod_l+0x8ee>
 8009672:	4a2d      	ldr	r2, [pc, #180]	; (8009728 <_strtod_l+0x968>)
 8009674:	403a      	ands	r2, r7
 8009676:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800967a:	f04f 31ff 	mov.w	r1, #4294967295
 800967e:	d819      	bhi.n	80096b4 <_strtod_l+0x8f4>
 8009680:	0d12      	lsrs	r2, r2, #20
 8009682:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009686:	fa01 f303 	lsl.w	r3, r1, r3
 800968a:	4298      	cmp	r0, r3
 800968c:	d117      	bne.n	80096be <_strtod_l+0x8fe>
 800968e:	4b29      	ldr	r3, [pc, #164]	; (8009734 <_strtod_l+0x974>)
 8009690:	429f      	cmp	r7, r3
 8009692:	d102      	bne.n	800969a <_strtod_l+0x8da>
 8009694:	3001      	adds	r0, #1
 8009696:	f43f addf 	beq.w	8009258 <_strtod_l+0x498>
 800969a:	4b23      	ldr	r3, [pc, #140]	; (8009728 <_strtod_l+0x968>)
 800969c:	403b      	ands	r3, r7
 800969e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80096a2:	f04f 0a00 	mov.w	sl, #0
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1a0      	bne.n	80095ee <_strtod_l+0x82e>
 80096ac:	e5de      	b.n	800926c <_strtod_l+0x4ac>
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295
 80096b2:	e7ea      	b.n	800968a <_strtod_l+0x8ca>
 80096b4:	460b      	mov	r3, r1
 80096b6:	e7e8      	b.n	800968a <_strtod_l+0x8ca>
 80096b8:	ea53 030a 	orrs.w	r3, r3, sl
 80096bc:	d088      	beq.n	80095d0 <_strtod_l+0x810>
 80096be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c0:	b1db      	cbz	r3, 80096fa <_strtod_l+0x93a>
 80096c2:	423b      	tst	r3, r7
 80096c4:	d0ef      	beq.n	80096a6 <_strtod_l+0x8e6>
 80096c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096c8:	9a04      	ldr	r2, [sp, #16]
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	b1c3      	cbz	r3, 8009702 <_strtod_l+0x942>
 80096d0:	f7ff fb57 	bl	8008d82 <sulp>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096dc:	f7f6 fdf6 	bl	80002cc <__adddf3>
 80096e0:	4682      	mov	sl, r0
 80096e2:	468b      	mov	fp, r1
 80096e4:	e7df      	b.n	80096a6 <_strtod_l+0x8e6>
 80096e6:	4013      	ands	r3, r2
 80096e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80096f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80096f4:	f04f 3aff 	mov.w	sl, #4294967295
 80096f8:	e7d5      	b.n	80096a6 <_strtod_l+0x8e6>
 80096fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096fc:	ea13 0f0a 	tst.w	r3, sl
 8009700:	e7e0      	b.n	80096c4 <_strtod_l+0x904>
 8009702:	f7ff fb3e 	bl	8008d82 <sulp>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800970e:	f7f6 fddb 	bl	80002c8 <__aeabi_dsub>
 8009712:	2200      	movs	r2, #0
 8009714:	2300      	movs	r3, #0
 8009716:	4682      	mov	sl, r0
 8009718:	468b      	mov	fp, r1
 800971a:	f7f7 f9f5 	bl	8000b08 <__aeabi_dcmpeq>
 800971e:	2800      	cmp	r0, #0
 8009720:	d0c1      	beq.n	80096a6 <_strtod_l+0x8e6>
 8009722:	e60e      	b.n	8009342 <_strtod_l+0x582>
 8009724:	fffffc02 	.word	0xfffffc02
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	39500000 	.word	0x39500000
 8009730:	000fffff 	.word	0x000fffff
 8009734:	7fefffff 	.word	0x7fefffff
 8009738:	0800d128 	.word	0x0800d128
 800973c:	4631      	mov	r1, r6
 800973e:	4628      	mov	r0, r5
 8009740:	f002 f880 	bl	800b844 <__ratio>
 8009744:	ec59 8b10 	vmov	r8, r9, d0
 8009748:	ee10 0a10 	vmov	r0, s0
 800974c:	2200      	movs	r2, #0
 800974e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009752:	4649      	mov	r1, r9
 8009754:	f7f7 f9ec 	bl	8000b30 <__aeabi_dcmple>
 8009758:	2800      	cmp	r0, #0
 800975a:	d07c      	beq.n	8009856 <_strtod_l+0xa96>
 800975c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d04c      	beq.n	80097fc <_strtod_l+0xa3c>
 8009762:	4b95      	ldr	r3, [pc, #596]	; (80099b8 <_strtod_l+0xbf8>)
 8009764:	2200      	movs	r2, #0
 8009766:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800976a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80099b8 <_strtod_l+0xbf8>
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	4b92      	ldr	r3, [pc, #584]	; (80099bc <_strtod_l+0xbfc>)
 8009774:	403b      	ands	r3, r7
 8009776:	9311      	str	r3, [sp, #68]	; 0x44
 8009778:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800977a:	4b91      	ldr	r3, [pc, #580]	; (80099c0 <_strtod_l+0xc00>)
 800977c:	429a      	cmp	r2, r3
 800977e:	f040 80b2 	bne.w	80098e6 <_strtod_l+0xb26>
 8009782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800978a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800978e:	ec4b ab10 	vmov	d0, sl, fp
 8009792:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009796:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800979a:	f001 ff7b 	bl	800b694 <__ulp>
 800979e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097a2:	ec53 2b10 	vmov	r2, r3, d0
 80097a6:	f7f6 ff47 	bl	8000638 <__aeabi_dmul>
 80097aa:	4652      	mov	r2, sl
 80097ac:	465b      	mov	r3, fp
 80097ae:	f7f6 fd8d 	bl	80002cc <__adddf3>
 80097b2:	460b      	mov	r3, r1
 80097b4:	4981      	ldr	r1, [pc, #516]	; (80099bc <_strtod_l+0xbfc>)
 80097b6:	4a83      	ldr	r2, [pc, #524]	; (80099c4 <_strtod_l+0xc04>)
 80097b8:	4019      	ands	r1, r3
 80097ba:	4291      	cmp	r1, r2
 80097bc:	4682      	mov	sl, r0
 80097be:	d95e      	bls.n	800987e <_strtod_l+0xabe>
 80097c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d103      	bne.n	80097d2 <_strtod_l+0xa12>
 80097ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097cc:	3301      	adds	r3, #1
 80097ce:	f43f ad43 	beq.w	8009258 <_strtod_l+0x498>
 80097d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80099d0 <_strtod_l+0xc10>
 80097d6:	f04f 3aff 	mov.w	sl, #4294967295
 80097da:	991e      	ldr	r1, [sp, #120]	; 0x78
 80097dc:	4620      	mov	r0, r4
 80097de:	f001 fc2d 	bl	800b03c <_Bfree>
 80097e2:	9907      	ldr	r1, [sp, #28]
 80097e4:	4620      	mov	r0, r4
 80097e6:	f001 fc29 	bl	800b03c <_Bfree>
 80097ea:	4631      	mov	r1, r6
 80097ec:	4620      	mov	r0, r4
 80097ee:	f001 fc25 	bl	800b03c <_Bfree>
 80097f2:	4629      	mov	r1, r5
 80097f4:	4620      	mov	r0, r4
 80097f6:	f001 fc21 	bl	800b03c <_Bfree>
 80097fa:	e613      	b.n	8009424 <_strtod_l+0x664>
 80097fc:	f1ba 0f00 	cmp.w	sl, #0
 8009800:	d11b      	bne.n	800983a <_strtod_l+0xa7a>
 8009802:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009806:	b9f3      	cbnz	r3, 8009846 <_strtod_l+0xa86>
 8009808:	4b6b      	ldr	r3, [pc, #428]	; (80099b8 <_strtod_l+0xbf8>)
 800980a:	2200      	movs	r2, #0
 800980c:	4640      	mov	r0, r8
 800980e:	4649      	mov	r1, r9
 8009810:	f7f7 f984 	bl	8000b1c <__aeabi_dcmplt>
 8009814:	b9d0      	cbnz	r0, 800984c <_strtod_l+0xa8c>
 8009816:	4640      	mov	r0, r8
 8009818:	4649      	mov	r1, r9
 800981a:	4b6b      	ldr	r3, [pc, #428]	; (80099c8 <_strtod_l+0xc08>)
 800981c:	2200      	movs	r2, #0
 800981e:	f7f6 ff0b 	bl	8000638 <__aeabi_dmul>
 8009822:	4680      	mov	r8, r0
 8009824:	4689      	mov	r9, r1
 8009826:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800982a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800982e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009830:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009834:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009838:	e79b      	b.n	8009772 <_strtod_l+0x9b2>
 800983a:	f1ba 0f01 	cmp.w	sl, #1
 800983e:	d102      	bne.n	8009846 <_strtod_l+0xa86>
 8009840:	2f00      	cmp	r7, #0
 8009842:	f43f ad7e 	beq.w	8009342 <_strtod_l+0x582>
 8009846:	4b61      	ldr	r3, [pc, #388]	; (80099cc <_strtod_l+0xc0c>)
 8009848:	2200      	movs	r2, #0
 800984a:	e78c      	b.n	8009766 <_strtod_l+0x9a6>
 800984c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80099c8 <_strtod_l+0xc08>
 8009850:	f04f 0800 	mov.w	r8, #0
 8009854:	e7e7      	b.n	8009826 <_strtod_l+0xa66>
 8009856:	4b5c      	ldr	r3, [pc, #368]	; (80099c8 <_strtod_l+0xc08>)
 8009858:	4640      	mov	r0, r8
 800985a:	4649      	mov	r1, r9
 800985c:	2200      	movs	r2, #0
 800985e:	f7f6 feeb 	bl	8000638 <__aeabi_dmul>
 8009862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	b933      	cbnz	r3, 8009878 <_strtod_l+0xab8>
 800986a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800986e:	9012      	str	r0, [sp, #72]	; 0x48
 8009870:	9313      	str	r3, [sp, #76]	; 0x4c
 8009872:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009876:	e7dd      	b.n	8009834 <_strtod_l+0xa74>
 8009878:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800987c:	e7f9      	b.n	8009872 <_strtod_l+0xab2>
 800987e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1a8      	bne.n	80097da <_strtod_l+0xa1a>
 8009888:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800988c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800988e:	0d1b      	lsrs	r3, r3, #20
 8009890:	051b      	lsls	r3, r3, #20
 8009892:	429a      	cmp	r2, r3
 8009894:	d1a1      	bne.n	80097da <_strtod_l+0xa1a>
 8009896:	4640      	mov	r0, r8
 8009898:	4649      	mov	r1, r9
 800989a:	f7f7 fa2d 	bl	8000cf8 <__aeabi_d2lz>
 800989e:	f7f6 fe9d 	bl	80005dc <__aeabi_l2d>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4640      	mov	r0, r8
 80098a8:	4649      	mov	r1, r9
 80098aa:	f7f6 fd0d 	bl	80002c8 <__aeabi_dsub>
 80098ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80098b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098b4:	ea43 030a 	orr.w	r3, r3, sl
 80098b8:	4313      	orrs	r3, r2
 80098ba:	4680      	mov	r8, r0
 80098bc:	4689      	mov	r9, r1
 80098be:	d053      	beq.n	8009968 <_strtod_l+0xba8>
 80098c0:	a335      	add	r3, pc, #212	; (adr r3, 8009998 <_strtod_l+0xbd8>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f7 f929 	bl	8000b1c <__aeabi_dcmplt>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	f47f acce 	bne.w	800926c <_strtod_l+0x4ac>
 80098d0:	a333      	add	r3, pc, #204	; (adr r3, 80099a0 <_strtod_l+0xbe0>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f7 f93d 	bl	8000b58 <__aeabi_dcmpgt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	f43f af7b 	beq.w	80097da <_strtod_l+0xa1a>
 80098e4:	e4c2      	b.n	800926c <_strtod_l+0x4ac>
 80098e6:	9b04      	ldr	r3, [sp, #16]
 80098e8:	b333      	cbz	r3, 8009938 <_strtod_l+0xb78>
 80098ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098f0:	d822      	bhi.n	8009938 <_strtod_l+0xb78>
 80098f2:	a32d      	add	r3, pc, #180	; (adr r3, 80099a8 <_strtod_l+0xbe8>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	4640      	mov	r0, r8
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7f7 f918 	bl	8000b30 <__aeabi_dcmple>
 8009900:	b1a0      	cbz	r0, 800992c <_strtod_l+0xb6c>
 8009902:	4649      	mov	r1, r9
 8009904:	4640      	mov	r0, r8
 8009906:	f7f7 f96f 	bl	8000be8 <__aeabi_d2uiz>
 800990a:	2801      	cmp	r0, #1
 800990c:	bf38      	it	cc
 800990e:	2001      	movcc	r0, #1
 8009910:	f7f6 fe18 	bl	8000544 <__aeabi_ui2d>
 8009914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009916:	4680      	mov	r8, r0
 8009918:	4689      	mov	r9, r1
 800991a:	bb13      	cbnz	r3, 8009962 <_strtod_l+0xba2>
 800991c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009920:	9014      	str	r0, [sp, #80]	; 0x50
 8009922:	9315      	str	r3, [sp, #84]	; 0x54
 8009924:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009928:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800992c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800992e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009930:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	930d      	str	r3, [sp, #52]	; 0x34
 8009938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800993c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009940:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009944:	f001 fea6 	bl	800b694 <__ulp>
 8009948:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800994c:	ec53 2b10 	vmov	r2, r3, d0
 8009950:	f7f6 fe72 	bl	8000638 <__aeabi_dmul>
 8009954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009958:	f7f6 fcb8 	bl	80002cc <__adddf3>
 800995c:	4682      	mov	sl, r0
 800995e:	468b      	mov	fp, r1
 8009960:	e78f      	b.n	8009882 <_strtod_l+0xac2>
 8009962:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009966:	e7dd      	b.n	8009924 <_strtod_l+0xb64>
 8009968:	a311      	add	r3, pc, #68	; (adr r3, 80099b0 <_strtod_l+0xbf0>)
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f7f7 f8d5 	bl	8000b1c <__aeabi_dcmplt>
 8009972:	e7b4      	b.n	80098de <_strtod_l+0xb1e>
 8009974:	2300      	movs	r3, #0
 8009976:	930e      	str	r3, [sp, #56]	; 0x38
 8009978:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800997a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	f7ff ba65 	b.w	8008e4c <_strtod_l+0x8c>
 8009982:	2b65      	cmp	r3, #101	; 0x65
 8009984:	f43f ab5d 	beq.w	8009042 <_strtod_l+0x282>
 8009988:	2b45      	cmp	r3, #69	; 0x45
 800998a:	f43f ab5a 	beq.w	8009042 <_strtod_l+0x282>
 800998e:	2201      	movs	r2, #1
 8009990:	f7ff bb92 	b.w	80090b8 <_strtod_l+0x2f8>
 8009994:	f3af 8000 	nop.w
 8009998:	94a03595 	.word	0x94a03595
 800999c:	3fdfffff 	.word	0x3fdfffff
 80099a0:	35afe535 	.word	0x35afe535
 80099a4:	3fe00000 	.word	0x3fe00000
 80099a8:	ffc00000 	.word	0xffc00000
 80099ac:	41dfffff 	.word	0x41dfffff
 80099b0:	94a03595 	.word	0x94a03595
 80099b4:	3fcfffff 	.word	0x3fcfffff
 80099b8:	3ff00000 	.word	0x3ff00000
 80099bc:	7ff00000 	.word	0x7ff00000
 80099c0:	7fe00000 	.word	0x7fe00000
 80099c4:	7c9fffff 	.word	0x7c9fffff
 80099c8:	3fe00000 	.word	0x3fe00000
 80099cc:	bff00000 	.word	0xbff00000
 80099d0:	7fefffff 	.word	0x7fefffff

080099d4 <_strtod_r>:
 80099d4:	4b01      	ldr	r3, [pc, #4]	; (80099dc <_strtod_r+0x8>)
 80099d6:	f7ff b9f3 	b.w	8008dc0 <_strtod_l>
 80099da:	bf00      	nop
 80099dc:	200000dc 	.word	0x200000dc

080099e0 <_strtol_l.isra.0>:
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e6:	d001      	beq.n	80099ec <_strtol_l.isra.0+0xc>
 80099e8:	2b24      	cmp	r3, #36	; 0x24
 80099ea:	d906      	bls.n	80099fa <_strtol_l.isra.0+0x1a>
 80099ec:	f7fe fa52 	bl	8007e94 <__errno>
 80099f0:	2316      	movs	r3, #22
 80099f2:	6003      	str	r3, [r0, #0]
 80099f4:	2000      	movs	r0, #0
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	4f3a      	ldr	r7, [pc, #232]	; (8009ae4 <_strtol_l.isra.0+0x104>)
 80099fc:	468e      	mov	lr, r1
 80099fe:	4676      	mov	r6, lr
 8009a00:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009a04:	5de5      	ldrb	r5, [r4, r7]
 8009a06:	f015 0508 	ands.w	r5, r5, #8
 8009a0a:	d1f8      	bne.n	80099fe <_strtol_l.isra.0+0x1e>
 8009a0c:	2c2d      	cmp	r4, #45	; 0x2d
 8009a0e:	d134      	bne.n	8009a7a <_strtol_l.isra.0+0x9a>
 8009a10:	f89e 4000 	ldrb.w	r4, [lr]
 8009a14:	f04f 0801 	mov.w	r8, #1
 8009a18:	f106 0e02 	add.w	lr, r6, #2
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d05c      	beq.n	8009ada <_strtol_l.isra.0+0xfa>
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	d10c      	bne.n	8009a3e <_strtol_l.isra.0+0x5e>
 8009a24:	2c30      	cmp	r4, #48	; 0x30
 8009a26:	d10a      	bne.n	8009a3e <_strtol_l.isra.0+0x5e>
 8009a28:	f89e 4000 	ldrb.w	r4, [lr]
 8009a2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a30:	2c58      	cmp	r4, #88	; 0x58
 8009a32:	d14d      	bne.n	8009ad0 <_strtol_l.isra.0+0xf0>
 8009a34:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009a38:	2310      	movs	r3, #16
 8009a3a:	f10e 0e02 	add.w	lr, lr, #2
 8009a3e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009a42:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a46:	2600      	movs	r6, #0
 8009a48:	fbbc f9f3 	udiv	r9, ip, r3
 8009a4c:	4635      	mov	r5, r6
 8009a4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009a56:	2f09      	cmp	r7, #9
 8009a58:	d818      	bhi.n	8009a8c <_strtol_l.isra.0+0xac>
 8009a5a:	463c      	mov	r4, r7
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	dd24      	ble.n	8009aaa <_strtol_l.isra.0+0xca>
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	db1f      	blt.n	8009aa4 <_strtol_l.isra.0+0xc4>
 8009a64:	45a9      	cmp	r9, r5
 8009a66:	d31d      	bcc.n	8009aa4 <_strtol_l.isra.0+0xc4>
 8009a68:	d101      	bne.n	8009a6e <_strtol_l.isra.0+0x8e>
 8009a6a:	45a2      	cmp	sl, r4
 8009a6c:	db1a      	blt.n	8009aa4 <_strtol_l.isra.0+0xc4>
 8009a6e:	fb05 4503 	mla	r5, r5, r3, r4
 8009a72:	2601      	movs	r6, #1
 8009a74:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009a78:	e7eb      	b.n	8009a52 <_strtol_l.isra.0+0x72>
 8009a7a:	2c2b      	cmp	r4, #43	; 0x2b
 8009a7c:	bf08      	it	eq
 8009a7e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009a82:	46a8      	mov	r8, r5
 8009a84:	bf08      	it	eq
 8009a86:	f106 0e02 	addeq.w	lr, r6, #2
 8009a8a:	e7c7      	b.n	8009a1c <_strtol_l.isra.0+0x3c>
 8009a8c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a90:	2f19      	cmp	r7, #25
 8009a92:	d801      	bhi.n	8009a98 <_strtol_l.isra.0+0xb8>
 8009a94:	3c37      	subs	r4, #55	; 0x37
 8009a96:	e7e1      	b.n	8009a5c <_strtol_l.isra.0+0x7c>
 8009a98:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a9c:	2f19      	cmp	r7, #25
 8009a9e:	d804      	bhi.n	8009aaa <_strtol_l.isra.0+0xca>
 8009aa0:	3c57      	subs	r4, #87	; 0x57
 8009aa2:	e7db      	b.n	8009a5c <_strtol_l.isra.0+0x7c>
 8009aa4:	f04f 36ff 	mov.w	r6, #4294967295
 8009aa8:	e7e4      	b.n	8009a74 <_strtol_l.isra.0+0x94>
 8009aaa:	2e00      	cmp	r6, #0
 8009aac:	da05      	bge.n	8009aba <_strtol_l.isra.0+0xda>
 8009aae:	2322      	movs	r3, #34	; 0x22
 8009ab0:	6003      	str	r3, [r0, #0]
 8009ab2:	4665      	mov	r5, ip
 8009ab4:	b942      	cbnz	r2, 8009ac8 <_strtol_l.isra.0+0xe8>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	e79d      	b.n	80099f6 <_strtol_l.isra.0+0x16>
 8009aba:	f1b8 0f00 	cmp.w	r8, #0
 8009abe:	d000      	beq.n	8009ac2 <_strtol_l.isra.0+0xe2>
 8009ac0:	426d      	negs	r5, r5
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	d0f7      	beq.n	8009ab6 <_strtol_l.isra.0+0xd6>
 8009ac6:	b10e      	cbz	r6, 8009acc <_strtol_l.isra.0+0xec>
 8009ac8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009acc:	6011      	str	r1, [r2, #0]
 8009ace:	e7f2      	b.n	8009ab6 <_strtol_l.isra.0+0xd6>
 8009ad0:	2430      	movs	r4, #48	; 0x30
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1b3      	bne.n	8009a3e <_strtol_l.isra.0+0x5e>
 8009ad6:	2308      	movs	r3, #8
 8009ad8:	e7b1      	b.n	8009a3e <_strtol_l.isra.0+0x5e>
 8009ada:	2c30      	cmp	r4, #48	; 0x30
 8009adc:	d0a4      	beq.n	8009a28 <_strtol_l.isra.0+0x48>
 8009ade:	230a      	movs	r3, #10
 8009ae0:	e7ad      	b.n	8009a3e <_strtol_l.isra.0+0x5e>
 8009ae2:	bf00      	nop
 8009ae4:	0800d151 	.word	0x0800d151

08009ae8 <_strtol_r>:
 8009ae8:	f7ff bf7a 	b.w	80099e0 <_strtol_l.isra.0>

08009aec <_vsiprintf_r>:
 8009aec:	b500      	push	{lr}
 8009aee:	b09b      	sub	sp, #108	; 0x6c
 8009af0:	9100      	str	r1, [sp, #0]
 8009af2:	9104      	str	r1, [sp, #16]
 8009af4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af8:	9105      	str	r1, [sp, #20]
 8009afa:	9102      	str	r1, [sp, #8]
 8009afc:	4905      	ldr	r1, [pc, #20]	; (8009b14 <_vsiprintf_r+0x28>)
 8009afe:	9103      	str	r1, [sp, #12]
 8009b00:	4669      	mov	r1, sp
 8009b02:	f002 f82b 	bl	800bb5c <_svfiprintf_r>
 8009b06:	9b00      	ldr	r3, [sp, #0]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	b01b      	add	sp, #108	; 0x6c
 8009b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b12:	bf00      	nop
 8009b14:	ffff0208 	.word	0xffff0208

08009b18 <vsiprintf>:
 8009b18:	4613      	mov	r3, r2
 8009b1a:	460a      	mov	r2, r1
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	4802      	ldr	r0, [pc, #8]	; (8009b28 <vsiprintf+0x10>)
 8009b20:	6800      	ldr	r0, [r0, #0]
 8009b22:	f7ff bfe3 	b.w	8009aec <_vsiprintf_r>
 8009b26:	bf00      	nop
 8009b28:	20000074 	.word	0x20000074

08009b2c <_write_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	; (8009b4c <_write_r+0x20>)
 8009b30:	4604      	mov	r4, r0
 8009b32:	4608      	mov	r0, r1
 8009b34:	4611      	mov	r1, r2
 8009b36:	2200      	movs	r2, #0
 8009b38:	602a      	str	r2, [r5, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f7f8 fb99 	bl	8002272 <_write>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_write_r+0x1e>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_write_r+0x1e>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	200008bc 	.word	0x200008bc

08009b50 <_close_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_close_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f8 fba5 	bl	80022aa <_close>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_close_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_close_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200008bc 	.word	0x200008bc

08009b70 <quorem>:
 8009b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	6903      	ldr	r3, [r0, #16]
 8009b76:	690c      	ldr	r4, [r1, #16]
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	f2c0 8081 	blt.w	8009c82 <quorem+0x112>
 8009b80:	3c01      	subs	r4, #1
 8009b82:	f101 0814 	add.w	r8, r1, #20
 8009b86:	f100 0514 	add.w	r5, r0, #20
 8009b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ba4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ba8:	d331      	bcc.n	8009c0e <quorem+0x9e>
 8009baa:	f04f 0e00 	mov.w	lr, #0
 8009bae:	4640      	mov	r0, r8
 8009bb0:	46ac      	mov	ip, r5
 8009bb2:	46f2      	mov	sl, lr
 8009bb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bb8:	b293      	uxth	r3, r2
 8009bba:	fb06 e303 	mla	r3, r6, r3, lr
 8009bbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8009bc8:	0c12      	lsrs	r2, r2, #16
 8009bca:	f8dc a000 	ldr.w	sl, [ip]
 8009bce:	fb06 e202 	mla	r2, r6, r2, lr
 8009bd2:	fa13 f38a 	uxtah	r3, r3, sl
 8009bd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bda:	fa1f fa82 	uxth.w	sl, r2
 8009bde:	f8dc 2000 	ldr.w	r2, [ip]
 8009be2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009be6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bf0:	4581      	cmp	r9, r0
 8009bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8009bf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bfa:	d2db      	bcs.n	8009bb4 <quorem+0x44>
 8009bfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c00:	b92b      	cbnz	r3, 8009c0e <quorem+0x9e>
 8009c02:	9b01      	ldr	r3, [sp, #4]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	429d      	cmp	r5, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	d32e      	bcc.n	8009c6a <quorem+0xfa>
 8009c0c:	613c      	str	r4, [r7, #16]
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f001 fc9c 	bl	800b54c <__mcmp>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	db24      	blt.n	8009c62 <quorem+0xf2>
 8009c18:	3601      	adds	r6, #1
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f04f 0c00 	mov.w	ip, #0
 8009c20:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c24:	f8d0 e000 	ldr.w	lr, [r0]
 8009c28:	b293      	uxth	r3, r2
 8009c2a:	ebac 0303 	sub.w	r3, ip, r3
 8009c2e:	0c12      	lsrs	r2, r2, #16
 8009c30:	fa13 f38e 	uxtah	r3, r3, lr
 8009c34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c42:	45c1      	cmp	r9, r8
 8009c44:	f840 3b04 	str.w	r3, [r0], #4
 8009c48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c4c:	d2e8      	bcs.n	8009c20 <quorem+0xb0>
 8009c4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c56:	b922      	cbnz	r2, 8009c62 <quorem+0xf2>
 8009c58:	3b04      	subs	r3, #4
 8009c5a:	429d      	cmp	r5, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	d30a      	bcc.n	8009c76 <quorem+0x106>
 8009c60:	613c      	str	r4, [r7, #16]
 8009c62:	4630      	mov	r0, r6
 8009c64:	b003      	add	sp, #12
 8009c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	3b04      	subs	r3, #4
 8009c6e:	2a00      	cmp	r2, #0
 8009c70:	d1cc      	bne.n	8009c0c <quorem+0x9c>
 8009c72:	3c01      	subs	r4, #1
 8009c74:	e7c7      	b.n	8009c06 <quorem+0x96>
 8009c76:	6812      	ldr	r2, [r2, #0]
 8009c78:	3b04      	subs	r3, #4
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d1f0      	bne.n	8009c60 <quorem+0xf0>
 8009c7e:	3c01      	subs	r4, #1
 8009c80:	e7eb      	b.n	8009c5a <quorem+0xea>
 8009c82:	2000      	movs	r0, #0
 8009c84:	e7ee      	b.n	8009c64 <quorem+0xf4>
	...

08009c88 <_dtoa_r>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	ed2d 8b02 	vpush	{d8}
 8009c90:	ec57 6b10 	vmov	r6, r7, d0
 8009c94:	b095      	sub	sp, #84	; 0x54
 8009c96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c9c:	9105      	str	r1, [sp, #20]
 8009c9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca8:	b975      	cbnz	r5, 8009cc8 <_dtoa_r+0x40>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f001 f95e 	bl	800af6c <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_dtoa_r+0x38>
 8009cb6:	4bb2      	ldr	r3, [pc, #712]	; (8009f80 <_dtoa_r+0x2f8>)
 8009cb8:	21ea      	movs	r1, #234	; 0xea
 8009cba:	48b2      	ldr	r0, [pc, #712]	; (8009f84 <_dtoa_r+0x2fc>)
 8009cbc:	f002 fcaa 	bl	800c614 <__assert_func>
 8009cc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cc4:	6005      	str	r5, [r0, #0]
 8009cc6:	60c5      	str	r5, [r0, #12]
 8009cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cca:	6819      	ldr	r1, [r3, #0]
 8009ccc:	b151      	cbz	r1, 8009ce4 <_dtoa_r+0x5c>
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	604a      	str	r2, [r1, #4]
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4093      	lsls	r3, r2
 8009cd6:	608b      	str	r3, [r1, #8]
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f001 f9af 	bl	800b03c <_Bfree>
 8009cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	1e3b      	subs	r3, r7, #0
 8009ce6:	bfb9      	ittee	lt
 8009ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cec:	9303      	strlt	r3, [sp, #12]
 8009cee:	2300      	movge	r3, #0
 8009cf0:	f8c8 3000 	strge.w	r3, [r8]
 8009cf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009cf8:	4ba3      	ldr	r3, [pc, #652]	; (8009f88 <_dtoa_r+0x300>)
 8009cfa:	bfbc      	itt	lt
 8009cfc:	2201      	movlt	r2, #1
 8009cfe:	f8c8 2000 	strlt.w	r2, [r8]
 8009d02:	ea33 0309 	bics.w	r3, r3, r9
 8009d06:	d11b      	bne.n	8009d40 <_dtoa_r+0xb8>
 8009d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d14:	4333      	orrs	r3, r6
 8009d16:	f000 857a 	beq.w	800a80e <_dtoa_r+0xb86>
 8009d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d1c:	b963      	cbnz	r3, 8009d38 <_dtoa_r+0xb0>
 8009d1e:	4b9b      	ldr	r3, [pc, #620]	; (8009f8c <_dtoa_r+0x304>)
 8009d20:	e024      	b.n	8009d6c <_dtoa_r+0xe4>
 8009d22:	4b9b      	ldr	r3, [pc, #620]	; (8009f90 <_dtoa_r+0x308>)
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	9800      	ldr	r0, [sp, #0]
 8009d2e:	b015      	add	sp, #84	; 0x54
 8009d30:	ecbd 8b02 	vpop	{d8}
 8009d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d38:	4b94      	ldr	r3, [pc, #592]	; (8009f8c <_dtoa_r+0x304>)
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	3303      	adds	r3, #3
 8009d3e:	e7f3      	b.n	8009d28 <_dtoa_r+0xa0>
 8009d40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d44:	2200      	movs	r2, #0
 8009d46:	ec51 0b17 	vmov	r0, r1, d7
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009d50:	f7f6 feda 	bl	8000b08 <__aeabi_dcmpeq>
 8009d54:	4680      	mov	r8, r0
 8009d56:	b158      	cbz	r0, 8009d70 <_dtoa_r+0xe8>
 8009d58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 8551 	beq.w	800a808 <_dtoa_r+0xb80>
 8009d66:	488b      	ldr	r0, [pc, #556]	; (8009f94 <_dtoa_r+0x30c>)
 8009d68:	6018      	str	r0, [r3, #0]
 8009d6a:	1e43      	subs	r3, r0, #1
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	e7dd      	b.n	8009d2c <_dtoa_r+0xa4>
 8009d70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d74:	aa12      	add	r2, sp, #72	; 0x48
 8009d76:	a913      	add	r1, sp, #76	; 0x4c
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f001 fd07 	bl	800b78c <__d2b>
 8009d7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d82:	4683      	mov	fp, r0
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	d07c      	beq.n	8009e82 <_dtoa_r+0x1fa>
 8009d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009d96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009da2:	4b7d      	ldr	r3, [pc, #500]	; (8009f98 <_dtoa_r+0x310>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fa8d 	bl	80002c8 <__aeabi_dsub>
 8009dae:	a36e      	add	r3, pc, #440	; (adr r3, 8009f68 <_dtoa_r+0x2e0>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f7f6 fc40 	bl	8000638 <__aeabi_dmul>
 8009db8:	a36d      	add	r3, pc, #436	; (adr r3, 8009f70 <_dtoa_r+0x2e8>)
 8009dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbe:	f7f6 fa85 	bl	80002cc <__adddf3>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	460f      	mov	r7, r1
 8009dc8:	f7f6 fbcc 	bl	8000564 <__aeabi_i2d>
 8009dcc:	a36a      	add	r3, pc, #424	; (adr r3, 8009f78 <_dtoa_r+0x2f0>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fc31 	bl	8000638 <__aeabi_dmul>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	f7f6 fa75 	bl	80002cc <__adddf3>
 8009de2:	4606      	mov	r6, r0
 8009de4:	460f      	mov	r7, r1
 8009de6:	f7f6 fed7 	bl	8000b98 <__aeabi_d2iz>
 8009dea:	2200      	movs	r2, #0
 8009dec:	4682      	mov	sl, r0
 8009dee:	2300      	movs	r3, #0
 8009df0:	4630      	mov	r0, r6
 8009df2:	4639      	mov	r1, r7
 8009df4:	f7f6 fe92 	bl	8000b1c <__aeabi_dcmplt>
 8009df8:	b148      	cbz	r0, 8009e0e <_dtoa_r+0x186>
 8009dfa:	4650      	mov	r0, sl
 8009dfc:	f7f6 fbb2 	bl	8000564 <__aeabi_i2d>
 8009e00:	4632      	mov	r2, r6
 8009e02:	463b      	mov	r3, r7
 8009e04:	f7f6 fe80 	bl	8000b08 <__aeabi_dcmpeq>
 8009e08:	b908      	cbnz	r0, 8009e0e <_dtoa_r+0x186>
 8009e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e0e:	f1ba 0f16 	cmp.w	sl, #22
 8009e12:	d854      	bhi.n	8009ebe <_dtoa_r+0x236>
 8009e14:	4b61      	ldr	r3, [pc, #388]	; (8009f9c <_dtoa_r+0x314>)
 8009e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e22:	f7f6 fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d04b      	beq.n	8009ec2 <_dtoa_r+0x23a>
 8009e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e2e:	2300      	movs	r3, #0
 8009e30:	930e      	str	r3, [sp, #56]	; 0x38
 8009e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e34:	1b5d      	subs	r5, r3, r5
 8009e36:	1e6b      	subs	r3, r5, #1
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	bf43      	ittte	mi
 8009e3c:	2300      	movmi	r3, #0
 8009e3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009e42:	9304      	strmi	r3, [sp, #16]
 8009e44:	f04f 0800 	movpl.w	r8, #0
 8009e48:	f1ba 0f00 	cmp.w	sl, #0
 8009e4c:	db3b      	blt.n	8009ec6 <_dtoa_r+0x23e>
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009e54:	4453      	add	r3, sl
 8009e56:	9304      	str	r3, [sp, #16]
 8009e58:	2300      	movs	r3, #0
 8009e5a:	9306      	str	r3, [sp, #24]
 8009e5c:	9b05      	ldr	r3, [sp, #20]
 8009e5e:	2b09      	cmp	r3, #9
 8009e60:	d869      	bhi.n	8009f36 <_dtoa_r+0x2ae>
 8009e62:	2b05      	cmp	r3, #5
 8009e64:	bfc4      	itt	gt
 8009e66:	3b04      	subgt	r3, #4
 8009e68:	9305      	strgt	r3, [sp, #20]
 8009e6a:	9b05      	ldr	r3, [sp, #20]
 8009e6c:	f1a3 0302 	sub.w	r3, r3, #2
 8009e70:	bfcc      	ite	gt
 8009e72:	2500      	movgt	r5, #0
 8009e74:	2501      	movle	r5, #1
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d869      	bhi.n	8009f4e <_dtoa_r+0x2c6>
 8009e7a:	e8df f003 	tbb	[pc, r3]
 8009e7e:	4e2c      	.short	0x4e2c
 8009e80:	5a4c      	.short	0x5a4c
 8009e82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009e86:	441d      	add	r5, r3
 8009e88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e8c:	2b20      	cmp	r3, #32
 8009e8e:	bfc1      	itttt	gt
 8009e90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e98:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ea0:	bfda      	itte	le
 8009ea2:	f1c3 0320 	rsble	r3, r3, #32
 8009ea6:	fa06 f003 	lslle.w	r0, r6, r3
 8009eaa:	4318      	orrgt	r0, r3
 8009eac:	f7f6 fb4a 	bl	8000544 <__aeabi_ui2d>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009eb8:	3d01      	subs	r5, #1
 8009eba:	9310      	str	r3, [sp, #64]	; 0x40
 8009ebc:	e771      	b.n	8009da2 <_dtoa_r+0x11a>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e7b6      	b.n	8009e30 <_dtoa_r+0x1a8>
 8009ec2:	900e      	str	r0, [sp, #56]	; 0x38
 8009ec4:	e7b5      	b.n	8009e32 <_dtoa_r+0x1aa>
 8009ec6:	f1ca 0300 	rsb	r3, sl, #0
 8009eca:	9306      	str	r3, [sp, #24]
 8009ecc:	2300      	movs	r3, #0
 8009ece:	eba8 080a 	sub.w	r8, r8, sl
 8009ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ed4:	e7c2      	b.n	8009e5c <_dtoa_r+0x1d4>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	9308      	str	r3, [sp, #32]
 8009eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dc39      	bgt.n	8009f54 <_dtoa_r+0x2cc>
 8009ee0:	f04f 0901 	mov.w	r9, #1
 8009ee4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ee8:	464b      	mov	r3, r9
 8009eea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009eee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	6042      	str	r2, [r0, #4]
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	f102 0614 	add.w	r6, r2, #20
 8009efa:	429e      	cmp	r6, r3
 8009efc:	6841      	ldr	r1, [r0, #4]
 8009efe:	d92f      	bls.n	8009f60 <_dtoa_r+0x2d8>
 8009f00:	4620      	mov	r0, r4
 8009f02:	f001 f85b 	bl	800afbc <_Balloc>
 8009f06:	9000      	str	r0, [sp, #0]
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	d14b      	bne.n	8009fa4 <_dtoa_r+0x31c>
 8009f0c:	4b24      	ldr	r3, [pc, #144]	; (8009fa0 <_dtoa_r+0x318>)
 8009f0e:	4602      	mov	r2, r0
 8009f10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f14:	e6d1      	b.n	8009cba <_dtoa_r+0x32>
 8009f16:	2301      	movs	r3, #1
 8009f18:	e7de      	b.n	8009ed8 <_dtoa_r+0x250>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	9308      	str	r3, [sp, #32]
 8009f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f20:	eb0a 0903 	add.w	r9, sl, r3
 8009f24:	f109 0301 	add.w	r3, r9, #1
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	bfb8      	it	lt
 8009f2e:	2301      	movlt	r3, #1
 8009f30:	e7dd      	b.n	8009eee <_dtoa_r+0x266>
 8009f32:	2301      	movs	r3, #1
 8009f34:	e7f2      	b.n	8009f1c <_dtoa_r+0x294>
 8009f36:	2501      	movs	r5, #1
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	9508      	str	r5, [sp, #32]
 8009f3e:	f04f 39ff 	mov.w	r9, #4294967295
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f48:	2312      	movs	r3, #18
 8009f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f4c:	e7cf      	b.n	8009eee <_dtoa_r+0x266>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	9308      	str	r3, [sp, #32]
 8009f52:	e7f4      	b.n	8009f3e <_dtoa_r+0x2b6>
 8009f54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009f58:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f5c:	464b      	mov	r3, r9
 8009f5e:	e7c6      	b.n	8009eee <_dtoa_r+0x266>
 8009f60:	3101      	adds	r1, #1
 8009f62:	6041      	str	r1, [r0, #4]
 8009f64:	0052      	lsls	r2, r2, #1
 8009f66:	e7c6      	b.n	8009ef6 <_dtoa_r+0x26e>
 8009f68:	636f4361 	.word	0x636f4361
 8009f6c:	3fd287a7 	.word	0x3fd287a7
 8009f70:	8b60c8b3 	.word	0x8b60c8b3
 8009f74:	3fc68a28 	.word	0x3fc68a28
 8009f78:	509f79fb 	.word	0x509f79fb
 8009f7c:	3fd34413 	.word	0x3fd34413
 8009f80:	0800d25e 	.word	0x0800d25e
 8009f84:	0800d275 	.word	0x0800d275
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	0800d25a 	.word	0x0800d25a
 8009f90:	0800d251 	.word	0x0800d251
 8009f94:	0800d4da 	.word	0x0800d4da
 8009f98:	3ff80000 	.word	0x3ff80000
 8009f9c:	0800d3f0 	.word	0x0800d3f0
 8009fa0:	0800d2d4 	.word	0x0800d2d4
 8009fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fa6:	9a00      	ldr	r2, [sp, #0]
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	9b01      	ldr	r3, [sp, #4]
 8009fac:	2b0e      	cmp	r3, #14
 8009fae:	f200 80ad 	bhi.w	800a10c <_dtoa_r+0x484>
 8009fb2:	2d00      	cmp	r5, #0
 8009fb4:	f000 80aa 	beq.w	800a10c <_dtoa_r+0x484>
 8009fb8:	f1ba 0f00 	cmp.w	sl, #0
 8009fbc:	dd36      	ble.n	800a02c <_dtoa_r+0x3a4>
 8009fbe:	4ac3      	ldr	r2, [pc, #780]	; (800a2cc <_dtoa_r+0x644>)
 8009fc0:	f00a 030f 	and.w	r3, sl, #15
 8009fc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fc8:	ed93 7b00 	vldr	d7, [r3]
 8009fcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009fd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009fd4:	eeb0 8a47 	vmov.f32	s16, s14
 8009fd8:	eef0 8a67 	vmov.f32	s17, s15
 8009fdc:	d016      	beq.n	800a00c <_dtoa_r+0x384>
 8009fde:	4bbc      	ldr	r3, [pc, #752]	; (800a2d0 <_dtoa_r+0x648>)
 8009fe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fe8:	f7f6 fc50 	bl	800088c <__aeabi_ddiv>
 8009fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff0:	f007 070f 	and.w	r7, r7, #15
 8009ff4:	2503      	movs	r5, #3
 8009ff6:	4eb6      	ldr	r6, [pc, #728]	; (800a2d0 <_dtoa_r+0x648>)
 8009ff8:	b957      	cbnz	r7, 800a010 <_dtoa_r+0x388>
 8009ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffe:	ec53 2b18 	vmov	r2, r3, d8
 800a002:	f7f6 fc43 	bl	800088c <__aeabi_ddiv>
 800a006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a00a:	e029      	b.n	800a060 <_dtoa_r+0x3d8>
 800a00c:	2502      	movs	r5, #2
 800a00e:	e7f2      	b.n	8009ff6 <_dtoa_r+0x36e>
 800a010:	07f9      	lsls	r1, r7, #31
 800a012:	d508      	bpl.n	800a026 <_dtoa_r+0x39e>
 800a014:	ec51 0b18 	vmov	r0, r1, d8
 800a018:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a01c:	f7f6 fb0c 	bl	8000638 <__aeabi_dmul>
 800a020:	ec41 0b18 	vmov	d8, r0, r1
 800a024:	3501      	adds	r5, #1
 800a026:	107f      	asrs	r7, r7, #1
 800a028:	3608      	adds	r6, #8
 800a02a:	e7e5      	b.n	8009ff8 <_dtoa_r+0x370>
 800a02c:	f000 80a6 	beq.w	800a17c <_dtoa_r+0x4f4>
 800a030:	f1ca 0600 	rsb	r6, sl, #0
 800a034:	4ba5      	ldr	r3, [pc, #660]	; (800a2cc <_dtoa_r+0x644>)
 800a036:	4fa6      	ldr	r7, [pc, #664]	; (800a2d0 <_dtoa_r+0x648>)
 800a038:	f006 020f 	and.w	r2, r6, #15
 800a03c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a048:	f7f6 faf6 	bl	8000638 <__aeabi_dmul>
 800a04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a050:	1136      	asrs	r6, r6, #4
 800a052:	2300      	movs	r3, #0
 800a054:	2502      	movs	r5, #2
 800a056:	2e00      	cmp	r6, #0
 800a058:	f040 8085 	bne.w	800a166 <_dtoa_r+0x4de>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1d2      	bne.n	800a006 <_dtoa_r+0x37e>
 800a060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 808c 	beq.w	800a180 <_dtoa_r+0x4f8>
 800a068:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a06c:	4b99      	ldr	r3, [pc, #612]	; (800a2d4 <_dtoa_r+0x64c>)
 800a06e:	2200      	movs	r2, #0
 800a070:	4630      	mov	r0, r6
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 fd52 	bl	8000b1c <__aeabi_dcmplt>
 800a078:	2800      	cmp	r0, #0
 800a07a:	f000 8081 	beq.w	800a180 <_dtoa_r+0x4f8>
 800a07e:	9b01      	ldr	r3, [sp, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d07d      	beq.n	800a180 <_dtoa_r+0x4f8>
 800a084:	f1b9 0f00 	cmp.w	r9, #0
 800a088:	dd3c      	ble.n	800a104 <_dtoa_r+0x47c>
 800a08a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a08e:	9307      	str	r3, [sp, #28]
 800a090:	2200      	movs	r2, #0
 800a092:	4b91      	ldr	r3, [pc, #580]	; (800a2d8 <_dtoa_r+0x650>)
 800a094:	4630      	mov	r0, r6
 800a096:	4639      	mov	r1, r7
 800a098:	f7f6 face 	bl	8000638 <__aeabi_dmul>
 800a09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a0a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f7f6 fa5a 	bl	8000564 <__aeabi_i2d>
 800a0b0:	4632      	mov	r2, r6
 800a0b2:	463b      	mov	r3, r7
 800a0b4:	f7f6 fac0 	bl	8000638 <__aeabi_dmul>
 800a0b8:	4b88      	ldr	r3, [pc, #544]	; (800a2dc <_dtoa_r+0x654>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f7f6 f906 	bl	80002cc <__adddf3>
 800a0c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c8:	9303      	str	r3, [sp, #12]
 800a0ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d15c      	bne.n	800a18a <_dtoa_r+0x502>
 800a0d0:	4b83      	ldr	r3, [pc, #524]	; (800a2e0 <_dtoa_r+0x658>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	f7f6 f8f6 	bl	80002c8 <__aeabi_dsub>
 800a0dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	460f      	mov	r7, r1
 800a0e4:	f7f6 fd38 	bl	8000b58 <__aeabi_dcmpgt>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	f040 8296 	bne.w	800a61a <_dtoa_r+0x992>
 800a0ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	f7f6 fd0f 	bl	8000b1c <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f040 8288 	bne.w	800a614 <_dtoa_r+0x98c>
 800a104:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a10c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f2c0 8158 	blt.w	800a3c4 <_dtoa_r+0x73c>
 800a114:	f1ba 0f0e 	cmp.w	sl, #14
 800a118:	f300 8154 	bgt.w	800a3c4 <_dtoa_r+0x73c>
 800a11c:	4b6b      	ldr	r3, [pc, #428]	; (800a2cc <_dtoa_r+0x644>)
 800a11e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a122:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f280 80e3 	bge.w	800a2f4 <_dtoa_r+0x66c>
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f300 80df 	bgt.w	800a2f4 <_dtoa_r+0x66c>
 800a136:	f040 826d 	bne.w	800a614 <_dtoa_r+0x98c>
 800a13a:	4b69      	ldr	r3, [pc, #420]	; (800a2e0 <_dtoa_r+0x658>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	4649      	mov	r1, r9
 800a142:	f7f6 fa79 	bl	8000638 <__aeabi_dmul>
 800a146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a14a:	f7f6 fcfb 	bl	8000b44 <__aeabi_dcmpge>
 800a14e:	9e01      	ldr	r6, [sp, #4]
 800a150:	4637      	mov	r7, r6
 800a152:	2800      	cmp	r0, #0
 800a154:	f040 8243 	bne.w	800a5de <_dtoa_r+0x956>
 800a158:	9d00      	ldr	r5, [sp, #0]
 800a15a:	2331      	movs	r3, #49	; 0x31
 800a15c:	f805 3b01 	strb.w	r3, [r5], #1
 800a160:	f10a 0a01 	add.w	sl, sl, #1
 800a164:	e23f      	b.n	800a5e6 <_dtoa_r+0x95e>
 800a166:	07f2      	lsls	r2, r6, #31
 800a168:	d505      	bpl.n	800a176 <_dtoa_r+0x4ee>
 800a16a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16e:	f7f6 fa63 	bl	8000638 <__aeabi_dmul>
 800a172:	3501      	adds	r5, #1
 800a174:	2301      	movs	r3, #1
 800a176:	1076      	asrs	r6, r6, #1
 800a178:	3708      	adds	r7, #8
 800a17a:	e76c      	b.n	800a056 <_dtoa_r+0x3ce>
 800a17c:	2502      	movs	r5, #2
 800a17e:	e76f      	b.n	800a060 <_dtoa_r+0x3d8>
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	f8cd a01c 	str.w	sl, [sp, #28]
 800a186:	930c      	str	r3, [sp, #48]	; 0x30
 800a188:	e78d      	b.n	800a0a6 <_dtoa_r+0x41e>
 800a18a:	9900      	ldr	r1, [sp, #0]
 800a18c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a190:	4b4e      	ldr	r3, [pc, #312]	; (800a2cc <_dtoa_r+0x644>)
 800a192:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a196:	4401      	add	r1, r0
 800a198:	9102      	str	r1, [sp, #8]
 800a19a:	9908      	ldr	r1, [sp, #32]
 800a19c:	eeb0 8a47 	vmov.f32	s16, s14
 800a1a0:	eef0 8a67 	vmov.f32	s17, s15
 800a1a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d045      	beq.n	800a23c <_dtoa_r+0x5b4>
 800a1b0:	494c      	ldr	r1, [pc, #304]	; (800a2e4 <_dtoa_r+0x65c>)
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	f7f6 fb6a 	bl	800088c <__aeabi_ddiv>
 800a1b8:	ec53 2b18 	vmov	r2, r3, d8
 800a1bc:	f7f6 f884 	bl	80002c8 <__aeabi_dsub>
 800a1c0:	9d00      	ldr	r5, [sp, #0]
 800a1c2:	ec41 0b18 	vmov	d8, r0, r1
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7f6 fce5 	bl	8000b98 <__aeabi_d2iz>
 800a1ce:	900c      	str	r0, [sp, #48]	; 0x30
 800a1d0:	f7f6 f9c8 	bl	8000564 <__aeabi_i2d>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 f874 	bl	80002c8 <__aeabi_dsub>
 800a1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e2:	3330      	adds	r3, #48	; 0x30
 800a1e4:	f805 3b01 	strb.w	r3, [r5], #1
 800a1e8:	ec53 2b18 	vmov	r2, r3, d8
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	460f      	mov	r7, r1
 800a1f0:	f7f6 fc94 	bl	8000b1c <__aeabi_dcmplt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d165      	bne.n	800a2c4 <_dtoa_r+0x63c>
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	4935      	ldr	r1, [pc, #212]	; (800a2d4 <_dtoa_r+0x64c>)
 800a1fe:	2000      	movs	r0, #0
 800a200:	f7f6 f862 	bl	80002c8 <__aeabi_dsub>
 800a204:	ec53 2b18 	vmov	r2, r3, d8
 800a208:	f7f6 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 80b9 	bne.w	800a384 <_dtoa_r+0x6fc>
 800a212:	9b02      	ldr	r3, [sp, #8]
 800a214:	429d      	cmp	r5, r3
 800a216:	f43f af75 	beq.w	800a104 <_dtoa_r+0x47c>
 800a21a:	4b2f      	ldr	r3, [pc, #188]	; (800a2d8 <_dtoa_r+0x650>)
 800a21c:	ec51 0b18 	vmov	r0, r1, d8
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 fa09 	bl	8000638 <__aeabi_dmul>
 800a226:	4b2c      	ldr	r3, [pc, #176]	; (800a2d8 <_dtoa_r+0x650>)
 800a228:	ec41 0b18 	vmov	d8, r0, r1
 800a22c:	2200      	movs	r2, #0
 800a22e:	4630      	mov	r0, r6
 800a230:	4639      	mov	r1, r7
 800a232:	f7f6 fa01 	bl	8000638 <__aeabi_dmul>
 800a236:	4606      	mov	r6, r0
 800a238:	460f      	mov	r7, r1
 800a23a:	e7c4      	b.n	800a1c6 <_dtoa_r+0x53e>
 800a23c:	ec51 0b17 	vmov	r0, r1, d7
 800a240:	f7f6 f9fa 	bl	8000638 <__aeabi_dmul>
 800a244:	9b02      	ldr	r3, [sp, #8]
 800a246:	9d00      	ldr	r5, [sp, #0]
 800a248:	930c      	str	r3, [sp, #48]	; 0x30
 800a24a:	ec41 0b18 	vmov	d8, r0, r1
 800a24e:	4639      	mov	r1, r7
 800a250:	4630      	mov	r0, r6
 800a252:	f7f6 fca1 	bl	8000b98 <__aeabi_d2iz>
 800a256:	9011      	str	r0, [sp, #68]	; 0x44
 800a258:	f7f6 f984 	bl	8000564 <__aeabi_i2d>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 f830 	bl	80002c8 <__aeabi_dsub>
 800a268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a26a:	3330      	adds	r3, #48	; 0x30
 800a26c:	f805 3b01 	strb.w	r3, [r5], #1
 800a270:	9b02      	ldr	r3, [sp, #8]
 800a272:	429d      	cmp	r5, r3
 800a274:	4606      	mov	r6, r0
 800a276:	460f      	mov	r7, r1
 800a278:	f04f 0200 	mov.w	r2, #0
 800a27c:	d134      	bne.n	800a2e8 <_dtoa_r+0x660>
 800a27e:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <_dtoa_r+0x65c>)
 800a280:	ec51 0b18 	vmov	r0, r1, d8
 800a284:	f7f6 f822 	bl	80002cc <__adddf3>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4630      	mov	r0, r6
 800a28e:	4639      	mov	r1, r7
 800a290:	f7f6 fc62 	bl	8000b58 <__aeabi_dcmpgt>
 800a294:	2800      	cmp	r0, #0
 800a296:	d175      	bne.n	800a384 <_dtoa_r+0x6fc>
 800a298:	ec53 2b18 	vmov	r2, r3, d8
 800a29c:	4911      	ldr	r1, [pc, #68]	; (800a2e4 <_dtoa_r+0x65c>)
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f7f6 f812 	bl	80002c8 <__aeabi_dsub>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f6 fc36 	bl	8000b1c <__aeabi_dcmplt>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f43f af27 	beq.w	800a104 <_dtoa_r+0x47c>
 800a2b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2b8:	1e6b      	subs	r3, r5, #1
 800a2ba:	930c      	str	r3, [sp, #48]	; 0x30
 800a2bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2c0:	2b30      	cmp	r3, #48	; 0x30
 800a2c2:	d0f8      	beq.n	800a2b6 <_dtoa_r+0x62e>
 800a2c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2c8:	e04a      	b.n	800a360 <_dtoa_r+0x6d8>
 800a2ca:	bf00      	nop
 800a2cc:	0800d3f0 	.word	0x0800d3f0
 800a2d0:	0800d3c8 	.word	0x0800d3c8
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	40240000 	.word	0x40240000
 800a2dc:	401c0000 	.word	0x401c0000
 800a2e0:	40140000 	.word	0x40140000
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	4baf      	ldr	r3, [pc, #700]	; (800a5a8 <_dtoa_r+0x920>)
 800a2ea:	f7f6 f9a5 	bl	8000638 <__aeabi_dmul>
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	e7ac      	b.n	800a24e <_dtoa_r+0x5c6>
 800a2f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2f8:	9d00      	ldr	r5, [sp, #0]
 800a2fa:	4642      	mov	r2, r8
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	4630      	mov	r0, r6
 800a300:	4639      	mov	r1, r7
 800a302:	f7f6 fac3 	bl	800088c <__aeabi_ddiv>
 800a306:	f7f6 fc47 	bl	8000b98 <__aeabi_d2iz>
 800a30a:	9002      	str	r0, [sp, #8]
 800a30c:	f7f6 f92a 	bl	8000564 <__aeabi_i2d>
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	f7f6 f990 	bl	8000638 <__aeabi_dmul>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4630      	mov	r0, r6
 800a31e:	4639      	mov	r1, r7
 800a320:	f7f5 ffd2 	bl	80002c8 <__aeabi_dsub>
 800a324:	9e02      	ldr	r6, [sp, #8]
 800a326:	9f01      	ldr	r7, [sp, #4]
 800a328:	3630      	adds	r6, #48	; 0x30
 800a32a:	f805 6b01 	strb.w	r6, [r5], #1
 800a32e:	9e00      	ldr	r6, [sp, #0]
 800a330:	1bae      	subs	r6, r5, r6
 800a332:	42b7      	cmp	r7, r6
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	d137      	bne.n	800a3aa <_dtoa_r+0x722>
 800a33a:	f7f5 ffc7 	bl	80002cc <__adddf3>
 800a33e:	4642      	mov	r2, r8
 800a340:	464b      	mov	r3, r9
 800a342:	4606      	mov	r6, r0
 800a344:	460f      	mov	r7, r1
 800a346:	f7f6 fc07 	bl	8000b58 <__aeabi_dcmpgt>
 800a34a:	b9c8      	cbnz	r0, 800a380 <_dtoa_r+0x6f8>
 800a34c:	4642      	mov	r2, r8
 800a34e:	464b      	mov	r3, r9
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f6 fbd8 	bl	8000b08 <__aeabi_dcmpeq>
 800a358:	b110      	cbz	r0, 800a360 <_dtoa_r+0x6d8>
 800a35a:	9b02      	ldr	r3, [sp, #8]
 800a35c:	07d9      	lsls	r1, r3, #31
 800a35e:	d40f      	bmi.n	800a380 <_dtoa_r+0x6f8>
 800a360:	4620      	mov	r0, r4
 800a362:	4659      	mov	r1, fp
 800a364:	f000 fe6a 	bl	800b03c <_Bfree>
 800a368:	2300      	movs	r3, #0
 800a36a:	702b      	strb	r3, [r5, #0]
 800a36c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a36e:	f10a 0001 	add.w	r0, sl, #1
 800a372:	6018      	str	r0, [r3, #0]
 800a374:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a376:	2b00      	cmp	r3, #0
 800a378:	f43f acd8 	beq.w	8009d2c <_dtoa_r+0xa4>
 800a37c:	601d      	str	r5, [r3, #0]
 800a37e:	e4d5      	b.n	8009d2c <_dtoa_r+0xa4>
 800a380:	f8cd a01c 	str.w	sl, [sp, #28]
 800a384:	462b      	mov	r3, r5
 800a386:	461d      	mov	r5, r3
 800a388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a38c:	2a39      	cmp	r2, #57	; 0x39
 800a38e:	d108      	bne.n	800a3a2 <_dtoa_r+0x71a>
 800a390:	9a00      	ldr	r2, [sp, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d1f7      	bne.n	800a386 <_dtoa_r+0x6fe>
 800a396:	9a07      	ldr	r2, [sp, #28]
 800a398:	9900      	ldr	r1, [sp, #0]
 800a39a:	3201      	adds	r2, #1
 800a39c:	9207      	str	r2, [sp, #28]
 800a39e:	2230      	movs	r2, #48	; 0x30
 800a3a0:	700a      	strb	r2, [r1, #0]
 800a3a2:	781a      	ldrb	r2, [r3, #0]
 800a3a4:	3201      	adds	r2, #1
 800a3a6:	701a      	strb	r2, [r3, #0]
 800a3a8:	e78c      	b.n	800a2c4 <_dtoa_r+0x63c>
 800a3aa:	4b7f      	ldr	r3, [pc, #508]	; (800a5a8 <_dtoa_r+0x920>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f7f6 f943 	bl	8000638 <__aeabi_dmul>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	f7f6 fba5 	bl	8000b08 <__aeabi_dcmpeq>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d09b      	beq.n	800a2fa <_dtoa_r+0x672>
 800a3c2:	e7cd      	b.n	800a360 <_dtoa_r+0x6d8>
 800a3c4:	9a08      	ldr	r2, [sp, #32]
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	f000 80c4 	beq.w	800a554 <_dtoa_r+0x8cc>
 800a3cc:	9a05      	ldr	r2, [sp, #20]
 800a3ce:	2a01      	cmp	r2, #1
 800a3d0:	f300 80a8 	bgt.w	800a524 <_dtoa_r+0x89c>
 800a3d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	f000 80a0 	beq.w	800a51c <_dtoa_r+0x894>
 800a3dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3e0:	9e06      	ldr	r6, [sp, #24]
 800a3e2:	4645      	mov	r5, r8
 800a3e4:	9a04      	ldr	r2, [sp, #16]
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	441a      	add	r2, r3
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	4498      	add	r8, r3
 800a3ee:	9204      	str	r2, [sp, #16]
 800a3f0:	f000 ff2a 	bl	800b248 <__i2b>
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	dd0b      	ble.n	800a412 <_dtoa_r+0x78a>
 800a3fa:	9b04      	ldr	r3, [sp, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dd08      	ble.n	800a412 <_dtoa_r+0x78a>
 800a400:	42ab      	cmp	r3, r5
 800a402:	9a04      	ldr	r2, [sp, #16]
 800a404:	bfa8      	it	ge
 800a406:	462b      	movge	r3, r5
 800a408:	eba8 0803 	sub.w	r8, r8, r3
 800a40c:	1aed      	subs	r5, r5, r3
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	9b06      	ldr	r3, [sp, #24]
 800a414:	b1fb      	cbz	r3, 800a456 <_dtoa_r+0x7ce>
 800a416:	9b08      	ldr	r3, [sp, #32]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 809f 	beq.w	800a55c <_dtoa_r+0x8d4>
 800a41e:	2e00      	cmp	r6, #0
 800a420:	dd11      	ble.n	800a446 <_dtoa_r+0x7be>
 800a422:	4639      	mov	r1, r7
 800a424:	4632      	mov	r2, r6
 800a426:	4620      	mov	r0, r4
 800a428:	f000 ffca 	bl	800b3c0 <__pow5mult>
 800a42c:	465a      	mov	r2, fp
 800a42e:	4601      	mov	r1, r0
 800a430:	4607      	mov	r7, r0
 800a432:	4620      	mov	r0, r4
 800a434:	f000 ff1e 	bl	800b274 <__multiply>
 800a438:	4659      	mov	r1, fp
 800a43a:	9007      	str	r0, [sp, #28]
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fdfd 	bl	800b03c <_Bfree>
 800a442:	9b07      	ldr	r3, [sp, #28]
 800a444:	469b      	mov	fp, r3
 800a446:	9b06      	ldr	r3, [sp, #24]
 800a448:	1b9a      	subs	r2, r3, r6
 800a44a:	d004      	beq.n	800a456 <_dtoa_r+0x7ce>
 800a44c:	4659      	mov	r1, fp
 800a44e:	4620      	mov	r0, r4
 800a450:	f000 ffb6 	bl	800b3c0 <__pow5mult>
 800a454:	4683      	mov	fp, r0
 800a456:	2101      	movs	r1, #1
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fef5 	bl	800b248 <__i2b>
 800a45e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a460:	2b00      	cmp	r3, #0
 800a462:	4606      	mov	r6, r0
 800a464:	dd7c      	ble.n	800a560 <_dtoa_r+0x8d8>
 800a466:	461a      	mov	r2, r3
 800a468:	4601      	mov	r1, r0
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 ffa8 	bl	800b3c0 <__pow5mult>
 800a470:	9b05      	ldr	r3, [sp, #20]
 800a472:	2b01      	cmp	r3, #1
 800a474:	4606      	mov	r6, r0
 800a476:	dd76      	ble.n	800a566 <_dtoa_r+0x8de>
 800a478:	2300      	movs	r3, #0
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	6933      	ldr	r3, [r6, #16]
 800a47e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a482:	6918      	ldr	r0, [r3, #16]
 800a484:	f000 fe90 	bl	800b1a8 <__hi0bits>
 800a488:	f1c0 0020 	rsb	r0, r0, #32
 800a48c:	9b04      	ldr	r3, [sp, #16]
 800a48e:	4418      	add	r0, r3
 800a490:	f010 001f 	ands.w	r0, r0, #31
 800a494:	f000 8086 	beq.w	800a5a4 <_dtoa_r+0x91c>
 800a498:	f1c0 0320 	rsb	r3, r0, #32
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	dd7f      	ble.n	800a5a0 <_dtoa_r+0x918>
 800a4a0:	f1c0 001c 	rsb	r0, r0, #28
 800a4a4:	9b04      	ldr	r3, [sp, #16]
 800a4a6:	4403      	add	r3, r0
 800a4a8:	4480      	add	r8, r0
 800a4aa:	4405      	add	r5, r0
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	dd05      	ble.n	800a4c0 <_dtoa_r+0x838>
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 ffdb 	bl	800b474 <__lshift>
 800a4be:	4683      	mov	fp, r0
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd05      	ble.n	800a4d2 <_dtoa_r+0x84a>
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 ffd2 	bl	800b474 <__lshift>
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d069      	beq.n	800a5ac <_dtoa_r+0x924>
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4658      	mov	r0, fp
 800a4dc:	f001 f836 	bl	800b54c <__mcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	da63      	bge.n	800a5ac <_dtoa_r+0x924>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4659      	mov	r1, fp
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fdc8 	bl	800b080 <__multadd>
 800a4f0:	9b08      	ldr	r3, [sp, #32]
 800a4f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4f6:	4683      	mov	fp, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 818f 	beq.w	800a81c <_dtoa_r+0xb94>
 800a4fe:	4639      	mov	r1, r7
 800a500:	2300      	movs	r3, #0
 800a502:	220a      	movs	r2, #10
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fdbb 	bl	800b080 <__multadd>
 800a50a:	f1b9 0f00 	cmp.w	r9, #0
 800a50e:	4607      	mov	r7, r0
 800a510:	f300 808e 	bgt.w	800a630 <_dtoa_r+0x9a8>
 800a514:	9b05      	ldr	r3, [sp, #20]
 800a516:	2b02      	cmp	r3, #2
 800a518:	dc50      	bgt.n	800a5bc <_dtoa_r+0x934>
 800a51a:	e089      	b.n	800a630 <_dtoa_r+0x9a8>
 800a51c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a51e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a522:	e75d      	b.n	800a3e0 <_dtoa_r+0x758>
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	1e5e      	subs	r6, r3, #1
 800a528:	9b06      	ldr	r3, [sp, #24]
 800a52a:	42b3      	cmp	r3, r6
 800a52c:	bfbf      	itttt	lt
 800a52e:	9b06      	ldrlt	r3, [sp, #24]
 800a530:	9606      	strlt	r6, [sp, #24]
 800a532:	1af2      	sublt	r2, r6, r3
 800a534:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a536:	bfb6      	itet	lt
 800a538:	189b      	addlt	r3, r3, r2
 800a53a:	1b9e      	subge	r6, r3, r6
 800a53c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a53e:	9b01      	ldr	r3, [sp, #4]
 800a540:	bfb8      	it	lt
 800a542:	2600      	movlt	r6, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfb5      	itete	lt
 800a548:	eba8 0503 	sublt.w	r5, r8, r3
 800a54c:	9b01      	ldrge	r3, [sp, #4]
 800a54e:	2300      	movlt	r3, #0
 800a550:	4645      	movge	r5, r8
 800a552:	e747      	b.n	800a3e4 <_dtoa_r+0x75c>
 800a554:	9e06      	ldr	r6, [sp, #24]
 800a556:	9f08      	ldr	r7, [sp, #32]
 800a558:	4645      	mov	r5, r8
 800a55a:	e74c      	b.n	800a3f6 <_dtoa_r+0x76e>
 800a55c:	9a06      	ldr	r2, [sp, #24]
 800a55e:	e775      	b.n	800a44c <_dtoa_r+0x7c4>
 800a560:	9b05      	ldr	r3, [sp, #20]
 800a562:	2b01      	cmp	r3, #1
 800a564:	dc18      	bgt.n	800a598 <_dtoa_r+0x910>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	b9b3      	cbnz	r3, 800a598 <_dtoa_r+0x910>
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a570:	b9a3      	cbnz	r3, 800a59c <_dtoa_r+0x914>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a578:	0d1b      	lsrs	r3, r3, #20
 800a57a:	051b      	lsls	r3, r3, #20
 800a57c:	b12b      	cbz	r3, 800a58a <_dtoa_r+0x902>
 800a57e:	9b04      	ldr	r3, [sp, #16]
 800a580:	3301      	adds	r3, #1
 800a582:	9304      	str	r3, [sp, #16]
 800a584:	f108 0801 	add.w	r8, r8, #1
 800a588:	2301      	movs	r3, #1
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f47f af74 	bne.w	800a47c <_dtoa_r+0x7f4>
 800a594:	2001      	movs	r0, #1
 800a596:	e779      	b.n	800a48c <_dtoa_r+0x804>
 800a598:	2300      	movs	r3, #0
 800a59a:	e7f6      	b.n	800a58a <_dtoa_r+0x902>
 800a59c:	9b02      	ldr	r3, [sp, #8]
 800a59e:	e7f4      	b.n	800a58a <_dtoa_r+0x902>
 800a5a0:	d085      	beq.n	800a4ae <_dtoa_r+0x826>
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	301c      	adds	r0, #28
 800a5a6:	e77d      	b.n	800a4a4 <_dtoa_r+0x81c>
 800a5a8:	40240000 	.word	0x40240000
 800a5ac:	9b01      	ldr	r3, [sp, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dc38      	bgt.n	800a624 <_dtoa_r+0x99c>
 800a5b2:	9b05      	ldr	r3, [sp, #20]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	dd35      	ble.n	800a624 <_dtoa_r+0x99c>
 800a5b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a5bc:	f1b9 0f00 	cmp.w	r9, #0
 800a5c0:	d10d      	bne.n	800a5de <_dtoa_r+0x956>
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	2205      	movs	r2, #5
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f000 fd59 	bl	800b080 <__multadd>
 800a5ce:	4601      	mov	r1, r0
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	4658      	mov	r0, fp
 800a5d4:	f000 ffba 	bl	800b54c <__mcmp>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	f73f adbd 	bgt.w	800a158 <_dtoa_r+0x4d0>
 800a5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e0:	9d00      	ldr	r5, [sp, #0]
 800a5e2:	ea6f 0a03 	mvn.w	sl, r3
 800a5e6:	f04f 0800 	mov.w	r8, #0
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fd25 	bl	800b03c <_Bfree>
 800a5f2:	2f00      	cmp	r7, #0
 800a5f4:	f43f aeb4 	beq.w	800a360 <_dtoa_r+0x6d8>
 800a5f8:	f1b8 0f00 	cmp.w	r8, #0
 800a5fc:	d005      	beq.n	800a60a <_dtoa_r+0x982>
 800a5fe:	45b8      	cmp	r8, r7
 800a600:	d003      	beq.n	800a60a <_dtoa_r+0x982>
 800a602:	4641      	mov	r1, r8
 800a604:	4620      	mov	r0, r4
 800a606:	f000 fd19 	bl	800b03c <_Bfree>
 800a60a:	4639      	mov	r1, r7
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fd15 	bl	800b03c <_Bfree>
 800a612:	e6a5      	b.n	800a360 <_dtoa_r+0x6d8>
 800a614:	2600      	movs	r6, #0
 800a616:	4637      	mov	r7, r6
 800a618:	e7e1      	b.n	800a5de <_dtoa_r+0x956>
 800a61a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a61c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a620:	4637      	mov	r7, r6
 800a622:	e599      	b.n	800a158 <_dtoa_r+0x4d0>
 800a624:	9b08      	ldr	r3, [sp, #32]
 800a626:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 80fd 	beq.w	800a82a <_dtoa_r+0xba2>
 800a630:	2d00      	cmp	r5, #0
 800a632:	dd05      	ble.n	800a640 <_dtoa_r+0x9b8>
 800a634:	4639      	mov	r1, r7
 800a636:	462a      	mov	r2, r5
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 ff1b 	bl	800b474 <__lshift>
 800a63e:	4607      	mov	r7, r0
 800a640:	9b06      	ldr	r3, [sp, #24]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d05c      	beq.n	800a700 <_dtoa_r+0xa78>
 800a646:	6879      	ldr	r1, [r7, #4]
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 fcb7 	bl	800afbc <_Balloc>
 800a64e:	4605      	mov	r5, r0
 800a650:	b928      	cbnz	r0, 800a65e <_dtoa_r+0x9d6>
 800a652:	4b80      	ldr	r3, [pc, #512]	; (800a854 <_dtoa_r+0xbcc>)
 800a654:	4602      	mov	r2, r0
 800a656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a65a:	f7ff bb2e 	b.w	8009cba <_dtoa_r+0x32>
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	3202      	adds	r2, #2
 800a662:	0092      	lsls	r2, r2, #2
 800a664:	f107 010c 	add.w	r1, r7, #12
 800a668:	300c      	adds	r0, #12
 800a66a:	f000 fc99 	bl	800afa0 <memcpy>
 800a66e:	2201      	movs	r2, #1
 800a670:	4629      	mov	r1, r5
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fefe 	bl	800b474 <__lshift>
 800a678:	9b00      	ldr	r3, [sp, #0]
 800a67a:	3301      	adds	r3, #1
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	9b00      	ldr	r3, [sp, #0]
 800a680:	444b      	add	r3, r9
 800a682:	9307      	str	r3, [sp, #28]
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	46b8      	mov	r8, r7
 800a68c:	9306      	str	r3, [sp, #24]
 800a68e:	4607      	mov	r7, r0
 800a690:	9b01      	ldr	r3, [sp, #4]
 800a692:	4631      	mov	r1, r6
 800a694:	3b01      	subs	r3, #1
 800a696:	4658      	mov	r0, fp
 800a698:	9302      	str	r3, [sp, #8]
 800a69a:	f7ff fa69 	bl	8009b70 <quorem>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	3330      	adds	r3, #48	; 0x30
 800a6a2:	9004      	str	r0, [sp, #16]
 800a6a4:	4641      	mov	r1, r8
 800a6a6:	4658      	mov	r0, fp
 800a6a8:	9308      	str	r3, [sp, #32]
 800a6aa:	f000 ff4f 	bl	800b54c <__mcmp>
 800a6ae:	463a      	mov	r2, r7
 800a6b0:	4681      	mov	r9, r0
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f000 ff65 	bl	800b584 <__mdiff>
 800a6ba:	68c2      	ldr	r2, [r0, #12]
 800a6bc:	9b08      	ldr	r3, [sp, #32]
 800a6be:	4605      	mov	r5, r0
 800a6c0:	bb02      	cbnz	r2, 800a704 <_dtoa_r+0xa7c>
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4658      	mov	r0, fp
 800a6c6:	f000 ff41 	bl	800b54c <__mcmp>
 800a6ca:	9b08      	ldr	r3, [sp, #32]
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a6d6:	f000 fcb1 	bl	800b03c <_Bfree>
 800a6da:	9b05      	ldr	r3, [sp, #20]
 800a6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6de:	9d01      	ldr	r5, [sp, #4]
 800a6e0:	ea43 0102 	orr.w	r1, r3, r2
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	9b08      	ldr	r3, [sp, #32]
 800a6ea:	d10d      	bne.n	800a708 <_dtoa_r+0xa80>
 800a6ec:	2b39      	cmp	r3, #57	; 0x39
 800a6ee:	d029      	beq.n	800a744 <_dtoa_r+0xabc>
 800a6f0:	f1b9 0f00 	cmp.w	r9, #0
 800a6f4:	dd01      	ble.n	800a6fa <_dtoa_r+0xa72>
 800a6f6:	9b04      	ldr	r3, [sp, #16]
 800a6f8:	3331      	adds	r3, #49	; 0x31
 800a6fa:	9a02      	ldr	r2, [sp, #8]
 800a6fc:	7013      	strb	r3, [r2, #0]
 800a6fe:	e774      	b.n	800a5ea <_dtoa_r+0x962>
 800a700:	4638      	mov	r0, r7
 800a702:	e7b9      	b.n	800a678 <_dtoa_r+0x9f0>
 800a704:	2201      	movs	r2, #1
 800a706:	e7e2      	b.n	800a6ce <_dtoa_r+0xa46>
 800a708:	f1b9 0f00 	cmp.w	r9, #0
 800a70c:	db06      	blt.n	800a71c <_dtoa_r+0xa94>
 800a70e:	9905      	ldr	r1, [sp, #20]
 800a710:	ea41 0909 	orr.w	r9, r1, r9
 800a714:	9906      	ldr	r1, [sp, #24]
 800a716:	ea59 0101 	orrs.w	r1, r9, r1
 800a71a:	d120      	bne.n	800a75e <_dtoa_r+0xad6>
 800a71c:	2a00      	cmp	r2, #0
 800a71e:	ddec      	ble.n	800a6fa <_dtoa_r+0xa72>
 800a720:	4659      	mov	r1, fp
 800a722:	2201      	movs	r2, #1
 800a724:	4620      	mov	r0, r4
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	f000 fea4 	bl	800b474 <__lshift>
 800a72c:	4631      	mov	r1, r6
 800a72e:	4683      	mov	fp, r0
 800a730:	f000 ff0c 	bl	800b54c <__mcmp>
 800a734:	2800      	cmp	r0, #0
 800a736:	9b01      	ldr	r3, [sp, #4]
 800a738:	dc02      	bgt.n	800a740 <_dtoa_r+0xab8>
 800a73a:	d1de      	bne.n	800a6fa <_dtoa_r+0xa72>
 800a73c:	07da      	lsls	r2, r3, #31
 800a73e:	d5dc      	bpl.n	800a6fa <_dtoa_r+0xa72>
 800a740:	2b39      	cmp	r3, #57	; 0x39
 800a742:	d1d8      	bne.n	800a6f6 <_dtoa_r+0xa6e>
 800a744:	9a02      	ldr	r2, [sp, #8]
 800a746:	2339      	movs	r3, #57	; 0x39
 800a748:	7013      	strb	r3, [r2, #0]
 800a74a:	462b      	mov	r3, r5
 800a74c:	461d      	mov	r5, r3
 800a74e:	3b01      	subs	r3, #1
 800a750:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a754:	2a39      	cmp	r2, #57	; 0x39
 800a756:	d050      	beq.n	800a7fa <_dtoa_r+0xb72>
 800a758:	3201      	adds	r2, #1
 800a75a:	701a      	strb	r2, [r3, #0]
 800a75c:	e745      	b.n	800a5ea <_dtoa_r+0x962>
 800a75e:	2a00      	cmp	r2, #0
 800a760:	dd03      	ble.n	800a76a <_dtoa_r+0xae2>
 800a762:	2b39      	cmp	r3, #57	; 0x39
 800a764:	d0ee      	beq.n	800a744 <_dtoa_r+0xabc>
 800a766:	3301      	adds	r3, #1
 800a768:	e7c7      	b.n	800a6fa <_dtoa_r+0xa72>
 800a76a:	9a01      	ldr	r2, [sp, #4]
 800a76c:	9907      	ldr	r1, [sp, #28]
 800a76e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a772:	428a      	cmp	r2, r1
 800a774:	d02a      	beq.n	800a7cc <_dtoa_r+0xb44>
 800a776:	4659      	mov	r1, fp
 800a778:	2300      	movs	r3, #0
 800a77a:	220a      	movs	r2, #10
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 fc7f 	bl	800b080 <__multadd>
 800a782:	45b8      	cmp	r8, r7
 800a784:	4683      	mov	fp, r0
 800a786:	f04f 0300 	mov.w	r3, #0
 800a78a:	f04f 020a 	mov.w	r2, #10
 800a78e:	4641      	mov	r1, r8
 800a790:	4620      	mov	r0, r4
 800a792:	d107      	bne.n	800a7a4 <_dtoa_r+0xb1c>
 800a794:	f000 fc74 	bl	800b080 <__multadd>
 800a798:	4680      	mov	r8, r0
 800a79a:	4607      	mov	r7, r0
 800a79c:	9b01      	ldr	r3, [sp, #4]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	e775      	b.n	800a690 <_dtoa_r+0xa08>
 800a7a4:	f000 fc6c 	bl	800b080 <__multadd>
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	220a      	movs	r2, #10
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 fc65 	bl	800b080 <__multadd>
 800a7b6:	4607      	mov	r7, r0
 800a7b8:	e7f0      	b.n	800a79c <_dtoa_r+0xb14>
 800a7ba:	f1b9 0f00 	cmp.w	r9, #0
 800a7be:	9a00      	ldr	r2, [sp, #0]
 800a7c0:	bfcc      	ite	gt
 800a7c2:	464d      	movgt	r5, r9
 800a7c4:	2501      	movle	r5, #1
 800a7c6:	4415      	add	r5, r2
 800a7c8:	f04f 0800 	mov.w	r8, #0
 800a7cc:	4659      	mov	r1, fp
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	9301      	str	r3, [sp, #4]
 800a7d4:	f000 fe4e 	bl	800b474 <__lshift>
 800a7d8:	4631      	mov	r1, r6
 800a7da:	4683      	mov	fp, r0
 800a7dc:	f000 feb6 	bl	800b54c <__mcmp>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	dcb2      	bgt.n	800a74a <_dtoa_r+0xac2>
 800a7e4:	d102      	bne.n	800a7ec <_dtoa_r+0xb64>
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	07db      	lsls	r3, r3, #31
 800a7ea:	d4ae      	bmi.n	800a74a <_dtoa_r+0xac2>
 800a7ec:	462b      	mov	r3, r5
 800a7ee:	461d      	mov	r5, r3
 800a7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7f4:	2a30      	cmp	r2, #48	; 0x30
 800a7f6:	d0fa      	beq.n	800a7ee <_dtoa_r+0xb66>
 800a7f8:	e6f7      	b.n	800a5ea <_dtoa_r+0x962>
 800a7fa:	9a00      	ldr	r2, [sp, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d1a5      	bne.n	800a74c <_dtoa_r+0xac4>
 800a800:	f10a 0a01 	add.w	sl, sl, #1
 800a804:	2331      	movs	r3, #49	; 0x31
 800a806:	e779      	b.n	800a6fc <_dtoa_r+0xa74>
 800a808:	4b13      	ldr	r3, [pc, #76]	; (800a858 <_dtoa_r+0xbd0>)
 800a80a:	f7ff baaf 	b.w	8009d6c <_dtoa_r+0xe4>
 800a80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a810:	2b00      	cmp	r3, #0
 800a812:	f47f aa86 	bne.w	8009d22 <_dtoa_r+0x9a>
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <_dtoa_r+0xbd4>)
 800a818:	f7ff baa8 	b.w	8009d6c <_dtoa_r+0xe4>
 800a81c:	f1b9 0f00 	cmp.w	r9, #0
 800a820:	dc03      	bgt.n	800a82a <_dtoa_r+0xba2>
 800a822:	9b05      	ldr	r3, [sp, #20]
 800a824:	2b02      	cmp	r3, #2
 800a826:	f73f aec9 	bgt.w	800a5bc <_dtoa_r+0x934>
 800a82a:	9d00      	ldr	r5, [sp, #0]
 800a82c:	4631      	mov	r1, r6
 800a82e:	4658      	mov	r0, fp
 800a830:	f7ff f99e 	bl	8009b70 <quorem>
 800a834:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a838:	f805 3b01 	strb.w	r3, [r5], #1
 800a83c:	9a00      	ldr	r2, [sp, #0]
 800a83e:	1aaa      	subs	r2, r5, r2
 800a840:	4591      	cmp	r9, r2
 800a842:	ddba      	ble.n	800a7ba <_dtoa_r+0xb32>
 800a844:	4659      	mov	r1, fp
 800a846:	2300      	movs	r3, #0
 800a848:	220a      	movs	r2, #10
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fc18 	bl	800b080 <__multadd>
 800a850:	4683      	mov	fp, r0
 800a852:	e7eb      	b.n	800a82c <_dtoa_r+0xba4>
 800a854:	0800d2d4 	.word	0x0800d2d4
 800a858:	0800d4d9 	.word	0x0800d4d9
 800a85c:	0800d251 	.word	0x0800d251

0800a860 <rshift>:
 800a860:	6903      	ldr	r3, [r0, #16]
 800a862:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a86a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a86e:	f100 0414 	add.w	r4, r0, #20
 800a872:	dd45      	ble.n	800a900 <rshift+0xa0>
 800a874:	f011 011f 	ands.w	r1, r1, #31
 800a878:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a87c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a880:	d10c      	bne.n	800a89c <rshift+0x3c>
 800a882:	f100 0710 	add.w	r7, r0, #16
 800a886:	4629      	mov	r1, r5
 800a888:	42b1      	cmp	r1, r6
 800a88a:	d334      	bcc.n	800a8f6 <rshift+0x96>
 800a88c:	1a9b      	subs	r3, r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	1eea      	subs	r2, r5, #3
 800a892:	4296      	cmp	r6, r2
 800a894:	bf38      	it	cc
 800a896:	2300      	movcc	r3, #0
 800a898:	4423      	add	r3, r4
 800a89a:	e015      	b.n	800a8c8 <rshift+0x68>
 800a89c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8a0:	f1c1 0820 	rsb	r8, r1, #32
 800a8a4:	40cf      	lsrs	r7, r1
 800a8a6:	f105 0e04 	add.w	lr, r5, #4
 800a8aa:	46a1      	mov	r9, r4
 800a8ac:	4576      	cmp	r6, lr
 800a8ae:	46f4      	mov	ip, lr
 800a8b0:	d815      	bhi.n	800a8de <rshift+0x7e>
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	009a      	lsls	r2, r3, #2
 800a8b6:	3a04      	subs	r2, #4
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	42ae      	cmp	r6, r5
 800a8bc:	bf38      	it	cc
 800a8be:	2200      	movcc	r2, #0
 800a8c0:	18a3      	adds	r3, r4, r2
 800a8c2:	50a7      	str	r7, [r4, r2]
 800a8c4:	b107      	cbz	r7, 800a8c8 <rshift+0x68>
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	1b1a      	subs	r2, r3, r4
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8d0:	bf08      	it	eq
 800a8d2:	2300      	moveq	r3, #0
 800a8d4:	6102      	str	r2, [r0, #16]
 800a8d6:	bf08      	it	eq
 800a8d8:	6143      	streq	r3, [r0, #20]
 800a8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8de:	f8dc c000 	ldr.w	ip, [ip]
 800a8e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8e6:	ea4c 0707 	orr.w	r7, ip, r7
 800a8ea:	f849 7b04 	str.w	r7, [r9], #4
 800a8ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8f2:	40cf      	lsrs	r7, r1
 800a8f4:	e7da      	b.n	800a8ac <rshift+0x4c>
 800a8f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8fe:	e7c3      	b.n	800a888 <rshift+0x28>
 800a900:	4623      	mov	r3, r4
 800a902:	e7e1      	b.n	800a8c8 <rshift+0x68>

0800a904 <__hexdig_fun>:
 800a904:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a908:	2b09      	cmp	r3, #9
 800a90a:	d802      	bhi.n	800a912 <__hexdig_fun+0xe>
 800a90c:	3820      	subs	r0, #32
 800a90e:	b2c0      	uxtb	r0, r0
 800a910:	4770      	bx	lr
 800a912:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a916:	2b05      	cmp	r3, #5
 800a918:	d801      	bhi.n	800a91e <__hexdig_fun+0x1a>
 800a91a:	3847      	subs	r0, #71	; 0x47
 800a91c:	e7f7      	b.n	800a90e <__hexdig_fun+0xa>
 800a91e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a922:	2b05      	cmp	r3, #5
 800a924:	d801      	bhi.n	800a92a <__hexdig_fun+0x26>
 800a926:	3827      	subs	r0, #39	; 0x27
 800a928:	e7f1      	b.n	800a90e <__hexdig_fun+0xa>
 800a92a:	2000      	movs	r0, #0
 800a92c:	4770      	bx	lr
	...

0800a930 <__gethex>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	ed2d 8b02 	vpush	{d8}
 800a938:	b089      	sub	sp, #36	; 0x24
 800a93a:	ee08 0a10 	vmov	s16, r0
 800a93e:	9304      	str	r3, [sp, #16]
 800a940:	4bbc      	ldr	r3, [pc, #752]	; (800ac34 <__gethex+0x304>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	4618      	mov	r0, r3
 800a948:	468b      	mov	fp, r1
 800a94a:	4690      	mov	r8, r2
 800a94c:	f7f5 fc60 	bl	8000210 <strlen>
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	f8db 2000 	ldr.w	r2, [fp]
 800a956:	4403      	add	r3, r0
 800a958:	4682      	mov	sl, r0
 800a95a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a95e:	9305      	str	r3, [sp, #20]
 800a960:	1c93      	adds	r3, r2, #2
 800a962:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a966:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a96a:	32fe      	adds	r2, #254	; 0xfe
 800a96c:	18d1      	adds	r1, r2, r3
 800a96e:	461f      	mov	r7, r3
 800a970:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a974:	9100      	str	r1, [sp, #0]
 800a976:	2830      	cmp	r0, #48	; 0x30
 800a978:	d0f8      	beq.n	800a96c <__gethex+0x3c>
 800a97a:	f7ff ffc3 	bl	800a904 <__hexdig_fun>
 800a97e:	4604      	mov	r4, r0
 800a980:	2800      	cmp	r0, #0
 800a982:	d13a      	bne.n	800a9fa <__gethex+0xca>
 800a984:	9901      	ldr	r1, [sp, #4]
 800a986:	4652      	mov	r2, sl
 800a988:	4638      	mov	r0, r7
 800a98a:	f001 fd6b 	bl	800c464 <strncmp>
 800a98e:	4605      	mov	r5, r0
 800a990:	2800      	cmp	r0, #0
 800a992:	d168      	bne.n	800aa66 <__gethex+0x136>
 800a994:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a998:	eb07 060a 	add.w	r6, r7, sl
 800a99c:	f7ff ffb2 	bl	800a904 <__hexdig_fun>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d062      	beq.n	800aa6a <__gethex+0x13a>
 800a9a4:	4633      	mov	r3, r6
 800a9a6:	7818      	ldrb	r0, [r3, #0]
 800a9a8:	2830      	cmp	r0, #48	; 0x30
 800a9aa:	461f      	mov	r7, r3
 800a9ac:	f103 0301 	add.w	r3, r3, #1
 800a9b0:	d0f9      	beq.n	800a9a6 <__gethex+0x76>
 800a9b2:	f7ff ffa7 	bl	800a904 <__hexdig_fun>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	fab0 f480 	clz	r4, r0
 800a9bc:	0964      	lsrs	r4, r4, #5
 800a9be:	4635      	mov	r5, r6
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	463a      	mov	r2, r7
 800a9c4:	4616      	mov	r6, r2
 800a9c6:	3201      	adds	r2, #1
 800a9c8:	7830      	ldrb	r0, [r6, #0]
 800a9ca:	f7ff ff9b 	bl	800a904 <__hexdig_fun>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d1f8      	bne.n	800a9c4 <__gethex+0x94>
 800a9d2:	9901      	ldr	r1, [sp, #4]
 800a9d4:	4652      	mov	r2, sl
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f001 fd44 	bl	800c464 <strncmp>
 800a9dc:	b980      	cbnz	r0, 800aa00 <__gethex+0xd0>
 800a9de:	b94d      	cbnz	r5, 800a9f4 <__gethex+0xc4>
 800a9e0:	eb06 050a 	add.w	r5, r6, sl
 800a9e4:	462a      	mov	r2, r5
 800a9e6:	4616      	mov	r6, r2
 800a9e8:	3201      	adds	r2, #1
 800a9ea:	7830      	ldrb	r0, [r6, #0]
 800a9ec:	f7ff ff8a 	bl	800a904 <__hexdig_fun>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d1f8      	bne.n	800a9e6 <__gethex+0xb6>
 800a9f4:	1bad      	subs	r5, r5, r6
 800a9f6:	00ad      	lsls	r5, r5, #2
 800a9f8:	e004      	b.n	800aa04 <__gethex+0xd4>
 800a9fa:	2400      	movs	r4, #0
 800a9fc:	4625      	mov	r5, r4
 800a9fe:	e7e0      	b.n	800a9c2 <__gethex+0x92>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d1f7      	bne.n	800a9f4 <__gethex+0xc4>
 800aa04:	7833      	ldrb	r3, [r6, #0]
 800aa06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa0a:	2b50      	cmp	r3, #80	; 0x50
 800aa0c:	d13b      	bne.n	800aa86 <__gethex+0x156>
 800aa0e:	7873      	ldrb	r3, [r6, #1]
 800aa10:	2b2b      	cmp	r3, #43	; 0x2b
 800aa12:	d02c      	beq.n	800aa6e <__gethex+0x13e>
 800aa14:	2b2d      	cmp	r3, #45	; 0x2d
 800aa16:	d02e      	beq.n	800aa76 <__gethex+0x146>
 800aa18:	1c71      	adds	r1, r6, #1
 800aa1a:	f04f 0900 	mov.w	r9, #0
 800aa1e:	7808      	ldrb	r0, [r1, #0]
 800aa20:	f7ff ff70 	bl	800a904 <__hexdig_fun>
 800aa24:	1e43      	subs	r3, r0, #1
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b18      	cmp	r3, #24
 800aa2a:	d82c      	bhi.n	800aa86 <__gethex+0x156>
 800aa2c:	f1a0 0210 	sub.w	r2, r0, #16
 800aa30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa34:	f7ff ff66 	bl	800a904 <__hexdig_fun>
 800aa38:	1e43      	subs	r3, r0, #1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2b18      	cmp	r3, #24
 800aa3e:	d91d      	bls.n	800aa7c <__gethex+0x14c>
 800aa40:	f1b9 0f00 	cmp.w	r9, #0
 800aa44:	d000      	beq.n	800aa48 <__gethex+0x118>
 800aa46:	4252      	negs	r2, r2
 800aa48:	4415      	add	r5, r2
 800aa4a:	f8cb 1000 	str.w	r1, [fp]
 800aa4e:	b1e4      	cbz	r4, 800aa8a <__gethex+0x15a>
 800aa50:	9b00      	ldr	r3, [sp, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	bf14      	ite	ne
 800aa56:	2700      	movne	r7, #0
 800aa58:	2706      	moveq	r7, #6
 800aa5a:	4638      	mov	r0, r7
 800aa5c:	b009      	add	sp, #36	; 0x24
 800aa5e:	ecbd 8b02 	vpop	{d8}
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	463e      	mov	r6, r7
 800aa68:	4625      	mov	r5, r4
 800aa6a:	2401      	movs	r4, #1
 800aa6c:	e7ca      	b.n	800aa04 <__gethex+0xd4>
 800aa6e:	f04f 0900 	mov.w	r9, #0
 800aa72:	1cb1      	adds	r1, r6, #2
 800aa74:	e7d3      	b.n	800aa1e <__gethex+0xee>
 800aa76:	f04f 0901 	mov.w	r9, #1
 800aa7a:	e7fa      	b.n	800aa72 <__gethex+0x142>
 800aa7c:	230a      	movs	r3, #10
 800aa7e:	fb03 0202 	mla	r2, r3, r2, r0
 800aa82:	3a10      	subs	r2, #16
 800aa84:	e7d4      	b.n	800aa30 <__gethex+0x100>
 800aa86:	4631      	mov	r1, r6
 800aa88:	e7df      	b.n	800aa4a <__gethex+0x11a>
 800aa8a:	1bf3      	subs	r3, r6, r7
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	4621      	mov	r1, r4
 800aa90:	2b07      	cmp	r3, #7
 800aa92:	dc0b      	bgt.n	800aaac <__gethex+0x17c>
 800aa94:	ee18 0a10 	vmov	r0, s16
 800aa98:	f000 fa90 	bl	800afbc <_Balloc>
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	b940      	cbnz	r0, 800aab2 <__gethex+0x182>
 800aaa0:	4b65      	ldr	r3, [pc, #404]	; (800ac38 <__gethex+0x308>)
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	21de      	movs	r1, #222	; 0xde
 800aaa6:	4865      	ldr	r0, [pc, #404]	; (800ac3c <__gethex+0x30c>)
 800aaa8:	f001 fdb4 	bl	800c614 <__assert_func>
 800aaac:	3101      	adds	r1, #1
 800aaae:	105b      	asrs	r3, r3, #1
 800aab0:	e7ee      	b.n	800aa90 <__gethex+0x160>
 800aab2:	f100 0914 	add.w	r9, r0, #20
 800aab6:	f04f 0b00 	mov.w	fp, #0
 800aaba:	f1ca 0301 	rsb	r3, sl, #1
 800aabe:	f8cd 9008 	str.w	r9, [sp, #8]
 800aac2:	f8cd b000 	str.w	fp, [sp]
 800aac6:	9306      	str	r3, [sp, #24]
 800aac8:	42b7      	cmp	r7, r6
 800aaca:	d340      	bcc.n	800ab4e <__gethex+0x21e>
 800aacc:	9802      	ldr	r0, [sp, #8]
 800aace:	9b00      	ldr	r3, [sp, #0]
 800aad0:	f840 3b04 	str.w	r3, [r0], #4
 800aad4:	eba0 0009 	sub.w	r0, r0, r9
 800aad8:	1080      	asrs	r0, r0, #2
 800aada:	0146      	lsls	r6, r0, #5
 800aadc:	6120      	str	r0, [r4, #16]
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 fb62 	bl	800b1a8 <__hi0bits>
 800aae4:	1a30      	subs	r0, r6, r0
 800aae6:	f8d8 6000 	ldr.w	r6, [r8]
 800aaea:	42b0      	cmp	r0, r6
 800aaec:	dd63      	ble.n	800abb6 <__gethex+0x286>
 800aaee:	1b87      	subs	r7, r0, r6
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 fefc 	bl	800b8f0 <__any_on>
 800aaf8:	4682      	mov	sl, r0
 800aafa:	b1a8      	cbz	r0, 800ab28 <__gethex+0x1f8>
 800aafc:	1e7b      	subs	r3, r7, #1
 800aafe:	1159      	asrs	r1, r3, #5
 800ab00:	f003 021f 	and.w	r2, r3, #31
 800ab04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ab08:	f04f 0a01 	mov.w	sl, #1
 800ab0c:	fa0a f202 	lsl.w	r2, sl, r2
 800ab10:	420a      	tst	r2, r1
 800ab12:	d009      	beq.n	800ab28 <__gethex+0x1f8>
 800ab14:	4553      	cmp	r3, sl
 800ab16:	dd05      	ble.n	800ab24 <__gethex+0x1f4>
 800ab18:	1eb9      	subs	r1, r7, #2
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fee8 	bl	800b8f0 <__any_on>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d145      	bne.n	800abb0 <__gethex+0x280>
 800ab24:	f04f 0a02 	mov.w	sl, #2
 800ab28:	4639      	mov	r1, r7
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f7ff fe98 	bl	800a860 <rshift>
 800ab30:	443d      	add	r5, r7
 800ab32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab36:	42ab      	cmp	r3, r5
 800ab38:	da4c      	bge.n	800abd4 <__gethex+0x2a4>
 800ab3a:	ee18 0a10 	vmov	r0, s16
 800ab3e:	4621      	mov	r1, r4
 800ab40:	f000 fa7c 	bl	800b03c <_Bfree>
 800ab44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab46:	2300      	movs	r3, #0
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	27a3      	movs	r7, #163	; 0xa3
 800ab4c:	e785      	b.n	800aa5a <__gethex+0x12a>
 800ab4e:	1e73      	subs	r3, r6, #1
 800ab50:	9a05      	ldr	r2, [sp, #20]
 800ab52:	9303      	str	r3, [sp, #12]
 800ab54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d019      	beq.n	800ab90 <__gethex+0x260>
 800ab5c:	f1bb 0f20 	cmp.w	fp, #32
 800ab60:	d107      	bne.n	800ab72 <__gethex+0x242>
 800ab62:	9b02      	ldr	r3, [sp, #8]
 800ab64:	9a00      	ldr	r2, [sp, #0]
 800ab66:	f843 2b04 	str.w	r2, [r3], #4
 800ab6a:	9302      	str	r3, [sp, #8]
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	469b      	mov	fp, r3
 800ab72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab76:	f7ff fec5 	bl	800a904 <__hexdig_fun>
 800ab7a:	9b00      	ldr	r3, [sp, #0]
 800ab7c:	f000 000f 	and.w	r0, r0, #15
 800ab80:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab84:	4303      	orrs	r3, r0
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	f10b 0b04 	add.w	fp, fp, #4
 800ab8c:	9b03      	ldr	r3, [sp, #12]
 800ab8e:	e00d      	b.n	800abac <__gethex+0x27c>
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	9a06      	ldr	r2, [sp, #24]
 800ab94:	4413      	add	r3, r2
 800ab96:	42bb      	cmp	r3, r7
 800ab98:	d3e0      	bcc.n	800ab5c <__gethex+0x22c>
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	9901      	ldr	r1, [sp, #4]
 800ab9e:	9307      	str	r3, [sp, #28]
 800aba0:	4652      	mov	r2, sl
 800aba2:	f001 fc5f 	bl	800c464 <strncmp>
 800aba6:	9b07      	ldr	r3, [sp, #28]
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d1d7      	bne.n	800ab5c <__gethex+0x22c>
 800abac:	461e      	mov	r6, r3
 800abae:	e78b      	b.n	800aac8 <__gethex+0x198>
 800abb0:	f04f 0a03 	mov.w	sl, #3
 800abb4:	e7b8      	b.n	800ab28 <__gethex+0x1f8>
 800abb6:	da0a      	bge.n	800abce <__gethex+0x29e>
 800abb8:	1a37      	subs	r7, r6, r0
 800abba:	4621      	mov	r1, r4
 800abbc:	ee18 0a10 	vmov	r0, s16
 800abc0:	463a      	mov	r2, r7
 800abc2:	f000 fc57 	bl	800b474 <__lshift>
 800abc6:	1bed      	subs	r5, r5, r7
 800abc8:	4604      	mov	r4, r0
 800abca:	f100 0914 	add.w	r9, r0, #20
 800abce:	f04f 0a00 	mov.w	sl, #0
 800abd2:	e7ae      	b.n	800ab32 <__gethex+0x202>
 800abd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abd8:	42a8      	cmp	r0, r5
 800abda:	dd72      	ble.n	800acc2 <__gethex+0x392>
 800abdc:	1b45      	subs	r5, r0, r5
 800abde:	42ae      	cmp	r6, r5
 800abe0:	dc36      	bgt.n	800ac50 <__gethex+0x320>
 800abe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d02a      	beq.n	800ac40 <__gethex+0x310>
 800abea:	2b03      	cmp	r3, #3
 800abec:	d02c      	beq.n	800ac48 <__gethex+0x318>
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d115      	bne.n	800ac1e <__gethex+0x2ee>
 800abf2:	42ae      	cmp	r6, r5
 800abf4:	d113      	bne.n	800ac1e <__gethex+0x2ee>
 800abf6:	2e01      	cmp	r6, #1
 800abf8:	d10b      	bne.n	800ac12 <__gethex+0x2e2>
 800abfa:	9a04      	ldr	r2, [sp, #16]
 800abfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	2301      	movs	r3, #1
 800ac04:	6123      	str	r3, [r4, #16]
 800ac06:	f8c9 3000 	str.w	r3, [r9]
 800ac0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac0c:	2762      	movs	r7, #98	; 0x62
 800ac0e:	601c      	str	r4, [r3, #0]
 800ac10:	e723      	b.n	800aa5a <__gethex+0x12a>
 800ac12:	1e71      	subs	r1, r6, #1
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 fe6b 	bl	800b8f0 <__any_on>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d1ed      	bne.n	800abfa <__gethex+0x2ca>
 800ac1e:	ee18 0a10 	vmov	r0, s16
 800ac22:	4621      	mov	r1, r4
 800ac24:	f000 fa0a 	bl	800b03c <_Bfree>
 800ac28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	6013      	str	r3, [r2, #0]
 800ac2e:	2750      	movs	r7, #80	; 0x50
 800ac30:	e713      	b.n	800aa5a <__gethex+0x12a>
 800ac32:	bf00      	nop
 800ac34:	0800d350 	.word	0x0800d350
 800ac38:	0800d2d4 	.word	0x0800d2d4
 800ac3c:	0800d2e5 	.word	0x0800d2e5
 800ac40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1eb      	bne.n	800ac1e <__gethex+0x2ee>
 800ac46:	e7d8      	b.n	800abfa <__gethex+0x2ca>
 800ac48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1d5      	bne.n	800abfa <__gethex+0x2ca>
 800ac4e:	e7e6      	b.n	800ac1e <__gethex+0x2ee>
 800ac50:	1e6f      	subs	r7, r5, #1
 800ac52:	f1ba 0f00 	cmp.w	sl, #0
 800ac56:	d131      	bne.n	800acbc <__gethex+0x38c>
 800ac58:	b127      	cbz	r7, 800ac64 <__gethex+0x334>
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f000 fe47 	bl	800b8f0 <__any_on>
 800ac62:	4682      	mov	sl, r0
 800ac64:	117b      	asrs	r3, r7, #5
 800ac66:	2101      	movs	r1, #1
 800ac68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ac6c:	f007 071f 	and.w	r7, r7, #31
 800ac70:	fa01 f707 	lsl.w	r7, r1, r7
 800ac74:	421f      	tst	r7, r3
 800ac76:	4629      	mov	r1, r5
 800ac78:	4620      	mov	r0, r4
 800ac7a:	bf18      	it	ne
 800ac7c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac80:	1b76      	subs	r6, r6, r5
 800ac82:	f7ff fded 	bl	800a860 <rshift>
 800ac86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac8a:	2702      	movs	r7, #2
 800ac8c:	f1ba 0f00 	cmp.w	sl, #0
 800ac90:	d048      	beq.n	800ad24 <__gethex+0x3f4>
 800ac92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d015      	beq.n	800acc6 <__gethex+0x396>
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d017      	beq.n	800acce <__gethex+0x39e>
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d109      	bne.n	800acb6 <__gethex+0x386>
 800aca2:	f01a 0f02 	tst.w	sl, #2
 800aca6:	d006      	beq.n	800acb6 <__gethex+0x386>
 800aca8:	f8d9 0000 	ldr.w	r0, [r9]
 800acac:	ea4a 0a00 	orr.w	sl, sl, r0
 800acb0:	f01a 0f01 	tst.w	sl, #1
 800acb4:	d10e      	bne.n	800acd4 <__gethex+0x3a4>
 800acb6:	f047 0710 	orr.w	r7, r7, #16
 800acba:	e033      	b.n	800ad24 <__gethex+0x3f4>
 800acbc:	f04f 0a01 	mov.w	sl, #1
 800acc0:	e7d0      	b.n	800ac64 <__gethex+0x334>
 800acc2:	2701      	movs	r7, #1
 800acc4:	e7e2      	b.n	800ac8c <__gethex+0x35c>
 800acc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acc8:	f1c3 0301 	rsb	r3, r3, #1
 800accc:	9315      	str	r3, [sp, #84]	; 0x54
 800acce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0f0      	beq.n	800acb6 <__gethex+0x386>
 800acd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800acd8:	f104 0314 	add.w	r3, r4, #20
 800acdc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ace0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ace4:	f04f 0c00 	mov.w	ip, #0
 800ace8:	4618      	mov	r0, r3
 800acea:	f853 2b04 	ldr.w	r2, [r3], #4
 800acee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acf2:	d01c      	beq.n	800ad2e <__gethex+0x3fe>
 800acf4:	3201      	adds	r2, #1
 800acf6:	6002      	str	r2, [r0, #0]
 800acf8:	2f02      	cmp	r7, #2
 800acfa:	f104 0314 	add.w	r3, r4, #20
 800acfe:	d13f      	bne.n	800ad80 <__gethex+0x450>
 800ad00:	f8d8 2000 	ldr.w	r2, [r8]
 800ad04:	3a01      	subs	r2, #1
 800ad06:	42b2      	cmp	r2, r6
 800ad08:	d10a      	bne.n	800ad20 <__gethex+0x3f0>
 800ad0a:	1171      	asrs	r1, r6, #5
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad12:	f006 061f 	and.w	r6, r6, #31
 800ad16:	fa02 f606 	lsl.w	r6, r2, r6
 800ad1a:	421e      	tst	r6, r3
 800ad1c:	bf18      	it	ne
 800ad1e:	4617      	movne	r7, r2
 800ad20:	f047 0720 	orr.w	r7, r7, #32
 800ad24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad26:	601c      	str	r4, [r3, #0]
 800ad28:	9b04      	ldr	r3, [sp, #16]
 800ad2a:	601d      	str	r5, [r3, #0]
 800ad2c:	e695      	b.n	800aa5a <__gethex+0x12a>
 800ad2e:	4299      	cmp	r1, r3
 800ad30:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad34:	d8d8      	bhi.n	800ace8 <__gethex+0x3b8>
 800ad36:	68a3      	ldr	r3, [r4, #8]
 800ad38:	459b      	cmp	fp, r3
 800ad3a:	db19      	blt.n	800ad70 <__gethex+0x440>
 800ad3c:	6861      	ldr	r1, [r4, #4]
 800ad3e:	ee18 0a10 	vmov	r0, s16
 800ad42:	3101      	adds	r1, #1
 800ad44:	f000 f93a 	bl	800afbc <_Balloc>
 800ad48:	4681      	mov	r9, r0
 800ad4a:	b918      	cbnz	r0, 800ad54 <__gethex+0x424>
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	; (800adb8 <__gethex+0x488>)
 800ad4e:	4602      	mov	r2, r0
 800ad50:	2184      	movs	r1, #132	; 0x84
 800ad52:	e6a8      	b.n	800aaa6 <__gethex+0x176>
 800ad54:	6922      	ldr	r2, [r4, #16]
 800ad56:	3202      	adds	r2, #2
 800ad58:	f104 010c 	add.w	r1, r4, #12
 800ad5c:	0092      	lsls	r2, r2, #2
 800ad5e:	300c      	adds	r0, #12
 800ad60:	f000 f91e 	bl	800afa0 <memcpy>
 800ad64:	4621      	mov	r1, r4
 800ad66:	ee18 0a10 	vmov	r0, s16
 800ad6a:	f000 f967 	bl	800b03c <_Bfree>
 800ad6e:	464c      	mov	r4, r9
 800ad70:	6923      	ldr	r3, [r4, #16]
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad78:	6122      	str	r2, [r4, #16]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	615a      	str	r2, [r3, #20]
 800ad7e:	e7bb      	b.n	800acf8 <__gethex+0x3c8>
 800ad80:	6922      	ldr	r2, [r4, #16]
 800ad82:	455a      	cmp	r2, fp
 800ad84:	dd0b      	ble.n	800ad9e <__gethex+0x46e>
 800ad86:	2101      	movs	r1, #1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff fd69 	bl	800a860 <rshift>
 800ad8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad92:	3501      	adds	r5, #1
 800ad94:	42ab      	cmp	r3, r5
 800ad96:	f6ff aed0 	blt.w	800ab3a <__gethex+0x20a>
 800ad9a:	2701      	movs	r7, #1
 800ad9c:	e7c0      	b.n	800ad20 <__gethex+0x3f0>
 800ad9e:	f016 061f 	ands.w	r6, r6, #31
 800ada2:	d0fa      	beq.n	800ad9a <__gethex+0x46a>
 800ada4:	449a      	add	sl, r3
 800ada6:	f1c6 0620 	rsb	r6, r6, #32
 800adaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800adae:	f000 f9fb 	bl	800b1a8 <__hi0bits>
 800adb2:	42b0      	cmp	r0, r6
 800adb4:	dbe7      	blt.n	800ad86 <__gethex+0x456>
 800adb6:	e7f0      	b.n	800ad9a <__gethex+0x46a>
 800adb8:	0800d2d4 	.word	0x0800d2d4

0800adbc <L_shift>:
 800adbc:	f1c2 0208 	rsb	r2, r2, #8
 800adc0:	0092      	lsls	r2, r2, #2
 800adc2:	b570      	push	{r4, r5, r6, lr}
 800adc4:	f1c2 0620 	rsb	r6, r2, #32
 800adc8:	6843      	ldr	r3, [r0, #4]
 800adca:	6804      	ldr	r4, [r0, #0]
 800adcc:	fa03 f506 	lsl.w	r5, r3, r6
 800add0:	432c      	orrs	r4, r5
 800add2:	40d3      	lsrs	r3, r2
 800add4:	6004      	str	r4, [r0, #0]
 800add6:	f840 3f04 	str.w	r3, [r0, #4]!
 800adda:	4288      	cmp	r0, r1
 800addc:	d3f4      	bcc.n	800adc8 <L_shift+0xc>
 800adde:	bd70      	pop	{r4, r5, r6, pc}

0800ade0 <__match>:
 800ade0:	b530      	push	{r4, r5, lr}
 800ade2:	6803      	ldr	r3, [r0, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adea:	b914      	cbnz	r4, 800adf2 <__match+0x12>
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	2001      	movs	r0, #1
 800adf0:	bd30      	pop	{r4, r5, pc}
 800adf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adf6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adfa:	2d19      	cmp	r5, #25
 800adfc:	bf98      	it	ls
 800adfe:	3220      	addls	r2, #32
 800ae00:	42a2      	cmp	r2, r4
 800ae02:	d0f0      	beq.n	800ade6 <__match+0x6>
 800ae04:	2000      	movs	r0, #0
 800ae06:	e7f3      	b.n	800adf0 <__match+0x10>

0800ae08 <__hexnan>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	680b      	ldr	r3, [r1, #0]
 800ae0e:	6801      	ldr	r1, [r0, #0]
 800ae10:	115e      	asrs	r6, r3, #5
 800ae12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae16:	f013 031f 	ands.w	r3, r3, #31
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	bf18      	it	ne
 800ae1e:	3604      	addne	r6, #4
 800ae20:	2500      	movs	r5, #0
 800ae22:	1f37      	subs	r7, r6, #4
 800ae24:	4682      	mov	sl, r0
 800ae26:	4690      	mov	r8, r2
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae2e:	46b9      	mov	r9, r7
 800ae30:	463c      	mov	r4, r7
 800ae32:	9502      	str	r5, [sp, #8]
 800ae34:	46ab      	mov	fp, r5
 800ae36:	784a      	ldrb	r2, [r1, #1]
 800ae38:	1c4b      	adds	r3, r1, #1
 800ae3a:	9303      	str	r3, [sp, #12]
 800ae3c:	b342      	cbz	r2, 800ae90 <__hexnan+0x88>
 800ae3e:	4610      	mov	r0, r2
 800ae40:	9105      	str	r1, [sp, #20]
 800ae42:	9204      	str	r2, [sp, #16]
 800ae44:	f7ff fd5e 	bl	800a904 <__hexdig_fun>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d14f      	bne.n	800aeec <__hexnan+0xe4>
 800ae4c:	9a04      	ldr	r2, [sp, #16]
 800ae4e:	9905      	ldr	r1, [sp, #20]
 800ae50:	2a20      	cmp	r2, #32
 800ae52:	d818      	bhi.n	800ae86 <__hexnan+0x7e>
 800ae54:	9b02      	ldr	r3, [sp, #8]
 800ae56:	459b      	cmp	fp, r3
 800ae58:	dd13      	ble.n	800ae82 <__hexnan+0x7a>
 800ae5a:	454c      	cmp	r4, r9
 800ae5c:	d206      	bcs.n	800ae6c <__hexnan+0x64>
 800ae5e:	2d07      	cmp	r5, #7
 800ae60:	dc04      	bgt.n	800ae6c <__hexnan+0x64>
 800ae62:	462a      	mov	r2, r5
 800ae64:	4649      	mov	r1, r9
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7ff ffa8 	bl	800adbc <L_shift>
 800ae6c:	4544      	cmp	r4, r8
 800ae6e:	d950      	bls.n	800af12 <__hexnan+0x10a>
 800ae70:	2300      	movs	r3, #0
 800ae72:	f1a4 0904 	sub.w	r9, r4, #4
 800ae76:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae7a:	f8cd b008 	str.w	fp, [sp, #8]
 800ae7e:	464c      	mov	r4, r9
 800ae80:	461d      	mov	r5, r3
 800ae82:	9903      	ldr	r1, [sp, #12]
 800ae84:	e7d7      	b.n	800ae36 <__hexnan+0x2e>
 800ae86:	2a29      	cmp	r2, #41	; 0x29
 800ae88:	d156      	bne.n	800af38 <__hexnan+0x130>
 800ae8a:	3102      	adds	r1, #2
 800ae8c:	f8ca 1000 	str.w	r1, [sl]
 800ae90:	f1bb 0f00 	cmp.w	fp, #0
 800ae94:	d050      	beq.n	800af38 <__hexnan+0x130>
 800ae96:	454c      	cmp	r4, r9
 800ae98:	d206      	bcs.n	800aea8 <__hexnan+0xa0>
 800ae9a:	2d07      	cmp	r5, #7
 800ae9c:	dc04      	bgt.n	800aea8 <__hexnan+0xa0>
 800ae9e:	462a      	mov	r2, r5
 800aea0:	4649      	mov	r1, r9
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7ff ff8a 	bl	800adbc <L_shift>
 800aea8:	4544      	cmp	r4, r8
 800aeaa:	d934      	bls.n	800af16 <__hexnan+0x10e>
 800aeac:	f1a8 0204 	sub.w	r2, r8, #4
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800aeb6:	f842 1f04 	str.w	r1, [r2, #4]!
 800aeba:	429f      	cmp	r7, r3
 800aebc:	d2f9      	bcs.n	800aeb2 <__hexnan+0xaa>
 800aebe:	1b3b      	subs	r3, r7, r4
 800aec0:	f023 0303 	bic.w	r3, r3, #3
 800aec4:	3304      	adds	r3, #4
 800aec6:	3401      	adds	r4, #1
 800aec8:	3e03      	subs	r6, #3
 800aeca:	42b4      	cmp	r4, r6
 800aecc:	bf88      	it	hi
 800aece:	2304      	movhi	r3, #4
 800aed0:	4443      	add	r3, r8
 800aed2:	2200      	movs	r2, #0
 800aed4:	f843 2b04 	str.w	r2, [r3], #4
 800aed8:	429f      	cmp	r7, r3
 800aeda:	d2fb      	bcs.n	800aed4 <__hexnan+0xcc>
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	b91b      	cbnz	r3, 800aee8 <__hexnan+0xe0>
 800aee0:	4547      	cmp	r7, r8
 800aee2:	d127      	bne.n	800af34 <__hexnan+0x12c>
 800aee4:	2301      	movs	r3, #1
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	2005      	movs	r0, #5
 800aeea:	e026      	b.n	800af3a <__hexnan+0x132>
 800aeec:	3501      	adds	r5, #1
 800aeee:	2d08      	cmp	r5, #8
 800aef0:	f10b 0b01 	add.w	fp, fp, #1
 800aef4:	dd06      	ble.n	800af04 <__hexnan+0xfc>
 800aef6:	4544      	cmp	r4, r8
 800aef8:	d9c3      	bls.n	800ae82 <__hexnan+0x7a>
 800aefa:	2300      	movs	r3, #0
 800aefc:	f844 3c04 	str.w	r3, [r4, #-4]
 800af00:	2501      	movs	r5, #1
 800af02:	3c04      	subs	r4, #4
 800af04:	6822      	ldr	r2, [r4, #0]
 800af06:	f000 000f 	and.w	r0, r0, #15
 800af0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800af0e:	6022      	str	r2, [r4, #0]
 800af10:	e7b7      	b.n	800ae82 <__hexnan+0x7a>
 800af12:	2508      	movs	r5, #8
 800af14:	e7b5      	b.n	800ae82 <__hexnan+0x7a>
 800af16:	9b01      	ldr	r3, [sp, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0df      	beq.n	800aedc <__hexnan+0xd4>
 800af1c:	f04f 32ff 	mov.w	r2, #4294967295
 800af20:	f1c3 0320 	rsb	r3, r3, #32
 800af24:	fa22 f303 	lsr.w	r3, r2, r3
 800af28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af2c:	401a      	ands	r2, r3
 800af2e:	f846 2c04 	str.w	r2, [r6, #-4]
 800af32:	e7d3      	b.n	800aedc <__hexnan+0xd4>
 800af34:	3f04      	subs	r7, #4
 800af36:	e7d1      	b.n	800aedc <__hexnan+0xd4>
 800af38:	2004      	movs	r0, #4
 800af3a:	b007      	add	sp, #28
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af40 <_localeconv_r>:
 800af40:	4800      	ldr	r0, [pc, #0]	; (800af44 <_localeconv_r+0x4>)
 800af42:	4770      	bx	lr
 800af44:	200001cc 	.word	0x200001cc

0800af48 <_lseek_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d07      	ldr	r5, [pc, #28]	; (800af68 <_lseek_r+0x20>)
 800af4c:	4604      	mov	r4, r0
 800af4e:	4608      	mov	r0, r1
 800af50:	4611      	mov	r1, r2
 800af52:	2200      	movs	r2, #0
 800af54:	602a      	str	r2, [r5, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	f7f7 f9ce 	bl	80022f8 <_lseek>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_lseek_r+0x1e>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_lseek_r+0x1e>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	200008bc 	.word	0x200008bc

0800af6c <malloc>:
 800af6c:	4b02      	ldr	r3, [pc, #8]	; (800af78 <malloc+0xc>)
 800af6e:	4601      	mov	r1, r0
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	f000 bd3d 	b.w	800b9f0 <_malloc_r>
 800af76:	bf00      	nop
 800af78:	20000074 	.word	0x20000074

0800af7c <__ascii_mbtowc>:
 800af7c:	b082      	sub	sp, #8
 800af7e:	b901      	cbnz	r1, 800af82 <__ascii_mbtowc+0x6>
 800af80:	a901      	add	r1, sp, #4
 800af82:	b142      	cbz	r2, 800af96 <__ascii_mbtowc+0x1a>
 800af84:	b14b      	cbz	r3, 800af9a <__ascii_mbtowc+0x1e>
 800af86:	7813      	ldrb	r3, [r2, #0]
 800af88:	600b      	str	r3, [r1, #0]
 800af8a:	7812      	ldrb	r2, [r2, #0]
 800af8c:	1e10      	subs	r0, r2, #0
 800af8e:	bf18      	it	ne
 800af90:	2001      	movne	r0, #1
 800af92:	b002      	add	sp, #8
 800af94:	4770      	bx	lr
 800af96:	4610      	mov	r0, r2
 800af98:	e7fb      	b.n	800af92 <__ascii_mbtowc+0x16>
 800af9a:	f06f 0001 	mvn.w	r0, #1
 800af9e:	e7f8      	b.n	800af92 <__ascii_mbtowc+0x16>

0800afa0 <memcpy>:
 800afa0:	440a      	add	r2, r1
 800afa2:	4291      	cmp	r1, r2
 800afa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800afa8:	d100      	bne.n	800afac <memcpy+0xc>
 800afaa:	4770      	bx	lr
 800afac:	b510      	push	{r4, lr}
 800afae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afb6:	4291      	cmp	r1, r2
 800afb8:	d1f9      	bne.n	800afae <memcpy+0xe>
 800afba:	bd10      	pop	{r4, pc}

0800afbc <_Balloc>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	b976      	cbnz	r6, 800afe4 <_Balloc+0x28>
 800afc6:	2010      	movs	r0, #16
 800afc8:	f7ff ffd0 	bl	800af6c <malloc>
 800afcc:	4602      	mov	r2, r0
 800afce:	6260      	str	r0, [r4, #36]	; 0x24
 800afd0:	b920      	cbnz	r0, 800afdc <_Balloc+0x20>
 800afd2:	4b18      	ldr	r3, [pc, #96]	; (800b034 <_Balloc+0x78>)
 800afd4:	4818      	ldr	r0, [pc, #96]	; (800b038 <_Balloc+0x7c>)
 800afd6:	2166      	movs	r1, #102	; 0x66
 800afd8:	f001 fb1c 	bl	800c614 <__assert_func>
 800afdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afe0:	6006      	str	r6, [r0, #0]
 800afe2:	60c6      	str	r6, [r0, #12]
 800afe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afe6:	68f3      	ldr	r3, [r6, #12]
 800afe8:	b183      	cbz	r3, 800b00c <_Balloc+0x50>
 800afea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aff2:	b9b8      	cbnz	r0, 800b024 <_Balloc+0x68>
 800aff4:	2101      	movs	r1, #1
 800aff6:	fa01 f605 	lsl.w	r6, r1, r5
 800affa:	1d72      	adds	r2, r6, #5
 800affc:	0092      	lsls	r2, r2, #2
 800affe:	4620      	mov	r0, r4
 800b000:	f000 fc97 	bl	800b932 <_calloc_r>
 800b004:	b160      	cbz	r0, 800b020 <_Balloc+0x64>
 800b006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b00a:	e00e      	b.n	800b02a <_Balloc+0x6e>
 800b00c:	2221      	movs	r2, #33	; 0x21
 800b00e:	2104      	movs	r1, #4
 800b010:	4620      	mov	r0, r4
 800b012:	f000 fc8e 	bl	800b932 <_calloc_r>
 800b016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b018:	60f0      	str	r0, [r6, #12]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1e4      	bne.n	800afea <_Balloc+0x2e>
 800b020:	2000      	movs	r0, #0
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	6802      	ldr	r2, [r0, #0]
 800b026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b02a:	2300      	movs	r3, #0
 800b02c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b030:	e7f7      	b.n	800b022 <_Balloc+0x66>
 800b032:	bf00      	nop
 800b034:	0800d25e 	.word	0x0800d25e
 800b038:	0800d364 	.word	0x0800d364

0800b03c <_Bfree>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b040:	4605      	mov	r5, r0
 800b042:	460c      	mov	r4, r1
 800b044:	b976      	cbnz	r6, 800b064 <_Bfree+0x28>
 800b046:	2010      	movs	r0, #16
 800b048:	f7ff ff90 	bl	800af6c <malloc>
 800b04c:	4602      	mov	r2, r0
 800b04e:	6268      	str	r0, [r5, #36]	; 0x24
 800b050:	b920      	cbnz	r0, 800b05c <_Bfree+0x20>
 800b052:	4b09      	ldr	r3, [pc, #36]	; (800b078 <_Bfree+0x3c>)
 800b054:	4809      	ldr	r0, [pc, #36]	; (800b07c <_Bfree+0x40>)
 800b056:	218a      	movs	r1, #138	; 0x8a
 800b058:	f001 fadc 	bl	800c614 <__assert_func>
 800b05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b060:	6006      	str	r6, [r0, #0]
 800b062:	60c6      	str	r6, [r0, #12]
 800b064:	b13c      	cbz	r4, 800b076 <_Bfree+0x3a>
 800b066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b068:	6862      	ldr	r2, [r4, #4]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b070:	6021      	str	r1, [r4, #0]
 800b072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b076:	bd70      	pop	{r4, r5, r6, pc}
 800b078:	0800d25e 	.word	0x0800d25e
 800b07c:	0800d364 	.word	0x0800d364

0800b080 <__multadd>:
 800b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b084:	690e      	ldr	r6, [r1, #16]
 800b086:	4607      	mov	r7, r0
 800b088:	4698      	mov	r8, r3
 800b08a:	460c      	mov	r4, r1
 800b08c:	f101 0014 	add.w	r0, r1, #20
 800b090:	2300      	movs	r3, #0
 800b092:	6805      	ldr	r5, [r0, #0]
 800b094:	b2a9      	uxth	r1, r5
 800b096:	fb02 8101 	mla	r1, r2, r1, r8
 800b09a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b09e:	0c2d      	lsrs	r5, r5, #16
 800b0a0:	fb02 c505 	mla	r5, r2, r5, ip
 800b0a4:	b289      	uxth	r1, r1
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b0ac:	429e      	cmp	r6, r3
 800b0ae:	f840 1b04 	str.w	r1, [r0], #4
 800b0b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b0b6:	dcec      	bgt.n	800b092 <__multadd+0x12>
 800b0b8:	f1b8 0f00 	cmp.w	r8, #0
 800b0bc:	d022      	beq.n	800b104 <__multadd+0x84>
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	42b3      	cmp	r3, r6
 800b0c2:	dc19      	bgt.n	800b0f8 <__multadd+0x78>
 800b0c4:	6861      	ldr	r1, [r4, #4]
 800b0c6:	4638      	mov	r0, r7
 800b0c8:	3101      	adds	r1, #1
 800b0ca:	f7ff ff77 	bl	800afbc <_Balloc>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	b928      	cbnz	r0, 800b0de <__multadd+0x5e>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <__multadd+0x8c>)
 800b0d6:	480e      	ldr	r0, [pc, #56]	; (800b110 <__multadd+0x90>)
 800b0d8:	21b5      	movs	r1, #181	; 0xb5
 800b0da:	f001 fa9b 	bl	800c614 <__assert_func>
 800b0de:	6922      	ldr	r2, [r4, #16]
 800b0e0:	3202      	adds	r2, #2
 800b0e2:	f104 010c 	add.w	r1, r4, #12
 800b0e6:	0092      	lsls	r2, r2, #2
 800b0e8:	300c      	adds	r0, #12
 800b0ea:	f7ff ff59 	bl	800afa0 <memcpy>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f7ff ffa3 	bl	800b03c <_Bfree>
 800b0f6:	462c      	mov	r4, r5
 800b0f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0fc:	3601      	adds	r6, #1
 800b0fe:	f8c3 8014 	str.w	r8, [r3, #20]
 800b102:	6126      	str	r6, [r4, #16]
 800b104:	4620      	mov	r0, r4
 800b106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10a:	bf00      	nop
 800b10c:	0800d2d4 	.word	0x0800d2d4
 800b110:	0800d364 	.word	0x0800d364

0800b114 <__s2b>:
 800b114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b118:	460c      	mov	r4, r1
 800b11a:	4615      	mov	r5, r2
 800b11c:	461f      	mov	r7, r3
 800b11e:	2209      	movs	r2, #9
 800b120:	3308      	adds	r3, #8
 800b122:	4606      	mov	r6, r0
 800b124:	fb93 f3f2 	sdiv	r3, r3, r2
 800b128:	2100      	movs	r1, #0
 800b12a:	2201      	movs	r2, #1
 800b12c:	429a      	cmp	r2, r3
 800b12e:	db09      	blt.n	800b144 <__s2b+0x30>
 800b130:	4630      	mov	r0, r6
 800b132:	f7ff ff43 	bl	800afbc <_Balloc>
 800b136:	b940      	cbnz	r0, 800b14a <__s2b+0x36>
 800b138:	4602      	mov	r2, r0
 800b13a:	4b19      	ldr	r3, [pc, #100]	; (800b1a0 <__s2b+0x8c>)
 800b13c:	4819      	ldr	r0, [pc, #100]	; (800b1a4 <__s2b+0x90>)
 800b13e:	21ce      	movs	r1, #206	; 0xce
 800b140:	f001 fa68 	bl	800c614 <__assert_func>
 800b144:	0052      	lsls	r2, r2, #1
 800b146:	3101      	adds	r1, #1
 800b148:	e7f0      	b.n	800b12c <__s2b+0x18>
 800b14a:	9b08      	ldr	r3, [sp, #32]
 800b14c:	6143      	str	r3, [r0, #20]
 800b14e:	2d09      	cmp	r5, #9
 800b150:	f04f 0301 	mov.w	r3, #1
 800b154:	6103      	str	r3, [r0, #16]
 800b156:	dd16      	ble.n	800b186 <__s2b+0x72>
 800b158:	f104 0909 	add.w	r9, r4, #9
 800b15c:	46c8      	mov	r8, r9
 800b15e:	442c      	add	r4, r5
 800b160:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b164:	4601      	mov	r1, r0
 800b166:	3b30      	subs	r3, #48	; 0x30
 800b168:	220a      	movs	r2, #10
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7ff ff88 	bl	800b080 <__multadd>
 800b170:	45a0      	cmp	r8, r4
 800b172:	d1f5      	bne.n	800b160 <__s2b+0x4c>
 800b174:	f1a5 0408 	sub.w	r4, r5, #8
 800b178:	444c      	add	r4, r9
 800b17a:	1b2d      	subs	r5, r5, r4
 800b17c:	1963      	adds	r3, r4, r5
 800b17e:	42bb      	cmp	r3, r7
 800b180:	db04      	blt.n	800b18c <__s2b+0x78>
 800b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b186:	340a      	adds	r4, #10
 800b188:	2509      	movs	r5, #9
 800b18a:	e7f6      	b.n	800b17a <__s2b+0x66>
 800b18c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b190:	4601      	mov	r1, r0
 800b192:	3b30      	subs	r3, #48	; 0x30
 800b194:	220a      	movs	r2, #10
 800b196:	4630      	mov	r0, r6
 800b198:	f7ff ff72 	bl	800b080 <__multadd>
 800b19c:	e7ee      	b.n	800b17c <__s2b+0x68>
 800b19e:	bf00      	nop
 800b1a0:	0800d2d4 	.word	0x0800d2d4
 800b1a4:	0800d364 	.word	0x0800d364

0800b1a8 <__hi0bits>:
 800b1a8:	0c03      	lsrs	r3, r0, #16
 800b1aa:	041b      	lsls	r3, r3, #16
 800b1ac:	b9d3      	cbnz	r3, 800b1e4 <__hi0bits+0x3c>
 800b1ae:	0400      	lsls	r0, r0, #16
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1b6:	bf04      	itt	eq
 800b1b8:	0200      	lsleq	r0, r0, #8
 800b1ba:	3308      	addeq	r3, #8
 800b1bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1c0:	bf04      	itt	eq
 800b1c2:	0100      	lsleq	r0, r0, #4
 800b1c4:	3304      	addeq	r3, #4
 800b1c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1ca:	bf04      	itt	eq
 800b1cc:	0080      	lsleq	r0, r0, #2
 800b1ce:	3302      	addeq	r3, #2
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	db05      	blt.n	800b1e0 <__hi0bits+0x38>
 800b1d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1d8:	f103 0301 	add.w	r3, r3, #1
 800b1dc:	bf08      	it	eq
 800b1de:	2320      	moveq	r3, #32
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	4770      	bx	lr
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e7e4      	b.n	800b1b2 <__hi0bits+0xa>

0800b1e8 <__lo0bits>:
 800b1e8:	6803      	ldr	r3, [r0, #0]
 800b1ea:	f013 0207 	ands.w	r2, r3, #7
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	d00b      	beq.n	800b20a <__lo0bits+0x22>
 800b1f2:	07da      	lsls	r2, r3, #31
 800b1f4:	d424      	bmi.n	800b240 <__lo0bits+0x58>
 800b1f6:	0798      	lsls	r0, r3, #30
 800b1f8:	bf49      	itett	mi
 800b1fa:	085b      	lsrmi	r3, r3, #1
 800b1fc:	089b      	lsrpl	r3, r3, #2
 800b1fe:	2001      	movmi	r0, #1
 800b200:	600b      	strmi	r3, [r1, #0]
 800b202:	bf5c      	itt	pl
 800b204:	600b      	strpl	r3, [r1, #0]
 800b206:	2002      	movpl	r0, #2
 800b208:	4770      	bx	lr
 800b20a:	b298      	uxth	r0, r3
 800b20c:	b9b0      	cbnz	r0, 800b23c <__lo0bits+0x54>
 800b20e:	0c1b      	lsrs	r3, r3, #16
 800b210:	2010      	movs	r0, #16
 800b212:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b216:	bf04      	itt	eq
 800b218:	0a1b      	lsreq	r3, r3, #8
 800b21a:	3008      	addeq	r0, #8
 800b21c:	071a      	lsls	r2, r3, #28
 800b21e:	bf04      	itt	eq
 800b220:	091b      	lsreq	r3, r3, #4
 800b222:	3004      	addeq	r0, #4
 800b224:	079a      	lsls	r2, r3, #30
 800b226:	bf04      	itt	eq
 800b228:	089b      	lsreq	r3, r3, #2
 800b22a:	3002      	addeq	r0, #2
 800b22c:	07da      	lsls	r2, r3, #31
 800b22e:	d403      	bmi.n	800b238 <__lo0bits+0x50>
 800b230:	085b      	lsrs	r3, r3, #1
 800b232:	f100 0001 	add.w	r0, r0, #1
 800b236:	d005      	beq.n	800b244 <__lo0bits+0x5c>
 800b238:	600b      	str	r3, [r1, #0]
 800b23a:	4770      	bx	lr
 800b23c:	4610      	mov	r0, r2
 800b23e:	e7e8      	b.n	800b212 <__lo0bits+0x2a>
 800b240:	2000      	movs	r0, #0
 800b242:	4770      	bx	lr
 800b244:	2020      	movs	r0, #32
 800b246:	4770      	bx	lr

0800b248 <__i2b>:
 800b248:	b510      	push	{r4, lr}
 800b24a:	460c      	mov	r4, r1
 800b24c:	2101      	movs	r1, #1
 800b24e:	f7ff feb5 	bl	800afbc <_Balloc>
 800b252:	4602      	mov	r2, r0
 800b254:	b928      	cbnz	r0, 800b262 <__i2b+0x1a>
 800b256:	4b05      	ldr	r3, [pc, #20]	; (800b26c <__i2b+0x24>)
 800b258:	4805      	ldr	r0, [pc, #20]	; (800b270 <__i2b+0x28>)
 800b25a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b25e:	f001 f9d9 	bl	800c614 <__assert_func>
 800b262:	2301      	movs	r3, #1
 800b264:	6144      	str	r4, [r0, #20]
 800b266:	6103      	str	r3, [r0, #16]
 800b268:	bd10      	pop	{r4, pc}
 800b26a:	bf00      	nop
 800b26c:	0800d2d4 	.word	0x0800d2d4
 800b270:	0800d364 	.word	0x0800d364

0800b274 <__multiply>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	4614      	mov	r4, r2
 800b27a:	690a      	ldr	r2, [r1, #16]
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	429a      	cmp	r2, r3
 800b280:	bfb8      	it	lt
 800b282:	460b      	movlt	r3, r1
 800b284:	460d      	mov	r5, r1
 800b286:	bfbc      	itt	lt
 800b288:	4625      	movlt	r5, r4
 800b28a:	461c      	movlt	r4, r3
 800b28c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b290:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b294:	68ab      	ldr	r3, [r5, #8]
 800b296:	6869      	ldr	r1, [r5, #4]
 800b298:	eb0a 0709 	add.w	r7, sl, r9
 800b29c:	42bb      	cmp	r3, r7
 800b29e:	b085      	sub	sp, #20
 800b2a0:	bfb8      	it	lt
 800b2a2:	3101      	addlt	r1, #1
 800b2a4:	f7ff fe8a 	bl	800afbc <_Balloc>
 800b2a8:	b930      	cbnz	r0, 800b2b8 <__multiply+0x44>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	4b42      	ldr	r3, [pc, #264]	; (800b3b8 <__multiply+0x144>)
 800b2ae:	4843      	ldr	r0, [pc, #268]	; (800b3bc <__multiply+0x148>)
 800b2b0:	f240 115d 	movw	r1, #349	; 0x15d
 800b2b4:	f001 f9ae 	bl	800c614 <__assert_func>
 800b2b8:	f100 0614 	add.w	r6, r0, #20
 800b2bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2c0:	4633      	mov	r3, r6
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	4543      	cmp	r3, r8
 800b2c6:	d31e      	bcc.n	800b306 <__multiply+0x92>
 800b2c8:	f105 0c14 	add.w	ip, r5, #20
 800b2cc:	f104 0314 	add.w	r3, r4, #20
 800b2d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b2d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b2d8:	9202      	str	r2, [sp, #8]
 800b2da:	ebac 0205 	sub.w	r2, ip, r5
 800b2de:	3a15      	subs	r2, #21
 800b2e0:	f022 0203 	bic.w	r2, r2, #3
 800b2e4:	3204      	adds	r2, #4
 800b2e6:	f105 0115 	add.w	r1, r5, #21
 800b2ea:	458c      	cmp	ip, r1
 800b2ec:	bf38      	it	cc
 800b2ee:	2204      	movcc	r2, #4
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9a02      	ldr	r2, [sp, #8]
 800b2f4:	9303      	str	r3, [sp, #12]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d808      	bhi.n	800b30c <__multiply+0x98>
 800b2fa:	2f00      	cmp	r7, #0
 800b2fc:	dc55      	bgt.n	800b3aa <__multiply+0x136>
 800b2fe:	6107      	str	r7, [r0, #16]
 800b300:	b005      	add	sp, #20
 800b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b306:	f843 2b04 	str.w	r2, [r3], #4
 800b30a:	e7db      	b.n	800b2c4 <__multiply+0x50>
 800b30c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b310:	f1ba 0f00 	cmp.w	sl, #0
 800b314:	d020      	beq.n	800b358 <__multiply+0xe4>
 800b316:	f105 0e14 	add.w	lr, r5, #20
 800b31a:	46b1      	mov	r9, r6
 800b31c:	2200      	movs	r2, #0
 800b31e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b322:	f8d9 b000 	ldr.w	fp, [r9]
 800b326:	b2a1      	uxth	r1, r4
 800b328:	fa1f fb8b 	uxth.w	fp, fp
 800b32c:	fb0a b101 	mla	r1, sl, r1, fp
 800b330:	4411      	add	r1, r2
 800b332:	f8d9 2000 	ldr.w	r2, [r9]
 800b336:	0c24      	lsrs	r4, r4, #16
 800b338:	0c12      	lsrs	r2, r2, #16
 800b33a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b33e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b342:	b289      	uxth	r1, r1
 800b344:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b348:	45f4      	cmp	ip, lr
 800b34a:	f849 1b04 	str.w	r1, [r9], #4
 800b34e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b352:	d8e4      	bhi.n	800b31e <__multiply+0xaa>
 800b354:	9901      	ldr	r1, [sp, #4]
 800b356:	5072      	str	r2, [r6, r1]
 800b358:	9a03      	ldr	r2, [sp, #12]
 800b35a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b35e:	3304      	adds	r3, #4
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	d01f      	beq.n	800b3a6 <__multiply+0x132>
 800b366:	6834      	ldr	r4, [r6, #0]
 800b368:	f105 0114 	add.w	r1, r5, #20
 800b36c:	46b6      	mov	lr, r6
 800b36e:	f04f 0a00 	mov.w	sl, #0
 800b372:	880a      	ldrh	r2, [r1, #0]
 800b374:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b378:	fb09 b202 	mla	r2, r9, r2, fp
 800b37c:	4492      	add	sl, r2
 800b37e:	b2a4      	uxth	r4, r4
 800b380:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b384:	f84e 4b04 	str.w	r4, [lr], #4
 800b388:	f851 4b04 	ldr.w	r4, [r1], #4
 800b38c:	f8be 2000 	ldrh.w	r2, [lr]
 800b390:	0c24      	lsrs	r4, r4, #16
 800b392:	fb09 2404 	mla	r4, r9, r4, r2
 800b396:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b39a:	458c      	cmp	ip, r1
 800b39c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b3a0:	d8e7      	bhi.n	800b372 <__multiply+0xfe>
 800b3a2:	9a01      	ldr	r2, [sp, #4]
 800b3a4:	50b4      	str	r4, [r6, r2]
 800b3a6:	3604      	adds	r6, #4
 800b3a8:	e7a3      	b.n	800b2f2 <__multiply+0x7e>
 800b3aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1a5      	bne.n	800b2fe <__multiply+0x8a>
 800b3b2:	3f01      	subs	r7, #1
 800b3b4:	e7a1      	b.n	800b2fa <__multiply+0x86>
 800b3b6:	bf00      	nop
 800b3b8:	0800d2d4 	.word	0x0800d2d4
 800b3bc:	0800d364 	.word	0x0800d364

0800b3c0 <__pow5mult>:
 800b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	f012 0203 	ands.w	r2, r2, #3
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460f      	mov	r7, r1
 800b3ce:	d007      	beq.n	800b3e0 <__pow5mult+0x20>
 800b3d0:	4c25      	ldr	r4, [pc, #148]	; (800b468 <__pow5mult+0xa8>)
 800b3d2:	3a01      	subs	r2, #1
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3da:	f7ff fe51 	bl	800b080 <__multadd>
 800b3de:	4607      	mov	r7, r0
 800b3e0:	10ad      	asrs	r5, r5, #2
 800b3e2:	d03d      	beq.n	800b460 <__pow5mult+0xa0>
 800b3e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3e6:	b97c      	cbnz	r4, 800b408 <__pow5mult+0x48>
 800b3e8:	2010      	movs	r0, #16
 800b3ea:	f7ff fdbf 	bl	800af6c <malloc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	6270      	str	r0, [r6, #36]	; 0x24
 800b3f2:	b928      	cbnz	r0, 800b400 <__pow5mult+0x40>
 800b3f4:	4b1d      	ldr	r3, [pc, #116]	; (800b46c <__pow5mult+0xac>)
 800b3f6:	481e      	ldr	r0, [pc, #120]	; (800b470 <__pow5mult+0xb0>)
 800b3f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3fc:	f001 f90a 	bl	800c614 <__assert_func>
 800b400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b404:	6004      	str	r4, [r0, #0]
 800b406:	60c4      	str	r4, [r0, #12]
 800b408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b410:	b94c      	cbnz	r4, 800b426 <__pow5mult+0x66>
 800b412:	f240 2171 	movw	r1, #625	; 0x271
 800b416:	4630      	mov	r0, r6
 800b418:	f7ff ff16 	bl	800b248 <__i2b>
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b422:	4604      	mov	r4, r0
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	f04f 0900 	mov.w	r9, #0
 800b42a:	07eb      	lsls	r3, r5, #31
 800b42c:	d50a      	bpl.n	800b444 <__pow5mult+0x84>
 800b42e:	4639      	mov	r1, r7
 800b430:	4622      	mov	r2, r4
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ff1e 	bl	800b274 <__multiply>
 800b438:	4639      	mov	r1, r7
 800b43a:	4680      	mov	r8, r0
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff fdfd 	bl	800b03c <_Bfree>
 800b442:	4647      	mov	r7, r8
 800b444:	106d      	asrs	r5, r5, #1
 800b446:	d00b      	beq.n	800b460 <__pow5mult+0xa0>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	b938      	cbnz	r0, 800b45c <__pow5mult+0x9c>
 800b44c:	4622      	mov	r2, r4
 800b44e:	4621      	mov	r1, r4
 800b450:	4630      	mov	r0, r6
 800b452:	f7ff ff0f 	bl	800b274 <__multiply>
 800b456:	6020      	str	r0, [r4, #0]
 800b458:	f8c0 9000 	str.w	r9, [r0]
 800b45c:	4604      	mov	r4, r0
 800b45e:	e7e4      	b.n	800b42a <__pow5mult+0x6a>
 800b460:	4638      	mov	r0, r7
 800b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b466:	bf00      	nop
 800b468:	0800d4b8 	.word	0x0800d4b8
 800b46c:	0800d25e 	.word	0x0800d25e
 800b470:	0800d364 	.word	0x0800d364

0800b474 <__lshift>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	6849      	ldr	r1, [r1, #4]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	4607      	mov	r7, r0
 800b486:	4691      	mov	r9, r2
 800b488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b48c:	f108 0601 	add.w	r6, r8, #1
 800b490:	42b3      	cmp	r3, r6
 800b492:	db0b      	blt.n	800b4ac <__lshift+0x38>
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff fd91 	bl	800afbc <_Balloc>
 800b49a:	4605      	mov	r5, r0
 800b49c:	b948      	cbnz	r0, 800b4b2 <__lshift+0x3e>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	4b28      	ldr	r3, [pc, #160]	; (800b544 <__lshift+0xd0>)
 800b4a2:	4829      	ldr	r0, [pc, #164]	; (800b548 <__lshift+0xd4>)
 800b4a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4a8:	f001 f8b4 	bl	800c614 <__assert_func>
 800b4ac:	3101      	adds	r1, #1
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	e7ee      	b.n	800b490 <__lshift+0x1c>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f100 0114 	add.w	r1, r0, #20
 800b4b8:	f100 0210 	add.w	r2, r0, #16
 800b4bc:	4618      	mov	r0, r3
 800b4be:	4553      	cmp	r3, sl
 800b4c0:	db33      	blt.n	800b52a <__lshift+0xb6>
 800b4c2:	6920      	ldr	r0, [r4, #16]
 800b4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4c8:	f104 0314 	add.w	r3, r4, #20
 800b4cc:	f019 091f 	ands.w	r9, r9, #31
 800b4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4d8:	d02b      	beq.n	800b532 <__lshift+0xbe>
 800b4da:	f1c9 0e20 	rsb	lr, r9, #32
 800b4de:	468a      	mov	sl, r1
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	fa00 f009 	lsl.w	r0, r0, r9
 800b4e8:	4302      	orrs	r2, r0
 800b4ea:	f84a 2b04 	str.w	r2, [sl], #4
 800b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f2:	459c      	cmp	ip, r3
 800b4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4f8:	d8f3      	bhi.n	800b4e2 <__lshift+0x6e>
 800b4fa:	ebac 0304 	sub.w	r3, ip, r4
 800b4fe:	3b15      	subs	r3, #21
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	3304      	adds	r3, #4
 800b506:	f104 0015 	add.w	r0, r4, #21
 800b50a:	4584      	cmp	ip, r0
 800b50c:	bf38      	it	cc
 800b50e:	2304      	movcc	r3, #4
 800b510:	50ca      	str	r2, [r1, r3]
 800b512:	b10a      	cbz	r2, 800b518 <__lshift+0xa4>
 800b514:	f108 0602 	add.w	r6, r8, #2
 800b518:	3e01      	subs	r6, #1
 800b51a:	4638      	mov	r0, r7
 800b51c:	612e      	str	r6, [r5, #16]
 800b51e:	4621      	mov	r1, r4
 800b520:	f7ff fd8c 	bl	800b03c <_Bfree>
 800b524:	4628      	mov	r0, r5
 800b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b52e:	3301      	adds	r3, #1
 800b530:	e7c5      	b.n	800b4be <__lshift+0x4a>
 800b532:	3904      	subs	r1, #4
 800b534:	f853 2b04 	ldr.w	r2, [r3], #4
 800b538:	f841 2f04 	str.w	r2, [r1, #4]!
 800b53c:	459c      	cmp	ip, r3
 800b53e:	d8f9      	bhi.n	800b534 <__lshift+0xc0>
 800b540:	e7ea      	b.n	800b518 <__lshift+0xa4>
 800b542:	bf00      	nop
 800b544:	0800d2d4 	.word	0x0800d2d4
 800b548:	0800d364 	.word	0x0800d364

0800b54c <__mcmp>:
 800b54c:	b530      	push	{r4, r5, lr}
 800b54e:	6902      	ldr	r2, [r0, #16]
 800b550:	690c      	ldr	r4, [r1, #16]
 800b552:	1b12      	subs	r2, r2, r4
 800b554:	d10e      	bne.n	800b574 <__mcmp+0x28>
 800b556:	f100 0314 	add.w	r3, r0, #20
 800b55a:	3114      	adds	r1, #20
 800b55c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b56c:	42a5      	cmp	r5, r4
 800b56e:	d003      	beq.n	800b578 <__mcmp+0x2c>
 800b570:	d305      	bcc.n	800b57e <__mcmp+0x32>
 800b572:	2201      	movs	r2, #1
 800b574:	4610      	mov	r0, r2
 800b576:	bd30      	pop	{r4, r5, pc}
 800b578:	4283      	cmp	r3, r0
 800b57a:	d3f3      	bcc.n	800b564 <__mcmp+0x18>
 800b57c:	e7fa      	b.n	800b574 <__mcmp+0x28>
 800b57e:	f04f 32ff 	mov.w	r2, #4294967295
 800b582:	e7f7      	b.n	800b574 <__mcmp+0x28>

0800b584 <__mdiff>:
 800b584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	460c      	mov	r4, r1
 800b58a:	4606      	mov	r6, r0
 800b58c:	4611      	mov	r1, r2
 800b58e:	4620      	mov	r0, r4
 800b590:	4617      	mov	r7, r2
 800b592:	f7ff ffdb 	bl	800b54c <__mcmp>
 800b596:	1e05      	subs	r5, r0, #0
 800b598:	d110      	bne.n	800b5bc <__mdiff+0x38>
 800b59a:	4629      	mov	r1, r5
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff fd0d 	bl	800afbc <_Balloc>
 800b5a2:	b930      	cbnz	r0, 800b5b2 <__mdiff+0x2e>
 800b5a4:	4b39      	ldr	r3, [pc, #228]	; (800b68c <__mdiff+0x108>)
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	f240 2132 	movw	r1, #562	; 0x232
 800b5ac:	4838      	ldr	r0, [pc, #224]	; (800b690 <__mdiff+0x10c>)
 800b5ae:	f001 f831 	bl	800c614 <__assert_func>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	bfa4      	itt	ge
 800b5be:	463b      	movge	r3, r7
 800b5c0:	4627      	movge	r7, r4
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	6879      	ldr	r1, [r7, #4]
 800b5c6:	bfa6      	itte	ge
 800b5c8:	461c      	movge	r4, r3
 800b5ca:	2500      	movge	r5, #0
 800b5cc:	2501      	movlt	r5, #1
 800b5ce:	f7ff fcf5 	bl	800afbc <_Balloc>
 800b5d2:	b920      	cbnz	r0, 800b5de <__mdiff+0x5a>
 800b5d4:	4b2d      	ldr	r3, [pc, #180]	; (800b68c <__mdiff+0x108>)
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5dc:	e7e6      	b.n	800b5ac <__mdiff+0x28>
 800b5de:	693e      	ldr	r6, [r7, #16]
 800b5e0:	60c5      	str	r5, [r0, #12]
 800b5e2:	6925      	ldr	r5, [r4, #16]
 800b5e4:	f107 0114 	add.w	r1, r7, #20
 800b5e8:	f104 0914 	add.w	r9, r4, #20
 800b5ec:	f100 0e14 	add.w	lr, r0, #20
 800b5f0:	f107 0210 	add.w	r2, r7, #16
 800b5f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b5f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b5fc:	46f2      	mov	sl, lr
 800b5fe:	2700      	movs	r7, #0
 800b600:	f859 3b04 	ldr.w	r3, [r9], #4
 800b604:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b608:	fa1f f883 	uxth.w	r8, r3
 800b60c:	fa17 f78b 	uxtah	r7, r7, fp
 800b610:	0c1b      	lsrs	r3, r3, #16
 800b612:	eba7 0808 	sub.w	r8, r7, r8
 800b616:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b61a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b61e:	fa1f f888 	uxth.w	r8, r8
 800b622:	141f      	asrs	r7, r3, #16
 800b624:	454d      	cmp	r5, r9
 800b626:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b62a:	f84a 3b04 	str.w	r3, [sl], #4
 800b62e:	d8e7      	bhi.n	800b600 <__mdiff+0x7c>
 800b630:	1b2b      	subs	r3, r5, r4
 800b632:	3b15      	subs	r3, #21
 800b634:	f023 0303 	bic.w	r3, r3, #3
 800b638:	3304      	adds	r3, #4
 800b63a:	3415      	adds	r4, #21
 800b63c:	42a5      	cmp	r5, r4
 800b63e:	bf38      	it	cc
 800b640:	2304      	movcc	r3, #4
 800b642:	4419      	add	r1, r3
 800b644:	4473      	add	r3, lr
 800b646:	469e      	mov	lr, r3
 800b648:	460d      	mov	r5, r1
 800b64a:	4565      	cmp	r5, ip
 800b64c:	d30e      	bcc.n	800b66c <__mdiff+0xe8>
 800b64e:	f10c 0203 	add.w	r2, ip, #3
 800b652:	1a52      	subs	r2, r2, r1
 800b654:	f022 0203 	bic.w	r2, r2, #3
 800b658:	3903      	subs	r1, #3
 800b65a:	458c      	cmp	ip, r1
 800b65c:	bf38      	it	cc
 800b65e:	2200      	movcc	r2, #0
 800b660:	441a      	add	r2, r3
 800b662:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b666:	b17b      	cbz	r3, 800b688 <__mdiff+0x104>
 800b668:	6106      	str	r6, [r0, #16]
 800b66a:	e7a5      	b.n	800b5b8 <__mdiff+0x34>
 800b66c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b670:	fa17 f488 	uxtah	r4, r7, r8
 800b674:	1422      	asrs	r2, r4, #16
 800b676:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b67a:	b2a4      	uxth	r4, r4
 800b67c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b680:	f84e 4b04 	str.w	r4, [lr], #4
 800b684:	1417      	asrs	r7, r2, #16
 800b686:	e7e0      	b.n	800b64a <__mdiff+0xc6>
 800b688:	3e01      	subs	r6, #1
 800b68a:	e7ea      	b.n	800b662 <__mdiff+0xde>
 800b68c:	0800d2d4 	.word	0x0800d2d4
 800b690:	0800d364 	.word	0x0800d364

0800b694 <__ulp>:
 800b694:	b082      	sub	sp, #8
 800b696:	ed8d 0b00 	vstr	d0, [sp]
 800b69a:	9b01      	ldr	r3, [sp, #4]
 800b69c:	4912      	ldr	r1, [pc, #72]	; (800b6e8 <__ulp+0x54>)
 800b69e:	4019      	ands	r1, r3
 800b6a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	dd05      	ble.n	800b6b4 <__ulp+0x20>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	ec43 2b10 	vmov	d0, r2, r3
 800b6b0:	b002      	add	sp, #8
 800b6b2:	4770      	bx	lr
 800b6b4:	4249      	negs	r1, r1
 800b6b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b6ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b6be:	f04f 0200 	mov.w	r2, #0
 800b6c2:	f04f 0300 	mov.w	r3, #0
 800b6c6:	da04      	bge.n	800b6d2 <__ulp+0x3e>
 800b6c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b6cc:	fa41 f300 	asr.w	r3, r1, r0
 800b6d0:	e7ec      	b.n	800b6ac <__ulp+0x18>
 800b6d2:	f1a0 0114 	sub.w	r1, r0, #20
 800b6d6:	291e      	cmp	r1, #30
 800b6d8:	bfda      	itte	le
 800b6da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b6de:	fa20 f101 	lsrle.w	r1, r0, r1
 800b6e2:	2101      	movgt	r1, #1
 800b6e4:	460a      	mov	r2, r1
 800b6e6:	e7e1      	b.n	800b6ac <__ulp+0x18>
 800b6e8:	7ff00000 	.word	0x7ff00000

0800b6ec <__b2d>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	6905      	ldr	r5, [r0, #16]
 800b6f0:	f100 0714 	add.w	r7, r0, #20
 800b6f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b6f8:	1f2e      	subs	r6, r5, #4
 800b6fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b6fe:	4620      	mov	r0, r4
 800b700:	f7ff fd52 	bl	800b1a8 <__hi0bits>
 800b704:	f1c0 0320 	rsb	r3, r0, #32
 800b708:	280a      	cmp	r0, #10
 800b70a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b788 <__b2d+0x9c>
 800b70e:	600b      	str	r3, [r1, #0]
 800b710:	dc14      	bgt.n	800b73c <__b2d+0x50>
 800b712:	f1c0 0e0b 	rsb	lr, r0, #11
 800b716:	fa24 f10e 	lsr.w	r1, r4, lr
 800b71a:	42b7      	cmp	r7, r6
 800b71c:	ea41 030c 	orr.w	r3, r1, ip
 800b720:	bf34      	ite	cc
 800b722:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b726:	2100      	movcs	r1, #0
 800b728:	3015      	adds	r0, #21
 800b72a:	fa04 f000 	lsl.w	r0, r4, r0
 800b72e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b732:	ea40 0201 	orr.w	r2, r0, r1
 800b736:	ec43 2b10 	vmov	d0, r2, r3
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73c:	42b7      	cmp	r7, r6
 800b73e:	bf3a      	itte	cc
 800b740:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b744:	f1a5 0608 	subcc.w	r6, r5, #8
 800b748:	2100      	movcs	r1, #0
 800b74a:	380b      	subs	r0, #11
 800b74c:	d017      	beq.n	800b77e <__b2d+0x92>
 800b74e:	f1c0 0c20 	rsb	ip, r0, #32
 800b752:	fa04 f500 	lsl.w	r5, r4, r0
 800b756:	42be      	cmp	r6, r7
 800b758:	fa21 f40c 	lsr.w	r4, r1, ip
 800b75c:	ea45 0504 	orr.w	r5, r5, r4
 800b760:	bf8c      	ite	hi
 800b762:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b766:	2400      	movls	r4, #0
 800b768:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b76c:	fa01 f000 	lsl.w	r0, r1, r0
 800b770:	fa24 f40c 	lsr.w	r4, r4, ip
 800b774:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b778:	ea40 0204 	orr.w	r2, r0, r4
 800b77c:	e7db      	b.n	800b736 <__b2d+0x4a>
 800b77e:	ea44 030c 	orr.w	r3, r4, ip
 800b782:	460a      	mov	r2, r1
 800b784:	e7d7      	b.n	800b736 <__b2d+0x4a>
 800b786:	bf00      	nop
 800b788:	3ff00000 	.word	0x3ff00000

0800b78c <__d2b>:
 800b78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b790:	4689      	mov	r9, r1
 800b792:	2101      	movs	r1, #1
 800b794:	ec57 6b10 	vmov	r6, r7, d0
 800b798:	4690      	mov	r8, r2
 800b79a:	f7ff fc0f 	bl	800afbc <_Balloc>
 800b79e:	4604      	mov	r4, r0
 800b7a0:	b930      	cbnz	r0, 800b7b0 <__d2b+0x24>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	4b25      	ldr	r3, [pc, #148]	; (800b83c <__d2b+0xb0>)
 800b7a6:	4826      	ldr	r0, [pc, #152]	; (800b840 <__d2b+0xb4>)
 800b7a8:	f240 310a 	movw	r1, #778	; 0x30a
 800b7ac:	f000 ff32 	bl	800c614 <__assert_func>
 800b7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7b8:	bb35      	cbnz	r5, 800b808 <__d2b+0x7c>
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	9301      	str	r3, [sp, #4]
 800b7be:	d028      	beq.n	800b812 <__d2b+0x86>
 800b7c0:	4668      	mov	r0, sp
 800b7c2:	9600      	str	r6, [sp, #0]
 800b7c4:	f7ff fd10 	bl	800b1e8 <__lo0bits>
 800b7c8:	9900      	ldr	r1, [sp, #0]
 800b7ca:	b300      	cbz	r0, 800b80e <__d2b+0x82>
 800b7cc:	9a01      	ldr	r2, [sp, #4]
 800b7ce:	f1c0 0320 	rsb	r3, r0, #32
 800b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d6:	430b      	orrs	r3, r1
 800b7d8:	40c2      	lsrs	r2, r0
 800b7da:	6163      	str	r3, [r4, #20]
 800b7dc:	9201      	str	r2, [sp, #4]
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	61a3      	str	r3, [r4, #24]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bf14      	ite	ne
 800b7e6:	2202      	movne	r2, #2
 800b7e8:	2201      	moveq	r2, #1
 800b7ea:	6122      	str	r2, [r4, #16]
 800b7ec:	b1d5      	cbz	r5, 800b824 <__d2b+0x98>
 800b7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7f2:	4405      	add	r5, r0
 800b7f4:	f8c9 5000 	str.w	r5, [r9]
 800b7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7fc:	f8c8 0000 	str.w	r0, [r8]
 800b800:	4620      	mov	r0, r4
 800b802:	b003      	add	sp, #12
 800b804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b80c:	e7d5      	b.n	800b7ba <__d2b+0x2e>
 800b80e:	6161      	str	r1, [r4, #20]
 800b810:	e7e5      	b.n	800b7de <__d2b+0x52>
 800b812:	a801      	add	r0, sp, #4
 800b814:	f7ff fce8 	bl	800b1e8 <__lo0bits>
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	6163      	str	r3, [r4, #20]
 800b81c:	2201      	movs	r2, #1
 800b81e:	6122      	str	r2, [r4, #16]
 800b820:	3020      	adds	r0, #32
 800b822:	e7e3      	b.n	800b7ec <__d2b+0x60>
 800b824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b82c:	f8c9 0000 	str.w	r0, [r9]
 800b830:	6918      	ldr	r0, [r3, #16]
 800b832:	f7ff fcb9 	bl	800b1a8 <__hi0bits>
 800b836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b83a:	e7df      	b.n	800b7fc <__d2b+0x70>
 800b83c:	0800d2d4 	.word	0x0800d2d4
 800b840:	0800d364 	.word	0x0800d364

0800b844 <__ratio>:
 800b844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b848:	4688      	mov	r8, r1
 800b84a:	4669      	mov	r1, sp
 800b84c:	4681      	mov	r9, r0
 800b84e:	f7ff ff4d 	bl	800b6ec <__b2d>
 800b852:	a901      	add	r1, sp, #4
 800b854:	4640      	mov	r0, r8
 800b856:	ec55 4b10 	vmov	r4, r5, d0
 800b85a:	f7ff ff47 	bl	800b6ec <__b2d>
 800b85e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b862:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b866:	eba3 0c02 	sub.w	ip, r3, r2
 800b86a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b86e:	1a9b      	subs	r3, r3, r2
 800b870:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b874:	ec51 0b10 	vmov	r0, r1, d0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	bfd6      	itet	le
 800b87c:	460a      	movle	r2, r1
 800b87e:	462a      	movgt	r2, r5
 800b880:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b884:	468b      	mov	fp, r1
 800b886:	462f      	mov	r7, r5
 800b888:	bfd4      	ite	le
 800b88a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b88e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b892:	4620      	mov	r0, r4
 800b894:	ee10 2a10 	vmov	r2, s0
 800b898:	465b      	mov	r3, fp
 800b89a:	4639      	mov	r1, r7
 800b89c:	f7f4 fff6 	bl	800088c <__aeabi_ddiv>
 800b8a0:	ec41 0b10 	vmov	d0, r0, r1
 800b8a4:	b003      	add	sp, #12
 800b8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8aa <__copybits>:
 800b8aa:	3901      	subs	r1, #1
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	1149      	asrs	r1, r1, #5
 800b8b0:	6914      	ldr	r4, [r2, #16]
 800b8b2:	3101      	adds	r1, #1
 800b8b4:	f102 0314 	add.w	r3, r2, #20
 800b8b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8c0:	1f05      	subs	r5, r0, #4
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	d30c      	bcc.n	800b8e0 <__copybits+0x36>
 800b8c6:	1aa3      	subs	r3, r4, r2
 800b8c8:	3b11      	subs	r3, #17
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	3211      	adds	r2, #17
 800b8d0:	42a2      	cmp	r2, r4
 800b8d2:	bf88      	it	hi
 800b8d4:	2300      	movhi	r3, #0
 800b8d6:	4418      	add	r0, r3
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4288      	cmp	r0, r1
 800b8dc:	d305      	bcc.n	800b8ea <__copybits+0x40>
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8e8:	e7eb      	b.n	800b8c2 <__copybits+0x18>
 800b8ea:	f840 3b04 	str.w	r3, [r0], #4
 800b8ee:	e7f4      	b.n	800b8da <__copybits+0x30>

0800b8f0 <__any_on>:
 800b8f0:	f100 0214 	add.w	r2, r0, #20
 800b8f4:	6900      	ldr	r0, [r0, #16]
 800b8f6:	114b      	asrs	r3, r1, #5
 800b8f8:	4298      	cmp	r0, r3
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	db11      	blt.n	800b922 <__any_on+0x32>
 800b8fe:	dd0a      	ble.n	800b916 <__any_on+0x26>
 800b900:	f011 011f 	ands.w	r1, r1, #31
 800b904:	d007      	beq.n	800b916 <__any_on+0x26>
 800b906:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b90a:	fa24 f001 	lsr.w	r0, r4, r1
 800b90e:	fa00 f101 	lsl.w	r1, r0, r1
 800b912:	428c      	cmp	r4, r1
 800b914:	d10b      	bne.n	800b92e <__any_on+0x3e>
 800b916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d803      	bhi.n	800b926 <__any_on+0x36>
 800b91e:	2000      	movs	r0, #0
 800b920:	bd10      	pop	{r4, pc}
 800b922:	4603      	mov	r3, r0
 800b924:	e7f7      	b.n	800b916 <__any_on+0x26>
 800b926:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b92a:	2900      	cmp	r1, #0
 800b92c:	d0f5      	beq.n	800b91a <__any_on+0x2a>
 800b92e:	2001      	movs	r0, #1
 800b930:	e7f6      	b.n	800b920 <__any_on+0x30>

0800b932 <_calloc_r>:
 800b932:	b513      	push	{r0, r1, r4, lr}
 800b934:	434a      	muls	r2, r1
 800b936:	4611      	mov	r1, r2
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	f000 f859 	bl	800b9f0 <_malloc_r>
 800b93e:	4604      	mov	r4, r0
 800b940:	b118      	cbz	r0, 800b94a <_calloc_r+0x18>
 800b942:	9a01      	ldr	r2, [sp, #4]
 800b944:	2100      	movs	r1, #0
 800b946:	f7fc facf 	bl	8007ee8 <memset>
 800b94a:	4620      	mov	r0, r4
 800b94c:	b002      	add	sp, #8
 800b94e:	bd10      	pop	{r4, pc}

0800b950 <_free_r>:
 800b950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b952:	2900      	cmp	r1, #0
 800b954:	d048      	beq.n	800b9e8 <_free_r+0x98>
 800b956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b95a:	9001      	str	r0, [sp, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f1a1 0404 	sub.w	r4, r1, #4
 800b962:	bfb8      	it	lt
 800b964:	18e4      	addlt	r4, r4, r3
 800b966:	f001 f859 	bl	800ca1c <__malloc_lock>
 800b96a:	4a20      	ldr	r2, [pc, #128]	; (800b9ec <_free_r+0x9c>)
 800b96c:	9801      	ldr	r0, [sp, #4]
 800b96e:	6813      	ldr	r3, [r2, #0]
 800b970:	4615      	mov	r5, r2
 800b972:	b933      	cbnz	r3, 800b982 <_free_r+0x32>
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	6014      	str	r4, [r2, #0]
 800b978:	b003      	add	sp, #12
 800b97a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b97e:	f001 b853 	b.w	800ca28 <__malloc_unlock>
 800b982:	42a3      	cmp	r3, r4
 800b984:	d90b      	bls.n	800b99e <_free_r+0x4e>
 800b986:	6821      	ldr	r1, [r4, #0]
 800b988:	1862      	adds	r2, r4, r1
 800b98a:	4293      	cmp	r3, r2
 800b98c:	bf04      	itt	eq
 800b98e:	681a      	ldreq	r2, [r3, #0]
 800b990:	685b      	ldreq	r3, [r3, #4]
 800b992:	6063      	str	r3, [r4, #4]
 800b994:	bf04      	itt	eq
 800b996:	1852      	addeq	r2, r2, r1
 800b998:	6022      	streq	r2, [r4, #0]
 800b99a:	602c      	str	r4, [r5, #0]
 800b99c:	e7ec      	b.n	800b978 <_free_r+0x28>
 800b99e:	461a      	mov	r2, r3
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	b10b      	cbz	r3, 800b9a8 <_free_r+0x58>
 800b9a4:	42a3      	cmp	r3, r4
 800b9a6:	d9fa      	bls.n	800b99e <_free_r+0x4e>
 800b9a8:	6811      	ldr	r1, [r2, #0]
 800b9aa:	1855      	adds	r5, r2, r1
 800b9ac:	42a5      	cmp	r5, r4
 800b9ae:	d10b      	bne.n	800b9c8 <_free_r+0x78>
 800b9b0:	6824      	ldr	r4, [r4, #0]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	1854      	adds	r4, r2, r1
 800b9b6:	42a3      	cmp	r3, r4
 800b9b8:	6011      	str	r1, [r2, #0]
 800b9ba:	d1dd      	bne.n	800b978 <_free_r+0x28>
 800b9bc:	681c      	ldr	r4, [r3, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	6053      	str	r3, [r2, #4]
 800b9c2:	4421      	add	r1, r4
 800b9c4:	6011      	str	r1, [r2, #0]
 800b9c6:	e7d7      	b.n	800b978 <_free_r+0x28>
 800b9c8:	d902      	bls.n	800b9d0 <_free_r+0x80>
 800b9ca:	230c      	movs	r3, #12
 800b9cc:	6003      	str	r3, [r0, #0]
 800b9ce:	e7d3      	b.n	800b978 <_free_r+0x28>
 800b9d0:	6825      	ldr	r5, [r4, #0]
 800b9d2:	1961      	adds	r1, r4, r5
 800b9d4:	428b      	cmp	r3, r1
 800b9d6:	bf04      	itt	eq
 800b9d8:	6819      	ldreq	r1, [r3, #0]
 800b9da:	685b      	ldreq	r3, [r3, #4]
 800b9dc:	6063      	str	r3, [r4, #4]
 800b9de:	bf04      	itt	eq
 800b9e0:	1949      	addeq	r1, r1, r5
 800b9e2:	6021      	streq	r1, [r4, #0]
 800b9e4:	6054      	str	r4, [r2, #4]
 800b9e6:	e7c7      	b.n	800b978 <_free_r+0x28>
 800b9e8:	b003      	add	sp, #12
 800b9ea:	bd30      	pop	{r4, r5, pc}
 800b9ec:	2000026c 	.word	0x2000026c

0800b9f0 <_malloc_r>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	1ccd      	adds	r5, r1, #3
 800b9f4:	f025 0503 	bic.w	r5, r5, #3
 800b9f8:	3508      	adds	r5, #8
 800b9fa:	2d0c      	cmp	r5, #12
 800b9fc:	bf38      	it	cc
 800b9fe:	250c      	movcc	r5, #12
 800ba00:	2d00      	cmp	r5, #0
 800ba02:	4606      	mov	r6, r0
 800ba04:	db01      	blt.n	800ba0a <_malloc_r+0x1a>
 800ba06:	42a9      	cmp	r1, r5
 800ba08:	d903      	bls.n	800ba12 <_malloc_r+0x22>
 800ba0a:	230c      	movs	r3, #12
 800ba0c:	6033      	str	r3, [r6, #0]
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba12:	f001 f803 	bl	800ca1c <__malloc_lock>
 800ba16:	4921      	ldr	r1, [pc, #132]	; (800ba9c <_malloc_r+0xac>)
 800ba18:	680a      	ldr	r2, [r1, #0]
 800ba1a:	4614      	mov	r4, r2
 800ba1c:	b99c      	cbnz	r4, 800ba46 <_malloc_r+0x56>
 800ba1e:	4f20      	ldr	r7, [pc, #128]	; (800baa0 <_malloc_r+0xb0>)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	b923      	cbnz	r3, 800ba2e <_malloc_r+0x3e>
 800ba24:	4621      	mov	r1, r4
 800ba26:	4630      	mov	r0, r6
 800ba28:	f000 fcd2 	bl	800c3d0 <_sbrk_r>
 800ba2c:	6038      	str	r0, [r7, #0]
 800ba2e:	4629      	mov	r1, r5
 800ba30:	4630      	mov	r0, r6
 800ba32:	f000 fccd 	bl	800c3d0 <_sbrk_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d123      	bne.n	800ba82 <_malloc_r+0x92>
 800ba3a:	230c      	movs	r3, #12
 800ba3c:	6033      	str	r3, [r6, #0]
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f000 fff2 	bl	800ca28 <__malloc_unlock>
 800ba44:	e7e3      	b.n	800ba0e <_malloc_r+0x1e>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	1b5b      	subs	r3, r3, r5
 800ba4a:	d417      	bmi.n	800ba7c <_malloc_r+0x8c>
 800ba4c:	2b0b      	cmp	r3, #11
 800ba4e:	d903      	bls.n	800ba58 <_malloc_r+0x68>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	441c      	add	r4, r3
 800ba54:	6025      	str	r5, [r4, #0]
 800ba56:	e004      	b.n	800ba62 <_malloc_r+0x72>
 800ba58:	6863      	ldr	r3, [r4, #4]
 800ba5a:	42a2      	cmp	r2, r4
 800ba5c:	bf0c      	ite	eq
 800ba5e:	600b      	streq	r3, [r1, #0]
 800ba60:	6053      	strne	r3, [r2, #4]
 800ba62:	4630      	mov	r0, r6
 800ba64:	f000 ffe0 	bl	800ca28 <__malloc_unlock>
 800ba68:	f104 000b 	add.w	r0, r4, #11
 800ba6c:	1d23      	adds	r3, r4, #4
 800ba6e:	f020 0007 	bic.w	r0, r0, #7
 800ba72:	1ac2      	subs	r2, r0, r3
 800ba74:	d0cc      	beq.n	800ba10 <_malloc_r+0x20>
 800ba76:	1a1b      	subs	r3, r3, r0
 800ba78:	50a3      	str	r3, [r4, r2]
 800ba7a:	e7c9      	b.n	800ba10 <_malloc_r+0x20>
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	6864      	ldr	r4, [r4, #4]
 800ba80:	e7cc      	b.n	800ba1c <_malloc_r+0x2c>
 800ba82:	1cc4      	adds	r4, r0, #3
 800ba84:	f024 0403 	bic.w	r4, r4, #3
 800ba88:	42a0      	cmp	r0, r4
 800ba8a:	d0e3      	beq.n	800ba54 <_malloc_r+0x64>
 800ba8c:	1a21      	subs	r1, r4, r0
 800ba8e:	4630      	mov	r0, r6
 800ba90:	f000 fc9e 	bl	800c3d0 <_sbrk_r>
 800ba94:	3001      	adds	r0, #1
 800ba96:	d1dd      	bne.n	800ba54 <_malloc_r+0x64>
 800ba98:	e7cf      	b.n	800ba3a <_malloc_r+0x4a>
 800ba9a:	bf00      	nop
 800ba9c:	2000026c 	.word	0x2000026c
 800baa0:	20000270 	.word	0x20000270

0800baa4 <__ssputs_r>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	688e      	ldr	r6, [r1, #8]
 800baaa:	429e      	cmp	r6, r3
 800baac:	4682      	mov	sl, r0
 800baae:	460c      	mov	r4, r1
 800bab0:	4690      	mov	r8, r2
 800bab2:	461f      	mov	r7, r3
 800bab4:	d838      	bhi.n	800bb28 <__ssputs_r+0x84>
 800bab6:	898a      	ldrh	r2, [r1, #12]
 800bab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800babc:	d032      	beq.n	800bb24 <__ssputs_r+0x80>
 800babe:	6825      	ldr	r5, [r4, #0]
 800bac0:	6909      	ldr	r1, [r1, #16]
 800bac2:	eba5 0901 	sub.w	r9, r5, r1
 800bac6:	6965      	ldr	r5, [r4, #20]
 800bac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bacc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bad0:	3301      	adds	r3, #1
 800bad2:	444b      	add	r3, r9
 800bad4:	106d      	asrs	r5, r5, #1
 800bad6:	429d      	cmp	r5, r3
 800bad8:	bf38      	it	cc
 800bada:	461d      	movcc	r5, r3
 800badc:	0553      	lsls	r3, r2, #21
 800bade:	d531      	bpl.n	800bb44 <__ssputs_r+0xa0>
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7ff ff85 	bl	800b9f0 <_malloc_r>
 800bae6:	4606      	mov	r6, r0
 800bae8:	b950      	cbnz	r0, 800bb00 <__ssputs_r+0x5c>
 800baea:	230c      	movs	r3, #12
 800baec:	f8ca 3000 	str.w	r3, [sl]
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf6:	81a3      	strh	r3, [r4, #12]
 800baf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb00:	6921      	ldr	r1, [r4, #16]
 800bb02:	464a      	mov	r2, r9
 800bb04:	f7ff fa4c 	bl	800afa0 <memcpy>
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb12:	81a3      	strh	r3, [r4, #12]
 800bb14:	6126      	str	r6, [r4, #16]
 800bb16:	6165      	str	r5, [r4, #20]
 800bb18:	444e      	add	r6, r9
 800bb1a:	eba5 0509 	sub.w	r5, r5, r9
 800bb1e:	6026      	str	r6, [r4, #0]
 800bb20:	60a5      	str	r5, [r4, #8]
 800bb22:	463e      	mov	r6, r7
 800bb24:	42be      	cmp	r6, r7
 800bb26:	d900      	bls.n	800bb2a <__ssputs_r+0x86>
 800bb28:	463e      	mov	r6, r7
 800bb2a:	4632      	mov	r2, r6
 800bb2c:	6820      	ldr	r0, [r4, #0]
 800bb2e:	4641      	mov	r1, r8
 800bb30:	f000 ff5a 	bl	800c9e8 <memmove>
 800bb34:	68a3      	ldr	r3, [r4, #8]
 800bb36:	6822      	ldr	r2, [r4, #0]
 800bb38:	1b9b      	subs	r3, r3, r6
 800bb3a:	4432      	add	r2, r6
 800bb3c:	60a3      	str	r3, [r4, #8]
 800bb3e:	6022      	str	r2, [r4, #0]
 800bb40:	2000      	movs	r0, #0
 800bb42:	e7db      	b.n	800bafc <__ssputs_r+0x58>
 800bb44:	462a      	mov	r2, r5
 800bb46:	f000 ff75 	bl	800ca34 <_realloc_r>
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d1e1      	bne.n	800bb14 <__ssputs_r+0x70>
 800bb50:	6921      	ldr	r1, [r4, #16]
 800bb52:	4650      	mov	r0, sl
 800bb54:	f7ff fefc 	bl	800b950 <_free_r>
 800bb58:	e7c7      	b.n	800baea <__ssputs_r+0x46>
	...

0800bb5c <_svfiprintf_r>:
 800bb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb60:	4698      	mov	r8, r3
 800bb62:	898b      	ldrh	r3, [r1, #12]
 800bb64:	061b      	lsls	r3, r3, #24
 800bb66:	b09d      	sub	sp, #116	; 0x74
 800bb68:	4607      	mov	r7, r0
 800bb6a:	460d      	mov	r5, r1
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	d50e      	bpl.n	800bb8e <_svfiprintf_r+0x32>
 800bb70:	690b      	ldr	r3, [r1, #16]
 800bb72:	b963      	cbnz	r3, 800bb8e <_svfiprintf_r+0x32>
 800bb74:	2140      	movs	r1, #64	; 0x40
 800bb76:	f7ff ff3b 	bl	800b9f0 <_malloc_r>
 800bb7a:	6028      	str	r0, [r5, #0]
 800bb7c:	6128      	str	r0, [r5, #16]
 800bb7e:	b920      	cbnz	r0, 800bb8a <_svfiprintf_r+0x2e>
 800bb80:	230c      	movs	r3, #12
 800bb82:	603b      	str	r3, [r7, #0]
 800bb84:	f04f 30ff 	mov.w	r0, #4294967295
 800bb88:	e0d1      	b.n	800bd2e <_svfiprintf_r+0x1d2>
 800bb8a:	2340      	movs	r3, #64	; 0x40
 800bb8c:	616b      	str	r3, [r5, #20]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	9309      	str	r3, [sp, #36]	; 0x24
 800bb92:	2320      	movs	r3, #32
 800bb94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb98:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb9c:	2330      	movs	r3, #48	; 0x30
 800bb9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd48 <_svfiprintf_r+0x1ec>
 800bba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bba6:	f04f 0901 	mov.w	r9, #1
 800bbaa:	4623      	mov	r3, r4
 800bbac:	469a      	mov	sl, r3
 800bbae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbb2:	b10a      	cbz	r2, 800bbb8 <_svfiprintf_r+0x5c>
 800bbb4:	2a25      	cmp	r2, #37	; 0x25
 800bbb6:	d1f9      	bne.n	800bbac <_svfiprintf_r+0x50>
 800bbb8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbbc:	d00b      	beq.n	800bbd6 <_svfiprintf_r+0x7a>
 800bbbe:	465b      	mov	r3, fp
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f7ff ff6d 	bl	800baa4 <__ssputs_r>
 800bbca:	3001      	adds	r0, #1
 800bbcc:	f000 80aa 	beq.w	800bd24 <_svfiprintf_r+0x1c8>
 800bbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbd2:	445a      	add	r2, fp
 800bbd4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbd6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f000 80a2 	beq.w	800bd24 <_svfiprintf_r+0x1c8>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbea:	f10a 0a01 	add.w	sl, sl, #1
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	9307      	str	r3, [sp, #28]
 800bbf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbf6:	931a      	str	r3, [sp, #104]	; 0x68
 800bbf8:	4654      	mov	r4, sl
 800bbfa:	2205      	movs	r2, #5
 800bbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc00:	4851      	ldr	r0, [pc, #324]	; (800bd48 <_svfiprintf_r+0x1ec>)
 800bc02:	f7f4 fb0d 	bl	8000220 <memchr>
 800bc06:	9a04      	ldr	r2, [sp, #16]
 800bc08:	b9d8      	cbnz	r0, 800bc42 <_svfiprintf_r+0xe6>
 800bc0a:	06d0      	lsls	r0, r2, #27
 800bc0c:	bf44      	itt	mi
 800bc0e:	2320      	movmi	r3, #32
 800bc10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc14:	0711      	lsls	r1, r2, #28
 800bc16:	bf44      	itt	mi
 800bc18:	232b      	movmi	r3, #43	; 0x2b
 800bc1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc22:	2b2a      	cmp	r3, #42	; 0x2a
 800bc24:	d015      	beq.n	800bc52 <_svfiprintf_r+0xf6>
 800bc26:	9a07      	ldr	r2, [sp, #28]
 800bc28:	4654      	mov	r4, sl
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	f04f 0c0a 	mov.w	ip, #10
 800bc30:	4621      	mov	r1, r4
 800bc32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc36:	3b30      	subs	r3, #48	; 0x30
 800bc38:	2b09      	cmp	r3, #9
 800bc3a:	d94e      	bls.n	800bcda <_svfiprintf_r+0x17e>
 800bc3c:	b1b0      	cbz	r0, 800bc6c <_svfiprintf_r+0x110>
 800bc3e:	9207      	str	r2, [sp, #28]
 800bc40:	e014      	b.n	800bc6c <_svfiprintf_r+0x110>
 800bc42:	eba0 0308 	sub.w	r3, r0, r8
 800bc46:	fa09 f303 	lsl.w	r3, r9, r3
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	46a2      	mov	sl, r4
 800bc50:	e7d2      	b.n	800bbf8 <_svfiprintf_r+0x9c>
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	1d19      	adds	r1, r3, #4
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	9103      	str	r1, [sp, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bfbb      	ittet	lt
 800bc5e:	425b      	neglt	r3, r3
 800bc60:	f042 0202 	orrlt.w	r2, r2, #2
 800bc64:	9307      	strge	r3, [sp, #28]
 800bc66:	9307      	strlt	r3, [sp, #28]
 800bc68:	bfb8      	it	lt
 800bc6a:	9204      	strlt	r2, [sp, #16]
 800bc6c:	7823      	ldrb	r3, [r4, #0]
 800bc6e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc70:	d10c      	bne.n	800bc8c <_svfiprintf_r+0x130>
 800bc72:	7863      	ldrb	r3, [r4, #1]
 800bc74:	2b2a      	cmp	r3, #42	; 0x2a
 800bc76:	d135      	bne.n	800bce4 <_svfiprintf_r+0x188>
 800bc78:	9b03      	ldr	r3, [sp, #12]
 800bc7a:	1d1a      	adds	r2, r3, #4
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	9203      	str	r2, [sp, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bfb8      	it	lt
 800bc84:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc88:	3402      	adds	r4, #2
 800bc8a:	9305      	str	r3, [sp, #20]
 800bc8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd58 <_svfiprintf_r+0x1fc>
 800bc90:	7821      	ldrb	r1, [r4, #0]
 800bc92:	2203      	movs	r2, #3
 800bc94:	4650      	mov	r0, sl
 800bc96:	f7f4 fac3 	bl	8000220 <memchr>
 800bc9a:	b140      	cbz	r0, 800bcae <_svfiprintf_r+0x152>
 800bc9c:	2340      	movs	r3, #64	; 0x40
 800bc9e:	eba0 000a 	sub.w	r0, r0, sl
 800bca2:	fa03 f000 	lsl.w	r0, r3, r0
 800bca6:	9b04      	ldr	r3, [sp, #16]
 800bca8:	4303      	orrs	r3, r0
 800bcaa:	3401      	adds	r4, #1
 800bcac:	9304      	str	r3, [sp, #16]
 800bcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb2:	4826      	ldr	r0, [pc, #152]	; (800bd4c <_svfiprintf_r+0x1f0>)
 800bcb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcb8:	2206      	movs	r2, #6
 800bcba:	f7f4 fab1 	bl	8000220 <memchr>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d038      	beq.n	800bd34 <_svfiprintf_r+0x1d8>
 800bcc2:	4b23      	ldr	r3, [pc, #140]	; (800bd50 <_svfiprintf_r+0x1f4>)
 800bcc4:	bb1b      	cbnz	r3, 800bd0e <_svfiprintf_r+0x1b2>
 800bcc6:	9b03      	ldr	r3, [sp, #12]
 800bcc8:	3307      	adds	r3, #7
 800bcca:	f023 0307 	bic.w	r3, r3, #7
 800bcce:	3308      	adds	r3, #8
 800bcd0:	9303      	str	r3, [sp, #12]
 800bcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd4:	4433      	add	r3, r6
 800bcd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd8:	e767      	b.n	800bbaa <_svfiprintf_r+0x4e>
 800bcda:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcde:	460c      	mov	r4, r1
 800bce0:	2001      	movs	r0, #1
 800bce2:	e7a5      	b.n	800bc30 <_svfiprintf_r+0xd4>
 800bce4:	2300      	movs	r3, #0
 800bce6:	3401      	adds	r4, #1
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	4619      	mov	r1, r3
 800bcec:	f04f 0c0a 	mov.w	ip, #10
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcf6:	3a30      	subs	r2, #48	; 0x30
 800bcf8:	2a09      	cmp	r2, #9
 800bcfa:	d903      	bls.n	800bd04 <_svfiprintf_r+0x1a8>
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0c5      	beq.n	800bc8c <_svfiprintf_r+0x130>
 800bd00:	9105      	str	r1, [sp, #20]
 800bd02:	e7c3      	b.n	800bc8c <_svfiprintf_r+0x130>
 800bd04:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd08:	4604      	mov	r4, r0
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e7f0      	b.n	800bcf0 <_svfiprintf_r+0x194>
 800bd0e:	ab03      	add	r3, sp, #12
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	462a      	mov	r2, r5
 800bd14:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <_svfiprintf_r+0x1f8>)
 800bd16:	a904      	add	r1, sp, #16
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f7fc f98d 	bl	8008038 <_printf_float>
 800bd1e:	1c42      	adds	r2, r0, #1
 800bd20:	4606      	mov	r6, r0
 800bd22:	d1d6      	bne.n	800bcd2 <_svfiprintf_r+0x176>
 800bd24:	89ab      	ldrh	r3, [r5, #12]
 800bd26:	065b      	lsls	r3, r3, #25
 800bd28:	f53f af2c 	bmi.w	800bb84 <_svfiprintf_r+0x28>
 800bd2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd2e:	b01d      	add	sp, #116	; 0x74
 800bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd34:	ab03      	add	r3, sp, #12
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	462a      	mov	r2, r5
 800bd3a:	4b06      	ldr	r3, [pc, #24]	; (800bd54 <_svfiprintf_r+0x1f8>)
 800bd3c:	a904      	add	r1, sp, #16
 800bd3e:	4638      	mov	r0, r7
 800bd40:	f7fc fc1e 	bl	8008580 <_printf_i>
 800bd44:	e7eb      	b.n	800bd1e <_svfiprintf_r+0x1c2>
 800bd46:	bf00      	nop
 800bd48:	0800d4c4 	.word	0x0800d4c4
 800bd4c:	0800d4ce 	.word	0x0800d4ce
 800bd50:	08008039 	.word	0x08008039
 800bd54:	0800baa5 	.word	0x0800baa5
 800bd58:	0800d4ca 	.word	0x0800d4ca

0800bd5c <_sungetc_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	1c4b      	adds	r3, r1, #1
 800bd60:	4614      	mov	r4, r2
 800bd62:	d103      	bne.n	800bd6c <_sungetc_r+0x10>
 800bd64:	f04f 35ff 	mov.w	r5, #4294967295
 800bd68:	4628      	mov	r0, r5
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	8993      	ldrh	r3, [r2, #12]
 800bd6e:	f023 0320 	bic.w	r3, r3, #32
 800bd72:	8193      	strh	r3, [r2, #12]
 800bd74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd76:	6852      	ldr	r2, [r2, #4]
 800bd78:	b2cd      	uxtb	r5, r1
 800bd7a:	b18b      	cbz	r3, 800bda0 <_sungetc_r+0x44>
 800bd7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	dd08      	ble.n	800bd94 <_sungetc_r+0x38>
 800bd82:	6823      	ldr	r3, [r4, #0]
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	6022      	str	r2, [r4, #0]
 800bd88:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	e7e9      	b.n	800bd68 <_sungetc_r+0xc>
 800bd94:	4621      	mov	r1, r4
 800bd96:	f000 fbf5 	bl	800c584 <__submore>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d0f1      	beq.n	800bd82 <_sungetc_r+0x26>
 800bd9e:	e7e1      	b.n	800bd64 <_sungetc_r+0x8>
 800bda0:	6921      	ldr	r1, [r4, #16]
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	b151      	cbz	r1, 800bdbc <_sungetc_r+0x60>
 800bda6:	4299      	cmp	r1, r3
 800bda8:	d208      	bcs.n	800bdbc <_sungetc_r+0x60>
 800bdaa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bdae:	42a9      	cmp	r1, r5
 800bdb0:	d104      	bne.n	800bdbc <_sungetc_r+0x60>
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	3201      	adds	r2, #1
 800bdb6:	6023      	str	r3, [r4, #0]
 800bdb8:	6062      	str	r2, [r4, #4]
 800bdba:	e7d5      	b.n	800bd68 <_sungetc_r+0xc>
 800bdbc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bdc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc4:	6363      	str	r3, [r4, #52]	; 0x34
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdca:	4623      	mov	r3, r4
 800bdcc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bdd0:	6023      	str	r3, [r4, #0]
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e7dc      	b.n	800bd90 <_sungetc_r+0x34>

0800bdd6 <__ssrefill_r>:
 800bdd6:	b510      	push	{r4, lr}
 800bdd8:	460c      	mov	r4, r1
 800bdda:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bddc:	b169      	cbz	r1, 800bdfa <__ssrefill_r+0x24>
 800bdde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bde2:	4299      	cmp	r1, r3
 800bde4:	d001      	beq.n	800bdea <__ssrefill_r+0x14>
 800bde6:	f7ff fdb3 	bl	800b950 <_free_r>
 800bdea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdec:	6063      	str	r3, [r4, #4]
 800bdee:	2000      	movs	r0, #0
 800bdf0:	6360      	str	r0, [r4, #52]	; 0x34
 800bdf2:	b113      	cbz	r3, 800bdfa <__ssrefill_r+0x24>
 800bdf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdf6:	6023      	str	r3, [r4, #0]
 800bdf8:	bd10      	pop	{r4, pc}
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	6063      	str	r3, [r4, #4]
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f043 0320 	orr.w	r3, r3, #32
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
 800be0e:	e7f3      	b.n	800bdf8 <__ssrefill_r+0x22>

0800be10 <__ssvfiscanf_r>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	460c      	mov	r4, r1
 800be16:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800be1a:	2100      	movs	r1, #0
 800be1c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800be20:	49b2      	ldr	r1, [pc, #712]	; (800c0ec <__ssvfiscanf_r+0x2dc>)
 800be22:	91a0      	str	r1, [sp, #640]	; 0x280
 800be24:	f10d 0804 	add.w	r8, sp, #4
 800be28:	49b1      	ldr	r1, [pc, #708]	; (800c0f0 <__ssvfiscanf_r+0x2e0>)
 800be2a:	4fb2      	ldr	r7, [pc, #712]	; (800c0f4 <__ssvfiscanf_r+0x2e4>)
 800be2c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c0f8 <__ssvfiscanf_r+0x2e8>
 800be30:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800be34:	4606      	mov	r6, r0
 800be36:	91a1      	str	r1, [sp, #644]	; 0x284
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	f892 a000 	ldrb.w	sl, [r2]
 800be3e:	f1ba 0f00 	cmp.w	sl, #0
 800be42:	f000 8151 	beq.w	800c0e8 <__ssvfiscanf_r+0x2d8>
 800be46:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800be4a:	f013 0308 	ands.w	r3, r3, #8
 800be4e:	f102 0501 	add.w	r5, r2, #1
 800be52:	d019      	beq.n	800be88 <__ssvfiscanf_r+0x78>
 800be54:	6863      	ldr	r3, [r4, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	dd0f      	ble.n	800be7a <__ssvfiscanf_r+0x6a>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	781a      	ldrb	r2, [r3, #0]
 800be5e:	5cba      	ldrb	r2, [r7, r2]
 800be60:	0712      	lsls	r2, r2, #28
 800be62:	d401      	bmi.n	800be68 <__ssvfiscanf_r+0x58>
 800be64:	462a      	mov	r2, r5
 800be66:	e7e8      	b.n	800be3a <__ssvfiscanf_r+0x2a>
 800be68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800be6a:	3201      	adds	r2, #1
 800be6c:	9245      	str	r2, [sp, #276]	; 0x114
 800be6e:	6862      	ldr	r2, [r4, #4]
 800be70:	3301      	adds	r3, #1
 800be72:	3a01      	subs	r2, #1
 800be74:	6062      	str	r2, [r4, #4]
 800be76:	6023      	str	r3, [r4, #0]
 800be78:	e7ec      	b.n	800be54 <__ssvfiscanf_r+0x44>
 800be7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be7c:	4621      	mov	r1, r4
 800be7e:	4630      	mov	r0, r6
 800be80:	4798      	blx	r3
 800be82:	2800      	cmp	r0, #0
 800be84:	d0e9      	beq.n	800be5a <__ssvfiscanf_r+0x4a>
 800be86:	e7ed      	b.n	800be64 <__ssvfiscanf_r+0x54>
 800be88:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800be8c:	f040 8083 	bne.w	800bf96 <__ssvfiscanf_r+0x186>
 800be90:	9341      	str	r3, [sp, #260]	; 0x104
 800be92:	9343      	str	r3, [sp, #268]	; 0x10c
 800be94:	7853      	ldrb	r3, [r2, #1]
 800be96:	2b2a      	cmp	r3, #42	; 0x2a
 800be98:	bf02      	ittt	eq
 800be9a:	2310      	moveq	r3, #16
 800be9c:	1c95      	addeq	r5, r2, #2
 800be9e:	9341      	streq	r3, [sp, #260]	; 0x104
 800bea0:	220a      	movs	r2, #10
 800bea2:	46ab      	mov	fp, r5
 800bea4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bea8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800beac:	2b09      	cmp	r3, #9
 800beae:	d91d      	bls.n	800beec <__ssvfiscanf_r+0xdc>
 800beb0:	4891      	ldr	r0, [pc, #580]	; (800c0f8 <__ssvfiscanf_r+0x2e8>)
 800beb2:	2203      	movs	r2, #3
 800beb4:	f7f4 f9b4 	bl	8000220 <memchr>
 800beb8:	b140      	cbz	r0, 800becc <__ssvfiscanf_r+0xbc>
 800beba:	2301      	movs	r3, #1
 800bebc:	eba0 0009 	sub.w	r0, r0, r9
 800bec0:	fa03 f000 	lsl.w	r0, r3, r0
 800bec4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bec6:	4318      	orrs	r0, r3
 800bec8:	9041      	str	r0, [sp, #260]	; 0x104
 800beca:	465d      	mov	r5, fp
 800becc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bed0:	2b78      	cmp	r3, #120	; 0x78
 800bed2:	d806      	bhi.n	800bee2 <__ssvfiscanf_r+0xd2>
 800bed4:	2b57      	cmp	r3, #87	; 0x57
 800bed6:	d810      	bhi.n	800befa <__ssvfiscanf_r+0xea>
 800bed8:	2b25      	cmp	r3, #37	; 0x25
 800beda:	d05c      	beq.n	800bf96 <__ssvfiscanf_r+0x186>
 800bedc:	d856      	bhi.n	800bf8c <__ssvfiscanf_r+0x17c>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d074      	beq.n	800bfcc <__ssvfiscanf_r+0x1bc>
 800bee2:	2303      	movs	r3, #3
 800bee4:	9347      	str	r3, [sp, #284]	; 0x11c
 800bee6:	230a      	movs	r3, #10
 800bee8:	9342      	str	r3, [sp, #264]	; 0x108
 800beea:	e081      	b.n	800bff0 <__ssvfiscanf_r+0x1e0>
 800beec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800beee:	fb02 1303 	mla	r3, r2, r3, r1
 800bef2:	3b30      	subs	r3, #48	; 0x30
 800bef4:	9343      	str	r3, [sp, #268]	; 0x10c
 800bef6:	465d      	mov	r5, fp
 800bef8:	e7d3      	b.n	800bea2 <__ssvfiscanf_r+0x92>
 800befa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800befe:	2a20      	cmp	r2, #32
 800bf00:	d8ef      	bhi.n	800bee2 <__ssvfiscanf_r+0xd2>
 800bf02:	a101      	add	r1, pc, #4	; (adr r1, 800bf08 <__ssvfiscanf_r+0xf8>)
 800bf04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf08:	0800bfdb 	.word	0x0800bfdb
 800bf0c:	0800bee3 	.word	0x0800bee3
 800bf10:	0800bee3 	.word	0x0800bee3
 800bf14:	0800c039 	.word	0x0800c039
 800bf18:	0800bee3 	.word	0x0800bee3
 800bf1c:	0800bee3 	.word	0x0800bee3
 800bf20:	0800bee3 	.word	0x0800bee3
 800bf24:	0800bee3 	.word	0x0800bee3
 800bf28:	0800bee3 	.word	0x0800bee3
 800bf2c:	0800bee3 	.word	0x0800bee3
 800bf30:	0800bee3 	.word	0x0800bee3
 800bf34:	0800c04f 	.word	0x0800c04f
 800bf38:	0800c025 	.word	0x0800c025
 800bf3c:	0800bf93 	.word	0x0800bf93
 800bf40:	0800bf93 	.word	0x0800bf93
 800bf44:	0800bf93 	.word	0x0800bf93
 800bf48:	0800bee3 	.word	0x0800bee3
 800bf4c:	0800c029 	.word	0x0800c029
 800bf50:	0800bee3 	.word	0x0800bee3
 800bf54:	0800bee3 	.word	0x0800bee3
 800bf58:	0800bee3 	.word	0x0800bee3
 800bf5c:	0800bee3 	.word	0x0800bee3
 800bf60:	0800c05f 	.word	0x0800c05f
 800bf64:	0800c031 	.word	0x0800c031
 800bf68:	0800bfd3 	.word	0x0800bfd3
 800bf6c:	0800bee3 	.word	0x0800bee3
 800bf70:	0800bee3 	.word	0x0800bee3
 800bf74:	0800c05b 	.word	0x0800c05b
 800bf78:	0800bee3 	.word	0x0800bee3
 800bf7c:	0800c025 	.word	0x0800c025
 800bf80:	0800bee3 	.word	0x0800bee3
 800bf84:	0800bee3 	.word	0x0800bee3
 800bf88:	0800bfdb 	.word	0x0800bfdb
 800bf8c:	3b45      	subs	r3, #69	; 0x45
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d8a7      	bhi.n	800bee2 <__ssvfiscanf_r+0xd2>
 800bf92:	2305      	movs	r3, #5
 800bf94:	e02b      	b.n	800bfee <__ssvfiscanf_r+0x1de>
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	dd0d      	ble.n	800bfb8 <__ssvfiscanf_r+0x1a8>
 800bf9c:	6823      	ldr	r3, [r4, #0]
 800bf9e:	781a      	ldrb	r2, [r3, #0]
 800bfa0:	4552      	cmp	r2, sl
 800bfa2:	f040 80a1 	bne.w	800c0e8 <__ssvfiscanf_r+0x2d8>
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	6862      	ldr	r2, [r4, #4]
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bfae:	3a01      	subs	r2, #1
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	6062      	str	r2, [r4, #4]
 800bfb4:	9345      	str	r3, [sp, #276]	; 0x114
 800bfb6:	e755      	b.n	800be64 <__ssvfiscanf_r+0x54>
 800bfb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bfba:	4621      	mov	r1, r4
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4798      	blx	r3
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d0eb      	beq.n	800bf9c <__ssvfiscanf_r+0x18c>
 800bfc4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	f040 8084 	bne.w	800c0d4 <__ssvfiscanf_r+0x2c4>
 800bfcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd0:	e086      	b.n	800c0e0 <__ssvfiscanf_r+0x2d0>
 800bfd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfd4:	f042 0220 	orr.w	r2, r2, #32
 800bfd8:	9241      	str	r2, [sp, #260]	; 0x104
 800bfda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfe0:	9241      	str	r2, [sp, #260]	; 0x104
 800bfe2:	2210      	movs	r2, #16
 800bfe4:	2b6f      	cmp	r3, #111	; 0x6f
 800bfe6:	9242      	str	r2, [sp, #264]	; 0x108
 800bfe8:	bf34      	ite	cc
 800bfea:	2303      	movcc	r3, #3
 800bfec:	2304      	movcs	r3, #4
 800bfee:	9347      	str	r3, [sp, #284]	; 0x11c
 800bff0:	6863      	ldr	r3, [r4, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dd41      	ble.n	800c07a <__ssvfiscanf_r+0x26a>
 800bff6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bff8:	0659      	lsls	r1, r3, #25
 800bffa:	d404      	bmi.n	800c006 <__ssvfiscanf_r+0x1f6>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	781a      	ldrb	r2, [r3, #0]
 800c000:	5cba      	ldrb	r2, [r7, r2]
 800c002:	0712      	lsls	r2, r2, #28
 800c004:	d440      	bmi.n	800c088 <__ssvfiscanf_r+0x278>
 800c006:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c008:	2b02      	cmp	r3, #2
 800c00a:	dc4f      	bgt.n	800c0ac <__ssvfiscanf_r+0x29c>
 800c00c:	466b      	mov	r3, sp
 800c00e:	4622      	mov	r2, r4
 800c010:	a941      	add	r1, sp, #260	; 0x104
 800c012:	4630      	mov	r0, r6
 800c014:	f000 f874 	bl	800c100 <_scanf_chars>
 800c018:	2801      	cmp	r0, #1
 800c01a:	d065      	beq.n	800c0e8 <__ssvfiscanf_r+0x2d8>
 800c01c:	2802      	cmp	r0, #2
 800c01e:	f47f af21 	bne.w	800be64 <__ssvfiscanf_r+0x54>
 800c022:	e7cf      	b.n	800bfc4 <__ssvfiscanf_r+0x1b4>
 800c024:	220a      	movs	r2, #10
 800c026:	e7dd      	b.n	800bfe4 <__ssvfiscanf_r+0x1d4>
 800c028:	2300      	movs	r3, #0
 800c02a:	9342      	str	r3, [sp, #264]	; 0x108
 800c02c:	2303      	movs	r3, #3
 800c02e:	e7de      	b.n	800bfee <__ssvfiscanf_r+0x1de>
 800c030:	2308      	movs	r3, #8
 800c032:	9342      	str	r3, [sp, #264]	; 0x108
 800c034:	2304      	movs	r3, #4
 800c036:	e7da      	b.n	800bfee <__ssvfiscanf_r+0x1de>
 800c038:	4629      	mov	r1, r5
 800c03a:	4640      	mov	r0, r8
 800c03c:	f000 f9d8 	bl	800c3f0 <__sccl>
 800c040:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c046:	9341      	str	r3, [sp, #260]	; 0x104
 800c048:	4605      	mov	r5, r0
 800c04a:	2301      	movs	r3, #1
 800c04c:	e7cf      	b.n	800bfee <__ssvfiscanf_r+0x1de>
 800c04e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c054:	9341      	str	r3, [sp, #260]	; 0x104
 800c056:	2300      	movs	r3, #0
 800c058:	e7c9      	b.n	800bfee <__ssvfiscanf_r+0x1de>
 800c05a:	2302      	movs	r3, #2
 800c05c:	e7c7      	b.n	800bfee <__ssvfiscanf_r+0x1de>
 800c05e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c060:	06c3      	lsls	r3, r0, #27
 800c062:	f53f aeff 	bmi.w	800be64 <__ssvfiscanf_r+0x54>
 800c066:	9b00      	ldr	r3, [sp, #0]
 800c068:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c06a:	1d19      	adds	r1, r3, #4
 800c06c:	9100      	str	r1, [sp, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	07c0      	lsls	r0, r0, #31
 800c072:	bf4c      	ite	mi
 800c074:	801a      	strhmi	r2, [r3, #0]
 800c076:	601a      	strpl	r2, [r3, #0]
 800c078:	e6f4      	b.n	800be64 <__ssvfiscanf_r+0x54>
 800c07a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c07c:	4621      	mov	r1, r4
 800c07e:	4630      	mov	r0, r6
 800c080:	4798      	blx	r3
 800c082:	2800      	cmp	r0, #0
 800c084:	d0b7      	beq.n	800bff6 <__ssvfiscanf_r+0x1e6>
 800c086:	e79d      	b.n	800bfc4 <__ssvfiscanf_r+0x1b4>
 800c088:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c08a:	3201      	adds	r2, #1
 800c08c:	9245      	str	r2, [sp, #276]	; 0x114
 800c08e:	6862      	ldr	r2, [r4, #4]
 800c090:	3a01      	subs	r2, #1
 800c092:	2a00      	cmp	r2, #0
 800c094:	6062      	str	r2, [r4, #4]
 800c096:	dd02      	ble.n	800c09e <__ssvfiscanf_r+0x28e>
 800c098:	3301      	adds	r3, #1
 800c09a:	6023      	str	r3, [r4, #0]
 800c09c:	e7ae      	b.n	800bffc <__ssvfiscanf_r+0x1ec>
 800c09e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	4798      	blx	r3
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d0a8      	beq.n	800bffc <__ssvfiscanf_r+0x1ec>
 800c0aa:	e78b      	b.n	800bfc4 <__ssvfiscanf_r+0x1b4>
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	dc06      	bgt.n	800c0be <__ssvfiscanf_r+0x2ae>
 800c0b0:	466b      	mov	r3, sp
 800c0b2:	4622      	mov	r2, r4
 800c0b4:	a941      	add	r1, sp, #260	; 0x104
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f000 f87a 	bl	800c1b0 <_scanf_i>
 800c0bc:	e7ac      	b.n	800c018 <__ssvfiscanf_r+0x208>
 800c0be:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <__ssvfiscanf_r+0x2ec>)
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f43f aecf 	beq.w	800be64 <__ssvfiscanf_r+0x54>
 800c0c6:	466b      	mov	r3, sp
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	a941      	add	r1, sp, #260	; 0x104
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f7fc fb7d 	bl	80087cc <_scanf_float>
 800c0d2:	e7a1      	b.n	800c018 <__ssvfiscanf_r+0x208>
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c0da:	bf18      	it	ne
 800c0dc:	f04f 30ff 	movne.w	r0, #4294967295
 800c0e0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0ea:	e7f9      	b.n	800c0e0 <__ssvfiscanf_r+0x2d0>
 800c0ec:	0800bd5d 	.word	0x0800bd5d
 800c0f0:	0800bdd7 	.word	0x0800bdd7
 800c0f4:	0800d151 	.word	0x0800d151
 800c0f8:	0800d4ca 	.word	0x0800d4ca
 800c0fc:	080087cd 	.word	0x080087cd

0800c100 <_scanf_chars>:
 800c100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c104:	4615      	mov	r5, r2
 800c106:	688a      	ldr	r2, [r1, #8]
 800c108:	4680      	mov	r8, r0
 800c10a:	460c      	mov	r4, r1
 800c10c:	b932      	cbnz	r2, 800c11c <_scanf_chars+0x1c>
 800c10e:	698a      	ldr	r2, [r1, #24]
 800c110:	2a00      	cmp	r2, #0
 800c112:	bf0c      	ite	eq
 800c114:	2201      	moveq	r2, #1
 800c116:	f04f 32ff 	movne.w	r2, #4294967295
 800c11a:	608a      	str	r2, [r1, #8]
 800c11c:	6822      	ldr	r2, [r4, #0]
 800c11e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c1ac <_scanf_chars+0xac>
 800c122:	06d1      	lsls	r1, r2, #27
 800c124:	bf5f      	itttt	pl
 800c126:	681a      	ldrpl	r2, [r3, #0]
 800c128:	1d11      	addpl	r1, r2, #4
 800c12a:	6019      	strpl	r1, [r3, #0]
 800c12c:	6816      	ldrpl	r6, [r2, #0]
 800c12e:	2700      	movs	r7, #0
 800c130:	69a0      	ldr	r0, [r4, #24]
 800c132:	b188      	cbz	r0, 800c158 <_scanf_chars+0x58>
 800c134:	2801      	cmp	r0, #1
 800c136:	d107      	bne.n	800c148 <_scanf_chars+0x48>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	6963      	ldr	r3, [r4, #20]
 800c13e:	5c9b      	ldrb	r3, [r3, r2]
 800c140:	b953      	cbnz	r3, 800c158 <_scanf_chars+0x58>
 800c142:	bb27      	cbnz	r7, 800c18e <_scanf_chars+0x8e>
 800c144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c148:	2802      	cmp	r0, #2
 800c14a:	d120      	bne.n	800c18e <_scanf_chars+0x8e>
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c154:	071b      	lsls	r3, r3, #28
 800c156:	d41a      	bmi.n	800c18e <_scanf_chars+0x8e>
 800c158:	6823      	ldr	r3, [r4, #0]
 800c15a:	06da      	lsls	r2, r3, #27
 800c15c:	bf5e      	ittt	pl
 800c15e:	682b      	ldrpl	r3, [r5, #0]
 800c160:	781b      	ldrbpl	r3, [r3, #0]
 800c162:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c166:	682a      	ldr	r2, [r5, #0]
 800c168:	686b      	ldr	r3, [r5, #4]
 800c16a:	3201      	adds	r2, #1
 800c16c:	602a      	str	r2, [r5, #0]
 800c16e:	68a2      	ldr	r2, [r4, #8]
 800c170:	3b01      	subs	r3, #1
 800c172:	3a01      	subs	r2, #1
 800c174:	606b      	str	r3, [r5, #4]
 800c176:	3701      	adds	r7, #1
 800c178:	60a2      	str	r2, [r4, #8]
 800c17a:	b142      	cbz	r2, 800c18e <_scanf_chars+0x8e>
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	dcd7      	bgt.n	800c130 <_scanf_chars+0x30>
 800c180:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c184:	4629      	mov	r1, r5
 800c186:	4640      	mov	r0, r8
 800c188:	4798      	blx	r3
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d0d0      	beq.n	800c130 <_scanf_chars+0x30>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	f013 0310 	ands.w	r3, r3, #16
 800c194:	d105      	bne.n	800c1a2 <_scanf_chars+0xa2>
 800c196:	68e2      	ldr	r2, [r4, #12]
 800c198:	3201      	adds	r2, #1
 800c19a:	60e2      	str	r2, [r4, #12]
 800c19c:	69a2      	ldr	r2, [r4, #24]
 800c19e:	b102      	cbz	r2, 800c1a2 <_scanf_chars+0xa2>
 800c1a0:	7033      	strb	r3, [r6, #0]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	441f      	add	r7, r3
 800c1a6:	6127      	str	r7, [r4, #16]
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	e7cb      	b.n	800c144 <_scanf_chars+0x44>
 800c1ac:	0800d151 	.word	0x0800d151

0800c1b0 <_scanf_i>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	4698      	mov	r8, r3
 800c1b6:	4b74      	ldr	r3, [pc, #464]	; (800c388 <_scanf_i+0x1d8>)
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	4682      	mov	sl, r0
 800c1bc:	4616      	mov	r6, r2
 800c1be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	ab03      	add	r3, sp, #12
 800c1c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1ca:	4b70      	ldr	r3, [pc, #448]	; (800c38c <_scanf_i+0x1dc>)
 800c1cc:	69a1      	ldr	r1, [r4, #24]
 800c1ce:	4a70      	ldr	r2, [pc, #448]	; (800c390 <_scanf_i+0x1e0>)
 800c1d0:	2903      	cmp	r1, #3
 800c1d2:	bf18      	it	ne
 800c1d4:	461a      	movne	r2, r3
 800c1d6:	68a3      	ldr	r3, [r4, #8]
 800c1d8:	9201      	str	r2, [sp, #4]
 800c1da:	1e5a      	subs	r2, r3, #1
 800c1dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1e0:	bf88      	it	hi
 800c1e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1e6:	4627      	mov	r7, r4
 800c1e8:	bf82      	ittt	hi
 800c1ea:	eb03 0905 	addhi.w	r9, r3, r5
 800c1ee:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1f2:	60a3      	strhi	r3, [r4, #8]
 800c1f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c1f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c1fc:	bf98      	it	ls
 800c1fe:	f04f 0900 	movls.w	r9, #0
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	463d      	mov	r5, r7
 800c206:	f04f 0b00 	mov.w	fp, #0
 800c20a:	6831      	ldr	r1, [r6, #0]
 800c20c:	ab03      	add	r3, sp, #12
 800c20e:	7809      	ldrb	r1, [r1, #0]
 800c210:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c214:	2202      	movs	r2, #2
 800c216:	f7f4 f803 	bl	8000220 <memchr>
 800c21a:	b328      	cbz	r0, 800c268 <_scanf_i+0xb8>
 800c21c:	f1bb 0f01 	cmp.w	fp, #1
 800c220:	d159      	bne.n	800c2d6 <_scanf_i+0x126>
 800c222:	6862      	ldr	r2, [r4, #4]
 800c224:	b92a      	cbnz	r2, 800c232 <_scanf_i+0x82>
 800c226:	6822      	ldr	r2, [r4, #0]
 800c228:	2308      	movs	r3, #8
 800c22a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c22e:	6063      	str	r3, [r4, #4]
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	6822      	ldr	r2, [r4, #0]
 800c234:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c238:	6022      	str	r2, [r4, #0]
 800c23a:	68a2      	ldr	r2, [r4, #8]
 800c23c:	1e51      	subs	r1, r2, #1
 800c23e:	60a1      	str	r1, [r4, #8]
 800c240:	b192      	cbz	r2, 800c268 <_scanf_i+0xb8>
 800c242:	6832      	ldr	r2, [r6, #0]
 800c244:	1c51      	adds	r1, r2, #1
 800c246:	6031      	str	r1, [r6, #0]
 800c248:	7812      	ldrb	r2, [r2, #0]
 800c24a:	f805 2b01 	strb.w	r2, [r5], #1
 800c24e:	6872      	ldr	r2, [r6, #4]
 800c250:	3a01      	subs	r2, #1
 800c252:	2a00      	cmp	r2, #0
 800c254:	6072      	str	r2, [r6, #4]
 800c256:	dc07      	bgt.n	800c268 <_scanf_i+0xb8>
 800c258:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c25c:	4631      	mov	r1, r6
 800c25e:	4650      	mov	r0, sl
 800c260:	4790      	blx	r2
 800c262:	2800      	cmp	r0, #0
 800c264:	f040 8085 	bne.w	800c372 <_scanf_i+0x1c2>
 800c268:	f10b 0b01 	add.w	fp, fp, #1
 800c26c:	f1bb 0f03 	cmp.w	fp, #3
 800c270:	d1cb      	bne.n	800c20a <_scanf_i+0x5a>
 800c272:	6863      	ldr	r3, [r4, #4]
 800c274:	b90b      	cbnz	r3, 800c27a <_scanf_i+0xca>
 800c276:	230a      	movs	r3, #10
 800c278:	6063      	str	r3, [r4, #4]
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	4945      	ldr	r1, [pc, #276]	; (800c394 <_scanf_i+0x1e4>)
 800c27e:	6960      	ldr	r0, [r4, #20]
 800c280:	1ac9      	subs	r1, r1, r3
 800c282:	f000 f8b5 	bl	800c3f0 <__sccl>
 800c286:	f04f 0b00 	mov.w	fp, #0
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	6822      	ldr	r2, [r4, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d03d      	beq.n	800c30e <_scanf_i+0x15e>
 800c292:	6831      	ldr	r1, [r6, #0]
 800c294:	6960      	ldr	r0, [r4, #20]
 800c296:	f891 c000 	ldrb.w	ip, [r1]
 800c29a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d035      	beq.n	800c30e <_scanf_i+0x15e>
 800c2a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c2a6:	d124      	bne.n	800c2f2 <_scanf_i+0x142>
 800c2a8:	0510      	lsls	r0, r2, #20
 800c2aa:	d522      	bpl.n	800c2f2 <_scanf_i+0x142>
 800c2ac:	f10b 0b01 	add.w	fp, fp, #1
 800c2b0:	f1b9 0f00 	cmp.w	r9, #0
 800c2b4:	d003      	beq.n	800c2be <_scanf_i+0x10e>
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	f109 39ff 	add.w	r9, r9, #4294967295
 800c2bc:	60a3      	str	r3, [r4, #8]
 800c2be:	6873      	ldr	r3, [r6, #4]
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	6073      	str	r3, [r6, #4]
 800c2c6:	dd1b      	ble.n	800c300 <_scanf_i+0x150>
 800c2c8:	6833      	ldr	r3, [r6, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	6033      	str	r3, [r6, #0]
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	60a3      	str	r3, [r4, #8]
 800c2d4:	e7d9      	b.n	800c28a <_scanf_i+0xda>
 800c2d6:	f1bb 0f02 	cmp.w	fp, #2
 800c2da:	d1ae      	bne.n	800c23a <_scanf_i+0x8a>
 800c2dc:	6822      	ldr	r2, [r4, #0]
 800c2de:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c2e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c2e6:	d1bf      	bne.n	800c268 <_scanf_i+0xb8>
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2f0:	e7a2      	b.n	800c238 <_scanf_i+0x88>
 800c2f2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c2f6:	6022      	str	r2, [r4, #0]
 800c2f8:	780b      	ldrb	r3, [r1, #0]
 800c2fa:	f805 3b01 	strb.w	r3, [r5], #1
 800c2fe:	e7de      	b.n	800c2be <_scanf_i+0x10e>
 800c300:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c304:	4631      	mov	r1, r6
 800c306:	4650      	mov	r0, sl
 800c308:	4798      	blx	r3
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0df      	beq.n	800c2ce <_scanf_i+0x11e>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	05d9      	lsls	r1, r3, #23
 800c312:	d50d      	bpl.n	800c330 <_scanf_i+0x180>
 800c314:	42bd      	cmp	r5, r7
 800c316:	d909      	bls.n	800c32c <_scanf_i+0x17c>
 800c318:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c31c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c320:	4632      	mov	r2, r6
 800c322:	4650      	mov	r0, sl
 800c324:	4798      	blx	r3
 800c326:	f105 39ff 	add.w	r9, r5, #4294967295
 800c32a:	464d      	mov	r5, r9
 800c32c:	42bd      	cmp	r5, r7
 800c32e:	d028      	beq.n	800c382 <_scanf_i+0x1d2>
 800c330:	6822      	ldr	r2, [r4, #0]
 800c332:	f012 0210 	ands.w	r2, r2, #16
 800c336:	d113      	bne.n	800c360 <_scanf_i+0x1b0>
 800c338:	702a      	strb	r2, [r5, #0]
 800c33a:	6863      	ldr	r3, [r4, #4]
 800c33c:	9e01      	ldr	r6, [sp, #4]
 800c33e:	4639      	mov	r1, r7
 800c340:	4650      	mov	r0, sl
 800c342:	47b0      	blx	r6
 800c344:	f8d8 3000 	ldr.w	r3, [r8]
 800c348:	6821      	ldr	r1, [r4, #0]
 800c34a:	1d1a      	adds	r2, r3, #4
 800c34c:	f8c8 2000 	str.w	r2, [r8]
 800c350:	f011 0f20 	tst.w	r1, #32
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	d00f      	beq.n	800c378 <_scanf_i+0x1c8>
 800c358:	6018      	str	r0, [r3, #0]
 800c35a:	68e3      	ldr	r3, [r4, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	60e3      	str	r3, [r4, #12]
 800c360:	1bed      	subs	r5, r5, r7
 800c362:	44ab      	add	fp, r5
 800c364:	6925      	ldr	r5, [r4, #16]
 800c366:	445d      	add	r5, fp
 800c368:	6125      	str	r5, [r4, #16]
 800c36a:	2000      	movs	r0, #0
 800c36c:	b007      	add	sp, #28
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	f04f 0b00 	mov.w	fp, #0
 800c376:	e7ca      	b.n	800c30e <_scanf_i+0x15e>
 800c378:	07ca      	lsls	r2, r1, #31
 800c37a:	bf4c      	ite	mi
 800c37c:	8018      	strhmi	r0, [r3, #0]
 800c37e:	6018      	strpl	r0, [r3, #0]
 800c380:	e7eb      	b.n	800c35a <_scanf_i+0x1aa>
 800c382:	2001      	movs	r0, #1
 800c384:	e7f2      	b.n	800c36c <_scanf_i+0x1bc>
 800c386:	bf00      	nop
 800c388:	0800d09c 	.word	0x0800d09c
 800c38c:	0800c581 	.word	0x0800c581
 800c390:	08009ae9 	.word	0x08009ae9
 800c394:	0800d4ee 	.word	0x0800d4ee

0800c398 <_read_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d07      	ldr	r5, [pc, #28]	; (800c3b8 <_read_r+0x20>)
 800c39c:	4604      	mov	r4, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	602a      	str	r2, [r5, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f5 ff46 	bl	8002238 <_read>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_read_r+0x1e>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_read_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	200008bc 	.word	0x200008bc
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <nan>:
 800c3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3c8 <nan+0x8>
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	00000000 	.word	0x00000000
 800c3cc:	7ff80000 	.word	0x7ff80000

0800c3d0 <_sbrk_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d06      	ldr	r5, [pc, #24]	; (800c3ec <_sbrk_r+0x1c>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	f7f5 ff9a 	bl	8002314 <_sbrk>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_sbrk_r+0x1a>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_sbrk_r+0x1a>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	200008bc 	.word	0x200008bc

0800c3f0 <__sccl>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	780b      	ldrb	r3, [r1, #0]
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	2b5e      	cmp	r3, #94	; 0x5e
 800c3f8:	bf0b      	itete	eq
 800c3fa:	784b      	ldrbeq	r3, [r1, #1]
 800c3fc:	1c48      	addne	r0, r1, #1
 800c3fe:	1c88      	addeq	r0, r1, #2
 800c400:	2200      	movne	r2, #0
 800c402:	bf08      	it	eq
 800c404:	2201      	moveq	r2, #1
 800c406:	1e61      	subs	r1, r4, #1
 800c408:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c40c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c410:	42a9      	cmp	r1, r5
 800c412:	d1fb      	bne.n	800c40c <__sccl+0x1c>
 800c414:	b90b      	cbnz	r3, 800c41a <__sccl+0x2a>
 800c416:	3801      	subs	r0, #1
 800c418:	bd70      	pop	{r4, r5, r6, pc}
 800c41a:	f082 0101 	eor.w	r1, r2, #1
 800c41e:	54e1      	strb	r1, [r4, r3]
 800c420:	1c42      	adds	r2, r0, #1
 800c422:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c426:	2d2d      	cmp	r5, #45	; 0x2d
 800c428:	f102 36ff 	add.w	r6, r2, #4294967295
 800c42c:	4610      	mov	r0, r2
 800c42e:	d006      	beq.n	800c43e <__sccl+0x4e>
 800c430:	2d5d      	cmp	r5, #93	; 0x5d
 800c432:	d0f1      	beq.n	800c418 <__sccl+0x28>
 800c434:	b90d      	cbnz	r5, 800c43a <__sccl+0x4a>
 800c436:	4630      	mov	r0, r6
 800c438:	e7ee      	b.n	800c418 <__sccl+0x28>
 800c43a:	462b      	mov	r3, r5
 800c43c:	e7ef      	b.n	800c41e <__sccl+0x2e>
 800c43e:	7816      	ldrb	r6, [r2, #0]
 800c440:	2e5d      	cmp	r6, #93	; 0x5d
 800c442:	d0fa      	beq.n	800c43a <__sccl+0x4a>
 800c444:	42b3      	cmp	r3, r6
 800c446:	dcf8      	bgt.n	800c43a <__sccl+0x4a>
 800c448:	4618      	mov	r0, r3
 800c44a:	3001      	adds	r0, #1
 800c44c:	4286      	cmp	r6, r0
 800c44e:	5421      	strb	r1, [r4, r0]
 800c450:	dcfb      	bgt.n	800c44a <__sccl+0x5a>
 800c452:	43d8      	mvns	r0, r3
 800c454:	4430      	add	r0, r6
 800c456:	1c5d      	adds	r5, r3, #1
 800c458:	42b3      	cmp	r3, r6
 800c45a:	bfa8      	it	ge
 800c45c:	2000      	movge	r0, #0
 800c45e:	182b      	adds	r3, r5, r0
 800c460:	3202      	adds	r2, #2
 800c462:	e7de      	b.n	800c422 <__sccl+0x32>

0800c464 <strncmp>:
 800c464:	b510      	push	{r4, lr}
 800c466:	b16a      	cbz	r2, 800c484 <strncmp+0x20>
 800c468:	3901      	subs	r1, #1
 800c46a:	1884      	adds	r4, r0, r2
 800c46c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c470:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c474:	4293      	cmp	r3, r2
 800c476:	d103      	bne.n	800c480 <strncmp+0x1c>
 800c478:	42a0      	cmp	r0, r4
 800c47a:	d001      	beq.n	800c480 <strncmp+0x1c>
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1f5      	bne.n	800c46c <strncmp+0x8>
 800c480:	1a98      	subs	r0, r3, r2
 800c482:	bd10      	pop	{r4, pc}
 800c484:	4610      	mov	r0, r2
 800c486:	e7fc      	b.n	800c482 <strncmp+0x1e>

0800c488 <_strtoul_l.isra.0>:
 800c488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c48c:	4e3b      	ldr	r6, [pc, #236]	; (800c57c <_strtoul_l.isra.0+0xf4>)
 800c48e:	4686      	mov	lr, r0
 800c490:	468c      	mov	ip, r1
 800c492:	4660      	mov	r0, ip
 800c494:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c498:	5da5      	ldrb	r5, [r4, r6]
 800c49a:	f015 0508 	ands.w	r5, r5, #8
 800c49e:	d1f8      	bne.n	800c492 <_strtoul_l.isra.0+0xa>
 800c4a0:	2c2d      	cmp	r4, #45	; 0x2d
 800c4a2:	d134      	bne.n	800c50e <_strtoul_l.isra.0+0x86>
 800c4a4:	f89c 4000 	ldrb.w	r4, [ip]
 800c4a8:	f04f 0801 	mov.w	r8, #1
 800c4ac:	f100 0c02 	add.w	ip, r0, #2
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d05e      	beq.n	800c572 <_strtoul_l.isra.0+0xea>
 800c4b4:	2b10      	cmp	r3, #16
 800c4b6:	d10c      	bne.n	800c4d2 <_strtoul_l.isra.0+0x4a>
 800c4b8:	2c30      	cmp	r4, #48	; 0x30
 800c4ba:	d10a      	bne.n	800c4d2 <_strtoul_l.isra.0+0x4a>
 800c4bc:	f89c 0000 	ldrb.w	r0, [ip]
 800c4c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c4c4:	2858      	cmp	r0, #88	; 0x58
 800c4c6:	d14f      	bne.n	800c568 <_strtoul_l.isra.0+0xe0>
 800c4c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c4cc:	2310      	movs	r3, #16
 800c4ce:	f10c 0c02 	add.w	ip, ip, #2
 800c4d2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4d6:	2500      	movs	r5, #0
 800c4d8:	fbb7 f7f3 	udiv	r7, r7, r3
 800c4dc:	fb03 f907 	mul.w	r9, r3, r7
 800c4e0:	ea6f 0909 	mvn.w	r9, r9
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c4ea:	2e09      	cmp	r6, #9
 800c4ec:	d818      	bhi.n	800c520 <_strtoul_l.isra.0+0x98>
 800c4ee:	4634      	mov	r4, r6
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	dd24      	ble.n	800c53e <_strtoul_l.isra.0+0xb6>
 800c4f4:	2d00      	cmp	r5, #0
 800c4f6:	db1f      	blt.n	800c538 <_strtoul_l.isra.0+0xb0>
 800c4f8:	4287      	cmp	r7, r0
 800c4fa:	d31d      	bcc.n	800c538 <_strtoul_l.isra.0+0xb0>
 800c4fc:	d101      	bne.n	800c502 <_strtoul_l.isra.0+0x7a>
 800c4fe:	45a1      	cmp	r9, r4
 800c500:	db1a      	blt.n	800c538 <_strtoul_l.isra.0+0xb0>
 800c502:	fb00 4003 	mla	r0, r0, r3, r4
 800c506:	2501      	movs	r5, #1
 800c508:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c50c:	e7eb      	b.n	800c4e6 <_strtoul_l.isra.0+0x5e>
 800c50e:	2c2b      	cmp	r4, #43	; 0x2b
 800c510:	bf08      	it	eq
 800c512:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c516:	46a8      	mov	r8, r5
 800c518:	bf08      	it	eq
 800c51a:	f100 0c02 	addeq.w	ip, r0, #2
 800c51e:	e7c7      	b.n	800c4b0 <_strtoul_l.isra.0+0x28>
 800c520:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c524:	2e19      	cmp	r6, #25
 800c526:	d801      	bhi.n	800c52c <_strtoul_l.isra.0+0xa4>
 800c528:	3c37      	subs	r4, #55	; 0x37
 800c52a:	e7e1      	b.n	800c4f0 <_strtoul_l.isra.0+0x68>
 800c52c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c530:	2e19      	cmp	r6, #25
 800c532:	d804      	bhi.n	800c53e <_strtoul_l.isra.0+0xb6>
 800c534:	3c57      	subs	r4, #87	; 0x57
 800c536:	e7db      	b.n	800c4f0 <_strtoul_l.isra.0+0x68>
 800c538:	f04f 35ff 	mov.w	r5, #4294967295
 800c53c:	e7e4      	b.n	800c508 <_strtoul_l.isra.0+0x80>
 800c53e:	2d00      	cmp	r5, #0
 800c540:	da07      	bge.n	800c552 <_strtoul_l.isra.0+0xca>
 800c542:	2322      	movs	r3, #34	; 0x22
 800c544:	f8ce 3000 	str.w	r3, [lr]
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	b942      	cbnz	r2, 800c560 <_strtoul_l.isra.0+0xd8>
 800c54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c552:	f1b8 0f00 	cmp.w	r8, #0
 800c556:	d000      	beq.n	800c55a <_strtoul_l.isra.0+0xd2>
 800c558:	4240      	negs	r0, r0
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	d0f7      	beq.n	800c54e <_strtoul_l.isra.0+0xc6>
 800c55e:	b10d      	cbz	r5, 800c564 <_strtoul_l.isra.0+0xdc>
 800c560:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c564:	6011      	str	r1, [r2, #0]
 800c566:	e7f2      	b.n	800c54e <_strtoul_l.isra.0+0xc6>
 800c568:	2430      	movs	r4, #48	; 0x30
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1b1      	bne.n	800c4d2 <_strtoul_l.isra.0+0x4a>
 800c56e:	2308      	movs	r3, #8
 800c570:	e7af      	b.n	800c4d2 <_strtoul_l.isra.0+0x4a>
 800c572:	2c30      	cmp	r4, #48	; 0x30
 800c574:	d0a2      	beq.n	800c4bc <_strtoul_l.isra.0+0x34>
 800c576:	230a      	movs	r3, #10
 800c578:	e7ab      	b.n	800c4d2 <_strtoul_l.isra.0+0x4a>
 800c57a:	bf00      	nop
 800c57c:	0800d151 	.word	0x0800d151

0800c580 <_strtoul_r>:
 800c580:	f7ff bf82 	b.w	800c488 <_strtoul_l.isra.0>

0800c584 <__submore>:
 800c584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c588:	460c      	mov	r4, r1
 800c58a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c590:	4299      	cmp	r1, r3
 800c592:	d11d      	bne.n	800c5d0 <__submore+0x4c>
 800c594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c598:	f7ff fa2a 	bl	800b9f0 <_malloc_r>
 800c59c:	b918      	cbnz	r0, 800c5a6 <__submore+0x22>
 800c59e:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5aa:	63a3      	str	r3, [r4, #56]	; 0x38
 800c5ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c5b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c5b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c5b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c5ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c5be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c5c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c5c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c5ca:	6020      	str	r0, [r4, #0]
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e7e8      	b.n	800c5a2 <__submore+0x1e>
 800c5d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c5d2:	0077      	lsls	r7, r6, #1
 800c5d4:	463a      	mov	r2, r7
 800c5d6:	f000 fa2d 	bl	800ca34 <_realloc_r>
 800c5da:	4605      	mov	r5, r0
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d0de      	beq.n	800c59e <__submore+0x1a>
 800c5e0:	eb00 0806 	add.w	r8, r0, r6
 800c5e4:	4601      	mov	r1, r0
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	f7fe fcd9 	bl	800afa0 <memcpy>
 800c5ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c5f2:	f8c4 8000 	str.w	r8, [r4]
 800c5f6:	e7e9      	b.n	800c5cc <__submore+0x48>

0800c5f8 <__ascii_wctomb>:
 800c5f8:	b149      	cbz	r1, 800c60e <__ascii_wctomb+0x16>
 800c5fa:	2aff      	cmp	r2, #255	; 0xff
 800c5fc:	bf85      	ittet	hi
 800c5fe:	238a      	movhi	r3, #138	; 0x8a
 800c600:	6003      	strhi	r3, [r0, #0]
 800c602:	700a      	strbls	r2, [r1, #0]
 800c604:	f04f 30ff 	movhi.w	r0, #4294967295
 800c608:	bf98      	it	ls
 800c60a:	2001      	movls	r0, #1
 800c60c:	4770      	bx	lr
 800c60e:	4608      	mov	r0, r1
 800c610:	4770      	bx	lr
	...

0800c614 <__assert_func>:
 800c614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c616:	4614      	mov	r4, r2
 800c618:	461a      	mov	r2, r3
 800c61a:	4b09      	ldr	r3, [pc, #36]	; (800c640 <__assert_func+0x2c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4605      	mov	r5, r0
 800c620:	68d8      	ldr	r0, [r3, #12]
 800c622:	b14c      	cbz	r4, 800c638 <__assert_func+0x24>
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <__assert_func+0x30>)
 800c626:	9100      	str	r1, [sp, #0]
 800c628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c62c:	4906      	ldr	r1, [pc, #24]	; (800c648 <__assert_func+0x34>)
 800c62e:	462b      	mov	r3, r5
 800c630:	f000 f9a6 	bl	800c980 <fiprintf>
 800c634:	f000 fc3e 	bl	800ceb4 <abort>
 800c638:	4b04      	ldr	r3, [pc, #16]	; (800c64c <__assert_func+0x38>)
 800c63a:	461c      	mov	r4, r3
 800c63c:	e7f3      	b.n	800c626 <__assert_func+0x12>
 800c63e:	bf00      	nop
 800c640:	20000074 	.word	0x20000074
 800c644:	0800d4f0 	.word	0x0800d4f0
 800c648:	0800d4fd 	.word	0x0800d4fd
 800c64c:	0800d52b 	.word	0x0800d52b

0800c650 <__sflush_r>:
 800c650:	898a      	ldrh	r2, [r1, #12]
 800c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c656:	4605      	mov	r5, r0
 800c658:	0710      	lsls	r0, r2, #28
 800c65a:	460c      	mov	r4, r1
 800c65c:	d458      	bmi.n	800c710 <__sflush_r+0xc0>
 800c65e:	684b      	ldr	r3, [r1, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	dc05      	bgt.n	800c670 <__sflush_r+0x20>
 800c664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c666:	2b00      	cmp	r3, #0
 800c668:	dc02      	bgt.n	800c670 <__sflush_r+0x20>
 800c66a:	2000      	movs	r0, #0
 800c66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c672:	2e00      	cmp	r6, #0
 800c674:	d0f9      	beq.n	800c66a <__sflush_r+0x1a>
 800c676:	2300      	movs	r3, #0
 800c678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c67c:	682f      	ldr	r7, [r5, #0]
 800c67e:	602b      	str	r3, [r5, #0]
 800c680:	d032      	beq.n	800c6e8 <__sflush_r+0x98>
 800c682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	075a      	lsls	r2, r3, #29
 800c688:	d505      	bpl.n	800c696 <__sflush_r+0x46>
 800c68a:	6863      	ldr	r3, [r4, #4]
 800c68c:	1ac0      	subs	r0, r0, r3
 800c68e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c690:	b10b      	cbz	r3, 800c696 <__sflush_r+0x46>
 800c692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c694:	1ac0      	subs	r0, r0, r3
 800c696:	2300      	movs	r3, #0
 800c698:	4602      	mov	r2, r0
 800c69a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c69c:	6a21      	ldr	r1, [r4, #32]
 800c69e:	4628      	mov	r0, r5
 800c6a0:	47b0      	blx	r6
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	d106      	bne.n	800c6b6 <__sflush_r+0x66>
 800c6a8:	6829      	ldr	r1, [r5, #0]
 800c6aa:	291d      	cmp	r1, #29
 800c6ac:	d82c      	bhi.n	800c708 <__sflush_r+0xb8>
 800c6ae:	4a2a      	ldr	r2, [pc, #168]	; (800c758 <__sflush_r+0x108>)
 800c6b0:	40ca      	lsrs	r2, r1
 800c6b2:	07d6      	lsls	r6, r2, #31
 800c6b4:	d528      	bpl.n	800c708 <__sflush_r+0xb8>
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	6062      	str	r2, [r4, #4]
 800c6ba:	04d9      	lsls	r1, r3, #19
 800c6bc:	6922      	ldr	r2, [r4, #16]
 800c6be:	6022      	str	r2, [r4, #0]
 800c6c0:	d504      	bpl.n	800c6cc <__sflush_r+0x7c>
 800c6c2:	1c42      	adds	r2, r0, #1
 800c6c4:	d101      	bne.n	800c6ca <__sflush_r+0x7a>
 800c6c6:	682b      	ldr	r3, [r5, #0]
 800c6c8:	b903      	cbnz	r3, 800c6cc <__sflush_r+0x7c>
 800c6ca:	6560      	str	r0, [r4, #84]	; 0x54
 800c6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6ce:	602f      	str	r7, [r5, #0]
 800c6d0:	2900      	cmp	r1, #0
 800c6d2:	d0ca      	beq.n	800c66a <__sflush_r+0x1a>
 800c6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6d8:	4299      	cmp	r1, r3
 800c6da:	d002      	beq.n	800c6e2 <__sflush_r+0x92>
 800c6dc:	4628      	mov	r0, r5
 800c6de:	f7ff f937 	bl	800b950 <_free_r>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	6360      	str	r0, [r4, #52]	; 0x34
 800c6e6:	e7c1      	b.n	800c66c <__sflush_r+0x1c>
 800c6e8:	6a21      	ldr	r1, [r4, #32]
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	47b0      	blx	r6
 800c6f0:	1c41      	adds	r1, r0, #1
 800c6f2:	d1c7      	bne.n	800c684 <__sflush_r+0x34>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0c4      	beq.n	800c684 <__sflush_r+0x34>
 800c6fa:	2b1d      	cmp	r3, #29
 800c6fc:	d001      	beq.n	800c702 <__sflush_r+0xb2>
 800c6fe:	2b16      	cmp	r3, #22
 800c700:	d101      	bne.n	800c706 <__sflush_r+0xb6>
 800c702:	602f      	str	r7, [r5, #0]
 800c704:	e7b1      	b.n	800c66a <__sflush_r+0x1a>
 800c706:	89a3      	ldrh	r3, [r4, #12]
 800c708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70c:	81a3      	strh	r3, [r4, #12]
 800c70e:	e7ad      	b.n	800c66c <__sflush_r+0x1c>
 800c710:	690f      	ldr	r7, [r1, #16]
 800c712:	2f00      	cmp	r7, #0
 800c714:	d0a9      	beq.n	800c66a <__sflush_r+0x1a>
 800c716:	0793      	lsls	r3, r2, #30
 800c718:	680e      	ldr	r6, [r1, #0]
 800c71a:	bf08      	it	eq
 800c71c:	694b      	ldreq	r3, [r1, #20]
 800c71e:	600f      	str	r7, [r1, #0]
 800c720:	bf18      	it	ne
 800c722:	2300      	movne	r3, #0
 800c724:	eba6 0807 	sub.w	r8, r6, r7
 800c728:	608b      	str	r3, [r1, #8]
 800c72a:	f1b8 0f00 	cmp.w	r8, #0
 800c72e:	dd9c      	ble.n	800c66a <__sflush_r+0x1a>
 800c730:	6a21      	ldr	r1, [r4, #32]
 800c732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c734:	4643      	mov	r3, r8
 800c736:	463a      	mov	r2, r7
 800c738:	4628      	mov	r0, r5
 800c73a:	47b0      	blx	r6
 800c73c:	2800      	cmp	r0, #0
 800c73e:	dc06      	bgt.n	800c74e <__sflush_r+0xfe>
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	e78e      	b.n	800c66c <__sflush_r+0x1c>
 800c74e:	4407      	add	r7, r0
 800c750:	eba8 0800 	sub.w	r8, r8, r0
 800c754:	e7e9      	b.n	800c72a <__sflush_r+0xda>
 800c756:	bf00      	nop
 800c758:	20400001 	.word	0x20400001

0800c75c <_fflush_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	690b      	ldr	r3, [r1, #16]
 800c760:	4605      	mov	r5, r0
 800c762:	460c      	mov	r4, r1
 800c764:	b913      	cbnz	r3, 800c76c <_fflush_r+0x10>
 800c766:	2500      	movs	r5, #0
 800c768:	4628      	mov	r0, r5
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	b118      	cbz	r0, 800c776 <_fflush_r+0x1a>
 800c76e:	6983      	ldr	r3, [r0, #24]
 800c770:	b90b      	cbnz	r3, 800c776 <_fflush_r+0x1a>
 800c772:	f000 f887 	bl	800c884 <__sinit>
 800c776:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <_fflush_r+0x6c>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	d11b      	bne.n	800c7b4 <_fflush_r+0x58>
 800c77c:	686c      	ldr	r4, [r5, #4]
 800c77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d0ef      	beq.n	800c766 <_fflush_r+0xa>
 800c786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c788:	07d0      	lsls	r0, r2, #31
 800c78a:	d404      	bmi.n	800c796 <_fflush_r+0x3a>
 800c78c:	0599      	lsls	r1, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_fflush_r+0x3a>
 800c790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c792:	f000 f927 	bl	800c9e4 <__retarget_lock_acquire_recursive>
 800c796:	4628      	mov	r0, r5
 800c798:	4621      	mov	r1, r4
 800c79a:	f7ff ff59 	bl	800c650 <__sflush_r>
 800c79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7a0:	07da      	lsls	r2, r3, #31
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	d4e0      	bmi.n	800c768 <_fflush_r+0xc>
 800c7a6:	89a3      	ldrh	r3, [r4, #12]
 800c7a8:	059b      	lsls	r3, r3, #22
 800c7aa:	d4dd      	bmi.n	800c768 <_fflush_r+0xc>
 800c7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ae:	f000 f91a 	bl	800c9e6 <__retarget_lock_release_recursive>
 800c7b2:	e7d9      	b.n	800c768 <_fflush_r+0xc>
 800c7b4:	4b05      	ldr	r3, [pc, #20]	; (800c7cc <_fflush_r+0x70>)
 800c7b6:	429c      	cmp	r4, r3
 800c7b8:	d101      	bne.n	800c7be <_fflush_r+0x62>
 800c7ba:	68ac      	ldr	r4, [r5, #8]
 800c7bc:	e7df      	b.n	800c77e <_fflush_r+0x22>
 800c7be:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <_fflush_r+0x74>)
 800c7c0:	429c      	cmp	r4, r3
 800c7c2:	bf08      	it	eq
 800c7c4:	68ec      	ldreq	r4, [r5, #12]
 800c7c6:	e7da      	b.n	800c77e <_fflush_r+0x22>
 800c7c8:	0800d54c 	.word	0x0800d54c
 800c7cc:	0800d56c 	.word	0x0800d56c
 800c7d0:	0800d52c 	.word	0x0800d52c

0800c7d4 <std>:
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	b510      	push	{r4, lr}
 800c7d8:	4604      	mov	r4, r0
 800c7da:	e9c0 3300 	strd	r3, r3, [r0]
 800c7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7e2:	6083      	str	r3, [r0, #8]
 800c7e4:	8181      	strh	r1, [r0, #12]
 800c7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7e8:	81c2      	strh	r2, [r0, #14]
 800c7ea:	6183      	str	r3, [r0, #24]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	2208      	movs	r2, #8
 800c7f0:	305c      	adds	r0, #92	; 0x5c
 800c7f2:	f7fb fb79 	bl	8007ee8 <memset>
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <std+0x38>)
 800c7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800c7fa:	4b05      	ldr	r3, [pc, #20]	; (800c810 <std+0x3c>)
 800c7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <std+0x40>)
 800c800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c802:	4b05      	ldr	r3, [pc, #20]	; (800c818 <std+0x44>)
 800c804:	6224      	str	r4, [r4, #32]
 800c806:	6323      	str	r3, [r4, #48]	; 0x30
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	bf00      	nop
 800c80c:	08008cf9 	.word	0x08008cf9
 800c810:	08008d1f 	.word	0x08008d1f
 800c814:	08008d57 	.word	0x08008d57
 800c818:	08008d7b 	.word	0x08008d7b

0800c81c <_cleanup_r>:
 800c81c:	4901      	ldr	r1, [pc, #4]	; (800c824 <_cleanup_r+0x8>)
 800c81e:	f000 b8c1 	b.w	800c9a4 <_fwalk_reent>
 800c822:	bf00      	nop
 800c824:	0800c75d 	.word	0x0800c75d

0800c828 <__sfmoreglue>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	1e4a      	subs	r2, r1, #1
 800c82c:	2568      	movs	r5, #104	; 0x68
 800c82e:	4355      	muls	r5, r2
 800c830:	460e      	mov	r6, r1
 800c832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c836:	f7ff f8db 	bl	800b9f0 <_malloc_r>
 800c83a:	4604      	mov	r4, r0
 800c83c:	b140      	cbz	r0, 800c850 <__sfmoreglue+0x28>
 800c83e:	2100      	movs	r1, #0
 800c840:	e9c0 1600 	strd	r1, r6, [r0]
 800c844:	300c      	adds	r0, #12
 800c846:	60a0      	str	r0, [r4, #8]
 800c848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c84c:	f7fb fb4c 	bl	8007ee8 <memset>
 800c850:	4620      	mov	r0, r4
 800c852:	bd70      	pop	{r4, r5, r6, pc}

0800c854 <__sfp_lock_acquire>:
 800c854:	4801      	ldr	r0, [pc, #4]	; (800c85c <__sfp_lock_acquire+0x8>)
 800c856:	f000 b8c5 	b.w	800c9e4 <__retarget_lock_acquire_recursive>
 800c85a:	bf00      	nop
 800c85c:	200008c8 	.word	0x200008c8

0800c860 <__sfp_lock_release>:
 800c860:	4801      	ldr	r0, [pc, #4]	; (800c868 <__sfp_lock_release+0x8>)
 800c862:	f000 b8c0 	b.w	800c9e6 <__retarget_lock_release_recursive>
 800c866:	bf00      	nop
 800c868:	200008c8 	.word	0x200008c8

0800c86c <__sinit_lock_acquire>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__sinit_lock_acquire+0x8>)
 800c86e:	f000 b8b9 	b.w	800c9e4 <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	200008c3 	.word	0x200008c3

0800c878 <__sinit_lock_release>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__sinit_lock_release+0x8>)
 800c87a:	f000 b8b4 	b.w	800c9e6 <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	200008c3 	.word	0x200008c3

0800c884 <__sinit>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	f7ff fff0 	bl	800c86c <__sinit_lock_acquire>
 800c88c:	69a3      	ldr	r3, [r4, #24]
 800c88e:	b11b      	cbz	r3, 800c898 <__sinit+0x14>
 800c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c894:	f7ff bff0 	b.w	800c878 <__sinit_lock_release>
 800c898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c89c:	6523      	str	r3, [r4, #80]	; 0x50
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <__sinit+0x68>)
 800c8a0:	4a13      	ldr	r2, [pc, #76]	; (800c8f0 <__sinit+0x6c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	bf04      	itt	eq
 800c8aa:	2301      	moveq	r3, #1
 800c8ac:	61a3      	streq	r3, [r4, #24]
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 f820 	bl	800c8f4 <__sfp>
 800c8b4:	6060      	str	r0, [r4, #4]
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 f81c 	bl	800c8f4 <__sfp>
 800c8bc:	60a0      	str	r0, [r4, #8]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f818 	bl	800c8f4 <__sfp>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	60e0      	str	r0, [r4, #12]
 800c8c8:	2104      	movs	r1, #4
 800c8ca:	6860      	ldr	r0, [r4, #4]
 800c8cc:	f7ff ff82 	bl	800c7d4 <std>
 800c8d0:	68a0      	ldr	r0, [r4, #8]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	2109      	movs	r1, #9
 800c8d6:	f7ff ff7d 	bl	800c7d4 <std>
 800c8da:	68e0      	ldr	r0, [r4, #12]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	2112      	movs	r1, #18
 800c8e0:	f7ff ff78 	bl	800c7d4 <std>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	61a3      	str	r3, [r4, #24]
 800c8e8:	e7d2      	b.n	800c890 <__sinit+0xc>
 800c8ea:	bf00      	nop
 800c8ec:	0800d0c4 	.word	0x0800d0c4
 800c8f0:	0800c81d 	.word	0x0800c81d

0800c8f4 <__sfp>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	f7ff ffac 	bl	800c854 <__sfp_lock_acquire>
 800c8fc:	4b1e      	ldr	r3, [pc, #120]	; (800c978 <__sfp+0x84>)
 800c8fe:	681e      	ldr	r6, [r3, #0]
 800c900:	69b3      	ldr	r3, [r6, #24]
 800c902:	b913      	cbnz	r3, 800c90a <__sfp+0x16>
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff ffbd 	bl	800c884 <__sinit>
 800c90a:	3648      	adds	r6, #72	; 0x48
 800c90c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c910:	3b01      	subs	r3, #1
 800c912:	d503      	bpl.n	800c91c <__sfp+0x28>
 800c914:	6833      	ldr	r3, [r6, #0]
 800c916:	b30b      	cbz	r3, 800c95c <__sfp+0x68>
 800c918:	6836      	ldr	r6, [r6, #0]
 800c91a:	e7f7      	b.n	800c90c <__sfp+0x18>
 800c91c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c920:	b9d5      	cbnz	r5, 800c958 <__sfp+0x64>
 800c922:	4b16      	ldr	r3, [pc, #88]	; (800c97c <__sfp+0x88>)
 800c924:	60e3      	str	r3, [r4, #12]
 800c926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c92a:	6665      	str	r5, [r4, #100]	; 0x64
 800c92c:	f000 f859 	bl	800c9e2 <__retarget_lock_init_recursive>
 800c930:	f7ff ff96 	bl	800c860 <__sfp_lock_release>
 800c934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c93c:	6025      	str	r5, [r4, #0]
 800c93e:	61a5      	str	r5, [r4, #24]
 800c940:	2208      	movs	r2, #8
 800c942:	4629      	mov	r1, r5
 800c944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c948:	f7fb face 	bl	8007ee8 <memset>
 800c94c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c954:	4620      	mov	r0, r4
 800c956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c958:	3468      	adds	r4, #104	; 0x68
 800c95a:	e7d9      	b.n	800c910 <__sfp+0x1c>
 800c95c:	2104      	movs	r1, #4
 800c95e:	4638      	mov	r0, r7
 800c960:	f7ff ff62 	bl	800c828 <__sfmoreglue>
 800c964:	4604      	mov	r4, r0
 800c966:	6030      	str	r0, [r6, #0]
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1d5      	bne.n	800c918 <__sfp+0x24>
 800c96c:	f7ff ff78 	bl	800c860 <__sfp_lock_release>
 800c970:	230c      	movs	r3, #12
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	e7ee      	b.n	800c954 <__sfp+0x60>
 800c976:	bf00      	nop
 800c978:	0800d0c4 	.word	0x0800d0c4
 800c97c:	ffff0001 	.word	0xffff0001

0800c980 <fiprintf>:
 800c980:	b40e      	push	{r1, r2, r3}
 800c982:	b503      	push	{r0, r1, lr}
 800c984:	4601      	mov	r1, r0
 800c986:	ab03      	add	r3, sp, #12
 800c988:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <fiprintf+0x20>)
 800c98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98e:	6800      	ldr	r0, [r0, #0]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f000 f89f 	bl	800cad4 <_vfiprintf_r>
 800c996:	b002      	add	sp, #8
 800c998:	f85d eb04 	ldr.w	lr, [sp], #4
 800c99c:	b003      	add	sp, #12
 800c99e:	4770      	bx	lr
 800c9a0:	20000074 	.word	0x20000074

0800c9a4 <_fwalk_reent>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	4688      	mov	r8, r1
 800c9ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9b0:	2700      	movs	r7, #0
 800c9b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b6:	f1b9 0901 	subs.w	r9, r9, #1
 800c9ba:	d505      	bpl.n	800c9c8 <_fwalk_reent+0x24>
 800c9bc:	6824      	ldr	r4, [r4, #0]
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d1f7      	bne.n	800c9b2 <_fwalk_reent+0xe>
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c8:	89ab      	ldrh	r3, [r5, #12]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d907      	bls.n	800c9de <_fwalk_reent+0x3a>
 800c9ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	d003      	beq.n	800c9de <_fwalk_reent+0x3a>
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4630      	mov	r0, r6
 800c9da:	47c0      	blx	r8
 800c9dc:	4307      	orrs	r7, r0
 800c9de:	3568      	adds	r5, #104	; 0x68
 800c9e0:	e7e9      	b.n	800c9b6 <_fwalk_reent+0x12>

0800c9e2 <__retarget_lock_init_recursive>:
 800c9e2:	4770      	bx	lr

0800c9e4 <__retarget_lock_acquire_recursive>:
 800c9e4:	4770      	bx	lr

0800c9e6 <__retarget_lock_release_recursive>:
 800c9e6:	4770      	bx	lr

0800c9e8 <memmove>:
 800c9e8:	4288      	cmp	r0, r1
 800c9ea:	b510      	push	{r4, lr}
 800c9ec:	eb01 0402 	add.w	r4, r1, r2
 800c9f0:	d902      	bls.n	800c9f8 <memmove+0x10>
 800c9f2:	4284      	cmp	r4, r0
 800c9f4:	4623      	mov	r3, r4
 800c9f6:	d807      	bhi.n	800ca08 <memmove+0x20>
 800c9f8:	1e43      	subs	r3, r0, #1
 800c9fa:	42a1      	cmp	r1, r4
 800c9fc:	d008      	beq.n	800ca10 <memmove+0x28>
 800c9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca06:	e7f8      	b.n	800c9fa <memmove+0x12>
 800ca08:	4402      	add	r2, r0
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	428a      	cmp	r2, r1
 800ca0e:	d100      	bne.n	800ca12 <memmove+0x2a>
 800ca10:	bd10      	pop	{r4, pc}
 800ca12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca1a:	e7f7      	b.n	800ca0c <memmove+0x24>

0800ca1c <__malloc_lock>:
 800ca1c:	4801      	ldr	r0, [pc, #4]	; (800ca24 <__malloc_lock+0x8>)
 800ca1e:	f7ff bfe1 	b.w	800c9e4 <__retarget_lock_acquire_recursive>
 800ca22:	bf00      	nop
 800ca24:	200008c4 	.word	0x200008c4

0800ca28 <__malloc_unlock>:
 800ca28:	4801      	ldr	r0, [pc, #4]	; (800ca30 <__malloc_unlock+0x8>)
 800ca2a:	f7ff bfdc 	b.w	800c9e6 <__retarget_lock_release_recursive>
 800ca2e:	bf00      	nop
 800ca30:	200008c4 	.word	0x200008c4

0800ca34 <_realloc_r>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	4607      	mov	r7, r0
 800ca38:	4614      	mov	r4, r2
 800ca3a:	460e      	mov	r6, r1
 800ca3c:	b921      	cbnz	r1, 800ca48 <_realloc_r+0x14>
 800ca3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ca42:	4611      	mov	r1, r2
 800ca44:	f7fe bfd4 	b.w	800b9f0 <_malloc_r>
 800ca48:	b922      	cbnz	r2, 800ca54 <_realloc_r+0x20>
 800ca4a:	f7fe ff81 	bl	800b950 <_free_r>
 800ca4e:	4625      	mov	r5, r4
 800ca50:	4628      	mov	r0, r5
 800ca52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca54:	f000 fa9a 	bl	800cf8c <_malloc_usable_size_r>
 800ca58:	42a0      	cmp	r0, r4
 800ca5a:	d20f      	bcs.n	800ca7c <_realloc_r+0x48>
 800ca5c:	4621      	mov	r1, r4
 800ca5e:	4638      	mov	r0, r7
 800ca60:	f7fe ffc6 	bl	800b9f0 <_malloc_r>
 800ca64:	4605      	mov	r5, r0
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d0f2      	beq.n	800ca50 <_realloc_r+0x1c>
 800ca6a:	4631      	mov	r1, r6
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	f7fe fa97 	bl	800afa0 <memcpy>
 800ca72:	4631      	mov	r1, r6
 800ca74:	4638      	mov	r0, r7
 800ca76:	f7fe ff6b 	bl	800b950 <_free_r>
 800ca7a:	e7e9      	b.n	800ca50 <_realloc_r+0x1c>
 800ca7c:	4635      	mov	r5, r6
 800ca7e:	e7e7      	b.n	800ca50 <_realloc_r+0x1c>

0800ca80 <__sfputc_r>:
 800ca80:	6893      	ldr	r3, [r2, #8]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	b410      	push	{r4}
 800ca88:	6093      	str	r3, [r2, #8]
 800ca8a:	da08      	bge.n	800ca9e <__sfputc_r+0x1e>
 800ca8c:	6994      	ldr	r4, [r2, #24]
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	db01      	blt.n	800ca96 <__sfputc_r+0x16>
 800ca92:	290a      	cmp	r1, #10
 800ca94:	d103      	bne.n	800ca9e <__sfputc_r+0x1e>
 800ca96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca9a:	f000 b94b 	b.w	800cd34 <__swbuf_r>
 800ca9e:	6813      	ldr	r3, [r2, #0]
 800caa0:	1c58      	adds	r0, r3, #1
 800caa2:	6010      	str	r0, [r2, #0]
 800caa4:	7019      	strb	r1, [r3, #0]
 800caa6:	4608      	mov	r0, r1
 800caa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caac:	4770      	bx	lr

0800caae <__sfputs_r>:
 800caae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	4614      	mov	r4, r2
 800cab6:	18d5      	adds	r5, r2, r3
 800cab8:	42ac      	cmp	r4, r5
 800caba:	d101      	bne.n	800cac0 <__sfputs_r+0x12>
 800cabc:	2000      	movs	r0, #0
 800cabe:	e007      	b.n	800cad0 <__sfputs_r+0x22>
 800cac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cac4:	463a      	mov	r2, r7
 800cac6:	4630      	mov	r0, r6
 800cac8:	f7ff ffda 	bl	800ca80 <__sfputc_r>
 800cacc:	1c43      	adds	r3, r0, #1
 800cace:	d1f3      	bne.n	800cab8 <__sfputs_r+0xa>
 800cad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cad4 <_vfiprintf_r>:
 800cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	460d      	mov	r5, r1
 800cada:	b09d      	sub	sp, #116	; 0x74
 800cadc:	4614      	mov	r4, r2
 800cade:	4698      	mov	r8, r3
 800cae0:	4606      	mov	r6, r0
 800cae2:	b118      	cbz	r0, 800caec <_vfiprintf_r+0x18>
 800cae4:	6983      	ldr	r3, [r0, #24]
 800cae6:	b90b      	cbnz	r3, 800caec <_vfiprintf_r+0x18>
 800cae8:	f7ff fecc 	bl	800c884 <__sinit>
 800caec:	4b89      	ldr	r3, [pc, #548]	; (800cd14 <_vfiprintf_r+0x240>)
 800caee:	429d      	cmp	r5, r3
 800caf0:	d11b      	bne.n	800cb2a <_vfiprintf_r+0x56>
 800caf2:	6875      	ldr	r5, [r6, #4]
 800caf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caf6:	07d9      	lsls	r1, r3, #31
 800caf8:	d405      	bmi.n	800cb06 <_vfiprintf_r+0x32>
 800cafa:	89ab      	ldrh	r3, [r5, #12]
 800cafc:	059a      	lsls	r2, r3, #22
 800cafe:	d402      	bmi.n	800cb06 <_vfiprintf_r+0x32>
 800cb00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb02:	f7ff ff6f 	bl	800c9e4 <__retarget_lock_acquire_recursive>
 800cb06:	89ab      	ldrh	r3, [r5, #12]
 800cb08:	071b      	lsls	r3, r3, #28
 800cb0a:	d501      	bpl.n	800cb10 <_vfiprintf_r+0x3c>
 800cb0c:	692b      	ldr	r3, [r5, #16]
 800cb0e:	b9eb      	cbnz	r3, 800cb4c <_vfiprintf_r+0x78>
 800cb10:	4629      	mov	r1, r5
 800cb12:	4630      	mov	r0, r6
 800cb14:	f000 f960 	bl	800cdd8 <__swsetup_r>
 800cb18:	b1c0      	cbz	r0, 800cb4c <_vfiprintf_r+0x78>
 800cb1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb1c:	07dc      	lsls	r4, r3, #31
 800cb1e:	d50e      	bpl.n	800cb3e <_vfiprintf_r+0x6a>
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295
 800cb24:	b01d      	add	sp, #116	; 0x74
 800cb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2a:	4b7b      	ldr	r3, [pc, #492]	; (800cd18 <_vfiprintf_r+0x244>)
 800cb2c:	429d      	cmp	r5, r3
 800cb2e:	d101      	bne.n	800cb34 <_vfiprintf_r+0x60>
 800cb30:	68b5      	ldr	r5, [r6, #8]
 800cb32:	e7df      	b.n	800caf4 <_vfiprintf_r+0x20>
 800cb34:	4b79      	ldr	r3, [pc, #484]	; (800cd1c <_vfiprintf_r+0x248>)
 800cb36:	429d      	cmp	r5, r3
 800cb38:	bf08      	it	eq
 800cb3a:	68f5      	ldreq	r5, [r6, #12]
 800cb3c:	e7da      	b.n	800caf4 <_vfiprintf_r+0x20>
 800cb3e:	89ab      	ldrh	r3, [r5, #12]
 800cb40:	0598      	lsls	r0, r3, #22
 800cb42:	d4ed      	bmi.n	800cb20 <_vfiprintf_r+0x4c>
 800cb44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb46:	f7ff ff4e 	bl	800c9e6 <__retarget_lock_release_recursive>
 800cb4a:	e7e9      	b.n	800cb20 <_vfiprintf_r+0x4c>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb50:	2320      	movs	r3, #32
 800cb52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb56:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb5a:	2330      	movs	r3, #48	; 0x30
 800cb5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd20 <_vfiprintf_r+0x24c>
 800cb60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb64:	f04f 0901 	mov.w	r9, #1
 800cb68:	4623      	mov	r3, r4
 800cb6a:	469a      	mov	sl, r3
 800cb6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb70:	b10a      	cbz	r2, 800cb76 <_vfiprintf_r+0xa2>
 800cb72:	2a25      	cmp	r2, #37	; 0x25
 800cb74:	d1f9      	bne.n	800cb6a <_vfiprintf_r+0x96>
 800cb76:	ebba 0b04 	subs.w	fp, sl, r4
 800cb7a:	d00b      	beq.n	800cb94 <_vfiprintf_r+0xc0>
 800cb7c:	465b      	mov	r3, fp
 800cb7e:	4622      	mov	r2, r4
 800cb80:	4629      	mov	r1, r5
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7ff ff93 	bl	800caae <__sfputs_r>
 800cb88:	3001      	adds	r0, #1
 800cb8a:	f000 80aa 	beq.w	800cce2 <_vfiprintf_r+0x20e>
 800cb8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb90:	445a      	add	r2, fp
 800cb92:	9209      	str	r2, [sp, #36]	; 0x24
 800cb94:	f89a 3000 	ldrb.w	r3, [sl]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f000 80a2 	beq.w	800cce2 <_vfiprintf_r+0x20e>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f04f 32ff 	mov.w	r2, #4294967295
 800cba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba8:	f10a 0a01 	add.w	sl, sl, #1
 800cbac:	9304      	str	r3, [sp, #16]
 800cbae:	9307      	str	r3, [sp, #28]
 800cbb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbb4:	931a      	str	r3, [sp, #104]	; 0x68
 800cbb6:	4654      	mov	r4, sl
 800cbb8:	2205      	movs	r2, #5
 800cbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbbe:	4858      	ldr	r0, [pc, #352]	; (800cd20 <_vfiprintf_r+0x24c>)
 800cbc0:	f7f3 fb2e 	bl	8000220 <memchr>
 800cbc4:	9a04      	ldr	r2, [sp, #16]
 800cbc6:	b9d8      	cbnz	r0, 800cc00 <_vfiprintf_r+0x12c>
 800cbc8:	06d1      	lsls	r1, r2, #27
 800cbca:	bf44      	itt	mi
 800cbcc:	2320      	movmi	r3, #32
 800cbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd2:	0713      	lsls	r3, r2, #28
 800cbd4:	bf44      	itt	mi
 800cbd6:	232b      	movmi	r3, #43	; 0x2b
 800cbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe2:	d015      	beq.n	800cc10 <_vfiprintf_r+0x13c>
 800cbe4:	9a07      	ldr	r2, [sp, #28]
 800cbe6:	4654      	mov	r4, sl
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f04f 0c0a 	mov.w	ip, #10
 800cbee:	4621      	mov	r1, r4
 800cbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf4:	3b30      	subs	r3, #48	; 0x30
 800cbf6:	2b09      	cmp	r3, #9
 800cbf8:	d94e      	bls.n	800cc98 <_vfiprintf_r+0x1c4>
 800cbfa:	b1b0      	cbz	r0, 800cc2a <_vfiprintf_r+0x156>
 800cbfc:	9207      	str	r2, [sp, #28]
 800cbfe:	e014      	b.n	800cc2a <_vfiprintf_r+0x156>
 800cc00:	eba0 0308 	sub.w	r3, r0, r8
 800cc04:	fa09 f303 	lsl.w	r3, r9, r3
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	9304      	str	r3, [sp, #16]
 800cc0c:	46a2      	mov	sl, r4
 800cc0e:	e7d2      	b.n	800cbb6 <_vfiprintf_r+0xe2>
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	1d19      	adds	r1, r3, #4
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	9103      	str	r1, [sp, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	bfbb      	ittet	lt
 800cc1c:	425b      	neglt	r3, r3
 800cc1e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc22:	9307      	strge	r3, [sp, #28]
 800cc24:	9307      	strlt	r3, [sp, #28]
 800cc26:	bfb8      	it	lt
 800cc28:	9204      	strlt	r2, [sp, #16]
 800cc2a:	7823      	ldrb	r3, [r4, #0]
 800cc2c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc2e:	d10c      	bne.n	800cc4a <_vfiprintf_r+0x176>
 800cc30:	7863      	ldrb	r3, [r4, #1]
 800cc32:	2b2a      	cmp	r3, #42	; 0x2a
 800cc34:	d135      	bne.n	800cca2 <_vfiprintf_r+0x1ce>
 800cc36:	9b03      	ldr	r3, [sp, #12]
 800cc38:	1d1a      	adds	r2, r3, #4
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	9203      	str	r2, [sp, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bfb8      	it	lt
 800cc42:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc46:	3402      	adds	r4, #2
 800cc48:	9305      	str	r3, [sp, #20]
 800cc4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd30 <_vfiprintf_r+0x25c>
 800cc4e:	7821      	ldrb	r1, [r4, #0]
 800cc50:	2203      	movs	r2, #3
 800cc52:	4650      	mov	r0, sl
 800cc54:	f7f3 fae4 	bl	8000220 <memchr>
 800cc58:	b140      	cbz	r0, 800cc6c <_vfiprintf_r+0x198>
 800cc5a:	2340      	movs	r3, #64	; 0x40
 800cc5c:	eba0 000a 	sub.w	r0, r0, sl
 800cc60:	fa03 f000 	lsl.w	r0, r3, r0
 800cc64:	9b04      	ldr	r3, [sp, #16]
 800cc66:	4303      	orrs	r3, r0
 800cc68:	3401      	adds	r4, #1
 800cc6a:	9304      	str	r3, [sp, #16]
 800cc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc70:	482c      	ldr	r0, [pc, #176]	; (800cd24 <_vfiprintf_r+0x250>)
 800cc72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc76:	2206      	movs	r2, #6
 800cc78:	f7f3 fad2 	bl	8000220 <memchr>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	d03f      	beq.n	800cd00 <_vfiprintf_r+0x22c>
 800cc80:	4b29      	ldr	r3, [pc, #164]	; (800cd28 <_vfiprintf_r+0x254>)
 800cc82:	bb1b      	cbnz	r3, 800cccc <_vfiprintf_r+0x1f8>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	3307      	adds	r3, #7
 800cc88:	f023 0307 	bic.w	r3, r3, #7
 800cc8c:	3308      	adds	r3, #8
 800cc8e:	9303      	str	r3, [sp, #12]
 800cc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc92:	443b      	add	r3, r7
 800cc94:	9309      	str	r3, [sp, #36]	; 0x24
 800cc96:	e767      	b.n	800cb68 <_vfiprintf_r+0x94>
 800cc98:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	2001      	movs	r0, #1
 800cca0:	e7a5      	b.n	800cbee <_vfiprintf_r+0x11a>
 800cca2:	2300      	movs	r3, #0
 800cca4:	3401      	adds	r4, #1
 800cca6:	9305      	str	r3, [sp, #20]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	f04f 0c0a 	mov.w	ip, #10
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb4:	3a30      	subs	r2, #48	; 0x30
 800ccb6:	2a09      	cmp	r2, #9
 800ccb8:	d903      	bls.n	800ccc2 <_vfiprintf_r+0x1ee>
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d0c5      	beq.n	800cc4a <_vfiprintf_r+0x176>
 800ccbe:	9105      	str	r1, [sp, #20]
 800ccc0:	e7c3      	b.n	800cc4a <_vfiprintf_r+0x176>
 800ccc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e7f0      	b.n	800ccae <_vfiprintf_r+0x1da>
 800cccc:	ab03      	add	r3, sp, #12
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	462a      	mov	r2, r5
 800ccd2:	4b16      	ldr	r3, [pc, #88]	; (800cd2c <_vfiprintf_r+0x258>)
 800ccd4:	a904      	add	r1, sp, #16
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7fb f9ae 	bl	8008038 <_printf_float>
 800ccdc:	4607      	mov	r7, r0
 800ccde:	1c78      	adds	r0, r7, #1
 800cce0:	d1d6      	bne.n	800cc90 <_vfiprintf_r+0x1bc>
 800cce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cce4:	07d9      	lsls	r1, r3, #31
 800cce6:	d405      	bmi.n	800ccf4 <_vfiprintf_r+0x220>
 800cce8:	89ab      	ldrh	r3, [r5, #12]
 800ccea:	059a      	lsls	r2, r3, #22
 800ccec:	d402      	bmi.n	800ccf4 <_vfiprintf_r+0x220>
 800ccee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccf0:	f7ff fe79 	bl	800c9e6 <__retarget_lock_release_recursive>
 800ccf4:	89ab      	ldrh	r3, [r5, #12]
 800ccf6:	065b      	lsls	r3, r3, #25
 800ccf8:	f53f af12 	bmi.w	800cb20 <_vfiprintf_r+0x4c>
 800ccfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccfe:	e711      	b.n	800cb24 <_vfiprintf_r+0x50>
 800cd00:	ab03      	add	r3, sp, #12
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	462a      	mov	r2, r5
 800cd06:	4b09      	ldr	r3, [pc, #36]	; (800cd2c <_vfiprintf_r+0x258>)
 800cd08:	a904      	add	r1, sp, #16
 800cd0a:	4630      	mov	r0, r6
 800cd0c:	f7fb fc38 	bl	8008580 <_printf_i>
 800cd10:	e7e4      	b.n	800ccdc <_vfiprintf_r+0x208>
 800cd12:	bf00      	nop
 800cd14:	0800d54c 	.word	0x0800d54c
 800cd18:	0800d56c 	.word	0x0800d56c
 800cd1c:	0800d52c 	.word	0x0800d52c
 800cd20:	0800d4c4 	.word	0x0800d4c4
 800cd24:	0800d4ce 	.word	0x0800d4ce
 800cd28:	08008039 	.word	0x08008039
 800cd2c:	0800caaf 	.word	0x0800caaf
 800cd30:	0800d4ca 	.word	0x0800d4ca

0800cd34 <__swbuf_r>:
 800cd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd36:	460e      	mov	r6, r1
 800cd38:	4614      	mov	r4, r2
 800cd3a:	4605      	mov	r5, r0
 800cd3c:	b118      	cbz	r0, 800cd46 <__swbuf_r+0x12>
 800cd3e:	6983      	ldr	r3, [r0, #24]
 800cd40:	b90b      	cbnz	r3, 800cd46 <__swbuf_r+0x12>
 800cd42:	f7ff fd9f 	bl	800c884 <__sinit>
 800cd46:	4b21      	ldr	r3, [pc, #132]	; (800cdcc <__swbuf_r+0x98>)
 800cd48:	429c      	cmp	r4, r3
 800cd4a:	d12b      	bne.n	800cda4 <__swbuf_r+0x70>
 800cd4c:	686c      	ldr	r4, [r5, #4]
 800cd4e:	69a3      	ldr	r3, [r4, #24]
 800cd50:	60a3      	str	r3, [r4, #8]
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	071a      	lsls	r2, r3, #28
 800cd56:	d52f      	bpl.n	800cdb8 <__swbuf_r+0x84>
 800cd58:	6923      	ldr	r3, [r4, #16]
 800cd5a:	b36b      	cbz	r3, 800cdb8 <__swbuf_r+0x84>
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	6820      	ldr	r0, [r4, #0]
 800cd60:	1ac0      	subs	r0, r0, r3
 800cd62:	6963      	ldr	r3, [r4, #20]
 800cd64:	b2f6      	uxtb	r6, r6
 800cd66:	4283      	cmp	r3, r0
 800cd68:	4637      	mov	r7, r6
 800cd6a:	dc04      	bgt.n	800cd76 <__swbuf_r+0x42>
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	4628      	mov	r0, r5
 800cd70:	f7ff fcf4 	bl	800c75c <_fflush_r>
 800cd74:	bb30      	cbnz	r0, 800cdc4 <__swbuf_r+0x90>
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	60a3      	str	r3, [r4, #8]
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	6022      	str	r2, [r4, #0]
 800cd82:	701e      	strb	r6, [r3, #0]
 800cd84:	6963      	ldr	r3, [r4, #20]
 800cd86:	3001      	adds	r0, #1
 800cd88:	4283      	cmp	r3, r0
 800cd8a:	d004      	beq.n	800cd96 <__swbuf_r+0x62>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	07db      	lsls	r3, r3, #31
 800cd90:	d506      	bpl.n	800cda0 <__swbuf_r+0x6c>
 800cd92:	2e0a      	cmp	r6, #10
 800cd94:	d104      	bne.n	800cda0 <__swbuf_r+0x6c>
 800cd96:	4621      	mov	r1, r4
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f7ff fcdf 	bl	800c75c <_fflush_r>
 800cd9e:	b988      	cbnz	r0, 800cdc4 <__swbuf_r+0x90>
 800cda0:	4638      	mov	r0, r7
 800cda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cda4:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <__swbuf_r+0x9c>)
 800cda6:	429c      	cmp	r4, r3
 800cda8:	d101      	bne.n	800cdae <__swbuf_r+0x7a>
 800cdaa:	68ac      	ldr	r4, [r5, #8]
 800cdac:	e7cf      	b.n	800cd4e <__swbuf_r+0x1a>
 800cdae:	4b09      	ldr	r3, [pc, #36]	; (800cdd4 <__swbuf_r+0xa0>)
 800cdb0:	429c      	cmp	r4, r3
 800cdb2:	bf08      	it	eq
 800cdb4:	68ec      	ldreq	r4, [r5, #12]
 800cdb6:	e7ca      	b.n	800cd4e <__swbuf_r+0x1a>
 800cdb8:	4621      	mov	r1, r4
 800cdba:	4628      	mov	r0, r5
 800cdbc:	f000 f80c 	bl	800cdd8 <__swsetup_r>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d0cb      	beq.n	800cd5c <__swbuf_r+0x28>
 800cdc4:	f04f 37ff 	mov.w	r7, #4294967295
 800cdc8:	e7ea      	b.n	800cda0 <__swbuf_r+0x6c>
 800cdca:	bf00      	nop
 800cdcc:	0800d54c 	.word	0x0800d54c
 800cdd0:	0800d56c 	.word	0x0800d56c
 800cdd4:	0800d52c 	.word	0x0800d52c

0800cdd8 <__swsetup_r>:
 800cdd8:	4b32      	ldr	r3, [pc, #200]	; (800cea4 <__swsetup_r+0xcc>)
 800cdda:	b570      	push	{r4, r5, r6, lr}
 800cddc:	681d      	ldr	r5, [r3, #0]
 800cdde:	4606      	mov	r6, r0
 800cde0:	460c      	mov	r4, r1
 800cde2:	b125      	cbz	r5, 800cdee <__swsetup_r+0x16>
 800cde4:	69ab      	ldr	r3, [r5, #24]
 800cde6:	b913      	cbnz	r3, 800cdee <__swsetup_r+0x16>
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7ff fd4b 	bl	800c884 <__sinit>
 800cdee:	4b2e      	ldr	r3, [pc, #184]	; (800cea8 <__swsetup_r+0xd0>)
 800cdf0:	429c      	cmp	r4, r3
 800cdf2:	d10f      	bne.n	800ce14 <__swsetup_r+0x3c>
 800cdf4:	686c      	ldr	r4, [r5, #4]
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdfc:	0719      	lsls	r1, r3, #28
 800cdfe:	d42c      	bmi.n	800ce5a <__swsetup_r+0x82>
 800ce00:	06dd      	lsls	r5, r3, #27
 800ce02:	d411      	bmi.n	800ce28 <__swsetup_r+0x50>
 800ce04:	2309      	movs	r3, #9
 800ce06:	6033      	str	r3, [r6, #0]
 800ce08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce12:	e03e      	b.n	800ce92 <__swsetup_r+0xba>
 800ce14:	4b25      	ldr	r3, [pc, #148]	; (800ceac <__swsetup_r+0xd4>)
 800ce16:	429c      	cmp	r4, r3
 800ce18:	d101      	bne.n	800ce1e <__swsetup_r+0x46>
 800ce1a:	68ac      	ldr	r4, [r5, #8]
 800ce1c:	e7eb      	b.n	800cdf6 <__swsetup_r+0x1e>
 800ce1e:	4b24      	ldr	r3, [pc, #144]	; (800ceb0 <__swsetup_r+0xd8>)
 800ce20:	429c      	cmp	r4, r3
 800ce22:	bf08      	it	eq
 800ce24:	68ec      	ldreq	r4, [r5, #12]
 800ce26:	e7e6      	b.n	800cdf6 <__swsetup_r+0x1e>
 800ce28:	0758      	lsls	r0, r3, #29
 800ce2a:	d512      	bpl.n	800ce52 <__swsetup_r+0x7a>
 800ce2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce2e:	b141      	cbz	r1, 800ce42 <__swsetup_r+0x6a>
 800ce30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce34:	4299      	cmp	r1, r3
 800ce36:	d002      	beq.n	800ce3e <__swsetup_r+0x66>
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f7fe fd89 	bl	800b950 <_free_r>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	6363      	str	r3, [r4, #52]	; 0x34
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	6063      	str	r3, [r4, #4]
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	f043 0308 	orr.w	r3, r3, #8
 800ce58:	81a3      	strh	r3, [r4, #12]
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	b94b      	cbnz	r3, 800ce72 <__swsetup_r+0x9a>
 800ce5e:	89a3      	ldrh	r3, [r4, #12]
 800ce60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce68:	d003      	beq.n	800ce72 <__swsetup_r+0x9a>
 800ce6a:	4621      	mov	r1, r4
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f84d 	bl	800cf0c <__smakebuf_r>
 800ce72:	89a0      	ldrh	r0, [r4, #12]
 800ce74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce78:	f010 0301 	ands.w	r3, r0, #1
 800ce7c:	d00a      	beq.n	800ce94 <__swsetup_r+0xbc>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60a3      	str	r3, [r4, #8]
 800ce82:	6963      	ldr	r3, [r4, #20]
 800ce84:	425b      	negs	r3, r3
 800ce86:	61a3      	str	r3, [r4, #24]
 800ce88:	6923      	ldr	r3, [r4, #16]
 800ce8a:	b943      	cbnz	r3, 800ce9e <__swsetup_r+0xc6>
 800ce8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce90:	d1ba      	bne.n	800ce08 <__swsetup_r+0x30>
 800ce92:	bd70      	pop	{r4, r5, r6, pc}
 800ce94:	0781      	lsls	r1, r0, #30
 800ce96:	bf58      	it	pl
 800ce98:	6963      	ldrpl	r3, [r4, #20]
 800ce9a:	60a3      	str	r3, [r4, #8]
 800ce9c:	e7f4      	b.n	800ce88 <__swsetup_r+0xb0>
 800ce9e:	2000      	movs	r0, #0
 800cea0:	e7f7      	b.n	800ce92 <__swsetup_r+0xba>
 800cea2:	bf00      	nop
 800cea4:	20000074 	.word	0x20000074
 800cea8:	0800d54c 	.word	0x0800d54c
 800ceac:	0800d56c 	.word	0x0800d56c
 800ceb0:	0800d52c 	.word	0x0800d52c

0800ceb4 <abort>:
 800ceb4:	b508      	push	{r3, lr}
 800ceb6:	2006      	movs	r0, #6
 800ceb8:	f000 f898 	bl	800cfec <raise>
 800cebc:	2001      	movs	r0, #1
 800cebe:	f7f5 f9b1 	bl	8002224 <_exit>

0800cec2 <__swhatbuf_r>:
 800cec2:	b570      	push	{r4, r5, r6, lr}
 800cec4:	460e      	mov	r6, r1
 800cec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceca:	2900      	cmp	r1, #0
 800cecc:	b096      	sub	sp, #88	; 0x58
 800cece:	4614      	mov	r4, r2
 800ced0:	461d      	mov	r5, r3
 800ced2:	da07      	bge.n	800cee4 <__swhatbuf_r+0x22>
 800ced4:	2300      	movs	r3, #0
 800ced6:	602b      	str	r3, [r5, #0]
 800ced8:	89b3      	ldrh	r3, [r6, #12]
 800ceda:	061a      	lsls	r2, r3, #24
 800cedc:	d410      	bmi.n	800cf00 <__swhatbuf_r+0x3e>
 800cede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cee2:	e00e      	b.n	800cf02 <__swhatbuf_r+0x40>
 800cee4:	466a      	mov	r2, sp
 800cee6:	f000 f89d 	bl	800d024 <_fstat_r>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	dbf2      	blt.n	800ced4 <__swhatbuf_r+0x12>
 800ceee:	9a01      	ldr	r2, [sp, #4]
 800cef0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cef4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cef8:	425a      	negs	r2, r3
 800cefa:	415a      	adcs	r2, r3
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	e7ee      	b.n	800cede <__swhatbuf_r+0x1c>
 800cf00:	2340      	movs	r3, #64	; 0x40
 800cf02:	2000      	movs	r0, #0
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	b016      	add	sp, #88	; 0x58
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf0c <__smakebuf_r>:
 800cf0c:	898b      	ldrh	r3, [r1, #12]
 800cf0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf10:	079d      	lsls	r5, r3, #30
 800cf12:	4606      	mov	r6, r0
 800cf14:	460c      	mov	r4, r1
 800cf16:	d507      	bpl.n	800cf28 <__smakebuf_r+0x1c>
 800cf18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	6123      	str	r3, [r4, #16]
 800cf20:	2301      	movs	r3, #1
 800cf22:	6163      	str	r3, [r4, #20]
 800cf24:	b002      	add	sp, #8
 800cf26:	bd70      	pop	{r4, r5, r6, pc}
 800cf28:	ab01      	add	r3, sp, #4
 800cf2a:	466a      	mov	r2, sp
 800cf2c:	f7ff ffc9 	bl	800cec2 <__swhatbuf_r>
 800cf30:	9900      	ldr	r1, [sp, #0]
 800cf32:	4605      	mov	r5, r0
 800cf34:	4630      	mov	r0, r6
 800cf36:	f7fe fd5b 	bl	800b9f0 <_malloc_r>
 800cf3a:	b948      	cbnz	r0, 800cf50 <__smakebuf_r+0x44>
 800cf3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf40:	059a      	lsls	r2, r3, #22
 800cf42:	d4ef      	bmi.n	800cf24 <__smakebuf_r+0x18>
 800cf44:	f023 0303 	bic.w	r3, r3, #3
 800cf48:	f043 0302 	orr.w	r3, r3, #2
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	e7e3      	b.n	800cf18 <__smakebuf_r+0xc>
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <__smakebuf_r+0x7c>)
 800cf52:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	6020      	str	r0, [r4, #0]
 800cf58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf5c:	81a3      	strh	r3, [r4, #12]
 800cf5e:	9b00      	ldr	r3, [sp, #0]
 800cf60:	6163      	str	r3, [r4, #20]
 800cf62:	9b01      	ldr	r3, [sp, #4]
 800cf64:	6120      	str	r0, [r4, #16]
 800cf66:	b15b      	cbz	r3, 800cf80 <__smakebuf_r+0x74>
 800cf68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	f000 f86b 	bl	800d048 <_isatty_r>
 800cf72:	b128      	cbz	r0, 800cf80 <__smakebuf_r+0x74>
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	f023 0303 	bic.w	r3, r3, #3
 800cf7a:	f043 0301 	orr.w	r3, r3, #1
 800cf7e:	81a3      	strh	r3, [r4, #12]
 800cf80:	89a0      	ldrh	r0, [r4, #12]
 800cf82:	4305      	orrs	r5, r0
 800cf84:	81a5      	strh	r5, [r4, #12]
 800cf86:	e7cd      	b.n	800cf24 <__smakebuf_r+0x18>
 800cf88:	0800c81d 	.word	0x0800c81d

0800cf8c <_malloc_usable_size_r>:
 800cf8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf90:	1f18      	subs	r0, r3, #4
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	bfbc      	itt	lt
 800cf96:	580b      	ldrlt	r3, [r1, r0]
 800cf98:	18c0      	addlt	r0, r0, r3
 800cf9a:	4770      	bx	lr

0800cf9c <_raise_r>:
 800cf9c:	291f      	cmp	r1, #31
 800cf9e:	b538      	push	{r3, r4, r5, lr}
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	460d      	mov	r5, r1
 800cfa4:	d904      	bls.n	800cfb0 <_raise_r+0x14>
 800cfa6:	2316      	movs	r3, #22
 800cfa8:	6003      	str	r3, [r0, #0]
 800cfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfb2:	b112      	cbz	r2, 800cfba <_raise_r+0x1e>
 800cfb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfb8:	b94b      	cbnz	r3, 800cfce <_raise_r+0x32>
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 f830 	bl	800d020 <_getpid_r>
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	4601      	mov	r1, r0
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfca:	f000 b817 	b.w	800cffc <_kill_r>
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d00a      	beq.n	800cfe8 <_raise_r+0x4c>
 800cfd2:	1c59      	adds	r1, r3, #1
 800cfd4:	d103      	bne.n	800cfde <_raise_r+0x42>
 800cfd6:	2316      	movs	r3, #22
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	2001      	movs	r0, #1
 800cfdc:	e7e7      	b.n	800cfae <_raise_r+0x12>
 800cfde:	2400      	movs	r4, #0
 800cfe0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	4798      	blx	r3
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e7e0      	b.n	800cfae <_raise_r+0x12>

0800cfec <raise>:
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <raise+0xc>)
 800cfee:	4601      	mov	r1, r0
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	f7ff bfd3 	b.w	800cf9c <_raise_r>
 800cff6:	bf00      	nop
 800cff8:	20000074 	.word	0x20000074

0800cffc <_kill_r>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	4d07      	ldr	r5, [pc, #28]	; (800d01c <_kill_r+0x20>)
 800d000:	2300      	movs	r3, #0
 800d002:	4604      	mov	r4, r0
 800d004:	4608      	mov	r0, r1
 800d006:	4611      	mov	r1, r2
 800d008:	602b      	str	r3, [r5, #0]
 800d00a:	f7f5 f8fb 	bl	8002204 <_kill>
 800d00e:	1c43      	adds	r3, r0, #1
 800d010:	d102      	bne.n	800d018 <_kill_r+0x1c>
 800d012:	682b      	ldr	r3, [r5, #0]
 800d014:	b103      	cbz	r3, 800d018 <_kill_r+0x1c>
 800d016:	6023      	str	r3, [r4, #0]
 800d018:	bd38      	pop	{r3, r4, r5, pc}
 800d01a:	bf00      	nop
 800d01c:	200008bc 	.word	0x200008bc

0800d020 <_getpid_r>:
 800d020:	f7f5 b8e8 	b.w	80021f4 <_getpid>

0800d024 <_fstat_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d07      	ldr	r5, [pc, #28]	; (800d044 <_fstat_r+0x20>)
 800d028:	2300      	movs	r3, #0
 800d02a:	4604      	mov	r4, r0
 800d02c:	4608      	mov	r0, r1
 800d02e:	4611      	mov	r1, r2
 800d030:	602b      	str	r3, [r5, #0]
 800d032:	f7f5 f946 	bl	80022c2 <_fstat>
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	d102      	bne.n	800d040 <_fstat_r+0x1c>
 800d03a:	682b      	ldr	r3, [r5, #0]
 800d03c:	b103      	cbz	r3, 800d040 <_fstat_r+0x1c>
 800d03e:	6023      	str	r3, [r4, #0]
 800d040:	bd38      	pop	{r3, r4, r5, pc}
 800d042:	bf00      	nop
 800d044:	200008bc 	.word	0x200008bc

0800d048 <_isatty_r>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	4d06      	ldr	r5, [pc, #24]	; (800d064 <_isatty_r+0x1c>)
 800d04c:	2300      	movs	r3, #0
 800d04e:	4604      	mov	r4, r0
 800d050:	4608      	mov	r0, r1
 800d052:	602b      	str	r3, [r5, #0]
 800d054:	f7f5 f945 	bl	80022e2 <_isatty>
 800d058:	1c43      	adds	r3, r0, #1
 800d05a:	d102      	bne.n	800d062 <_isatty_r+0x1a>
 800d05c:	682b      	ldr	r3, [r5, #0]
 800d05e:	b103      	cbz	r3, 800d062 <_isatty_r+0x1a>
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	bd38      	pop	{r3, r4, r5, pc}
 800d064:	200008bc 	.word	0x200008bc

0800d068 <_init>:
 800d068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d06a:	bf00      	nop
 800d06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d06e:	bc08      	pop	{r3}
 800d070:	469e      	mov	lr, r3
 800d072:	4770      	bx	lr

0800d074 <_fini>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	bf00      	nop
 800d078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d07a:	bc08      	pop	{r3}
 800d07c:	469e      	mov	lr, r3
 800d07e:	4770      	bx	lr
