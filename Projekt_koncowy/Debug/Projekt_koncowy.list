
Projekt_koncowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006814  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a48  08006a48  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08006a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  2000009c  08006aec  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  08006aec  00020644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019085  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e64  00000000  00000000  00039151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d39  00000000  00000000  0003e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018345  00000000  00000000  00065291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1a8a  00000000  00000000  0007d5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  0016f0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069cc 	.word	0x080069cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	080069cc 	.word	0x080069cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	b299      	uxth	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f107 020f 	add.w	r2, r7, #15
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	f001 fa3d 	bl	8002284 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	b299      	uxth	r1, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f107 020f 	add.w	r2, r7, #15
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	f001 fa2e 	bl	8002284 <HAL_I2C_Master_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	b299      	uxth	r1, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f107 020c 	add.w	r2, r7, #12
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f001 fb0d 	bl	800246c <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000e52:	7b3b      	ldrb	r3, [r7, #12]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	7b7a      	ldrb	r2, [r7, #13]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e62:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000e78 <BH1750_ReadIlluminance_lux+0x48>
 8000e66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e6a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	3f99999a 	.word	0x3f99999a

08000e7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <MX_I2C1_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <MX_I2C1_Init+0x7c>)
 8000e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eb8:	f001 f954 	bl	8002164 <HAL_I2C_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ec2:	f000 fbfb 	bl	80016bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000eca:	f001 fe3d 	bl	8002b48 <HAL_I2CEx_ConfigAnalogFilter>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f000 fbf2 	bl	80016bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_I2C1_Init+0x74>)
 8000edc:	f001 fe7f 	bl	8002bde <HAL_I2CEx_ConfigDigitalFilter>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 fbe9 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200000c4 	.word	0x200000c4
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	20404768 	.word	0x20404768

08000efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a17      	ldr	r2, [pc, #92]	; (8000f78 <HAL_I2C_MspInit+0x7c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d128      	bne.n	8000f70 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	480b      	ldr	r0, [pc, #44]	; (8000f80 <HAL_I2C_MspInit+0x84>)
 8000f54:	f000 ff40 	bl	8001dd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_I2C_MspInit+0x80>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	; 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020400 	.word	0x40020400

08000f84 <calculate_discrete_pid>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float calculate_discrete_pid(pid_t* pid, float setpoint, float measured){
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f90:	edc7 0a01 	vstr	s1, [r7, #4]
	float u=0, P, I, D, error, integral, derivative;
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c

	error = setpoint-measured;
 8000f9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//proportional part
	P = pid->p.Kp * error;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->previous_integral = integral;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a3a      	ldr	r2, [r7, #32]
 8000fdc:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki*integral*(pid->p.dt/2.0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fe4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff fac2 	bl	8000578 <__aeabi_f2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fabb 	bl	8000578 <__aeabi_f2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100a:	f7ff fc37 	bl	800087c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4620      	mov	r0, r4
 8001014:	4629      	mov	r1, r5
 8001016:	f7ff fb07 	bl	8000628 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd13 	bl	8000a4c <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	61fb      	str	r3, [r7, #28]

	//derivative part
	derivative = (error - pid->previous_error)/pid->p.dt; //numerical derivative without filter
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001030:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001034:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	ed93 7a03 	vldr	s14, [r3, #12]
 800103e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001042:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800104a:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd*derivative;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001052:	ed97 7a06 	vldr	s14, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	edc7 7a05 	vstr	s15, [r7, #20]

	//sum of all parts
	u = P  + I + D; //without saturation
 800105e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001062:	edd7 7a07 	vldr	s15, [r7, #28]
 8001066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106a:	ed97 7a05 	vldr	s14, [r7, #20]
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	return u;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	ee07 3a90 	vmov	s15, r3
}
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	3730      	adds	r7, #48	; 0x30
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001088 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(htim->Instance == TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001098:	d15d      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0xce>
  {
  	char str_buffer[32];
  	int n;

	float light = BH1750_ReadIlluminance_lux(hbh1750);
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fec6 	bl	8000e30 <BH1750_ReadIlluminance_lux>
 80010a4:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

	float pwm_duty_f = (999.0*calculate_discrete_pid(&pid1, set_point, light));
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	482c      	ldr	r0, [pc, #176]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010b8:	f7ff ff64 	bl	8000f84 <calculate_discrete_pid>
 80010bc:	eef0 7a40 	vmov.f32	s15, s0
 80010c0:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800116c <HAL_TIM_PeriodElapsedCallback+0xe4>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	uint32_t pwm_duty =0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34

	if(pwm_duty_f<0) pwm_duty =0;
 80010d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	d502      	bpl.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
 80010e2:	e00e      	b.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else if(pwm_duty>999) pwm_duty = 999;
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ea:	d303      	bcc.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80010ec:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
 80010f2:	e006      	b.n	8001102 <HAL_TIM_PeriodElapsedCallback+0x7a>
	else pwm_duty = pwm_duty_f;
 80010f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fc:	ee17 3a90 	vmov	r3, s15
 8001100:	637b      	str	r3, [r7, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_duty);
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001108:	63da      	str	r2, [r3, #60]	; 0x3c

	n = sprintf(str_buffer, "{\"Light\":%6d}", (int)light);
 800110a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800110e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	ee17 2a90 	vmov	r2, s15
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800111c:	4618      	mov	r0, r3
 800111e:	f005 f827 	bl	8006170 <siprintf>
 8001122:	62b8      	str	r0, [r7, #40]	; 0x28

	str_buffer[n] = '\r';
 8001124:	f107 0208 	add.w	r2, r7, #8
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	4413      	add	r3, r2
 800112c:	220d      	movs	r2, #13
 800112e:	701a      	strb	r2, [r3, #0]
	str_buffer[n+1] = '\n';
 8001130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001132:	3301      	adds	r3, #1
 8001134:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001138:	4413      	add	r3, r2
 800113a:	220a      	movs	r2, #10
 800113c:	f803 2c30 	strb.w	r2, [r3, #-48]
  	HAL_UART_Transmit(&huart3, (uint8_t*)str_buffer, n+2, 1000);
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	b29b      	uxth	r3, r3
 8001144:	3302      	adds	r3, #2
 8001146:	b29a      	uxth	r2, r3
 8001148:	f107 0108 	add.w	r1, r7, #8
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001152:	f004 f85d 	bl	8005210 <HAL_UART_Transmit>
  }
}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000000c 	.word	0x2000000c
 8001164:	20000028 	.word	0x20000028
 8001168:	20000010 	.word	0x20000010
 800116c:	4479c000 	.word	0x4479c000
 8001170:	20000598 	.word	0x20000598
 8001174:	080069e4 	.word	0x080069e4
 8001178:	20000110 	.word	0x20000110

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001180:	f000 fc97 	bl	8001ab2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001184:	f000 f81a 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 f9b2 	bl	80014f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800118c:	f000 f952 	bl	8001434 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001190:	f000 f980 	bl	8001494 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001194:	f000 f8f2 	bl	800137c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001198:	f7ff fe70 	bl	8000e7c <MX_I2C1_Init>
  MX_TIM2_Init();
 800119c:	f000 f8a0 	bl	80012e0 <MX_TIM2_Init>

  //PWM
  // HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);


   HAL_TIM_Base_Start_IT(&htim2);
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <main+0x38>)
 80011a2:	f002 ffaf 	bl	8004104 <HAL_TIM_Base_Start_IT>
   BH1750_Init(hbh1750);
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <main+0x3c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fe1a 	bl	8000de4 <BH1750_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <main+0x34>
 80011b2:	bf00      	nop
 80011b4:	200005e4 	.word	0x200005e4
 80011b8:	2000000c 	.word	0x2000000c

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b4      	sub	sp, #208	; 0xd0
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011c6:	2230      	movs	r2, #48	; 0x30
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 ffc8 	bl	8006160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2284      	movs	r2, #132	; 0x84
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 ffb9 	bl	8006160 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011ee:	f001 fe8b 	bl	8002f08 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <SystemClock_Config+0x118>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a37      	ldr	r2, [pc, #220]	; (80012d4 <SystemClock_Config+0x118>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <SystemClock_Config+0x118>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <SystemClock_Config+0x11c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001212:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <SystemClock_Config+0x11c>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <SystemClock_Config+0x11c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001226:	2301      	movs	r3, #1
 8001228:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800122c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001242:	2304      	movs	r3, #4
 8001244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001248:	2348      	movs	r3, #72	; 0x48
 800124a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001254:	2303      	movs	r3, #3
 8001256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fe62 	bl	8002f28 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800126a:	f000 fa27 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f002 f8eb 	bl	8003470 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80012a0:	f000 fa0c 	bl	80016bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <SystemClock_Config+0x120>)
 80012a6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 fada 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80012c6:	f000 f9f9 	bl	80016bc <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	37d0      	adds	r7, #208	; 0xd0
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000
 80012dc:	00204100 	.word	0x00204100

080012e0 <MX_TIM2_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_TIM2_Init+0x98>)
 8001300:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_TIM2_Init+0x98>)
 8001308:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800130c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_TIM2_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_TIM2_Init+0x98>)
 8001316:	f240 32e7 	movw	r2, #999	; 0x3e7
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_TIM2_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <MX_TIM2_Init+0x98>)
 800132a:	f002 fe93 	bl	8004054 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001334:	f000 f9c2 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_TIM2_Init+0x98>)
 8001346:	f003 f9df 	bl	8004708 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001350:	f000 f9b4 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_TIM2_Init+0x98>)
 8001362:	f003 fe5b 	bl	800501c <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800136c:	f000 f9a6 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200005e4 	.word	0x200005e4

0800137c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a0:	4b22      	ldr	r3, [pc, #136]	; (800142c <MX_TIM3_Init+0xb0>)
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_TIM3_Init+0xb4>)
 80013a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <MX_TIM3_Init+0xb0>)
 80013a8:	2247      	movs	r2, #71	; 0x47
 80013aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_TIM3_Init+0xb0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM3_Init+0xb0>)
 80013b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM3_Init+0xb0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM3_Init+0xb0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c6:	4819      	ldr	r0, [pc, #100]	; (800142c <MX_TIM3_Init+0xb0>)
 80013c8:	f002 ff14 	bl	80041f4 <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80013d2:	f000 f973 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4811      	ldr	r0, [pc, #68]	; (800142c <MX_TIM3_Init+0xb0>)
 80013e6:	f003 fe19 	bl	800501c <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80013f0:	f000 f964 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80013f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2208      	movs	r2, #8
 800140a:	4619      	mov	r1, r3
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM3_Init+0xb0>)
 800140e:	f003 f867 	bl	80044e0 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001418:	f000 f950 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM3_Init+0xb0>)
 800141e:	f000 f9c1 	bl	80017a4 <HAL_TIM_MspPostInit>

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000598 	.word	0x20000598
 8001430:	40000400 	.word	0x40000400

08001434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_USART3_UART_Init+0x58>)
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <MX_USART3_UART_Init+0x5c>)
 800143c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_USART3_UART_Init+0x58>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART3_UART_Init+0x58>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_USART3_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_USART3_UART_Init+0x58>)
 8001478:	f003 fe7c 	bl	8005174 <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001482:	f000 f91b 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000110 	.word	0x20000110
 8001490:	40004800 	.word	0x40004800

08001494 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800149e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a2:	2206      	movs	r2, #6
 80014a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d8:	f001 fbcd 	bl	8002c76 <HAL_PCD_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 f8eb 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000194 	.word	0x20000194

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a67      	ldr	r2, [pc, #412]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800150c:	f043 0304 	orr.w	r3, r3, #4
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a61      	ldr	r2, [pc, #388]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a4f      	ldr	r2, [pc, #316]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157e:	4b4a      	ldr	r3, [pc, #296]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <MX_GPIO_Init+0x1b8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f244 0181 	movw	r1, #16513	; 0x4081
 800159c:	4843      	ldr	r0, [pc, #268]	; (80016ac <MX_GPIO_Init+0x1bc>)
 800159e:	f000 fdc7 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	4842      	ldr	r0, [pc, #264]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 80015a8:	f000 fdc2 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	483c      	ldr	r0, [pc, #240]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 80015c4:	f000 fc08 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015c8:	2332      	movs	r3, #50	; 0x32
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d8:	230b      	movs	r3, #11
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4834      	ldr	r0, [pc, #208]	; (80016b4 <MX_GPIO_Init+0x1c4>)
 80015e4:	f000 fbf8 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015e8:	2386      	movs	r3, #134	; 0x86
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f8:	230b      	movs	r3, #11
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	482d      	ldr	r0, [pc, #180]	; (80016b8 <MX_GPIO_Init+0x1c8>)
 8001604:	f000 fbe8 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001608:	f244 0381 	movw	r3, #16513	; 0x4081
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160e:	2301      	movs	r3, #1
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4619      	mov	r1, r3
 8001620:	4822      	ldr	r0, [pc, #136]	; (80016ac <MX_GPIO_Init+0x1bc>)
 8001622:	f000 fbd9 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001638:	230b      	movs	r3, #11
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	481a      	ldr	r0, [pc, #104]	; (80016ac <MX_GPIO_Init+0x1bc>)
 8001644:	f000 fbc8 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 8001660:	f000 fbba 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 8001678:	f000 fbae 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800167c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_GPIO_Init+0x1c0>)
 800169a:	f000 fb9d 	bl	8001dd8 <HAL_GPIO_Init>

}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020000 	.word	0x40020000

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_MspInit+0x44>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_MspInit+0x44>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_MspInit+0x44>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_MspInit+0x44>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_MspInit+0x44>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_MspInit+0x44>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d113      	bne.n	800174a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_TIM_Base_MspInit+0x44>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_TIM_Base_MspInit+0x44>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x44>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201c      	movs	r0, #28
 8001740:	f000 fb13 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001744:	201c      	movs	r0, #28
 8001746:	f000 fb2c 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <HAL_TIM_PWM_MspInit+0x44>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d113      	bne.n	8001792 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_TIM_PWM_MspInit+0x48>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_TIM_PWM_MspInit+0x48>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201d      	movs	r0, #29
 8001788:	f000 faef 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800178c:	201d      	movs	r0, #29
 800178e:	f000 fb08 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40000400 	.word	0x40000400
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a11      	ldr	r2, [pc, #68]	; (8001808 <HAL_TIM_MspPostInit+0x64>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d11c      	bne.n	8001800 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_TIM_MspPostInit+0x68>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_TIM_MspPostInit+0x68>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_TIM_MspPostInit+0x68>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_TIM_MspPostInit+0x6c>)
 80017fc:	f000 faec 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40000400 	.word	0x40000400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020800 	.word	0x40020800

08001814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <HAL_UART_MspInit+0x7c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d128      	bne.n	8001888 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_UART_MspInit+0x80>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a16      	ldr	r2, [pc, #88]	; (8001894 <HAL_UART_MspInit+0x80>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_UART_MspInit+0x80>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_UART_MspInit+0x80>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_UART_MspInit+0x80>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_UART_MspInit+0x80>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001878:	2307      	movs	r3, #7
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_UART_MspInit+0x84>)
 8001884:	f000 faa8 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3728      	adds	r7, #40	; 0x28
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40004800 	.word	0x40004800
 8001894:	40023800 	.word	0x40023800
 8001898:	40020c00 	.word	0x40020c00

0800189c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018bc:	d141      	bne.n	8001942 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_PCD_MspInit+0xb0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a22      	ldr	r2, [pc, #136]	; (800194c <HAL_PCD_MspInit+0xb0>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_PCD_MspInit+0xb0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018d6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018e8:	230a      	movs	r3, #10
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4817      	ldr	r0, [pc, #92]	; (8001950 <HAL_PCD_MspInit+0xb4>)
 80018f4:	f000 fa70 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4810      	ldr	r0, [pc, #64]	; (8001950 <HAL_PCD_MspInit+0xb4>)
 800190e:	f000 fa63 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_PCD_MspInit+0xb0>)
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_PCD_MspInit+0xb0>)
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	6353      	str	r3, [r2, #52]	; 0x34
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_PCD_MspInit+0xb0>)
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_PCD_MspInit+0xb0>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_PCD_MspInit+0xb0>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_PCD_MspInit+0xb0>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler+0x4>

0800195a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <MemManage_Handler+0x4>

08001966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>

08001972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f000 f8c4 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM2_IRQHandler+0x10>)
 80019ae:	f002 fc78 	bl	80042a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200005e4 	.word	0x200005e4

080019bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM3_IRQHandler+0x10>)
 80019c2:	f002 fc6e 	bl	80042a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000598 	.word	0x20000598

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f004 fb84 	bl	800610c <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20050000 	.word	0x20050000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200000b8 	.word	0x200000b8
 8001a38:	20000648 	.word	0x20000648

08001a3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a7c:	4c0b      	ldr	r4, [pc, #44]	; (8001aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8a:	f7ff ffd7 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f004 fb43 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fb73 	bl	800117c <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001aa4:	08006a50 	.word	0x08006a50
  ldr r2, =_sbss
 8001aa8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001aac:	20000644 	.word	0x20000644

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>

08001ab2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f000 f94c 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 f805 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac2:	f7ff fe01 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f967 	bl	8001dbe <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 f92f 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000002c 	.word	0x2000002c
 8001b24:	20000034 	.word	0x20000034
 8001b28:	20000030 	.word	0x20000030

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000034 	.word	0x20000034
 8001b50:	20000630 	.word	0x20000630

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000630 	.word	0x20000630

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff ffee 	bl	8001b54 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b92:	bf00      	nop
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000034 	.word	0x20000034

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	05fa0000 	.word	0x05fa0000

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e175      	b.n	80020e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8164 	bne.w	80020de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d005      	beq.n	8001e2e <HAL_GPIO_Init+0x56>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d130      	bne.n	8001e90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0201 	and.w	r2, r3, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d017      	beq.n	8001ecc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d123      	bne.n	8001f20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	69b9      	ldr	r1, [r7, #24]
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80be 	beq.w	80020de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_GPIO_Init+0x324>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f7a:	4a61      	ldr	r2, [pc, #388]	; (8002100 <HAL_GPIO_Init+0x328>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_GPIO_Init+0x32c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d037      	beq.n	8002016 <HAL_GPIO_Init+0x23e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_GPIO_Init+0x330>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_GPIO_Init+0x23a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a56      	ldr	r2, [pc, #344]	; (800210c <HAL_GPIO_Init+0x334>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02b      	beq.n	800200e <HAL_GPIO_Init+0x236>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a55      	ldr	r2, [pc, #340]	; (8002110 <HAL_GPIO_Init+0x338>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d025      	beq.n	800200a <HAL_GPIO_Init+0x232>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_GPIO_Init+0x33c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <HAL_GPIO_Init+0x22e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a53      	ldr	r2, [pc, #332]	; (8002118 <HAL_GPIO_Init+0x340>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d019      	beq.n	8002002 <HAL_GPIO_Init+0x22a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_GPIO_Init+0x344>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0x226>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_GPIO_Init+0x348>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00d      	beq.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x21e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x350>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d101      	bne.n	8001ff2 <HAL_GPIO_Init+0x21a>
 8001fee:	2309      	movs	r3, #9
 8001ff0:	e012      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	e010      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ff6:	2308      	movs	r3, #8
 8001ff8:	e00e      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00c      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8001ffe:	2306      	movs	r3, #6
 8002000:	e00a      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002002:	2305      	movs	r3, #5
 8002004:	e008      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002006:	2304      	movs	r3, #4
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x240>
 800200a:	2303      	movs	r3, #3
 800200c:	e004      	b.n	8002018 <HAL_GPIO_Init+0x240>
 800200e:	2302      	movs	r3, #2
 8002010:	e002      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_GPIO_Init+0x240>
 8002016:	2300      	movs	r3, #0
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f002 0203 	and.w	r2, r2, #3
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	4093      	lsls	r3, r2
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002028:	4935      	ldr	r1, [pc, #212]	; (8002100 <HAL_GPIO_Init+0x328>)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_GPIO_Init+0x354>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205a:	4a34      	ldr	r2, [pc, #208]	; (800212c <HAL_GPIO_Init+0x354>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002060:	4b32      	ldr	r3, [pc, #200]	; (800212c <HAL_GPIO_Init+0x354>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002084:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_GPIO_Init+0x354>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_GPIO_Init+0x354>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1f      	ldr	r2, [pc, #124]	; (800212c <HAL_GPIO_Init+0x354>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_GPIO_Init+0x354>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_GPIO_Init+0x354>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3301      	adds	r3, #1
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	f67f ae86 	bls.w	8001df8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3724      	adds	r7, #36	; 0x24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40013800 	.word	0x40013800
 8002104:	40020000 	.word	0x40020000
 8002108:	40020400 	.word	0x40020400
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00
 8002114:	40021000 	.word	0x40021000
 8002118:	40021400 	.word	0x40021400
 800211c:	40021800 	.word	0x40021800
 8002120:	40021c00 	.word	0x40021c00
 8002124:	40022000 	.word	0x40022000
 8002128:	40022400 	.word	0x40022400
 800212c:	40013c00 	.word	0x40013c00

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe feb6 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	e006      	b.n	80021ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d104      	bne.n	80021fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_I2C_Init+0x11c>)
 800220a:	430b      	orrs	r3, r1
 800220c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	02008000 	.word	0x02008000

08002284 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	460b      	mov	r3, r1
 8002292:	817b      	strh	r3, [r7, #10]
 8002294:	4613      	mov	r3, r2
 8002296:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	f040 80da 	bne.w	800245a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2C_Master_Transmit+0x30>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0d3      	b.n	800245c <HAL_I2C_Master_Transmit+0x1d8>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022bc:	f7ff fc4a 	bl	8001b54 <HAL_GetTick>
 80022c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2319      	movs	r3, #25
 80022c8:	2201      	movs	r2, #1
 80022ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f9e6 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0be      	b.n	800245c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2221      	movs	r2, #33	; 0x21
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2210      	movs	r2, #16
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2bff      	cmp	r3, #255	; 0xff
 800230e:	d90e      	bls.n	800232e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	b2da      	uxtb	r2, r3
 800231c:	8979      	ldrh	r1, [r7, #10]
 800231e:	4b51      	ldr	r3, [pc, #324]	; (8002464 <HAL_I2C_Master_Transmit+0x1e0>)
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 fbdc 	bl	8002ae4 <I2C_TransferConfig>
 800232c:	e06c      	b.n	8002408 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	b2da      	uxtb	r2, r3
 800233e:	8979      	ldrh	r1, [r7, #10]
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <HAL_I2C_Master_Transmit+0x1e0>)
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fbcb 	bl	8002ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800234e:	e05b      	b.n	8002408 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f9e3 	bl	8002720 <I2C_WaitOnTXISFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e07b      	b.n	800245c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d034      	beq.n	8002408 <HAL_I2C_Master_Transmit+0x184>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d130      	bne.n	8002408 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2200      	movs	r2, #0
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f975 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e04d      	b.n	800245c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2bff      	cmp	r3, #255	; 0xff
 80023c8:	d90e      	bls.n	80023e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	22ff      	movs	r2, #255	; 0xff
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	8979      	ldrh	r1, [r7, #10]
 80023d8:	2300      	movs	r3, #0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fb7f 	bl	8002ae4 <I2C_TransferConfig>
 80023e6:	e00f      	b.n	8002408 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	8979      	ldrh	r1, [r7, #10]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb6e 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d19e      	bne.n	8002350 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	6a39      	ldr	r1, [r7, #32]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f9c2 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e01a      	b.n	800245c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2220      	movs	r2, #32
 800242c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_I2C_Master_Transmit+0x1e4>)
 800243a:	400b      	ands	r3, r1
 800243c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
  }
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	80002000 	.word	0x80002000
 8002468:	fe00e800 	.word	0xfe00e800

0800246c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	461a      	mov	r2, r3
 8002478:	460b      	mov	r3, r1
 800247a:	817b      	strh	r3, [r7, #10]
 800247c:	4613      	mov	r3, r2
 800247e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b20      	cmp	r3, #32
 800248a:	f040 80db 	bne.w	8002644 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2C_Master_Receive+0x30>
 8002498:	2302      	movs	r3, #2
 800249a:	e0d4      	b.n	8002646 <HAL_I2C_Master_Receive+0x1da>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024a4:	f7ff fb56 	bl	8001b54 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2319      	movs	r3, #25
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f8f2 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0bf      	b.n	8002646 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2222      	movs	r2, #34	; 0x22
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2210      	movs	r2, #16
 80024d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	893a      	ldrh	r2, [r7, #8]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2bff      	cmp	r3, #255	; 0xff
 80024f6:	d90e      	bls.n	8002516 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	b2da      	uxtb	r2, r3
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	4b52      	ldr	r3, [pc, #328]	; (8002650 <HAL_I2C_Master_Receive+0x1e4>)
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fae8 	bl	8002ae4 <I2C_TransferConfig>
 8002514:	e06d      	b.n	80025f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	4b49      	ldr	r3, [pc, #292]	; (8002650 <HAL_I2C_Master_Receive+0x1e4>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fad7 	bl	8002ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002536:	e05c      	b.n	80025f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	6a39      	ldr	r1, [r7, #32]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f96b 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e07c      	b.n	8002646 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d034      	beq.n	80025f2 <HAL_I2C_Master_Receive+0x186>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d130      	bne.n	80025f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	2200      	movs	r2, #0
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f880 	bl	80026a0 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e04d      	b.n	8002646 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2bff      	cmp	r3, #255	; 0xff
 80025b2:	d90e      	bls.n	80025d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	8979      	ldrh	r1, [r7, #10]
 80025c2:	2300      	movs	r3, #0
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa8a 	bl	8002ae4 <I2C_TransferConfig>
 80025d0:	e00f      	b.n	80025f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	2300      	movs	r3, #0
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fa79 	bl	8002ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d19d      	bne.n	8002538 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	6a39      	ldr	r1, [r7, #32]
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 f8cd 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e01a      	b.n	8002646 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2220      	movs	r2, #32
 8002616:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_I2C_Master_Receive+0x1e8>)
 8002624:	400b      	ands	r3, r1
 8002626:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	e000      	b.n	8002646 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002644:	2302      	movs	r3, #2
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	80002400 	.word	0x80002400
 8002654:	fe00e800 	.word	0xfe00e800

08002658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	d103      	bne.n	8002676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d007      	beq.n	8002694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	619a      	str	r2, [r3, #24]
  }
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b0:	e022      	b.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d01e      	beq.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff fa4b 	bl	8001b54 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d113      	bne.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	f043 0220 	orr.w	r2, r3, #32
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e00f      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d0cd      	beq.n	80026b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800272c:	e02c      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8ea 	bl	800290c <I2C_IsErrorOccurred>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02a      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d01e      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7ff fa03 	bl	8001b54 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d113      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1cb      	bne.n	800272e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e028      	b.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8aa 	bl	800290c <I2C_IsErrorOccurred>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e026      	b.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f9c7 	bl	8001b54 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d113      	bne.n	8002800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	d1cf      	bne.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002824:	e064      	b.n	80028f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f86e 	bl	800290c <I2C_IsErrorOccurred>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e062      	b.n	8002900 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d138      	bne.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b04      	cmp	r3, #4
 8002854:	d105      	bne.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e04e      	b.n	8002900 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b10      	cmp	r3, #16
 800286e:	d107      	bne.n	8002880 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2210      	movs	r2, #16
 8002876:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2204      	movs	r2, #4
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
 800287e:	e002      	b.n	8002886 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2220      	movs	r2, #32
 800288c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800289a:	400b      	ands	r3, r1
 800289c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e022      	b.n	8002900 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7ff f94b 	bl	8001b54 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10f      	bne.n	80028f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e007      	b.n	8002900 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d193      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	fe00e800 	.word	0xfe00e800

0800290c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d075      	beq.n	8002a24 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2210      	movs	r2, #16
 800293e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002940:	e056      	b.n	80029f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d052      	beq.n	80029f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff f903 	bl	8001b54 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_IsErrorOccurred+0x54>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d147      	bne.n	80029f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002972:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002982:	d12e      	bne.n	80029e2 <I2C_IsErrorOccurred+0xd6>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800298a:	d02a      	beq.n	80029e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b20      	cmp	r3, #32
 8002990:	d027      	beq.n	80029e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029a2:	f7ff f8d7 	bl	8001b54 <HAL_GetTick>
 80029a6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a8:	e01b      	b.n	80029e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029aa:	f7ff f8d3 	bl	8001b54 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b19      	cmp	r3, #25
 80029b6:	d914      	bls.n	80029e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d1dc      	bne.n	80029aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d003      	beq.n	8002a06 <I2C_IsErrorOccurred+0xfa>
 80029fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d09d      	beq.n	8002942 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2220      	movs	r2, #32
 8002a14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01c      	beq.n	8002ad4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff fddc 	bl	8002658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <I2C_IsErrorOccurred+0x1d4>)
 8002aac:	400b      	ands	r3, r1
 8002aae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fe00e800 	.word	0xfe00e800

08002ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	4613      	mov	r3, r2
 8002af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af6:	897b      	ldrh	r3, [r7, #10]
 8002af8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002afc:	7a7b      	ldrb	r3, [r7, #9]
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b04:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	0d5b      	lsrs	r3, r3, #21
 8002b1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <I2C_TransferConfig+0x60>)
 8002b24:	430b      	orrs	r3, r1
 8002b26:	43db      	mvns	r3, r3
 8002b28:	ea02 0103 	and.w	r1, r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	03ff63ff 	.word	0x03ff63ff

08002b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d138      	bne.n	8002bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e032      	b.n	8002bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2224      	movs	r2, #36	; 0x24
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d139      	bne.n	8002c68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e033      	b.n	8002c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2224      	movs	r2, #36	; 0x24
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	e000      	b.n	8002c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
  }
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c78:	b08f      	sub	sp, #60	; 0x3c
 8002c7a:	af0a      	add	r7, sp, #40	; 0x28
 8002c7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e116      	b.n	8002eb6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fdfa 	bl	800189c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2203      	movs	r2, #3
 8002cac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 ff8a 	bl	8005be0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	687e      	ldr	r6, [r7, #4]
 8002cd4:	466d      	mov	r5, sp
 8002cd6:	f106 0410 	add.w	r4, r6, #16
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cea:	1d33      	adds	r3, r6, #4
 8002cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f002 ff1e 	bl	8005b30 <USB_CoreInit>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0d7      	b.n	8002eb6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 ff78 	bl	8005c02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e04a      	b.n	8002dae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	333d      	adds	r3, #61	; 0x3d
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	333c      	adds	r3, #60	; 0x3c
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	b298      	uxth	r0, r3
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3342      	adds	r3, #66	; 0x42
 8002d54:	4602      	mov	r2, r0
 8002d56:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	333f      	adds	r3, #63	; 0x3f
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3344      	adds	r3, #68	; 0x44
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3348      	adds	r3, #72	; 0x48
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3350      	adds	r3, #80	; 0x50
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	3301      	adds	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3af      	bcc.n	8002d18 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e044      	b.n	8002e48 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
 8002e44:	3301      	adds	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d3b5      	bcc.n	8002dbe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	687e      	ldr	r6, [r7, #4]
 8002e5a:	466d      	mov	r5, sp
 8002e5c:	f106 0410 	add.w	r4, r6, #16
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e70:	1d33      	adds	r3, r6, #4
 8002e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e74:	6838      	ldr	r0, [r7, #0]
 8002e76:	f002 ff11 	bl	8005c9c <USB_DevInit>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e014      	b.n	8002eb6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f80b 	bl	8002ec0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 f8cb 	bl	800604a <USB_DevDisconnect>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ec0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	10000003 	.word	0x10000003

08002f08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40007000 	.word	0x40007000

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e291      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8087 	beq.w	800305a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f58:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d112      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
 8002f64:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06c      	beq.n	8003058 <HAL_RCC_OscConfig+0x130>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d168      	bne.n	8003058 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e26b      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x7a>
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e02e      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x9c>
 8002faa:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7e      	ldr	r2, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7b      	ldr	r2, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fda4 	bl	8001b54 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fda0 	bl	8001b54 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e21f      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fd90 	bl	8001b54 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fd8c 	bl	8001b54 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e20b      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x110>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d069      	beq.n	800313a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x190>
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1df      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	493d      	ldr	r1, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e040      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d023      	beq.n	8003108 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd42 	bl	8001b54 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fd3e 	bl	8001b54 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1bd      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
 8003106:	e018      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fd1e 	bl	8001b54 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fe fd1a 	bl	8001b54 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e199      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d038      	beq.n	80031b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d019      	beq.n	8003182 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fe fcfb 	bl	8001b54 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe fcf7 	bl	8001b54 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e176      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x23a>
 8003180:	e01a      	b.n	80031b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe fce1 	bl	8001b54 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe fcdd 	bl	8001b54 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d903      	bls.n	80031ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e15c      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
 80031a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	4b91      	ldr	r3, [pc, #580]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a4 	beq.w	800330e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b8b      	ldr	r3, [pc, #556]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10d      	bne.n	80031ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a87      	ldr	r2, [pc, #540]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ee:	4b82      	ldr	r3, [pc, #520]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031fa:	4b7f      	ldr	r3, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7e      	ldr	r2, [pc, #504]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fe fca5 	bl	8001b54 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fe fca1 	bl	8001b54 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e120      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x31a>
 8003234:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e02d      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x33c>
 800324a:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	4b67      	ldr	r3, [pc, #412]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a66      	ldr	r2, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	e01c      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x35e>
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	4b5e      	ldr	r3, [pc, #376]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	e00b      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	4b58      	ldr	r3, [pc, #352]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d015      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fe fc55 	bl	8001b54 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fc51 	bl	8001b54 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0ce      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ee      	beq.n	80032ae <HAL_RCC_OscConfig+0x386>
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fe fc3f 	bl	8001b54 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fe fc3b 	bl	8001b54 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a3b      	ldr	r2, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80a4 	beq.w	8003460 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d06b      	beq.n	80033fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d149      	bne.n	80033c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fc0c 	bl	8001b54 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fc08 	bl	8001b54 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e087      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	3b01      	subs	r3, #1
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	4313      	orrs	r3, r2
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800338a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fbdc 	bl	8001b54 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fbd8 	bl	8001b54 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e057      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x478>
 80033be:	e04f      	b.n	8003460 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fbc2 	bl	8001b54 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fe fbbe 	bl	8001b54 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e03d      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4ac>
 80033f2:	e035      	b.n	8003460 <HAL_RCC_OscConfig+0x538>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <HAL_RCC_OscConfig+0x544>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d028      	beq.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d121      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d11a      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003432:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003434:	4293      	cmp	r3, r2
 8003436:	d111      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	3b01      	subs	r3, #1
 8003446:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003448:	429a      	cmp	r2, r3
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003456:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800

08003470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0d0      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 020f 	bic.w	r2, r3, #15
 800349e:	4965      	ldr	r1, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d040      	beq.n	8003594 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d115      	bne.n	8003552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e073      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3d      	ldr	r3, [pc, #244]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06b      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4936      	ldr	r1, [pc, #216]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fe faf6 	bl	8001b54 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe faf2 	bl	8001b54 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e053      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d210      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 020f 	bic.w	r2, r3, #15
 80035aa:	4922      	ldr	r1, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1cc>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1d0>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1d4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fa52 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	080069f4 	.word	0x080069f4
 8003640:	2000002c 	.word	0x2000002c
 8003644:	20000030 	.word	0x20000030

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	2300      	movs	r3, #0
 800365a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d00d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x40>
 800366c:	2b08      	cmp	r3, #8
 800366e:	f200 80bd 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x34>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3a>
 800367a:	e0b7      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800367e:	60bb      	str	r3, [r7, #8]
      break;
 8003680:	e0b7      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003684:	60bb      	str	r3, [r7, #8]
      break;
 8003686:	e0b4      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003690:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04d      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b58      	ldr	r3, [pc, #352]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	461a      	mov	r2, r3
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	ea02 0800 	and.w	r8, r2, r0
 80036b6:	ea03 0901 	and.w	r9, r3, r1
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	014b      	lsls	r3, r1, #5
 80036c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036cc:	0142      	lsls	r2, r0, #5
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	ebb0 0008 	subs.w	r0, r0, r8
 80036d6:	eb61 0109 	sbc.w	r1, r1, r9
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	018b      	lsls	r3, r1, #6
 80036e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036e8:	0182      	lsls	r2, r0, #6
 80036ea:	1a12      	subs	r2, r2, r0
 80036ec:	eb63 0301 	sbc.w	r3, r3, r1
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	00d9      	lsls	r1, r3, #3
 80036fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036fe:	00d0      	lsls	r0, r2, #3
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	eb12 0208 	adds.w	r2, r2, r8
 8003708:	eb43 0309 	adc.w	r3, r3, r9
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0259      	lsls	r1, r3, #9
 8003716:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800371a:	0250      	lsls	r0, r2, #9
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f7fd f9de 	bl	8000aec <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e04a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	ea02 0400 	and.w	r4, r2, r0
 8003752:	ea03 0501 	and.w	r5, r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003768:	0142      	lsls	r2, r0, #5
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	1b00      	subs	r0, r0, r4
 8003770:	eb61 0105 	sbc.w	r1, r1, r5
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	018b      	lsls	r3, r1, #6
 800377e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003782:	0182      	lsls	r2, r0, #6
 8003784:	1a12      	subs	r2, r2, r0
 8003786:	eb63 0301 	sbc.w	r3, r3, r1
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	1912      	adds	r2, r2, r4
 80037a0:	eb45 0303 	adc.w	r3, r5, r3
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0299      	lsls	r1, r3, #10
 80037ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037b2:	0290      	lsls	r0, r2, #10
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	461a      	mov	r2, r3
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f7fd f992 	bl	8000aec <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	60bb      	str	r3, [r7, #8]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	2000002c 	.word	0x2000002c

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	08006a04 	.word	0x08006a04

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffdc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0b5b      	lsrs	r3, r3, #13
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	08006a04 	.word	0x08006a04

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800389c:	4b69      	ldr	r3, [pc, #420]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a68      	ldr	r2, [pc, #416]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038a6:	6093      	str	r3, [r2, #8]
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4964      	ldr	r1, [pc, #400]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	4959      	ldr	r1, [pc, #356]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ec:	d101      	bne.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d017      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390a:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	494a      	ldr	r1, [pc, #296]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003928:	d101      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003946:	2301      	movs	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 808b 	beq.w	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a39      	ldr	r2, [pc, #228]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
 8003964:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003970:	4b35      	ldr	r3, [pc, #212]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a34      	ldr	r2, [pc, #208]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fe f8ea 	bl	8001b54 <HAL_GetTick>
 8003980:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fe f8e6 	bl	8001b54 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	; 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e357      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d035      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d02e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039e8:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d114      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7fe f8ae 	bl	8001b54 <HAL_GetTick>
 80039f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe f8aa 	bl	8001b54 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e319      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ee      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a2a:	d111      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	4901      	ldr	r1, [pc, #4]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	0ffffcff 	.word	0x0ffffcff
 8003a50:	4bb1      	ldr	r3, [pc, #708]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4ab0      	ldr	r2, [pc, #704]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	4bae      	ldr	r3, [pc, #696]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	49ab      	ldr	r1, [pc, #684]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a7a:	4ba7      	ldr	r3, [pc, #668]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	4aa5      	ldr	r2, [pc, #660]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a8a:	4ba3      	ldr	r3, [pc, #652]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	49a0      	ldr	r1, [pc, #640]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa8:	4b9b      	ldr	r3, [pc, #620]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	4998      	ldr	r1, [pc, #608]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aca:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad8:	498f      	ldr	r1, [pc, #572]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aec:	4b8a      	ldr	r3, [pc, #552]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	4987      	ldr	r1, [pc, #540]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b0e:	4b82      	ldr	r3, [pc, #520]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1c:	497e      	ldr	r1, [pc, #504]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b30:	4b79      	ldr	r3, [pc, #484]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4976      	ldr	r1, [pc, #472]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b52:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f023 020c 	bic.w	r2, r3, #12
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b60:	496d      	ldr	r1, [pc, #436]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b74:	4b68      	ldr	r3, [pc, #416]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4965      	ldr	r1, [pc, #404]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b96:	4b60      	ldr	r3, [pc, #384]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba4:	495c      	ldr	r1, [pc, #368]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bb8:	4b57      	ldr	r3, [pc, #348]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	4954      	ldr	r1, [pc, #336]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bda:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	494b      	ldr	r1, [pc, #300]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	4943      	ldr	r1, [pc, #268]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2c:	493a      	ldr	r1, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	4932      	ldr	r1, [pc, #200]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d011      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c62:	4b2d      	ldr	r3, [pc, #180]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	4929      	ldr	r1, [pc, #164]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c82:	2301      	movs	r3, #1
 8003c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb0:	4919      	ldr	r1, [pc, #100]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cc4:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd4:	4910      	ldr	r1, [pc, #64]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d006      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80d9 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd ff2a 	bl	8001b54 <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d02:	e00b      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d04:	f7fd ff26 	bl	8001b54 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d904      	bls.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e197      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d1c:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ed      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d021      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11d      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	019a      	lsls	r2, r3, #6
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	071b      	lsls	r3, r3, #28
 8003d70:	4957      	ldr	r1, [pc, #348]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003da2:	d129      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003da4:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0f1b      	lsrs	r3, r3, #28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	019a      	lsls	r2, r3, #6
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	071b      	lsls	r3, r3, #28
 8003dd8:	493d      	ldr	r1, [pc, #244]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de6:	f023 021f 	bic.w	r2, r3, #31
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	3b01      	subs	r3, #1
 8003df0:	4937      	ldr	r1, [pc, #220]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e04:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0a:	0e1b      	lsrs	r3, r3, #24
 8003e0c:	f003 030f 	and.w	r3, r3, #15
 8003e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e18:	0f1b      	lsrs	r3, r3, #28
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	019a      	lsls	r2, r3, #6
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	431a      	orrs	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	071b      	lsls	r3, r3, #28
 8003e38:	4925      	ldr	r1, [pc, #148]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d011      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	019a      	lsls	r2, r3, #6
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	071b      	lsls	r3, r3, #28
 8003e68:	4919      	ldr	r1, [pc, #100]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7c:	f7fd fe6a 	bl	8001b54 <HAL_GetTick>
 8003e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e84:	f7fd fe66 	bl	8001b54 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0d7      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 80cd 	bne.w	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb6:	f7fd fe4d 	bl	8001b54 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ebe:	f7fd fe49 	bl	8001b54 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d903      	bls.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0ba      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d12a      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f0a:	4b51      	ldr	r3, [pc, #324]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f18:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	0f1b      	lsrs	r3, r3, #28
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	019a      	lsls	r2, r3, #6
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	071b      	lsls	r3, r3, #28
 8003f3e:	4944      	ldr	r1, [pc, #272]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f46:	4b42      	ldr	r3, [pc, #264]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d022      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f74:	d11d      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7c:	0e1b      	lsrs	r3, r3, #24
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	0f1b      	lsrs	r3, r3, #28
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	019a      	lsls	r2, r3, #6
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	061b      	lsls	r3, r3, #24
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	071b      	lsls	r3, r3, #28
 8003faa:	4929      	ldr	r1, [pc, #164]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	0e1b      	lsrs	r3, r3, #24
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fcc:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	0c1b      	lsrs	r3, r3, #16
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4917      	ldr	r1, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401c:	f7fd fd9a 	bl	8001b54 <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004024:	f7fd fd96 	bl	8001b54 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e007      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004042:	d1ef      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800

08004054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e049      	b.n	80040fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d106      	bne.n	8004080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7fd fb48 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f000 fc2a 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d001      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e054      	b.n	80041c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004146:	d01d      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIM_Base_Start_IT+0x80>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d115      	bne.n	80041b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_TIM_Base_Start_IT+0xec>)
 800418c:	4013      	ands	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b06      	cmp	r3, #6
 8004194:	d015      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d011      	beq.n	80041c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ae:	e008      	b.n	80041c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e000      	b.n	80041c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40010400 	.word	0x40010400
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40001800 	.word	0x40001800
 80041f0:	00010007 	.word	0x00010007

080041f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e049      	b.n	800429a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fd fa9c 	bl	8001758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3304      	adds	r3, #4
 8004230:	4619      	mov	r1, r3
 8004232:	4610      	mov	r0, r2
 8004234:	f000 fb5a 	bl	80048ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d122      	bne.n	80042fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d11b      	bne.n	80042fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0202 	mvn.w	r2, #2
 80042ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fae3 	bl	80048b0 <HAL_TIM_IC_CaptureCallback>
 80042ea:	e005      	b.n	80042f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fad5 	bl	800489c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fae6 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d122      	bne.n	8004352 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d11b      	bne.n	8004352 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0204 	mvn.w	r2, #4
 8004322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fab9 	bl	80048b0 <HAL_TIM_IC_CaptureCallback>
 800433e:	e005      	b.n	800434c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 faab 	bl	800489c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fabc 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d122      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b08      	cmp	r3, #8
 800436c:	d11b      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f06f 0208 	mvn.w	r2, #8
 8004376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2204      	movs	r2, #4
 800437c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f003 0303 	and.w	r3, r3, #3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa8f 	bl	80048b0 <HAL_TIM_IC_CaptureCallback>
 8004392:	e005      	b.n	80043a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fa81 	bl	800489c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa92 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d122      	bne.n	80043fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d11b      	bne.n	80043fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0210 	mvn.w	r2, #16
 80043ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2208      	movs	r2, #8
 80043d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fa65 	bl	80048b0 <HAL_TIM_IC_CaptureCallback>
 80043e6:	e005      	b.n	80043f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa57 	bl	800489c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa68 	bl	80048c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10e      	bne.n	8004426 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f06f 0201 	mvn.w	r2, #1
 800441e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fe31 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d10e      	bne.n	8004452 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d107      	bne.n	8004452 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800444a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fe7d 	bl	800514c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004460:	d10e      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d107      	bne.n	8004480 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fe70 	bl	8005160 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fa16 	bl	80048d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0220 	mvn.w	r2, #32
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fe30 	bl	8005138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0ff      	b.n	80046fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b14      	cmp	r3, #20
 800450a:	f200 80f0 	bhi.w	80046ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004569 	.word	0x08004569
 8004518:	080046ef 	.word	0x080046ef
 800451c:	080046ef 	.word	0x080046ef
 8004520:	080046ef 	.word	0x080046ef
 8004524:	080045a9 	.word	0x080045a9
 8004528:	080046ef 	.word	0x080046ef
 800452c:	080046ef 	.word	0x080046ef
 8004530:	080046ef 	.word	0x080046ef
 8004534:	080045eb 	.word	0x080045eb
 8004538:	080046ef 	.word	0x080046ef
 800453c:	080046ef 	.word	0x080046ef
 8004540:	080046ef 	.word	0x080046ef
 8004544:	0800462b 	.word	0x0800462b
 8004548:	080046ef 	.word	0x080046ef
 800454c:	080046ef 	.word	0x080046ef
 8004550:	080046ef 	.word	0x080046ef
 8004554:	0800466d 	.word	0x0800466d
 8004558:	080046ef 	.word	0x080046ef
 800455c:	080046ef 	.word	0x080046ef
 8004560:	080046ef 	.word	0x080046ef
 8004564:	080046ad 	.word	0x080046ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fa5c 	bl	8004a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0208 	orr.w	r2, r2, #8
 8004582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0204 	bic.w	r2, r2, #4
 8004592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	619a      	str	r2, [r3, #24]
      break;
 80045a6:	e0a5      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 faae 	bl	8004b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6999      	ldr	r1, [r3, #24]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	619a      	str	r2, [r3, #24]
      break;
 80045e8:	e084      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fb05 	bl	8004c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0208 	orr.w	r2, r2, #8
 8004604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0204 	bic.w	r2, r2, #4
 8004614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	61da      	str	r2, [r3, #28]
      break;
 8004628:	e064      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fb5b 	bl	8004cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69d9      	ldr	r1, [r3, #28]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	021a      	lsls	r2, r3, #8
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	61da      	str	r2, [r3, #28]
      break;
 800466a:	e043      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fb92 	bl	8004d9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0208 	orr.w	r2, r2, #8
 8004686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0204 	bic.w	r2, r2, #4
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046aa:	e023      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fbc4 	bl	8004e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046ec:	e002      	b.n	80046f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
      break;
 80046f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop

08004708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_TIM_ConfigClockSource+0x1c>
 8004720:	2302      	movs	r3, #2
 8004722:	e0b4      	b.n	800488e <HAL_TIM_ConfigClockSource+0x186>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_TIM_ConfigClockSource+0x190>)
 8004740:	4013      	ands	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475c:	d03e      	beq.n	80047dc <HAL_TIM_ConfigClockSource+0xd4>
 800475e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004762:	f200 8087 	bhi.w	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476a:	f000 8086 	beq.w	800487a <HAL_TIM_ConfigClockSource+0x172>
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d87f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d01a      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xa6>
 8004778:	2b70      	cmp	r3, #112	; 0x70
 800477a:	d87b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d050      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x11a>
 8004780:	2b60      	cmp	r3, #96	; 0x60
 8004782:	d877      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d03c      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xfa>
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d873      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d058      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x13a>
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d86f      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d064      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	2b30      	cmp	r3, #48	; 0x30
 800479a:	d86b      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d060      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d867      	bhi.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d05c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d05a      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0x15a>
 80047ac:	e062      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6899      	ldr	r1, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f000 fc0d 	bl	8004fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	609a      	str	r2, [r3, #8]
      break;
 80047da:	e04f      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	6899      	ldr	r1, [r3, #8]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f000 fbf6 	bl	8004fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fe:	609a      	str	r2, [r3, #8]
      break;
 8004800:	e03c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 fb6a 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2150      	movs	r1, #80	; 0x50
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fbc3 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004820:	e02c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f000 fb89 	bl	8004f46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2160      	movs	r1, #96	; 0x60
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fbb3 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004840:	e01c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	461a      	mov	r2, r3
 8004850:	f000 fb4a 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fba3 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004860:	e00c      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fb9a 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004872:	e003      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800487a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	fffeff88 	.word	0xfffeff88

0800489c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <TIM_Base_SetConfig+0x114>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <TIM_Base_SetConfig+0x118>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3c      	ldr	r2, [pc, #240]	; (8004a08 <TIM_Base_SetConfig+0x11c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3b      	ldr	r2, [pc, #236]	; (8004a0c <TIM_Base_SetConfig+0x120>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0x40>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a3a      	ldr	r2, [pc, #232]	; (8004a10 <TIM_Base_SetConfig+0x124>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d108      	bne.n	800493e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2f      	ldr	r2, [pc, #188]	; (8004a00 <TIM_Base_SetConfig+0x114>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d02b      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d027      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2c      	ldr	r2, [pc, #176]	; (8004a04 <TIM_Base_SetConfig+0x118>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d023      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <TIM_Base_SetConfig+0x11c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01f      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <TIM_Base_SetConfig+0x120>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d01b      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <TIM_Base_SetConfig+0x124>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d017      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a28      	ldr	r2, [pc, #160]	; (8004a14 <TIM_Base_SetConfig+0x128>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <TIM_Base_SetConfig+0x12c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00f      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <TIM_Base_SetConfig+0x130>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00b      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a25      	ldr	r2, [pc, #148]	; (8004a20 <TIM_Base_SetConfig+0x134>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <TIM_Base_SetConfig+0x138>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a23      	ldr	r2, [pc, #140]	; (8004a28 <TIM_Base_SetConfig+0x13c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d108      	bne.n	80049b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <TIM_Base_SetConfig+0x114>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_Base_SetConfig+0xf8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <TIM_Base_SetConfig+0x124>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d103      	bne.n	80049ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	615a      	str	r2, [r3, #20]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40000400 	.word	0x40000400
 8004a08:	40000800 	.word	0x40000800
 8004a0c:	40000c00 	.word	0x40000c00
 8004a10:	40010400 	.word	0x40010400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	40001800 	.word	0x40001800
 8004a24:	40001c00 	.word	0x40001c00
 8004a28:	40002000 	.word	0x40002000

08004a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0201 	bic.w	r2, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <TIM_OC1_SetConfig+0xd8>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f023 0302 	bic.w	r3, r3, #2
 8004a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <TIM_OC1_SetConfig+0xdc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <TIM_OC1_SetConfig+0x64>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <TIM_OC1_SetConfig+0xe0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0308 	bic.w	r3, r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_OC1_SetConfig+0xdc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC1_SetConfig+0x8e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_OC1_SetConfig+0xe0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d111      	bne.n	8004ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	fffeff8f 	.word	0xfffeff8f
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40010400 	.word	0x40010400

08004b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0210 	bic.w	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <TIM_OC2_SetConfig+0xe4>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <TIM_OC2_SetConfig+0xe8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_OC2_SetConfig+0x68>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <TIM_OC2_SetConfig+0xec>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d10d      	bne.n	8004b94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a18      	ldr	r2, [pc, #96]	; (8004bf8 <TIM_OC2_SetConfig+0xe8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC2_SetConfig+0x94>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC2_SetConfig+0xec>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d113      	bne.n	8004bcc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	feff8fff 	.word	0xfeff8fff
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40010400 	.word	0x40010400

08004c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <TIM_OC3_SetConfig+0xe0>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <TIM_OC3_SetConfig+0xe4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_OC3_SetConfig+0x66>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <TIM_OC3_SetConfig+0xe8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10d      	bne.n	8004c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <TIM_OC3_SetConfig+0xe4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d003      	beq.n	8004c92 <TIM_OC3_SetConfig+0x92>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <TIM_OC3_SetConfig+0xe8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d113      	bne.n	8004cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	621a      	str	r2, [r3, #32]
}
 8004cd4:	bf00      	nop
 8004cd6:	371c      	adds	r7, #28
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	fffeff8f 	.word	0xfffeff8f
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40010400 	.word	0x40010400

08004cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <TIM_OC4_SetConfig+0xa4>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	031b      	lsls	r3, r3, #12
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <TIM_OC4_SetConfig+0xa8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC4_SetConfig+0x68>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <TIM_OC4_SetConfig+0xac>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d109      	bne.n	8004d68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	019b      	lsls	r3, r3, #6
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	feff8fff 	.word	0xfeff8fff
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40010400 	.word	0x40010400

08004d9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <TIM_OC5_SetConfig+0x98>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <TIM_OC5_SetConfig+0x9c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_OC5_SetConfig+0x5e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <TIM_OC5_SetConfig+0xa0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d109      	bne.n	8004e0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	fffeff8f 	.word	0xfffeff8f
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <TIM_OC6_SetConfig+0x9c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	051b      	lsls	r3, r3, #20
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <TIM_OC6_SetConfig+0xa0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC6_SetConfig+0x60>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <TIM_OC6_SetConfig+0xa4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d109      	bne.n	8004eb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	feff8fff 	.word	0xfeff8fff
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	40010400 	.word	0x40010400

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f043 0307 	orr.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	609a      	str	r2, [r3, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4313      	orrs	r3, r2
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005030:	2302      	movs	r3, #2
 8005032:	e06d      	b.n	8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a30      	ldr	r2, [pc, #192]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2f      	ldr	r2, [pc, #188]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800506e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d01d      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a16      	ldr	r2, [pc, #88]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10c      	bne.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	40010000 	.word	0x40010000
 8005120:	40010400 	.word	0x40010400
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40014000 	.word	0x40014000
 8005134:	40001800 	.word	0x40001800

08005138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e040      	b.n	8005208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc fb3c 	bl	8001814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8c0 	bl	8005338 <UART_SetConfig>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e022      	b.n	8005208 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb16 	bl	80057fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fb9d 	bl	8005940 <UART_CheckIdleState>
 8005206:	4603      	mov	r3, r0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005224:	2b20      	cmp	r3, #32
 8005226:	f040 8081 	bne.w	800532c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_Transmit+0x26>
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e079      	b.n	800532e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_UART_Transmit+0x38>
 8005244:	2302      	movs	r3, #2
 8005246:	e072      	b.n	800532e <HAL_UART_Transmit+0x11e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2221      	movs	r2, #33	; 0x21
 800525c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525e:	f7fc fc79 	bl	8001b54 <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527c:	d108      	bne.n	8005290 <HAL_UART_Transmit+0x80>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e003      	b.n	8005298 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052a0:	e02c      	b.n	80052fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fb7a 	bl	80059a6 <UART_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e038      	b.n	800532e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10b      	bne.n	80052da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	3302      	adds	r3, #2
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	e007      	b.n	80052ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	781a      	ldrb	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1cc      	bne.n	80052a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	2140      	movs	r1, #64	; 0x40
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fb47 	bl	80059a6 <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e005      	b.n	800532e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4ba7      	ldr	r3, [pc, #668]	; (8005600 <UART_SetConfig+0x2c8>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a95      	ldr	r2, [pc, #596]	; (8005604 <UART_SetConfig+0x2cc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d120      	bne.n	80053f6 <UART_SetConfig+0xbe>
 80053b4:	4b94      	ldr	r3, [pc, #592]	; (8005608 <UART_SetConfig+0x2d0>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d816      	bhi.n	80053f0 <UART_SetConfig+0xb8>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0x90>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053d9 	.word	0x080053d9
 80053cc:	080053e5 	.word	0x080053e5
 80053d0:	080053df 	.word	0x080053df
 80053d4:	080053eb 	.word	0x080053eb
 80053d8:	2301      	movs	r3, #1
 80053da:	77fb      	strb	r3, [r7, #31]
 80053dc:	e14f      	b.n	800567e <UART_SetConfig+0x346>
 80053de:	2302      	movs	r3, #2
 80053e0:	77fb      	strb	r3, [r7, #31]
 80053e2:	e14c      	b.n	800567e <UART_SetConfig+0x346>
 80053e4:	2304      	movs	r3, #4
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e149      	b.n	800567e <UART_SetConfig+0x346>
 80053ea:	2308      	movs	r3, #8
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e146      	b.n	800567e <UART_SetConfig+0x346>
 80053f0:	2310      	movs	r3, #16
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e143      	b.n	800567e <UART_SetConfig+0x346>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a84      	ldr	r2, [pc, #528]	; (800560c <UART_SetConfig+0x2d4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d132      	bne.n	8005466 <UART_SetConfig+0x12e>
 8005400:	4b81      	ldr	r3, [pc, #516]	; (8005608 <UART_SetConfig+0x2d0>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f003 030c 	and.w	r3, r3, #12
 800540a:	2b0c      	cmp	r3, #12
 800540c:	d828      	bhi.n	8005460 <UART_SetConfig+0x128>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <UART_SetConfig+0xdc>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005449 	.word	0x08005449
 8005418:	08005461 	.word	0x08005461
 800541c:	08005461 	.word	0x08005461
 8005420:	08005461 	.word	0x08005461
 8005424:	08005455 	.word	0x08005455
 8005428:	08005461 	.word	0x08005461
 800542c:	08005461 	.word	0x08005461
 8005430:	08005461 	.word	0x08005461
 8005434:	0800544f 	.word	0x0800544f
 8005438:	08005461 	.word	0x08005461
 800543c:	08005461 	.word	0x08005461
 8005440:	08005461 	.word	0x08005461
 8005444:	0800545b 	.word	0x0800545b
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e117      	b.n	800567e <UART_SetConfig+0x346>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e114      	b.n	800567e <UART_SetConfig+0x346>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e111      	b.n	800567e <UART_SetConfig+0x346>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e10e      	b.n	800567e <UART_SetConfig+0x346>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e10b      	b.n	800567e <UART_SetConfig+0x346>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a69      	ldr	r2, [pc, #420]	; (8005610 <UART_SetConfig+0x2d8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d120      	bne.n	80054b2 <UART_SetConfig+0x17a>
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <UART_SetConfig+0x2d0>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d013      	beq.n	80054a6 <UART_SetConfig+0x16e>
 800547e:	2b30      	cmp	r3, #48	; 0x30
 8005480:	d814      	bhi.n	80054ac <UART_SetConfig+0x174>
 8005482:	2b20      	cmp	r3, #32
 8005484:	d009      	beq.n	800549a <UART_SetConfig+0x162>
 8005486:	2b20      	cmp	r3, #32
 8005488:	d810      	bhi.n	80054ac <UART_SetConfig+0x174>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <UART_SetConfig+0x15c>
 800548e:	2b10      	cmp	r3, #16
 8005490:	d006      	beq.n	80054a0 <UART_SetConfig+0x168>
 8005492:	e00b      	b.n	80054ac <UART_SetConfig+0x174>
 8005494:	2300      	movs	r3, #0
 8005496:	77fb      	strb	r3, [r7, #31]
 8005498:	e0f1      	b.n	800567e <UART_SetConfig+0x346>
 800549a:	2302      	movs	r3, #2
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e0ee      	b.n	800567e <UART_SetConfig+0x346>
 80054a0:	2304      	movs	r3, #4
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e0eb      	b.n	800567e <UART_SetConfig+0x346>
 80054a6:	2308      	movs	r3, #8
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e0e8      	b.n	800567e <UART_SetConfig+0x346>
 80054ac:	2310      	movs	r3, #16
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e0e5      	b.n	800567e <UART_SetConfig+0x346>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a57      	ldr	r2, [pc, #348]	; (8005614 <UART_SetConfig+0x2dc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d120      	bne.n	80054fe <UART_SetConfig+0x1c6>
 80054bc:	4b52      	ldr	r3, [pc, #328]	; (8005608 <UART_SetConfig+0x2d0>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054c6:	2bc0      	cmp	r3, #192	; 0xc0
 80054c8:	d013      	beq.n	80054f2 <UART_SetConfig+0x1ba>
 80054ca:	2bc0      	cmp	r3, #192	; 0xc0
 80054cc:	d814      	bhi.n	80054f8 <UART_SetConfig+0x1c0>
 80054ce:	2b80      	cmp	r3, #128	; 0x80
 80054d0:	d009      	beq.n	80054e6 <UART_SetConfig+0x1ae>
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d810      	bhi.n	80054f8 <UART_SetConfig+0x1c0>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <UART_SetConfig+0x1a8>
 80054da:	2b40      	cmp	r3, #64	; 0x40
 80054dc:	d006      	beq.n	80054ec <UART_SetConfig+0x1b4>
 80054de:	e00b      	b.n	80054f8 <UART_SetConfig+0x1c0>
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e0cb      	b.n	800567e <UART_SetConfig+0x346>
 80054e6:	2302      	movs	r3, #2
 80054e8:	77fb      	strb	r3, [r7, #31]
 80054ea:	e0c8      	b.n	800567e <UART_SetConfig+0x346>
 80054ec:	2304      	movs	r3, #4
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e0c5      	b.n	800567e <UART_SetConfig+0x346>
 80054f2:	2308      	movs	r3, #8
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e0c2      	b.n	800567e <UART_SetConfig+0x346>
 80054f8:	2310      	movs	r3, #16
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e0bf      	b.n	800567e <UART_SetConfig+0x346>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a45      	ldr	r2, [pc, #276]	; (8005618 <UART_SetConfig+0x2e0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d125      	bne.n	8005554 <UART_SetConfig+0x21c>
 8005508:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <UART_SetConfig+0x2d0>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005516:	d017      	beq.n	8005548 <UART_SetConfig+0x210>
 8005518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551c:	d817      	bhi.n	800554e <UART_SetConfig+0x216>
 800551e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005522:	d00b      	beq.n	800553c <UART_SetConfig+0x204>
 8005524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005528:	d811      	bhi.n	800554e <UART_SetConfig+0x216>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <UART_SetConfig+0x1fe>
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d006      	beq.n	8005542 <UART_SetConfig+0x20a>
 8005534:	e00b      	b.n	800554e <UART_SetConfig+0x216>
 8005536:	2300      	movs	r3, #0
 8005538:	77fb      	strb	r3, [r7, #31]
 800553a:	e0a0      	b.n	800567e <UART_SetConfig+0x346>
 800553c:	2302      	movs	r3, #2
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e09d      	b.n	800567e <UART_SetConfig+0x346>
 8005542:	2304      	movs	r3, #4
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e09a      	b.n	800567e <UART_SetConfig+0x346>
 8005548:	2308      	movs	r3, #8
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e097      	b.n	800567e <UART_SetConfig+0x346>
 800554e:	2310      	movs	r3, #16
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e094      	b.n	800567e <UART_SetConfig+0x346>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a30      	ldr	r2, [pc, #192]	; (800561c <UART_SetConfig+0x2e4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d125      	bne.n	80055aa <UART_SetConfig+0x272>
 800555e:	4b2a      	ldr	r3, [pc, #168]	; (8005608 <UART_SetConfig+0x2d0>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800556c:	d017      	beq.n	800559e <UART_SetConfig+0x266>
 800556e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005572:	d817      	bhi.n	80055a4 <UART_SetConfig+0x26c>
 8005574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005578:	d00b      	beq.n	8005592 <UART_SetConfig+0x25a>
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557e:	d811      	bhi.n	80055a4 <UART_SetConfig+0x26c>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <UART_SetConfig+0x254>
 8005584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005588:	d006      	beq.n	8005598 <UART_SetConfig+0x260>
 800558a:	e00b      	b.n	80055a4 <UART_SetConfig+0x26c>
 800558c:	2301      	movs	r3, #1
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e075      	b.n	800567e <UART_SetConfig+0x346>
 8005592:	2302      	movs	r3, #2
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	e072      	b.n	800567e <UART_SetConfig+0x346>
 8005598:	2304      	movs	r3, #4
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e06f      	b.n	800567e <UART_SetConfig+0x346>
 800559e:	2308      	movs	r3, #8
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e06c      	b.n	800567e <UART_SetConfig+0x346>
 80055a4:	2310      	movs	r3, #16
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e069      	b.n	800567e <UART_SetConfig+0x346>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <UART_SetConfig+0x2e8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d137      	bne.n	8005624 <UART_SetConfig+0x2ec>
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <UART_SetConfig+0x2d0>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c2:	d017      	beq.n	80055f4 <UART_SetConfig+0x2bc>
 80055c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c8:	d817      	bhi.n	80055fa <UART_SetConfig+0x2c2>
 80055ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ce:	d00b      	beq.n	80055e8 <UART_SetConfig+0x2b0>
 80055d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d4:	d811      	bhi.n	80055fa <UART_SetConfig+0x2c2>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <UART_SetConfig+0x2aa>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d006      	beq.n	80055ee <UART_SetConfig+0x2b6>
 80055e0:	e00b      	b.n	80055fa <UART_SetConfig+0x2c2>
 80055e2:	2300      	movs	r3, #0
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e04a      	b.n	800567e <UART_SetConfig+0x346>
 80055e8:	2302      	movs	r3, #2
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e047      	b.n	800567e <UART_SetConfig+0x346>
 80055ee:	2304      	movs	r3, #4
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e044      	b.n	800567e <UART_SetConfig+0x346>
 80055f4:	2308      	movs	r3, #8
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e041      	b.n	800567e <UART_SetConfig+0x346>
 80055fa:	2310      	movs	r3, #16
 80055fc:	77fb      	strb	r3, [r7, #31]
 80055fe:	e03e      	b.n	800567e <UART_SetConfig+0x346>
 8005600:	efff69f3 	.word	0xefff69f3
 8005604:	40011000 	.word	0x40011000
 8005608:	40023800 	.word	0x40023800
 800560c:	40004400 	.word	0x40004400
 8005610:	40004800 	.word	0x40004800
 8005614:	40004c00 	.word	0x40004c00
 8005618:	40005000 	.word	0x40005000
 800561c:	40011400 	.word	0x40011400
 8005620:	40007800 	.word	0x40007800
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a71      	ldr	r2, [pc, #452]	; (80057f0 <UART_SetConfig+0x4b8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d125      	bne.n	800567a <UART_SetConfig+0x342>
 800562e:	4b71      	ldr	r3, [pc, #452]	; (80057f4 <UART_SetConfig+0x4bc>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005638:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800563c:	d017      	beq.n	800566e <UART_SetConfig+0x336>
 800563e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005642:	d817      	bhi.n	8005674 <UART_SetConfig+0x33c>
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005648:	d00b      	beq.n	8005662 <UART_SetConfig+0x32a>
 800564a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564e:	d811      	bhi.n	8005674 <UART_SetConfig+0x33c>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <UART_SetConfig+0x324>
 8005654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005658:	d006      	beq.n	8005668 <UART_SetConfig+0x330>
 800565a:	e00b      	b.n	8005674 <UART_SetConfig+0x33c>
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e00d      	b.n	800567e <UART_SetConfig+0x346>
 8005662:	2302      	movs	r3, #2
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e00a      	b.n	800567e <UART_SetConfig+0x346>
 8005668:	2304      	movs	r3, #4
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e007      	b.n	800567e <UART_SetConfig+0x346>
 800566e:	2308      	movs	r3, #8
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e004      	b.n	800567e <UART_SetConfig+0x346>
 8005674:	2310      	movs	r3, #16
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e001      	b.n	800567e <UART_SetConfig+0x346>
 800567a:	2310      	movs	r3, #16
 800567c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005686:	d15a      	bne.n	800573e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005688:	7ffb      	ldrb	r3, [r7, #31]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d827      	bhi.n	80056de <UART_SetConfig+0x3a6>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <UART_SetConfig+0x35c>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056cf 	.word	0x080056cf
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056df 	.word	0x080056df
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fe f8b4 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80056bc:	61b8      	str	r0, [r7, #24]
        break;
 80056be:	e013      	b.n	80056e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fe f8c4 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 80056c4:	61b8      	str	r0, [r7, #24]
        break;
 80056c6:	e00f      	b.n	80056e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <UART_SetConfig+0x4c0>)
 80056ca:	61bb      	str	r3, [r7, #24]
        break;
 80056cc:	e00c      	b.n	80056e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd ffbb 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 80056d2:	61b8      	str	r0, [r7, #24]
        break;
 80056d4:	e008      	b.n	80056e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	61bb      	str	r3, [r7, #24]
        break;
 80056dc:	e004      	b.n	80056e8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	77bb      	strb	r3, [r7, #30]
        break;
 80056e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d074      	beq.n	80057d8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	005a      	lsls	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	441a      	add	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d916      	bls.n	8005738 <UART_SetConfig+0x400>
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005710:	d212      	bcs.n	8005738 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f023 030f 	bic.w	r3, r3, #15
 800571a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	b29b      	uxth	r3, r3
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	b29a      	uxth	r2, r3
 8005728:	89fb      	ldrh	r3, [r7, #14]
 800572a:	4313      	orrs	r3, r2
 800572c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	89fa      	ldrh	r2, [r7, #14]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	e04f      	b.n	80057d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	77bb      	strb	r3, [r7, #30]
 800573c:	e04c      	b.n	80057d8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800573e:	7ffb      	ldrb	r3, [r7, #31]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d828      	bhi.n	8005796 <UART_SetConfig+0x45e>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0x414>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	08005771 	.word	0x08005771
 8005750:	08005779 	.word	0x08005779
 8005754:	08005781 	.word	0x08005781
 8005758:	08005797 	.word	0x08005797
 800575c:	08005787 	.word	0x08005787
 8005760:	08005797 	.word	0x08005797
 8005764:	08005797 	.word	0x08005797
 8005768:	08005797 	.word	0x08005797
 800576c:	0800578f 	.word	0x0800578f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fe f858 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8005774:	61b8      	str	r0, [r7, #24]
        break;
 8005776:	e013      	b.n	80057a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005778:	f7fe f868 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 800577c:	61b8      	str	r0, [r7, #24]
        break;
 800577e:	e00f      	b.n	80057a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <UART_SetConfig+0x4c0>)
 8005782:	61bb      	str	r3, [r7, #24]
        break;
 8005784:	e00c      	b.n	80057a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005786:	f7fd ff5f 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 800578a:	61b8      	str	r0, [r7, #24]
        break;
 800578c:	e008      	b.n	80057a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	61bb      	str	r3, [r7, #24]
        break;
 8005794:	e004      	b.n	80057a0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	77bb      	strb	r3, [r7, #30]
        break;
 800579e:	bf00      	nop
    }

    if (pclk != 0U)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d018      	beq.n	80057d8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	085a      	lsrs	r2, r3, #1
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	441a      	add	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	2b0f      	cmp	r3, #15
 80057be:	d909      	bls.n	80057d4 <UART_SetConfig+0x49c>
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	d205      	bcs.n	80057d4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	e001      	b.n	80057d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80057e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40007c00 	.word	0x40007c00
 80057f4:	40023800 	.word	0x40023800
 80057f8:	00f42400 	.word	0x00f42400

080057fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01a      	beq.n	8005912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fa:	d10a      	bne.n	8005912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005950:	f7fc f900 	bl	8001b54 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d10e      	bne.n	8005982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f817 	bl	80059a6 <UART_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e00d      	b.n	800599e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b09c      	sub	sp, #112	; 0x70
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4613      	mov	r3, r2
 80059b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b6:	e0a5      	b.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	f000 80a1 	beq.w	8005b04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c2:	f7fc f8c7 	bl	8001b54 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d302      	bcc.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80059d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d13e      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ec:	667b      	str	r3, [r7, #100]	; 0x64
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e6      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	663b      	str	r3, [r7, #96]	; 0x60
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e067      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d04f      	beq.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a72:	d147      	bne.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e6      	bne.n	8005a7e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ad0:	623a      	str	r2, [r7, #32]
 8005ad2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	69f9      	ldr	r1, [r7, #28]
 8005ad6:	6a3a      	ldr	r2, [r7, #32]
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2220      	movs	r2, #32
 8005aee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e010      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	f43f af4a 	beq.w	80059b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3770      	adds	r7, #112	; 0x70
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b30:	b084      	sub	sp, #16
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	f107 001c 	add.w	r0, r7, #28
 8005b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d120      	bne.n	8005b8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <USB_CoreInit+0xac>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d105      	bne.n	8005b7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa92 	bl	80060a8 <USB_CoreReset>
 8005b84:	4603      	mov	r3, r0
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	e010      	b.n	8005bac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa86 	bl	80060a8 <USB_CoreReset>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10b      	bne.n	8005bca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f043 0206 	orr.w	r2, r3, #6
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd6:	b004      	add	sp, #16
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	ffbdffbf 	.word	0xffbdffbf

08005be0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f023 0201 	bic.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d115      	bne.n	8005c50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c30:	2001      	movs	r0, #1
 8005c32:	f7fb ff9b 	bl	8001b6c <HAL_Delay>
      ms++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa25 	bl	800608c <USB_GetMode>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d01e      	beq.n	8005c86 <USB_SetCurrentMode+0x84>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b31      	cmp	r3, #49	; 0x31
 8005c4c:	d9f0      	bls.n	8005c30 <USB_SetCurrentMode+0x2e>
 8005c4e:	e01a      	b.n	8005c86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d115      	bne.n	8005c82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c62:	2001      	movs	r0, #1
 8005c64:	f7fb ff82 	bl	8001b6c <HAL_Delay>
      ms++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa0c 	bl	800608c <USB_GetMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <USB_SetCurrentMode+0x84>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b31      	cmp	r3, #49	; 0x31
 8005c7e:	d9f0      	bls.n	8005c62 <USB_SetCurrentMode+0x60>
 8005c80:	e001      	b.n	8005c86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e005      	b.n	8005c92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b32      	cmp	r3, #50	; 0x32
 8005c8a:	d101      	bne.n	8005c90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e009      	b.n	8005cd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3340      	adds	r3, #64	; 0x40
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b0e      	cmp	r3, #14
 8005cd4:	d9f2      	bls.n	8005cbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d11c      	bne.n	8005d16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e005      	b.n	8005d22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d34:	4619      	mov	r1, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	680b      	ldr	r3, [r1, #0]
 8005d40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10c      	bne.n	8005d62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d104      	bne.n	8005d58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f961 	bl	8006018 <USB_SetDevSpeed>
 8005d56:	e008      	b.n	8005d6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d58:	2101      	movs	r1, #1
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f95c 	bl	8006018 <USB_SetDevSpeed>
 8005d60:	e003      	b.n	8005d6a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d62:	2103      	movs	r1, #3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f957 	bl	8006018 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d6a:	2110      	movs	r1, #16
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8f3 	bl	8005f58 <USB_FlushTxFifo>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f91d 	bl	8005fbc <USB_FlushRxFifo>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	461a      	mov	r2, r3
 8005d94:	2300      	movs	r3, #0
 8005d96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	461a      	mov	r2, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	e043      	b.n	8005e3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dcc:	d118      	bne.n	8005e00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	461a      	mov	r2, r3
 8005de2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e013      	b.n	8005e12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e008      	b.n	8005e12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d3b7      	bcc.n	8005db6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	e043      	b.n	8005ed4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e62:	d118      	bne.n	8005e96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	461a      	mov	r2, r3
 8005e78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e013      	b.n	8005ea8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e008      	b.n	8005ea8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3b7      	bcc.n	8005e4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005efc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f043 0210 	orr.w	r2, r3, #16
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <USB_DevInit+0x2b4>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f043 0208 	orr.w	r2, r3, #8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <USB_DevInit+0x2b8>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f4c:	b004      	add	sp, #16
 8005f4e:	4770      	bx	lr
 8005f50:	803c3800 	.word	0x803c3800
 8005f54:	40000004 	.word	0x40000004

08005f58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <USB_FlushTxFifo+0x60>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e01a      	b.n	8005fac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf3      	bge.n	8005f66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	019b      	lsls	r3, r3, #6
 8005f86:	f043 0220 	orr.w	r2, r3, #32
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <USB_FlushTxFifo+0x60>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e006      	b.n	8005fac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d0f1      	beq.n	8005f8e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	00030d40 	.word	0x00030d40

08005fbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	4a11      	ldr	r2, [pc, #68]	; (8006014 <USB_FlushRxFifo+0x58>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d901      	bls.n	8005fd8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e017      	b.n	8006008 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	daf3      	bge.n	8005fc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	4a08      	ldr	r2, [pc, #32]	; (8006014 <USB_FlushRxFifo+0x58>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e006      	b.n	8006008 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d0f1      	beq.n	8005fea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	00030d40 	.word	0x00030d40

08006018 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006038:	4313      	orrs	r3, r2
 800603a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006064:	f023 0303 	bic.w	r3, r3, #3
 8006068:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006078:	f043 0302 	orr.w	r3, r3, #2
 800607c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0301 	and.w	r3, r3, #1
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	4a13      	ldr	r2, [pc, #76]	; (8006108 <USB_CoreReset+0x60>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e01a      	b.n	80060fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	daf3      	bge.n	80060b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f043 0201 	orr.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	4a09      	ldr	r2, [pc, #36]	; (8006108 <USB_CoreReset+0x60>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d901      	bls.n	80060ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e006      	b.n	80060fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d0f1      	beq.n	80060dc <USB_CoreReset+0x34>

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	00030d40 	.word	0x00030d40

0800610c <__errno>:
 800610c:	4b01      	ldr	r3, [pc, #4]	; (8006114 <__errno+0x8>)
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000038 	.word	0x20000038

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4d0d      	ldr	r5, [pc, #52]	; (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 800611e:	1b64      	subs	r4, r4, r5
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2600      	movs	r6, #0
 8006124:	42a6      	cmp	r6, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4d0b      	ldr	r5, [pc, #44]	; (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	; (800615c <__libc_init_array+0x44>)
 800612c:	f000 fc4e 	bl	80069cc <_init>
 8006130:	1b64      	subs	r4, r4, r5
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2600      	movs	r6, #0
 8006136:	42a6      	cmp	r6, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006140:	4798      	blx	r3
 8006142:	3601      	adds	r6, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f855 3b04 	ldr.w	r3, [r5], #4
 800614a:	4798      	blx	r3
 800614c:	3601      	adds	r6, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	08006a48 	.word	0x08006a48
 8006154:	08006a48 	.word	0x08006a48
 8006158:	08006a48 	.word	0x08006a48
 800615c:	08006a4c 	.word	0x08006a4c

08006160 <memset>:
 8006160:	4402      	add	r2, r0
 8006162:	4603      	mov	r3, r0
 8006164:	4293      	cmp	r3, r2
 8006166:	d100      	bne.n	800616a <memset+0xa>
 8006168:	4770      	bx	lr
 800616a:	f803 1b01 	strb.w	r1, [r3], #1
 800616e:	e7f9      	b.n	8006164 <memset+0x4>

08006170 <siprintf>:
 8006170:	b40e      	push	{r1, r2, r3}
 8006172:	b500      	push	{lr}
 8006174:	b09c      	sub	sp, #112	; 0x70
 8006176:	ab1d      	add	r3, sp, #116	; 0x74
 8006178:	9002      	str	r0, [sp, #8]
 800617a:	9006      	str	r0, [sp, #24]
 800617c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006180:	4809      	ldr	r0, [pc, #36]	; (80061a8 <siprintf+0x38>)
 8006182:	9107      	str	r1, [sp, #28]
 8006184:	9104      	str	r1, [sp, #16]
 8006186:	4909      	ldr	r1, [pc, #36]	; (80061ac <siprintf+0x3c>)
 8006188:	f853 2b04 	ldr.w	r2, [r3], #4
 800618c:	9105      	str	r1, [sp, #20]
 800618e:	6800      	ldr	r0, [r0, #0]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	a902      	add	r1, sp, #8
 8006194:	f000 f868 	bl	8006268 <_svfiprintf_r>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	2200      	movs	r2, #0
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	b01c      	add	sp, #112	; 0x70
 80061a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a4:	b003      	add	sp, #12
 80061a6:	4770      	bx	lr
 80061a8:	20000038 	.word	0x20000038
 80061ac:	ffff0208 	.word	0xffff0208

080061b0 <__ssputs_r>:
 80061b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	688e      	ldr	r6, [r1, #8]
 80061b6:	429e      	cmp	r6, r3
 80061b8:	4682      	mov	sl, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	4690      	mov	r8, r2
 80061be:	461f      	mov	r7, r3
 80061c0:	d838      	bhi.n	8006234 <__ssputs_r+0x84>
 80061c2:	898a      	ldrh	r2, [r1, #12]
 80061c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061c8:	d032      	beq.n	8006230 <__ssputs_r+0x80>
 80061ca:	6825      	ldr	r5, [r4, #0]
 80061cc:	6909      	ldr	r1, [r1, #16]
 80061ce:	eba5 0901 	sub.w	r9, r5, r1
 80061d2:	6965      	ldr	r5, [r4, #20]
 80061d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061dc:	3301      	adds	r3, #1
 80061de:	444b      	add	r3, r9
 80061e0:	106d      	asrs	r5, r5, #1
 80061e2:	429d      	cmp	r5, r3
 80061e4:	bf38      	it	cc
 80061e6:	461d      	movcc	r5, r3
 80061e8:	0553      	lsls	r3, r2, #21
 80061ea:	d531      	bpl.n	8006250 <__ssputs_r+0xa0>
 80061ec:	4629      	mov	r1, r5
 80061ee:	f000 fb47 	bl	8006880 <_malloc_r>
 80061f2:	4606      	mov	r6, r0
 80061f4:	b950      	cbnz	r0, 800620c <__ssputs_r+0x5c>
 80061f6:	230c      	movs	r3, #12
 80061f8:	f8ca 3000 	str.w	r3, [sl]
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006202:	81a3      	strh	r3, [r4, #12]
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620c:	6921      	ldr	r1, [r4, #16]
 800620e:	464a      	mov	r2, r9
 8006210:	f000 fabe 	bl	8006790 <memcpy>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800621a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	6126      	str	r6, [r4, #16]
 8006222:	6165      	str	r5, [r4, #20]
 8006224:	444e      	add	r6, r9
 8006226:	eba5 0509 	sub.w	r5, r5, r9
 800622a:	6026      	str	r6, [r4, #0]
 800622c:	60a5      	str	r5, [r4, #8]
 800622e:	463e      	mov	r6, r7
 8006230:	42be      	cmp	r6, r7
 8006232:	d900      	bls.n	8006236 <__ssputs_r+0x86>
 8006234:	463e      	mov	r6, r7
 8006236:	4632      	mov	r2, r6
 8006238:	6820      	ldr	r0, [r4, #0]
 800623a:	4641      	mov	r1, r8
 800623c:	f000 fab6 	bl	80067ac <memmove>
 8006240:	68a3      	ldr	r3, [r4, #8]
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	1b9b      	subs	r3, r3, r6
 8006246:	4432      	add	r2, r6
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	6022      	str	r2, [r4, #0]
 800624c:	2000      	movs	r0, #0
 800624e:	e7db      	b.n	8006208 <__ssputs_r+0x58>
 8006250:	462a      	mov	r2, r5
 8006252:	f000 fb6f 	bl	8006934 <_realloc_r>
 8006256:	4606      	mov	r6, r0
 8006258:	2800      	cmp	r0, #0
 800625a:	d1e1      	bne.n	8006220 <__ssputs_r+0x70>
 800625c:	6921      	ldr	r1, [r4, #16]
 800625e:	4650      	mov	r0, sl
 8006260:	f000 fabe 	bl	80067e0 <_free_r>
 8006264:	e7c7      	b.n	80061f6 <__ssputs_r+0x46>
	...

08006268 <_svfiprintf_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	4698      	mov	r8, r3
 800626e:	898b      	ldrh	r3, [r1, #12]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	b09d      	sub	sp, #116	; 0x74
 8006274:	4607      	mov	r7, r0
 8006276:	460d      	mov	r5, r1
 8006278:	4614      	mov	r4, r2
 800627a:	d50e      	bpl.n	800629a <_svfiprintf_r+0x32>
 800627c:	690b      	ldr	r3, [r1, #16]
 800627e:	b963      	cbnz	r3, 800629a <_svfiprintf_r+0x32>
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	f000 fafd 	bl	8006880 <_malloc_r>
 8006286:	6028      	str	r0, [r5, #0]
 8006288:	6128      	str	r0, [r5, #16]
 800628a:	b920      	cbnz	r0, 8006296 <_svfiprintf_r+0x2e>
 800628c:	230c      	movs	r3, #12
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295
 8006294:	e0d1      	b.n	800643a <_svfiprintf_r+0x1d2>
 8006296:	2340      	movs	r3, #64	; 0x40
 8006298:	616b      	str	r3, [r5, #20]
 800629a:	2300      	movs	r3, #0
 800629c:	9309      	str	r3, [sp, #36]	; 0x24
 800629e:	2320      	movs	r3, #32
 80062a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a8:	2330      	movs	r3, #48	; 0x30
 80062aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006454 <_svfiprintf_r+0x1ec>
 80062ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062b2:	f04f 0901 	mov.w	r9, #1
 80062b6:	4623      	mov	r3, r4
 80062b8:	469a      	mov	sl, r3
 80062ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062be:	b10a      	cbz	r2, 80062c4 <_svfiprintf_r+0x5c>
 80062c0:	2a25      	cmp	r2, #37	; 0x25
 80062c2:	d1f9      	bne.n	80062b8 <_svfiprintf_r+0x50>
 80062c4:	ebba 0b04 	subs.w	fp, sl, r4
 80062c8:	d00b      	beq.n	80062e2 <_svfiprintf_r+0x7a>
 80062ca:	465b      	mov	r3, fp
 80062cc:	4622      	mov	r2, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ff6d 	bl	80061b0 <__ssputs_r>
 80062d6:	3001      	adds	r0, #1
 80062d8:	f000 80aa 	beq.w	8006430 <_svfiprintf_r+0x1c8>
 80062dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062de:	445a      	add	r2, fp
 80062e0:	9209      	str	r2, [sp, #36]	; 0x24
 80062e2:	f89a 3000 	ldrb.w	r3, [sl]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80a2 	beq.w	8006430 <_svfiprintf_r+0x1c8>
 80062ec:	2300      	movs	r3, #0
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f6:	f10a 0a01 	add.w	sl, sl, #1
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	9307      	str	r3, [sp, #28]
 80062fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006302:	931a      	str	r3, [sp, #104]	; 0x68
 8006304:	4654      	mov	r4, sl
 8006306:	2205      	movs	r2, #5
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	4851      	ldr	r0, [pc, #324]	; (8006454 <_svfiprintf_r+0x1ec>)
 800630e:	f7f9 ff7f 	bl	8000210 <memchr>
 8006312:	9a04      	ldr	r2, [sp, #16]
 8006314:	b9d8      	cbnz	r0, 800634e <_svfiprintf_r+0xe6>
 8006316:	06d0      	lsls	r0, r2, #27
 8006318:	bf44      	itt	mi
 800631a:	2320      	movmi	r3, #32
 800631c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006320:	0711      	lsls	r1, r2, #28
 8006322:	bf44      	itt	mi
 8006324:	232b      	movmi	r3, #43	; 0x2b
 8006326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632a:	f89a 3000 	ldrb.w	r3, [sl]
 800632e:	2b2a      	cmp	r3, #42	; 0x2a
 8006330:	d015      	beq.n	800635e <_svfiprintf_r+0xf6>
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	4654      	mov	r4, sl
 8006336:	2000      	movs	r0, #0
 8006338:	f04f 0c0a 	mov.w	ip, #10
 800633c:	4621      	mov	r1, r4
 800633e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006342:	3b30      	subs	r3, #48	; 0x30
 8006344:	2b09      	cmp	r3, #9
 8006346:	d94e      	bls.n	80063e6 <_svfiprintf_r+0x17e>
 8006348:	b1b0      	cbz	r0, 8006378 <_svfiprintf_r+0x110>
 800634a:	9207      	str	r2, [sp, #28]
 800634c:	e014      	b.n	8006378 <_svfiprintf_r+0x110>
 800634e:	eba0 0308 	sub.w	r3, r0, r8
 8006352:	fa09 f303 	lsl.w	r3, r9, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	9304      	str	r3, [sp, #16]
 800635a:	46a2      	mov	sl, r4
 800635c:	e7d2      	b.n	8006304 <_svfiprintf_r+0x9c>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	1d19      	adds	r1, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9103      	str	r1, [sp, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfbb      	ittet	lt
 800636a:	425b      	neglt	r3, r3
 800636c:	f042 0202 	orrlt.w	r2, r2, #2
 8006370:	9307      	strge	r3, [sp, #28]
 8006372:	9307      	strlt	r3, [sp, #28]
 8006374:	bfb8      	it	lt
 8006376:	9204      	strlt	r2, [sp, #16]
 8006378:	7823      	ldrb	r3, [r4, #0]
 800637a:	2b2e      	cmp	r3, #46	; 0x2e
 800637c:	d10c      	bne.n	8006398 <_svfiprintf_r+0x130>
 800637e:	7863      	ldrb	r3, [r4, #1]
 8006380:	2b2a      	cmp	r3, #42	; 0x2a
 8006382:	d135      	bne.n	80063f0 <_svfiprintf_r+0x188>
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	9203      	str	r2, [sp, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfb8      	it	lt
 8006390:	f04f 33ff 	movlt.w	r3, #4294967295
 8006394:	3402      	adds	r4, #2
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006464 <_svfiprintf_r+0x1fc>
 800639c:	7821      	ldrb	r1, [r4, #0]
 800639e:	2203      	movs	r2, #3
 80063a0:	4650      	mov	r0, sl
 80063a2:	f7f9 ff35 	bl	8000210 <memchr>
 80063a6:	b140      	cbz	r0, 80063ba <_svfiprintf_r+0x152>
 80063a8:	2340      	movs	r3, #64	; 0x40
 80063aa:	eba0 000a 	sub.w	r0, r0, sl
 80063ae:	fa03 f000 	lsl.w	r0, r3, r0
 80063b2:	9b04      	ldr	r3, [sp, #16]
 80063b4:	4303      	orrs	r3, r0
 80063b6:	3401      	adds	r4, #1
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	4826      	ldr	r0, [pc, #152]	; (8006458 <_svfiprintf_r+0x1f0>)
 80063c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063c4:	2206      	movs	r2, #6
 80063c6:	f7f9 ff23 	bl	8000210 <memchr>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d038      	beq.n	8006440 <_svfiprintf_r+0x1d8>
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <_svfiprintf_r+0x1f4>)
 80063d0:	bb1b      	cbnz	r3, 800641a <_svfiprintf_r+0x1b2>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	3307      	adds	r3, #7
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	3308      	adds	r3, #8
 80063dc:	9303      	str	r3, [sp, #12]
 80063de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e0:	4433      	add	r3, r6
 80063e2:	9309      	str	r3, [sp, #36]	; 0x24
 80063e4:	e767      	b.n	80062b6 <_svfiprintf_r+0x4e>
 80063e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ea:	460c      	mov	r4, r1
 80063ec:	2001      	movs	r0, #1
 80063ee:	e7a5      	b.n	800633c <_svfiprintf_r+0xd4>
 80063f0:	2300      	movs	r3, #0
 80063f2:	3401      	adds	r4, #1
 80063f4:	9305      	str	r3, [sp, #20]
 80063f6:	4619      	mov	r1, r3
 80063f8:	f04f 0c0a 	mov.w	ip, #10
 80063fc:	4620      	mov	r0, r4
 80063fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006402:	3a30      	subs	r2, #48	; 0x30
 8006404:	2a09      	cmp	r2, #9
 8006406:	d903      	bls.n	8006410 <_svfiprintf_r+0x1a8>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0c5      	beq.n	8006398 <_svfiprintf_r+0x130>
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	e7c3      	b.n	8006398 <_svfiprintf_r+0x130>
 8006410:	fb0c 2101 	mla	r1, ip, r1, r2
 8006414:	4604      	mov	r4, r0
 8006416:	2301      	movs	r3, #1
 8006418:	e7f0      	b.n	80063fc <_svfiprintf_r+0x194>
 800641a:	ab03      	add	r3, sp, #12
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	462a      	mov	r2, r5
 8006420:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <_svfiprintf_r+0x1f8>)
 8006422:	a904      	add	r1, sp, #16
 8006424:	4638      	mov	r0, r7
 8006426:	f3af 8000 	nop.w
 800642a:	1c42      	adds	r2, r0, #1
 800642c:	4606      	mov	r6, r0
 800642e:	d1d6      	bne.n	80063de <_svfiprintf_r+0x176>
 8006430:	89ab      	ldrh	r3, [r5, #12]
 8006432:	065b      	lsls	r3, r3, #25
 8006434:	f53f af2c 	bmi.w	8006290 <_svfiprintf_r+0x28>
 8006438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800643a:	b01d      	add	sp, #116	; 0x74
 800643c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006440:	ab03      	add	r3, sp, #12
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	462a      	mov	r2, r5
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <_svfiprintf_r+0x1f8>)
 8006448:	a904      	add	r1, sp, #16
 800644a:	4638      	mov	r0, r7
 800644c:	f000 f87a 	bl	8006544 <_printf_i>
 8006450:	e7eb      	b.n	800642a <_svfiprintf_r+0x1c2>
 8006452:	bf00      	nop
 8006454:	08006a0c 	.word	0x08006a0c
 8006458:	08006a16 	.word	0x08006a16
 800645c:	00000000 	.word	0x00000000
 8006460:	080061b1 	.word	0x080061b1
 8006464:	08006a12 	.word	0x08006a12

08006468 <_printf_common>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	4616      	mov	r6, r2
 800646e:	4699      	mov	r9, r3
 8006470:	688a      	ldr	r2, [r1, #8]
 8006472:	690b      	ldr	r3, [r1, #16]
 8006474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006478:	4293      	cmp	r3, r2
 800647a:	bfb8      	it	lt
 800647c:	4613      	movlt	r3, r2
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006484:	4607      	mov	r7, r0
 8006486:	460c      	mov	r4, r1
 8006488:	b10a      	cbz	r2, 800648e <_printf_common+0x26>
 800648a:	3301      	adds	r3, #1
 800648c:	6033      	str	r3, [r6, #0]
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	0699      	lsls	r1, r3, #26
 8006492:	bf42      	ittt	mi
 8006494:	6833      	ldrmi	r3, [r6, #0]
 8006496:	3302      	addmi	r3, #2
 8006498:	6033      	strmi	r3, [r6, #0]
 800649a:	6825      	ldr	r5, [r4, #0]
 800649c:	f015 0506 	ands.w	r5, r5, #6
 80064a0:	d106      	bne.n	80064b0 <_printf_common+0x48>
 80064a2:	f104 0a19 	add.w	sl, r4, #25
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	6832      	ldr	r2, [r6, #0]
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	dc26      	bgt.n	80064fe <_printf_common+0x96>
 80064b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064b4:	1e13      	subs	r3, r2, #0
 80064b6:	6822      	ldr	r2, [r4, #0]
 80064b8:	bf18      	it	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	0692      	lsls	r2, r2, #26
 80064be:	d42b      	bmi.n	8006518 <_printf_common+0xb0>
 80064c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064c4:	4649      	mov	r1, r9
 80064c6:	4638      	mov	r0, r7
 80064c8:	47c0      	blx	r8
 80064ca:	3001      	adds	r0, #1
 80064cc:	d01e      	beq.n	800650c <_printf_common+0xa4>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	68e5      	ldr	r5, [r4, #12]
 80064d2:	6832      	ldr	r2, [r6, #0]
 80064d4:	f003 0306 	and.w	r3, r3, #6
 80064d8:	2b04      	cmp	r3, #4
 80064da:	bf08      	it	eq
 80064dc:	1aad      	subeq	r5, r5, r2
 80064de:	68a3      	ldr	r3, [r4, #8]
 80064e0:	6922      	ldr	r2, [r4, #16]
 80064e2:	bf0c      	ite	eq
 80064e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064e8:	2500      	movne	r5, #0
 80064ea:	4293      	cmp	r3, r2
 80064ec:	bfc4      	itt	gt
 80064ee:	1a9b      	subgt	r3, r3, r2
 80064f0:	18ed      	addgt	r5, r5, r3
 80064f2:	2600      	movs	r6, #0
 80064f4:	341a      	adds	r4, #26
 80064f6:	42b5      	cmp	r5, r6
 80064f8:	d11a      	bne.n	8006530 <_printf_common+0xc8>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e008      	b.n	8006510 <_printf_common+0xa8>
 80064fe:	2301      	movs	r3, #1
 8006500:	4652      	mov	r2, sl
 8006502:	4649      	mov	r1, r9
 8006504:	4638      	mov	r0, r7
 8006506:	47c0      	blx	r8
 8006508:	3001      	adds	r0, #1
 800650a:	d103      	bne.n	8006514 <_printf_common+0xac>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	3501      	adds	r5, #1
 8006516:	e7c6      	b.n	80064a6 <_printf_common+0x3e>
 8006518:	18e1      	adds	r1, r4, r3
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	2030      	movs	r0, #48	; 0x30
 800651e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006522:	4422      	add	r2, r4
 8006524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800652c:	3302      	adds	r3, #2
 800652e:	e7c7      	b.n	80064c0 <_printf_common+0x58>
 8006530:	2301      	movs	r3, #1
 8006532:	4622      	mov	r2, r4
 8006534:	4649      	mov	r1, r9
 8006536:	4638      	mov	r0, r7
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d0e6      	beq.n	800650c <_printf_common+0xa4>
 800653e:	3601      	adds	r6, #1
 8006540:	e7d9      	b.n	80064f6 <_printf_common+0x8e>
	...

08006544 <_printf_i>:
 8006544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	4691      	mov	r9, r2
 800654c:	7e27      	ldrb	r7, [r4, #24]
 800654e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006550:	2f78      	cmp	r7, #120	; 0x78
 8006552:	4680      	mov	r8, r0
 8006554:	469a      	mov	sl, r3
 8006556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800655a:	d807      	bhi.n	800656c <_printf_i+0x28>
 800655c:	2f62      	cmp	r7, #98	; 0x62
 800655e:	d80a      	bhi.n	8006576 <_printf_i+0x32>
 8006560:	2f00      	cmp	r7, #0
 8006562:	f000 80d8 	beq.w	8006716 <_printf_i+0x1d2>
 8006566:	2f58      	cmp	r7, #88	; 0x58
 8006568:	f000 80a3 	beq.w	80066b2 <_printf_i+0x16e>
 800656c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006574:	e03a      	b.n	80065ec <_printf_i+0xa8>
 8006576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800657a:	2b15      	cmp	r3, #21
 800657c:	d8f6      	bhi.n	800656c <_printf_i+0x28>
 800657e:	a001      	add	r0, pc, #4	; (adr r0, 8006584 <_printf_i+0x40>)
 8006580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006584:	080065dd 	.word	0x080065dd
 8006588:	080065f1 	.word	0x080065f1
 800658c:	0800656d 	.word	0x0800656d
 8006590:	0800656d 	.word	0x0800656d
 8006594:	0800656d 	.word	0x0800656d
 8006598:	0800656d 	.word	0x0800656d
 800659c:	080065f1 	.word	0x080065f1
 80065a0:	0800656d 	.word	0x0800656d
 80065a4:	0800656d 	.word	0x0800656d
 80065a8:	0800656d 	.word	0x0800656d
 80065ac:	0800656d 	.word	0x0800656d
 80065b0:	080066fd 	.word	0x080066fd
 80065b4:	08006621 	.word	0x08006621
 80065b8:	080066df 	.word	0x080066df
 80065bc:	0800656d 	.word	0x0800656d
 80065c0:	0800656d 	.word	0x0800656d
 80065c4:	0800671f 	.word	0x0800671f
 80065c8:	0800656d 	.word	0x0800656d
 80065cc:	08006621 	.word	0x08006621
 80065d0:	0800656d 	.word	0x0800656d
 80065d4:	0800656d 	.word	0x0800656d
 80065d8:	080066e7 	.word	0x080066e7
 80065dc:	680b      	ldr	r3, [r1, #0]
 80065de:	1d1a      	adds	r2, r3, #4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	600a      	str	r2, [r1, #0]
 80065e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0a3      	b.n	8006738 <_printf_i+0x1f4>
 80065f0:	6825      	ldr	r5, [r4, #0]
 80065f2:	6808      	ldr	r0, [r1, #0]
 80065f4:	062e      	lsls	r6, r5, #24
 80065f6:	f100 0304 	add.w	r3, r0, #4
 80065fa:	d50a      	bpl.n	8006612 <_printf_i+0xce>
 80065fc:	6805      	ldr	r5, [r0, #0]
 80065fe:	600b      	str	r3, [r1, #0]
 8006600:	2d00      	cmp	r5, #0
 8006602:	da03      	bge.n	800660c <_printf_i+0xc8>
 8006604:	232d      	movs	r3, #45	; 0x2d
 8006606:	426d      	negs	r5, r5
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800660c:	485e      	ldr	r0, [pc, #376]	; (8006788 <_printf_i+0x244>)
 800660e:	230a      	movs	r3, #10
 8006610:	e019      	b.n	8006646 <_printf_i+0x102>
 8006612:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006616:	6805      	ldr	r5, [r0, #0]
 8006618:	600b      	str	r3, [r1, #0]
 800661a:	bf18      	it	ne
 800661c:	b22d      	sxthne	r5, r5
 800661e:	e7ef      	b.n	8006600 <_printf_i+0xbc>
 8006620:	680b      	ldr	r3, [r1, #0]
 8006622:	6825      	ldr	r5, [r4, #0]
 8006624:	1d18      	adds	r0, r3, #4
 8006626:	6008      	str	r0, [r1, #0]
 8006628:	0628      	lsls	r0, r5, #24
 800662a:	d501      	bpl.n	8006630 <_printf_i+0xec>
 800662c:	681d      	ldr	r5, [r3, #0]
 800662e:	e002      	b.n	8006636 <_printf_i+0xf2>
 8006630:	0669      	lsls	r1, r5, #25
 8006632:	d5fb      	bpl.n	800662c <_printf_i+0xe8>
 8006634:	881d      	ldrh	r5, [r3, #0]
 8006636:	4854      	ldr	r0, [pc, #336]	; (8006788 <_printf_i+0x244>)
 8006638:	2f6f      	cmp	r7, #111	; 0x6f
 800663a:	bf0c      	ite	eq
 800663c:	2308      	moveq	r3, #8
 800663e:	230a      	movne	r3, #10
 8006640:	2100      	movs	r1, #0
 8006642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006646:	6866      	ldr	r6, [r4, #4]
 8006648:	60a6      	str	r6, [r4, #8]
 800664a:	2e00      	cmp	r6, #0
 800664c:	bfa2      	ittt	ge
 800664e:	6821      	ldrge	r1, [r4, #0]
 8006650:	f021 0104 	bicge.w	r1, r1, #4
 8006654:	6021      	strge	r1, [r4, #0]
 8006656:	b90d      	cbnz	r5, 800665c <_printf_i+0x118>
 8006658:	2e00      	cmp	r6, #0
 800665a:	d04d      	beq.n	80066f8 <_printf_i+0x1b4>
 800665c:	4616      	mov	r6, r2
 800665e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006662:	fb03 5711 	mls	r7, r3, r1, r5
 8006666:	5dc7      	ldrb	r7, [r0, r7]
 8006668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800666c:	462f      	mov	r7, r5
 800666e:	42bb      	cmp	r3, r7
 8006670:	460d      	mov	r5, r1
 8006672:	d9f4      	bls.n	800665e <_printf_i+0x11a>
 8006674:	2b08      	cmp	r3, #8
 8006676:	d10b      	bne.n	8006690 <_printf_i+0x14c>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07df      	lsls	r7, r3, #31
 800667c:	d508      	bpl.n	8006690 <_printf_i+0x14c>
 800667e:	6923      	ldr	r3, [r4, #16]
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	4299      	cmp	r1, r3
 8006684:	bfde      	ittt	le
 8006686:	2330      	movle	r3, #48	; 0x30
 8006688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800668c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006690:	1b92      	subs	r2, r2, r6
 8006692:	6122      	str	r2, [r4, #16]
 8006694:	f8cd a000 	str.w	sl, [sp]
 8006698:	464b      	mov	r3, r9
 800669a:	aa03      	add	r2, sp, #12
 800669c:	4621      	mov	r1, r4
 800669e:	4640      	mov	r0, r8
 80066a0:	f7ff fee2 	bl	8006468 <_printf_common>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d14c      	bne.n	8006742 <_printf_i+0x1fe>
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	b004      	add	sp, #16
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	4835      	ldr	r0, [pc, #212]	; (8006788 <_printf_i+0x244>)
 80066b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	680e      	ldr	r6, [r1, #0]
 80066bc:	061f      	lsls	r7, r3, #24
 80066be:	f856 5b04 	ldr.w	r5, [r6], #4
 80066c2:	600e      	str	r6, [r1, #0]
 80066c4:	d514      	bpl.n	80066f0 <_printf_i+0x1ac>
 80066c6:	07d9      	lsls	r1, r3, #31
 80066c8:	bf44      	itt	mi
 80066ca:	f043 0320 	orrmi.w	r3, r3, #32
 80066ce:	6023      	strmi	r3, [r4, #0]
 80066d0:	b91d      	cbnz	r5, 80066da <_printf_i+0x196>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	f023 0320 	bic.w	r3, r3, #32
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	2310      	movs	r3, #16
 80066dc:	e7b0      	b.n	8006640 <_printf_i+0xfc>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	f043 0320 	orr.w	r3, r3, #32
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	2378      	movs	r3, #120	; 0x78
 80066e8:	4828      	ldr	r0, [pc, #160]	; (800678c <_printf_i+0x248>)
 80066ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ee:	e7e3      	b.n	80066b8 <_printf_i+0x174>
 80066f0:	065e      	lsls	r6, r3, #25
 80066f2:	bf48      	it	mi
 80066f4:	b2ad      	uxthmi	r5, r5
 80066f6:	e7e6      	b.n	80066c6 <_printf_i+0x182>
 80066f8:	4616      	mov	r6, r2
 80066fa:	e7bb      	b.n	8006674 <_printf_i+0x130>
 80066fc:	680b      	ldr	r3, [r1, #0]
 80066fe:	6826      	ldr	r6, [r4, #0]
 8006700:	6960      	ldr	r0, [r4, #20]
 8006702:	1d1d      	adds	r5, r3, #4
 8006704:	600d      	str	r5, [r1, #0]
 8006706:	0635      	lsls	r5, r6, #24
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	d501      	bpl.n	8006710 <_printf_i+0x1cc>
 800670c:	6018      	str	r0, [r3, #0]
 800670e:	e002      	b.n	8006716 <_printf_i+0x1d2>
 8006710:	0671      	lsls	r1, r6, #25
 8006712:	d5fb      	bpl.n	800670c <_printf_i+0x1c8>
 8006714:	8018      	strh	r0, [r3, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	4616      	mov	r6, r2
 800671c:	e7ba      	b.n	8006694 <_printf_i+0x150>
 800671e:	680b      	ldr	r3, [r1, #0]
 8006720:	1d1a      	adds	r2, r3, #4
 8006722:	600a      	str	r2, [r1, #0]
 8006724:	681e      	ldr	r6, [r3, #0]
 8006726:	6862      	ldr	r2, [r4, #4]
 8006728:	2100      	movs	r1, #0
 800672a:	4630      	mov	r0, r6
 800672c:	f7f9 fd70 	bl	8000210 <memchr>
 8006730:	b108      	cbz	r0, 8006736 <_printf_i+0x1f2>
 8006732:	1b80      	subs	r0, r0, r6
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	6863      	ldr	r3, [r4, #4]
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	2300      	movs	r3, #0
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006740:	e7a8      	b.n	8006694 <_printf_i+0x150>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	4632      	mov	r2, r6
 8006746:	4649      	mov	r1, r9
 8006748:	4640      	mov	r0, r8
 800674a:	47d0      	blx	sl
 800674c:	3001      	adds	r0, #1
 800674e:	d0ab      	beq.n	80066a8 <_printf_i+0x164>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	079b      	lsls	r3, r3, #30
 8006754:	d413      	bmi.n	800677e <_printf_i+0x23a>
 8006756:	68e0      	ldr	r0, [r4, #12]
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	4298      	cmp	r0, r3
 800675c:	bfb8      	it	lt
 800675e:	4618      	movlt	r0, r3
 8006760:	e7a4      	b.n	80066ac <_printf_i+0x168>
 8006762:	2301      	movs	r3, #1
 8006764:	4632      	mov	r2, r6
 8006766:	4649      	mov	r1, r9
 8006768:	4640      	mov	r0, r8
 800676a:	47d0      	blx	sl
 800676c:	3001      	adds	r0, #1
 800676e:	d09b      	beq.n	80066a8 <_printf_i+0x164>
 8006770:	3501      	adds	r5, #1
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	9903      	ldr	r1, [sp, #12]
 8006776:	1a5b      	subs	r3, r3, r1
 8006778:	42ab      	cmp	r3, r5
 800677a:	dcf2      	bgt.n	8006762 <_printf_i+0x21e>
 800677c:	e7eb      	b.n	8006756 <_printf_i+0x212>
 800677e:	2500      	movs	r5, #0
 8006780:	f104 0619 	add.w	r6, r4, #25
 8006784:	e7f5      	b.n	8006772 <_printf_i+0x22e>
 8006786:	bf00      	nop
 8006788:	08006a1d 	.word	0x08006a1d
 800678c:	08006a2e 	.word	0x08006a2e

08006790 <memcpy>:
 8006790:	440a      	add	r2, r1
 8006792:	4291      	cmp	r1, r2
 8006794:	f100 33ff 	add.w	r3, r0, #4294967295
 8006798:	d100      	bne.n	800679c <memcpy+0xc>
 800679a:	4770      	bx	lr
 800679c:	b510      	push	{r4, lr}
 800679e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067a6:	4291      	cmp	r1, r2
 80067a8:	d1f9      	bne.n	800679e <memcpy+0xe>
 80067aa:	bd10      	pop	{r4, pc}

080067ac <memmove>:
 80067ac:	4288      	cmp	r0, r1
 80067ae:	b510      	push	{r4, lr}
 80067b0:	eb01 0402 	add.w	r4, r1, r2
 80067b4:	d902      	bls.n	80067bc <memmove+0x10>
 80067b6:	4284      	cmp	r4, r0
 80067b8:	4623      	mov	r3, r4
 80067ba:	d807      	bhi.n	80067cc <memmove+0x20>
 80067bc:	1e43      	subs	r3, r0, #1
 80067be:	42a1      	cmp	r1, r4
 80067c0:	d008      	beq.n	80067d4 <memmove+0x28>
 80067c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ca:	e7f8      	b.n	80067be <memmove+0x12>
 80067cc:	4402      	add	r2, r0
 80067ce:	4601      	mov	r1, r0
 80067d0:	428a      	cmp	r2, r1
 80067d2:	d100      	bne.n	80067d6 <memmove+0x2a>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067de:	e7f7      	b.n	80067d0 <memmove+0x24>

080067e0 <_free_r>:
 80067e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d048      	beq.n	8006878 <_free_r+0x98>
 80067e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f1a1 0404 	sub.w	r4, r1, #4
 80067f2:	bfb8      	it	lt
 80067f4:	18e4      	addlt	r4, r4, r3
 80067f6:	f000 f8d3 	bl	80069a0 <__malloc_lock>
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <_free_r+0x9c>)
 80067fc:	9801      	ldr	r0, [sp, #4]
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	4615      	mov	r5, r2
 8006802:	b933      	cbnz	r3, 8006812 <_free_r+0x32>
 8006804:	6063      	str	r3, [r4, #4]
 8006806:	6014      	str	r4, [r2, #0]
 8006808:	b003      	add	sp, #12
 800680a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800680e:	f000 b8cd 	b.w	80069ac <__malloc_unlock>
 8006812:	42a3      	cmp	r3, r4
 8006814:	d90b      	bls.n	800682e <_free_r+0x4e>
 8006816:	6821      	ldr	r1, [r4, #0]
 8006818:	1862      	adds	r2, r4, r1
 800681a:	4293      	cmp	r3, r2
 800681c:	bf04      	itt	eq
 800681e:	681a      	ldreq	r2, [r3, #0]
 8006820:	685b      	ldreq	r3, [r3, #4]
 8006822:	6063      	str	r3, [r4, #4]
 8006824:	bf04      	itt	eq
 8006826:	1852      	addeq	r2, r2, r1
 8006828:	6022      	streq	r2, [r4, #0]
 800682a:	602c      	str	r4, [r5, #0]
 800682c:	e7ec      	b.n	8006808 <_free_r+0x28>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x58>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x4e>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1855      	adds	r5, r2, r1
 800683c:	42a5      	cmp	r5, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x78>
 8006840:	6824      	ldr	r4, [r4, #0]
 8006842:	4421      	add	r1, r4
 8006844:	1854      	adds	r4, r2, r1
 8006846:	42a3      	cmp	r3, r4
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1dd      	bne.n	8006808 <_free_r+0x28>
 800684c:	681c      	ldr	r4, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4421      	add	r1, r4
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	e7d7      	b.n	8006808 <_free_r+0x28>
 8006858:	d902      	bls.n	8006860 <_free_r+0x80>
 800685a:	230c      	movs	r3, #12
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	e7d3      	b.n	8006808 <_free_r+0x28>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	1961      	adds	r1, r4, r5
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1949      	addeq	r1, r1, r5
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7c7      	b.n	8006808 <_free_r+0x28>
 8006878:	b003      	add	sp, #12
 800687a:	bd30      	pop	{r4, r5, pc}
 800687c:	200000bc 	.word	0x200000bc

08006880 <_malloc_r>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	1ccd      	adds	r5, r1, #3
 8006884:	f025 0503 	bic.w	r5, r5, #3
 8006888:	3508      	adds	r5, #8
 800688a:	2d0c      	cmp	r5, #12
 800688c:	bf38      	it	cc
 800688e:	250c      	movcc	r5, #12
 8006890:	2d00      	cmp	r5, #0
 8006892:	4606      	mov	r6, r0
 8006894:	db01      	blt.n	800689a <_malloc_r+0x1a>
 8006896:	42a9      	cmp	r1, r5
 8006898:	d903      	bls.n	80068a2 <_malloc_r+0x22>
 800689a:	230c      	movs	r3, #12
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	2000      	movs	r0, #0
 80068a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a2:	f000 f87d 	bl	80069a0 <__malloc_lock>
 80068a6:	4921      	ldr	r1, [pc, #132]	; (800692c <_malloc_r+0xac>)
 80068a8:	680a      	ldr	r2, [r1, #0]
 80068aa:	4614      	mov	r4, r2
 80068ac:	b99c      	cbnz	r4, 80068d6 <_malloc_r+0x56>
 80068ae:	4f20      	ldr	r7, [pc, #128]	; (8006930 <_malloc_r+0xb0>)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	b923      	cbnz	r3, 80068be <_malloc_r+0x3e>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4630      	mov	r0, r6
 80068b8:	f000 f862 	bl	8006980 <_sbrk_r>
 80068bc:	6038      	str	r0, [r7, #0]
 80068be:	4629      	mov	r1, r5
 80068c0:	4630      	mov	r0, r6
 80068c2:	f000 f85d 	bl	8006980 <_sbrk_r>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d123      	bne.n	8006912 <_malloc_r+0x92>
 80068ca:	230c      	movs	r3, #12
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	4630      	mov	r0, r6
 80068d0:	f000 f86c 	bl	80069ac <__malloc_unlock>
 80068d4:	e7e3      	b.n	800689e <_malloc_r+0x1e>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	1b5b      	subs	r3, r3, r5
 80068da:	d417      	bmi.n	800690c <_malloc_r+0x8c>
 80068dc:	2b0b      	cmp	r3, #11
 80068de:	d903      	bls.n	80068e8 <_malloc_r+0x68>
 80068e0:	6023      	str	r3, [r4, #0]
 80068e2:	441c      	add	r4, r3
 80068e4:	6025      	str	r5, [r4, #0]
 80068e6:	e004      	b.n	80068f2 <_malloc_r+0x72>
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	42a2      	cmp	r2, r4
 80068ec:	bf0c      	ite	eq
 80068ee:	600b      	streq	r3, [r1, #0]
 80068f0:	6053      	strne	r3, [r2, #4]
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 f85a 	bl	80069ac <__malloc_unlock>
 80068f8:	f104 000b 	add.w	r0, r4, #11
 80068fc:	1d23      	adds	r3, r4, #4
 80068fe:	f020 0007 	bic.w	r0, r0, #7
 8006902:	1ac2      	subs	r2, r0, r3
 8006904:	d0cc      	beq.n	80068a0 <_malloc_r+0x20>
 8006906:	1a1b      	subs	r3, r3, r0
 8006908:	50a3      	str	r3, [r4, r2]
 800690a:	e7c9      	b.n	80068a0 <_malloc_r+0x20>
 800690c:	4622      	mov	r2, r4
 800690e:	6864      	ldr	r4, [r4, #4]
 8006910:	e7cc      	b.n	80068ac <_malloc_r+0x2c>
 8006912:	1cc4      	adds	r4, r0, #3
 8006914:	f024 0403 	bic.w	r4, r4, #3
 8006918:	42a0      	cmp	r0, r4
 800691a:	d0e3      	beq.n	80068e4 <_malloc_r+0x64>
 800691c:	1a21      	subs	r1, r4, r0
 800691e:	4630      	mov	r0, r6
 8006920:	f000 f82e 	bl	8006980 <_sbrk_r>
 8006924:	3001      	adds	r0, #1
 8006926:	d1dd      	bne.n	80068e4 <_malloc_r+0x64>
 8006928:	e7cf      	b.n	80068ca <_malloc_r+0x4a>
 800692a:	bf00      	nop
 800692c:	200000bc 	.word	0x200000bc
 8006930:	200000c0 	.word	0x200000c0

08006934 <_realloc_r>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	4607      	mov	r7, r0
 8006938:	4614      	mov	r4, r2
 800693a:	460e      	mov	r6, r1
 800693c:	b921      	cbnz	r1, 8006948 <_realloc_r+0x14>
 800693e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006942:	4611      	mov	r1, r2
 8006944:	f7ff bf9c 	b.w	8006880 <_malloc_r>
 8006948:	b922      	cbnz	r2, 8006954 <_realloc_r+0x20>
 800694a:	f7ff ff49 	bl	80067e0 <_free_r>
 800694e:	4625      	mov	r5, r4
 8006950:	4628      	mov	r0, r5
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006954:	f000 f830 	bl	80069b8 <_malloc_usable_size_r>
 8006958:	42a0      	cmp	r0, r4
 800695a:	d20f      	bcs.n	800697c <_realloc_r+0x48>
 800695c:	4621      	mov	r1, r4
 800695e:	4638      	mov	r0, r7
 8006960:	f7ff ff8e 	bl	8006880 <_malloc_r>
 8006964:	4605      	mov	r5, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0f2      	beq.n	8006950 <_realloc_r+0x1c>
 800696a:	4631      	mov	r1, r6
 800696c:	4622      	mov	r2, r4
 800696e:	f7ff ff0f 	bl	8006790 <memcpy>
 8006972:	4631      	mov	r1, r6
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff33 	bl	80067e0 <_free_r>
 800697a:	e7e9      	b.n	8006950 <_realloc_r+0x1c>
 800697c:	4635      	mov	r5, r6
 800697e:	e7e7      	b.n	8006950 <_realloc_r+0x1c>

08006980 <_sbrk_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d06      	ldr	r5, [pc, #24]	; (800699c <_sbrk_r+0x1c>)
 8006984:	2300      	movs	r3, #0
 8006986:	4604      	mov	r4, r0
 8006988:	4608      	mov	r0, r1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	f7fb f820 	bl	80019d0 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_sbrk_r+0x1a>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_sbrk_r+0x1a>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20000634 	.word	0x20000634

080069a0 <__malloc_lock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__malloc_lock+0x8>)
 80069a2:	f000 b811 	b.w	80069c8 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	2000063c 	.word	0x2000063c

080069ac <__malloc_unlock>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__malloc_unlock+0x8>)
 80069ae:	f000 b80c 	b.w	80069ca <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	2000063c 	.word	0x2000063c

080069b8 <_malloc_usable_size_r>:
 80069b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069bc:	1f18      	subs	r0, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbc      	itt	lt
 80069c2:	580b      	ldrlt	r3, [r1, r0]
 80069c4:	18c0      	addlt	r0, r0, r3
 80069c6:	4770      	bx	lr

080069c8 <__retarget_lock_acquire_recursive>:
 80069c8:	4770      	bx	lr

080069ca <__retarget_lock_release_recursive>:
 80069ca:	4770      	bx	lr

080069cc <_init>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr

080069d8 <_fini>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr
