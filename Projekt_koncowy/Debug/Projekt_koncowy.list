
Projekt_koncowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800cd48  0800cd48  0001cd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d25c  0800d25c  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800d25c  0800d25c  0001d25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d264  0800d264  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d264  0800d264  0001d264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d268  0800d268  0001d268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800d26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  20000244  0800d4b0  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  0800d4b0  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea0c  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cf  00000000  00000000  0003ec80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00042650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  00043bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029542  00000000  00000000  00044f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9e4  00000000  00000000  0006e4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5a98  00000000  00000000  00089ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071e0  00000000  00000000  0017f9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd30 	.word	0x0800cd30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	0800cd30 	.word	0x0800cd30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	b299      	uxth	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f107 020f 	add.w	r2, r7, #15
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	f001 fe39 	bl	8002cc4 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8001052:	2310      	movs	r3, #16
 8001054:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	b299      	uxth	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f107 020f 	add.w	r2, r7, #15
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	f001 fe2a 	bl	8002cc4 <HAL_I2C_Master_Transmit>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	b299      	uxth	r1, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f107 020c 	add.w	r2, r7, #12
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	f001 ff09 	bl	8002eac <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	7b7a      	ldrb	r2, [r7, #13]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010c0 <BH1750_ReadIlluminance_lux+0x48>
 80010ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	3f99999a 	.word	0x3f99999a

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_I2C1_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <MX_I2C1_Init+0x7c>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_I2C1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_I2C1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_I2C1_Init+0x74>)
 8001100:	f001 fd50 	bl	8002ba4 <HAL_I2C_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800110a:	f000 fd61 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_I2C1_Init+0x74>)
 8001112:	f002 fa39 	bl	8003588 <HAL_I2CEx_ConfigAnalogFilter>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 fd58 	bl	8001bd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	2100      	movs	r1, #0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_I2C1_Init+0x74>)
 8001124:	f002 fa7b 	bl	800361e <HAL_I2CEx_ConfigDigitalFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 fd4f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000270 	.word	0x20000270
 800113c:	40005400 	.word	0x40005400
 8001140:	20404768 	.word	0x20404768

08001144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_I2C_MspInit+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d128      	bne.n	80011b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001190:	2304      	movs	r3, #4
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_I2C_MspInit+0x84>)
 800119c:	f001 fb18 	bl	80027d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400

080011cc <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6898      	ldr	r0, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 fca0 	bl	8002b28 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7d9b      	ldrb	r3, [r3, #22]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d115      	bne.n	800121c <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7f1b      	ldrb	r3, [r3, #28]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2204      	movs	r2, #4
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f842 	bl	800128c <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2204      	movs	r2, #4
 8001212:	4619      	mov	r1, r3
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f839 	bl	800128c <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 800121a:	e005      	b.n	8001228 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2208      	movs	r2, #8
 8001220:	4619      	mov	r1, r3
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f832 	bl	800128c <lcd_write>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6898      	ldr	r0, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	899b      	ldrh	r3, [r3, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	f001 fc6e 	bl	8002b28 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d9b      	ldrb	r3, [r3, #22]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d111      	bne.n	8001278 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2204      	movs	r2, #4
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f814 	bl	800128c <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2204      	movs	r2, #4
 800126e:	4619      	mov	r1, r3
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f80b 	bl	800128c <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001276:	e005      	b.n	8001284 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2208      	movs	r2, #8
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f804 	bl	800128c <lcd_write>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	70fb      	strb	r3, [r7, #3]
 8001298:	4613      	mov	r3, r2
 800129a:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f001 fc3e 	bl	8002b28 <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e019      	b.n	80012e6 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	6818      	ldr	r0, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	8819      	ldrh	r1, [r3, #0]
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	fa42 f303 	asr.w	r3, r2, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f001 fc24 	bl	8002b28 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	3301      	adds	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	78bb      	ldrb	r3, [r7, #2]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d3e1      	bcc.n	80012b2 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6918      	ldr	r0, [r3, #16]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	8a9b      	ldrh	r3, [r3, #20]
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f001 fc15 	bl	8002b28 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 80012fe:	2132      	movs	r1, #50	; 0x32
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f804 	bl	800130e <lcd_delay_us>
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fc0c 	bl	8004b44 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 800132c:	bf00      	nop
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f8      	bhi.n	800132e <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fc6f 	bl	8004c24 <HAL_TIM_Base_Stop>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 800135c:	f643 315f 	movw	r1, #15199	; 0x3b5f
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffd4 	bl	800130e <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7d9b      	ldrb	r3, [r3, #22]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d120      	bne.n	80013b0 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 800136e:	2103      	movs	r1, #3
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff2b 	bl	80011cc <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001376:	f241 0167 	movw	r1, #4199	; 0x1067
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffc7 	bl	800130e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001380:	2103      	movs	r1, #3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff22 	bl	80011cc <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001388:	21c8      	movs	r1, #200	; 0xc8
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffbf 	bl	800130e <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001390:	2103      	movs	r1, #3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff1a 	bl	80011cc <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001398:	2102      	movs	r1, #2
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ff16 	bl	80011cc <lcd_write_command>

    hlcd->IsInitialized = 1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80013a6:	2128      	movs	r1, #40	; 0x28
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff0f 	bl	80011cc <lcd_write_command>
 80013ae:	e01f      	b.n	80013f0 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7d9b      	ldrb	r3, [r3, #22]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11b      	bne.n	80013f0 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013b8:	2130      	movs	r1, #48	; 0x30
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ff06 	bl	80011cc <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80013c0:	f241 0167 	movw	r1, #4199	; 0x1067
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffa2 	bl	800130e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013ca:	2130      	movs	r1, #48	; 0x30
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fefd 	bl	80011cc <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80013d2:	21c8      	movs	r1, #200	; 0xc8
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff9a 	bl	800130e <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80013da:	2130      	movs	r1, #48	; 0x30
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fef5 	bl	80011cc <lcd_write_command>

	hlcd->IsInitialized = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 80013e8:	2138      	movs	r1, #56	; 0x38
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff feee 	bl	80011cc <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 80013f0:	2101      	movs	r1, #1
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff feea 	bl	80011cc <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 80013f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff86 	bl	800130e <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001402:	210c      	movs	r1, #12
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fee1 	bl	80011cc <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800140a:	2106      	movs	r1, #6
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fedd 	bl	80011cc <lcd_write_command>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e00a      	b.n	8001440 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fefb 	bl	8001230 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3301      	adds	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	7bfc      	ldrb	r4, [r7, #15]
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f7fe fee4 	bl	8000210 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	429c      	cmp	r4, r3
 800144c:	d3ed      	bcc.n	800142a <LCD_printStr+0x10>
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}

08001458 <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 8001458:	b40e      	push	{r1, r2, r3}
 800145a:	b580      	push	{r7, lr}
 800145c:	b095      	sub	sp, #84	; 0x54
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001462:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001466:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001470:	4618      	mov	r0, r3
 8001472:	f008 f9b5 	bl	80097e0 <vsiprintf>
  LCD_printStr(hlcd, buffer);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffcc 	bl	800141a <LCD_printStr>
  va_end(args);
}
 8001482:	bf00      	nop
 8001484:	3754      	adds	r7, #84	; 0x54
 8001486:	46bd      	mov	sp, r7
 8001488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800148c:	b003      	add	sp, #12
 800148e:	4770      	bx	lr

08001490 <calculate_discrete_pid>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float calculate_discrete_pid(pid* pid, float setpoint, float measured){
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	ed87 0a02 	vstr	s0, [r7, #8]
 800149c:	edc7 0a01 	vstr	s1, [r7, #4]
	float u=0, P, I, D, error, integral, derivative;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28


	error = setpoint-measured;
 80014a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80014aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//proportional part
	P = pid->p.Kp * error;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	edc7 7a08 	vstr	s15, [r7, #32]

	//integral part
	integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edd3 6a04 	vldr	s13, [r3, #16]
 80014d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->previous_integral = integral;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	615a      	str	r2, [r3, #20]
	I = pid->p.Ki*integral*(pid->p.dt/2.0);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80014f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f8:	ee17 0a90 	vmov	r0, s15
 80014fc:	f7ff f844 	bl	8000588 <__aeabi_f2d>
 8001500:	4604      	mov	r4, r0
 8001502:	460d      	mov	r5, r1
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f83d 	bl	8000588 <__aeabi_f2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001516:	f7ff f9b9 	bl	800088c <__aeabi_ddiv>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff f889 	bl	8000638 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb7b 	bl	8000c28 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	61bb      	str	r3, [r7, #24]

	//derivative part
	derivative = (error - pid->previous_error)/pid->p.dt; //numerical derivative without filter
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	edd3 7a04 	vldr	s15, [r3, #16]
 800153c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001540:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	ed93 7a03 	vldr	s14, [r3, #12]
 800154a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800154e:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->previous_error = error;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001556:	611a      	str	r2, [r3, #16]
	D = pid->p.Kd*derivative;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edd3 7a02 	vldr	s15, [r3, #8]
 800155e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	edc7 7a04 	vstr	s15, [r7, #16]

	//sum of all parts
	u = P  + I + D; //without saturation
 800156a:	ed97 7a08 	vldr	s14, [r7, #32]
 800156e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ed97 7a04 	vldr	s14, [r7, #16]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float u_sat = 0;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(u<0) u_sat =0;
 8001588:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800158c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d503      	bpl.n	800159e <calculate_discrete_pid+0x10e>
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	e00d      	b.n	80015ba <calculate_discrete_pid+0x12a>
	else if(u>1998) u_sat = 1998;
 800159e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015a2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80015cc <calculate_discrete_pid+0x13c>
 80015a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	dd02      	ble.n	80015b6 <calculate_discrete_pid+0x126>
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <calculate_discrete_pid+0x140>)
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	e001      	b.n	80015ba <calculate_discrete_pid+0x12a>
	else u_sat = u;
 80015b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	return u_sat;
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	ee07 3a90 	vmov	s15, r3
}
 80015c0:	eeb0 0a67 	vmov.f32	s0, s15
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	44f9c000 	.word	0x44f9c000
 80015d0:	44f9c000 	.word	0x44f9c000

080015d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  if(htim->Instance == TIM2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e4:	d168      	bne.n	80016b8 <HAL_TIM_PeriodElapsedCallback+0xe4>
  {
  	char str_buffer[32];
  	int n;

	light = BH1750_ReadIlluminance_lux(hbh1750);
 80015e6:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd44 	bl	8001078 <BH1750_ReadIlluminance_lux>
 80015f0:	eef0 7a40 	vmov.f32	s15, s0
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]

	float pwm_duty_f = (calculate_discrete_pid(&pid1, set_point, light));
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	482f      	ldr	r0, [pc, #188]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001610:	f7ff ff3e 	bl	8001490 <calculate_discrete_pid>
 8001614:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	uint32_t pwm_duty = (int)pwm_duty_f;
 8001618:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	633b      	str	r3, [r7, #48]	; 0x30

	if(pwm_duty<=999)
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800162c:	d208      	bcs.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm_duty);
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001634:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
 800163e:	e014      	b.n	800166a <HAL_TIM_PeriodElapsedCallback+0x96>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 999);
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty%999);
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001652:	fba3 0302 	umull	r0, r3, r3, r2
 8001656:	1ad0      	subs	r0, r2, r3
 8001658:	0840      	lsrs	r0, r0, #1
 800165a:	4403      	add	r3, r0
 800165c:	0a5b      	lsrs	r3, r3, #9
 800165e:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001662:	fb00 f303 	mul.w	r3, r0, r3
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	634b      	str	r3, [r1, #52]	; 0x34
	}

	n = sprintf(str_buffer, "{\"Light\":%6d}", (int)light);
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	ee17 2a90 	vmov	r2, s15
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800167e:	4618      	mov	r0, r3
 8001680:	f007 f952 	bl	8008928 <siprintf>
 8001684:	62f8      	str	r0, [r7, #44]	; 0x2c

	str_buffer[n] = '\r';
 8001686:	f107 020c 	add.w	r2, r7, #12
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	4413      	add	r3, r2
 800168e:	220d      	movs	r2, #13
 8001690:	701a      	strb	r2, [r3, #0]
	str_buffer[n+1] = '\n';
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	3301      	adds	r3, #1
 8001696:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800169a:	4413      	add	r3, r2
 800169c:	220a      	movs	r2, #10
 800169e:	f803 2c2c 	strb.w	r2, [r3, #-44]
  	HAL_UART_Transmit(&huart3, (uint8_t*)str_buffer, n+2, 1000);
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3302      	adds	r3, #2
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f107 010c 	add.w	r1, r7, #12
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	480a      	ldr	r0, [pc, #40]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x108>)
 80016b4:	f004 fd06 	bl	80060c4 <HAL_UART_Transmit>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000044 	.word	0x20000044
 80016c4:	20000260 	.word	0x20000260
 80016c8:	20000060 	.word	0x20000060
 80016cc:	20000048 	.word	0x20000048
 80016d0:	20000790 	.word	0x20000790
 80016d4:	06680a41 	.word	0x06680a41
 80016d8:	0800cd48 	.word	0x0800cd48
 80016dc:	200002bc 	.word	0x200002bc

080016e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a10      	ldr	r2, [pc, #64]	; (8001730 <HAL_UART_RxCpltCallback+0x50>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d119      	bne.n	8001726 <HAL_UART_RxCpltCallback+0x46>
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <HAL_UART_RxCpltCallback+0x54>)
 80016f6:	f003 fc87 	bl	8005008 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80016fa:	2100      	movs	r1, #0
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <HAL_UART_RxCpltCallback+0x54>)
 80016fe:	f003 fc83 	bl	8005008 <HAL_TIM_PWM_Stop>
		sscanf(msg_str, "%f", &set_point); // @suppress("Float formatting support")
 8001702:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_UART_RxCpltCallback+0x58>)
 8001704:	490d      	ldr	r1, [pc, #52]	; (800173c <HAL_UART_RxCpltCallback+0x5c>)
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_UART_RxCpltCallback+0x60>)
 8001708:	f007 f92e 	bl	8008968 <siscanf>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, strlen("999"));
 800170c:	2203      	movs	r2, #3
 800170e:	490c      	ldr	r1, [pc, #48]	; (8001740 <HAL_UART_RxCpltCallback+0x60>)
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <HAL_UART_RxCpltCallback+0x64>)
 8001712:	f004 fd6a 	bl	80061ea <HAL_UART_Receive_IT>

		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001716:	2108      	movs	r1, #8
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <HAL_UART_RxCpltCallback+0x54>)
 800171a:	f003 fb7b 	bl	8004e14 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800171e:	2100      	movs	r1, #0
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <HAL_UART_RxCpltCallback+0x54>)
 8001722:	f003 fb77 	bl	8004e14 <HAL_TIM_PWM_Start>
	}
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004800 	.word	0x40004800
 8001734:	20000790 	.word	0x20000790
 8001738:	20000060 	.word	0x20000060
 800173c:	0800cd58 	.word	0x0800cd58
 8001740:	200007dc 	.word	0x200007dc
 8001744:	200002bc 	.word	0x200002bc

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f000 fe1b 	bl	8002386 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 f83a 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f000 f928 	bl	80019a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001758:	f000 f8c8 	bl	80018ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800175c:	f000 f8f6 	bl	800194c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001760:	f000 fd32 	bl	80021c8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001764:	f7ff fcae 	bl	80010c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001768:	f000 fce0 	bl	800212c <MX_TIM2_Init>
  MX_TIM5_Init();
 800176c:	f000 fd94 	bl	8002298 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001770:	2108      	movs	r1, #8
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <main+0x64>)
 8001774:	f003 fb4e 	bl	8004e14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001778:	2100      	movs	r1, #0
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <main+0x64>)
 800177c:	f003 fb4a 	bl	8004e14 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg_str, strlen("999"));
 8001780:	2203      	movs	r2, #3
 8001782:	490b      	ldr	r1, [pc, #44]	; (80017b0 <main+0x68>)
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <main+0x6c>)
 8001786:	f004 fd30 	bl	80061ea <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <main+0x70>)
 800178c:	f003 fa72 	bl	8004c74 <HAL_TIM_Base_Start_IT>
  BH1750_Init(hbh1750);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <main+0x74>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc49 	bl	800102c <BH1750_Init>

  LCD_Init(&hlcd1);
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <main+0x78>)
 800179c:	f7ff fdd7 	bl	800134e <LCD_Init>
  LCD_printf(&hlcd1, "L%02d: CMSIS DSP");
 80017a0:	4908      	ldr	r1, [pc, #32]	; (80017c4 <main+0x7c>)
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <main+0x78>)
 80017a4:	f7ff fe58 	bl	8001458 <LCD_printf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0x60>
 80017aa:	bf00      	nop
 80017ac:	20000790 	.word	0x20000790
 80017b0:	200007dc 	.word	0x200007dc
 80017b4:	200002bc 	.word	0x200002bc
 80017b8:	200007fc 	.word	0x200007fc
 80017bc:	20000044 	.word	0x20000044
 80017c0:	20000024 	.word	0x20000024
 80017c4:	0800cd5c 	.word	0x0800cd5c

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0b4      	sub	sp, #208	; 0xd0
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017d2:	2230      	movs	r2, #48	; 0x30
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f006 fa1e 	bl	8007c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	2284      	movs	r2, #132	; 0x84
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f006 fa0f 	bl	8007c18 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017fa:	f002 f8a5 	bl	8003948 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <SystemClock_Config+0x118>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a37      	ldr	r2, [pc, #220]	; (80018e0 <SystemClock_Config+0x118>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <SystemClock_Config+0x118>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <SystemClock_Config+0x11c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800181e:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <SystemClock_Config+0x11c>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <SystemClock_Config+0x11c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001832:	2301      	movs	r3, #1
 8001834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001838:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800183c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800184e:	2304      	movs	r3, #4
 8001850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001854:	2348      	movs	r3, #72	; 0x48
 8001856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001860:	2303      	movs	r3, #3
 8001862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800186a:	4618      	mov	r0, r3
 800186c:	f002 f87c 	bl	8003968 <HAL_RCC_OscConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001876:	f000 f9ab 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187a:	230f      	movs	r3, #15
 800187c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800189a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800189e:	2102      	movs	r1, #2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f002 fb05 	bl	8003eb0 <HAL_RCC_ClockConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80018ac:	f000 f990 	bl	8001bd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <SystemClock_Config+0x120>)
 80018b2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fcf4 	bl	80042b4 <HAL_RCCEx_PeriphCLKConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80018d2:	f000 f97d 	bl	8001bd0 <Error_Handler>
  }
}
 80018d6:	bf00      	nop
 80018d8:	37d0      	adds	r7, #208	; 0xd0
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	00204100 	.word	0x00204100

080018ec <MX_USART3_UART_Init>:
  * @param None
  * @retval None
  */

static void MX_USART3_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_USART3_UART_Init+0x58>)
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <MX_USART3_UART_Init+0x5c>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_USART3_UART_Init+0x58>)
 80018f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART3_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_USART3_UART_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_USART3_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART3_UART_Init+0x58>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_USART3_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART3_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_USART3_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART3_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART3_UART_Init+0x58>)
 8001930:	f004 fb7a 	bl	8006028 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800193a:	f000 f949 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200002bc 	.word	0x200002bc
 8001948:	40004800 	.word	0x40004800

0800194c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195a:	2206      	movs	r2, #6
 800195c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001960:	2202      	movs	r2, #2
 8001962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196c:	2202      	movs	r2, #2
 800196e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001972:	2201      	movs	r2, #1
 8001974:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001984:	2201      	movs	r2, #1
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001990:	f001 fe91 	bl	80036b6 <HAL_PCD_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800199a:	f000 f919 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000340 	.word	0x20000340

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a7e      	ldr	r2, [pc, #504]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a78      	ldr	r2, [pc, #480]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a72      	ldr	r2, [pc, #456]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <MX_GPIO_Init+0x214>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b6d      	ldr	r3, [pc, #436]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a6c      	ldr	r2, [pc, #432]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a66      	ldr	r2, [pc, #408]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <MX_GPIO_Init+0x214>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2110      	movs	r1, #16
 8001a52:	485b      	ldr	r0, [pc, #364]	; (8001bc0 <MX_GPIO_Init+0x218>)
 8001a54:	f001 f868 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LCD_RS_Pin|LCD_D4_Pin
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f24c 01b1 	movw	r1, #49329	; 0xc0b1
 8001a5e:	4859      	ldr	r0, [pc, #356]	; (8001bc4 <MX_GPIO_Init+0x21c>)
 8001a60:	f001 f862 	bl	8002b28 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	4857      	ldr	r0, [pc, #348]	; (8001bc8 <MX_GPIO_Init+0x220>)
 8001a6a:	f001 f85d 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	21c0      	movs	r1, #192	; 0xc0
 8001a72:	4856      	ldr	r0, [pc, #344]	; (8001bcc <MX_GPIO_Init+0x224>)
 8001a74:	f001 f858 	bl	8002b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	484f      	ldr	r0, [pc, #316]	; (8001bcc <MX_GPIO_Init+0x224>)
 8001a90:	f000 fe9e 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001a94:	2332      	movs	r3, #50	; 0x32
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa4:	230b      	movs	r3, #11
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4847      	ldr	r0, [pc, #284]	; (8001bcc <MX_GPIO_Init+0x224>)
 8001ab0:	f000 fe8e 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ab4:	2386      	movs	r3, #134	; 0x86
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac4:	230b      	movs	r3, #11
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	483c      	ldr	r0, [pc, #240]	; (8001bc0 <MX_GPIO_Init+0x218>)
 8001ad0:	f000 fe7e 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4835      	ldr	r0, [pc, #212]	; (8001bc0 <MX_GPIO_Init+0x218>)
 8001aec:	f000 fe70 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LCD_RS_Pin LCD_D4_Pin
                           LCD_D6_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LCD_RS_Pin|LCD_D4_Pin
 8001af0:	f24c 03b1 	movw	r3, #49329	; 0xc0b1
 8001af4:	61fb      	str	r3, [r7, #28]
                          |LCD_D6_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	482e      	ldr	r0, [pc, #184]	; (8001bc4 <MX_GPIO_Init+0x21c>)
 8001b0a:	f000 fe61 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b20:	230b      	movs	r3, #11
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4826      	ldr	r0, [pc, #152]	; (8001bc4 <MX_GPIO_Init+0x21c>)
 8001b2c:	f000 fe50 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 031c 	add.w	r3, r7, #28
 8001b44:	4619      	mov	r1, r3
 8001b46:	4820      	ldr	r0, [pc, #128]	; (8001bc8 <MX_GPIO_Init+0x220>)
 8001b48:	f000 fe42 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481a      	ldr	r0, [pc, #104]	; (8001bc8 <MX_GPIO_Init+0x220>)
 8001b60:	f000 fe36 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_D7_Pin;
 8001b64:	23c0      	movs	r3, #192	; 0xc0
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <MX_GPIO_Init+0x224>)
 8001b7c:	f000 fe28 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b92:	230b      	movs	r3, #11
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <MX_GPIO_Init+0x220>)
 8001b9e:	f000 fe17 	bl	80027d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f000 fd49 	bl	800263e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bac:	2028      	movs	r0, #40	; 0x28
 8001bae:	f000 fd62 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	; 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40020800 	.word	0x40020800

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_MspInit+0x44>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_MspInit+0x44>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_MspInit+0x44>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_MspInit+0x44>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_MspInit+0x44>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_MspInit+0x44>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_TIM_Base_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d114      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	201c      	movs	r0, #28
 8001c54:	f000 fcf3 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f000 fd0c 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c5e:	e010      	b.n	8001c82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_TIM_Base_MspInit+0x6c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10b      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_TIM_Base_MspInit+0x68>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
}
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40000c00 	.word	0x40000c00

08001c94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x44>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d113      	bne.n	8001cce <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_TIM_PWM_MspInit+0x48>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_TIM_PWM_MspInit+0x48>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_TIM_PWM_MspInit+0x48>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	201d      	movs	r0, #29
 8001cc4:	f000 fcbb 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc8:	201d      	movs	r0, #29
 8001cca:	f000 fcd4 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_TIM_MspPostInit+0x9c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d138      	bne.n	8001d74 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_TIM_MspPostInit+0xa0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <HAL_TIM_MspPostInit+0xa4>)
 8001d4e:	f000 fd3f 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d64:	2302      	movs	r3, #2
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <HAL_TIM_MspPostInit+0xa8>)
 8001d70:	f000 fd2e 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020800 	.word	0x40020800

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <HAL_UART_MspInit+0x8c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d130      	bne.n	8001e10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001df0:	2307      	movs	r3, #7
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4809      	ldr	r0, [pc, #36]	; (8001e20 <HAL_UART_MspInit+0x94>)
 8001dfc:	f000 fce8 	bl	80027d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	2027      	movs	r0, #39	; 0x27
 8001e06:	f000 fc1a 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e0a:	2027      	movs	r0, #39	; 0x27
 8001e0c:	f000 fc33 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40020c00 	.word	0x40020c00

08001e24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e44:	d141      	bne.n	8001eca <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e70:	230a      	movs	r3, #10
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <HAL_PCD_MspInit+0xb4>)
 8001e7c:	f000 fca8 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4810      	ldr	r0, [pc, #64]	; (8001ed8 <HAL_PCD_MspInit+0xb4>)
 8001e96:	f000 fc9b 	bl	80027d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a07      	ldr	r2, [pc, #28]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_PCD_MspInit+0xb0>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <MemManage_Handler+0x4>

08001eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <BusFault_Handler+0x4>

08001ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <UsageFault_Handler+0x4>

08001efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f000 fa6a 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <TIM2_IRQHandler+0x10>)
 8001f36:	f003 f8e7 	bl	8005108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200007fc 	.word	0x200007fc

08001f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <TIM3_IRQHandler+0x10>)
 8001f4a:	f003 f8dd 	bl	8005108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000790 	.word	0x20000790

08001f58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <USART3_IRQHandler+0x10>)
 8001f5e:	f004 f993 	bl	8006288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200002bc 	.word	0x200002bc

08001f6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f74:	f000 fdf2 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f96:	f005 fe15 	bl	8007bc4 <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fbe:	e7fe      	b.n	8001fbe <_exit+0x12>

08001fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00a      	b.n	8001fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fd2:	f3af 8000 	nop.w
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	60ba      	str	r2, [r7, #8]
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf0      	blt.n	8001fd2 <_read+0x12>
	}

return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e009      	b.n	8002020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	60ba      	str	r2, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf1      	blt.n	800200c <_write+0x12>
	}
	return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_close>:

int _close(int file)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800205a:	605a      	str	r2, [r3, #4]
	return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_isatty>:

int _isatty(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return 1;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
	return 0;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f005 fd7a 	bl	8007bc4 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20050000 	.word	0x20050000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000264 	.word	0x20000264
 8002104:	20000860 	.word	0x20000860

08002108 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <MX_TIM2_Init+0x98>)
 800214c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002150:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MX_TIM2_Init+0x98>)
 8002154:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8002158:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM2_Init+0x98>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 112;
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <MX_TIM2_Init+0x98>)
 8002162:	2270      	movs	r2, #112	; 0x70
 8002164:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <MX_TIM2_Init+0x98>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM2_Init+0x98>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <MX_TIM2_Init+0x98>)
 8002174:	f002 fc8e 	bl	8004a94 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800217e:	f7ff fd27 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM2_Init+0x98>)
 8002190:	f003 f9ee 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800219a:	f7ff fd19 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_TIM2_Init+0x98>)
 80021ac:	f003 fe90 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021b6:	f7ff fd0b 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3720      	adds	r7, #32
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200007fc 	.word	0x200007fc

080021c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ce:	f107 031c 	add.w	r3, r7, #28
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021da:	463b      	mov	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
 80021e8:	615a      	str	r2, [r3, #20]
 80021ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <MX_TIM3_Init+0xc8>)
 80021ee:	4a29      	ldr	r2, [pc, #164]	; (8002294 <MX_TIM3_Init+0xcc>)
 80021f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <MX_TIM3_Init+0xc8>)
 80021f4:	2247      	movs	r2, #71	; 0x47
 80021f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <MX_TIM3_Init+0xc8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002200:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002204:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <MX_TIM3_Init+0xc8>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002212:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002214:	f002 fda6 	bl	8004d64 <HAL_TIM_PWM_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800221e:	f7ff fcd7 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4817      	ldr	r0, [pc, #92]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002232:	f003 fe4d 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800223c:	f7ff fcc8 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002240:	2360      	movs	r3, #96	; 0x60
 8002242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002258:	f003 f876 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002262:	f7ff fcb5 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8002266:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800226a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800226c:	463b      	mov	r3, r7
 800226e:	2208      	movs	r2, #8
 8002270:	4619      	mov	r1, r3
 8002272:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002274:	f003 f868 	bl	8005348 <HAL_TIM_PWM_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800227e:	f7ff fca7 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM3_Init+0xc8>)
 8002284:	f7ff fd2c 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000790 	.word	0x20000790
 8002294:	40000400 	.word	0x40000400

08002298 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <MX_TIM5_Init+0x94>)
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <MX_TIM5_Init+0x98>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <MX_TIM5_Init+0x94>)
 80022be:	2247      	movs	r2, #71	; 0x47
 80022c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <MX_TIM5_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <MX_TIM5_Init+0x94>)
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <MX_TIM5_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <MX_TIM5_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <MX_TIM5_Init+0x94>)
 80022de:	f002 fbd9 	bl	8004a94 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80022e8:	f7ff fc72 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022f2:	f107 0310 	add.w	r3, r7, #16
 80022f6:	4619      	mov	r1, r3
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <MX_TIM5_Init+0x94>)
 80022fa:	f003 f939 	bl	8005570 <HAL_TIM_ConfigClockSource>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002304:	f7ff fc64 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	4619      	mov	r1, r3
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <MX_TIM5_Init+0x94>)
 8002316:	f003 fddb 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002320:	f7ff fc56 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000744 	.word	0x20000744
 8002330:	40000c00 	.word	0x40000c00

08002334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233a:	490e      	ldr	r1, [pc, #56]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002350:	4c0b      	ldr	r4, [pc, #44]	; (8002380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800235e:	f7ff fed3 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f005 fc35 	bl	8007bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7ff f9ef 	bl	8001748 <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800236c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8002378:	0800d26c 	.word	0x0800d26c
  ldr r2, =_sbss
 800237c:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8002380:	2000085c 	.word	0x2000085c

08002384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002384:	e7fe      	b.n	8002384 <ADC_IRQHandler>

08002386 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238a:	2003      	movs	r0, #3
 800238c:	f000 f94c 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002390:	2000      	movs	r0, #0
 8002392:	f000 f805 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002396:	f7ff fc21 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f967 	bl	8002692 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f92f 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000064 	.word	0x20000064
 80023f8:	2000006c 	.word	0x2000006c
 80023fc:	20000068 	.word	0x20000068

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	2000006c 	.word	0x2000006c
 8002424:	20000848 	.word	0x20000848

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000848 	.word	0x20000848

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000006c 	.word	0x2000006c

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <__NVIC_SetPriorityGrouping+0x40>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x40>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00
 80024cc:	05fa0000 	.word	0x05fa0000

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff feb6 	bl	8002428 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d008      	beq.n	80026dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2280      	movs	r2, #128	; 0x80
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e052      	b.n	8002782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0216 	bic.w	r2, r2, #22
 80026ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d103      	bne.n	800270c <HAL_DMA_Abort+0x62>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e013      	b.n	8002756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7ff fe7b 	bl	8002428 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d90c      	bls.n	8002756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e015      	b.n	8002782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e4      	bne.n	800272e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	223f      	movs	r2, #63	; 0x3f
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d004      	beq.n	80027a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e00c      	b.n	80027c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2205      	movs	r2, #5
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	e175      	b.n	8002adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	429a      	cmp	r2, r3
 800280a:	f040 8164 	bne.w	8002ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d005      	beq.n	8002826 <HAL_GPIO_Init+0x56>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d130      	bne.n	8002888 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 0201 	and.w	r2, r3, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b03      	cmp	r3, #3
 8002892:	d017      	beq.n	80028c4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	2203      	movs	r2, #3
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d123      	bne.n	8002918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3208      	adds	r2, #8
 80028d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	69b9      	ldr	r1, [r7, #24]
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0203 	and.w	r2, r3, #3
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80be 	beq.w	8002ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	4a65      	ldr	r2, [pc, #404]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002964:	6453      	str	r3, [r2, #68]	; 0x44
 8002966:	4b63      	ldr	r3, [pc, #396]	; (8002af4 <HAL_GPIO_Init+0x324>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002972:	4a61      	ldr	r2, [pc, #388]	; (8002af8 <HAL_GPIO_Init+0x328>)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	089b      	lsrs	r3, r3, #2
 8002978:	3302      	adds	r3, #2
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	220f      	movs	r2, #15
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_GPIO_Init+0x32c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d037      	beq.n	8002a0e <HAL_GPIO_Init+0x23e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a57      	ldr	r2, [pc, #348]	; (8002b00 <HAL_GPIO_Init+0x330>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d031      	beq.n	8002a0a <HAL_GPIO_Init+0x23a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a56      	ldr	r2, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x334>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d02b      	beq.n	8002a06 <HAL_GPIO_Init+0x236>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <HAL_GPIO_Init+0x338>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d025      	beq.n	8002a02 <HAL_GPIO_Init+0x232>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a54      	ldr	r2, [pc, #336]	; (8002b0c <HAL_GPIO_Init+0x33c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d01f      	beq.n	80029fe <HAL_GPIO_Init+0x22e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a53      	ldr	r2, [pc, #332]	; (8002b10 <HAL_GPIO_Init+0x340>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d019      	beq.n	80029fa <HAL_GPIO_Init+0x22a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a52      	ldr	r2, [pc, #328]	; (8002b14 <HAL_GPIO_Init+0x344>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d013      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a51      	ldr	r2, [pc, #324]	; (8002b18 <HAL_GPIO_Init+0x348>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00d      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <HAL_GPIO_Init+0x34c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4f      	ldr	r2, [pc, #316]	; (8002b20 <HAL_GPIO_Init+0x350>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_GPIO_Init+0x21a>
 80029e6:	2309      	movs	r3, #9
 80029e8:	e012      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029ea:	230a      	movs	r3, #10
 80029ec:	e010      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029ee:	2308      	movs	r3, #8
 80029f0:	e00e      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029f2:	2307      	movs	r3, #7
 80029f4:	e00c      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029f6:	2306      	movs	r3, #6
 80029f8:	e00a      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029fa:	2305      	movs	r3, #5
 80029fc:	e008      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 80029fe:	2304      	movs	r3, #4
 8002a00:	e006      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a02:	2303      	movs	r3, #3
 8002a04:	e004      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e002      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x240>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	f002 0203 	and.w	r2, r2, #3
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	4093      	lsls	r3, r2
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a20:	4935      	ldr	r1, [pc, #212]	; (8002af8 <HAL_GPIO_Init+0x328>)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	089b      	lsrs	r3, r3, #2
 8002a26:	3302      	adds	r3, #2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a34      	ldr	r2, [pc, #208]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b32      	ldr	r3, [pc, #200]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a29      	ldr	r2, [pc, #164]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a82:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_GPIO_Init+0x354>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	f67f ae86 	bls.w	80027f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40013800 	.word	0x40013800
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40021400 	.word	0x40021400
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	40022400 	.word	0x40022400
 8002b24:	40013c00 	.word	0x40013c00

08002b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
 8002b34:	4613      	mov	r3, r2
 8002b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b38:	787b      	ldrb	r3, [r7, #1]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b44:	e003      	b.n	8002b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b46:	887b      	ldrh	r3, [r7, #2]
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f806 	bl	8002b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe faba 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e006      	b.n	8002c2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d104      	bne.n	8002c3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_I2C_Init+0x11c>)
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	02008000 	.word	0x02008000

08002cc4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	f040 80da 	bne.w	8002e9a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x30>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0d3      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cfc:	f7ff fb94 	bl	8002428 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2319      	movs	r3, #25
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f9e6 	bl	80030e0 <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0be      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2221      	movs	r2, #33	; 0x21
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	893a      	ldrh	r2, [r7, #8]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2bff      	cmp	r3, #255	; 0xff
 8002d4e:	d90e      	bls.n	8002d6e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fbdc 	bl	8003524 <I2C_TransferConfig>
 8002d6c:	e06c      	b.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	8979      	ldrh	r1, [r7, #10]
 8002d80:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fbcb 	bl	8003524 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002d8e:	e05b      	b.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	6a39      	ldr	r1, [r7, #32]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f9e3 	bl	8003160 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e07b      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d034      	beq.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d130      	bne.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f975 	bl	80030e0 <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e04d      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2bff      	cmp	r3, #255	; 0xff
 8002e08:	d90e      	bls.n	8002e28 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb7f 	bl	8003524 <I2C_TransferConfig>
 8002e26:	e00f      	b.n	8002e48 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	8979      	ldrh	r1, [r7, #10]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fb6e 	bl	8003524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d19e      	bne.n	8002d90 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f9c2 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e01a      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6859      	ldr	r1, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
  }
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	80002000 	.word	0x80002000
 8002ea8:	fe00e800 	.word	0xfe00e800

08002eac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	460b      	mov	r3, r1
 8002eba:	817b      	strh	r3, [r7, #10]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	f040 80db 	bne.w	8003084 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_I2C_Master_Receive+0x30>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e0d4      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee4:	f7ff faa0 	bl	8002428 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2319      	movs	r3, #25
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f8f2 	bl	80030e0 <I2C_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0bf      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2222      	movs	r2, #34	; 0x22
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2bff      	cmp	r3, #255	; 0xff
 8002f36:	d90e      	bls.n	8002f56 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	22ff      	movs	r2, #255	; 0xff
 8002f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	8979      	ldrh	r1, [r7, #10]
 8002f46:	4b52      	ldr	r3, [pc, #328]	; (8003090 <HAL_I2C_Master_Receive+0x1e4>)
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fae8 	bl	8003524 <I2C_TransferConfig>
 8002f54:	e06d      	b.n	8003032 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_I2C_Master_Receive+0x1e4>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fad7 	bl	8003524 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002f76:	e05c      	b.n	8003032 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6a39      	ldr	r1, [r7, #32]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f96b 	bl	8003258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e07c      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d034      	beq.n	8003032 <HAL_I2C_Master_Receive+0x186>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d130      	bne.n	8003032 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f880 	bl	80030e0 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e04d      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2bff      	cmp	r3, #255	; 0xff
 8002ff2:	d90e      	bls.n	8003012 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	22ff      	movs	r2, #255	; 0xff
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa8a 	bl	8003524 <I2C_TransferConfig>
 8003010:	e00f      	b.n	8003032 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fa79 	bl	8003524 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d19d      	bne.n	8002f78 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	6a39      	ldr	r1, [r7, #32]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f8cd 	bl	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e01a      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2220      	movs	r2, #32
 8003056:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6859      	ldr	r1, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_I2C_Master_Receive+0x1e8>)
 8003064:	400b      	ands	r3, r1
 8003066:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	80002400 	.word	0x80002400
 8003094:	fe00e800 	.word	0xfe00e800

08003098 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d103      	bne.n	80030b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d007      	beq.n	80030d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	619a      	str	r2, [r3, #24]
  }
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f0:	e022      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d01e      	beq.n	8003138 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7ff f995 	bl	8002428 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d113      	bne.n	8003138 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e00f      	b.n	8003158 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4013      	ands	r3, r2
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	429a      	cmp	r2, r3
 8003154:	d0cd      	beq.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800316c:	e02c      	b.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8ea 	bl	800334c <I2C_IsErrorOccurred>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e02a      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d01e      	beq.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7ff f94d 	bl	8002428 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d113      	bne.n	80031c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d1cb      	bne.n	800316e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ec:	e028      	b.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8aa 	bl	800334c <I2C_IsErrorOccurred>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e026      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7ff f911 	bl	8002428 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b20      	cmp	r3, #32
 800324c:	d1cf      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003264:	e064      	b.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f86e 	bl	800334c <I2C_IsErrorOccurred>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e062      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b20      	cmp	r3, #32
 8003286:	d138      	bne.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d105      	bne.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e04e      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d107      	bne.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2210      	movs	r2, #16
 80032b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2204      	movs	r2, #4
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
 80032be:	e002      	b.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80032da:	400b      	ands	r3, r1
 80032dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7ff f895 	bl	8002428 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d193      	bne.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	fe00e800 	.word	0xfe00e800

0800334c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	; 0x28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	2b00      	cmp	r3, #0
 8003376:	d075      	beq.n	8003464 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2210      	movs	r2, #16
 800337e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003380:	e056      	b.n	8003430 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d052      	beq.n	8003430 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7ff f84d 	bl	8002428 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_IsErrorOccurred+0x54>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d147      	bne.n	8003430 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c2:	d12e      	bne.n	8003422 <I2C_IsErrorOccurred+0xd6>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d02a      	beq.n	8003422 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d027      	beq.n	8003422 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033e2:	f7ff f821 	bl	8002428 <HAL_GetTick>
 80033e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e8:	e01b      	b.n	8003422 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033ea:	f7ff f81d 	bl	8002428 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b19      	cmp	r3, #25
 80033f6:	d914      	bls.n	8003422 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	d1dc      	bne.n	80033ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d003      	beq.n	8003446 <I2C_IsErrorOccurred+0xfa>
 800343e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003442:	2b00      	cmp	r3, #0
 8003444:	d09d      	beq.n	8003382 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003486:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01c      	beq.n	8003514 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fddc 	bl	8003098 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <I2C_IsErrorOccurred+0x1d4>)
 80034ec:	400b      	ands	r3, r1
 80034ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fe00e800 	.word	0xfe00e800

08003524 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	607b      	str	r3, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	817b      	strh	r3, [r7, #10]
 8003532:	4613      	mov	r3, r2
 8003534:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800353c:	7a7b      	ldrb	r3, [r7, #9]
 800353e:	041b      	lsls	r3, r3, #16
 8003540:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003544:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	4313      	orrs	r3, r2
 800354e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003552:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	0d5b      	lsrs	r3, r3, #21
 800355e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <I2C_TransferConfig+0x60>)
 8003564:	430b      	orrs	r3, r1
 8003566:	43db      	mvns	r3, r3
 8003568:	ea02 0103 	and.w	r1, r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	03ff63ff 	.word	0x03ff63ff

08003588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b20      	cmp	r3, #32
 800359c:	d138      	bne.n	8003610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e032      	b.n	8003612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	e000      	b.n	8003612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b20      	cmp	r3, #32
 8003632:	d139      	bne.n	80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800363e:	2302      	movs	r3, #2
 8003640:	e033      	b.n	80036aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2224      	movs	r2, #36	; 0x24
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003670:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b8:	b08f      	sub	sp, #60	; 0x3c
 80036ba:	af0a      	add	r7, sp, #40	; 0x28
 80036bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e116      	b.n	80038f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe fb9e 	bl	8001e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2203      	movs	r2, #3
 80036ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 ffc6 	bl	8007698 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	687e      	ldr	r6, [r7, #4]
 8003714:	466d      	mov	r5, sp
 8003716:	f106 0410 	add.w	r4, r6, #16
 800371a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003726:	e885 0003 	stmia.w	r5, {r0, r1}
 800372a:	1d33      	adds	r3, r6, #4
 800372c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372e:	6838      	ldr	r0, [r7, #0]
 8003730:	f003 ff5a 	bl	80075e8 <USB_CoreInit>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0d7      	b.n	80038f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f003 ffb4 	bl	80076ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	e04a      	b.n	80037ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	333d      	adds	r3, #61	; 0x3d
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	333c      	adds	r3, #60	; 0x3c
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	b298      	uxth	r0, r3
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3342      	adds	r3, #66	; 0x42
 8003794:	4602      	mov	r2, r0
 8003796:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003798:	7bfa      	ldrb	r2, [r7, #15]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	333f      	adds	r3, #63	; 0x3f
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	3344      	adds	r3, #68	; 0x44
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	3348      	adds	r3, #72	; 0x48
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	3350      	adds	r3, #80	; 0x50
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	3301      	adds	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3af      	bcc.n	8003758 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e044      	b.n	8003888 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003826:	7bfa      	ldrb	r2, [r7, #15]
 8003828:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	3301      	adds	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d3b5      	bcc.n	80037fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	687e      	ldr	r6, [r7, #4]
 800389a:	466d      	mov	r5, sp
 800389c:	f106 0410 	add.w	r4, r6, #16
 80038a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80038b0:	1d33      	adds	r3, r6, #4
 80038b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b4:	6838      	ldr	r0, [r7, #0]
 80038b6:	f003 ff4d 	bl	8007754 <USB_DevInit>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e014      	b.n	80038f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d102      	bne.n	80038ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f80b 	bl	8003900 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 f907 	bl	8007b02 <USB_DevDisconnect>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003900 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_PCDEx_ActivateLPM+0x44>)
 8003930:	4313      	orrs	r3, r2
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	10000003 	.word	0x10000003

08003948 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40007000 	.word	0x40007000

08003968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e291      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 8087 	beq.w	8003a9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800398c:	4b96      	ldr	r3, [pc, #600]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b04      	cmp	r3, #4
 8003996:	d00c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003998:	4b93      	ldr	r3, [pc, #588]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d112      	bne.n	80039ca <HAL_RCC_OscConfig+0x62>
 80039a4:	4b90      	ldr	r3, [pc, #576]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b0:	d10b      	bne.n	80039ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b2:	4b8d      	ldr	r3, [pc, #564]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d06c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x130>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d168      	bne.n	8003a98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e26b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x7a>
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a83      	ldr	r2, [pc, #524]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	e02e      	b.n	8003a40 <HAL_RCC_OscConfig+0xd8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x9c>
 80039ea:	4b7f      	ldr	r3, [pc, #508]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7e      	ldr	r2, [pc, #504]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7b      	ldr	r2, [pc, #492]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 80039fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0xd8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a75      	ldr	r2, [pc, #468]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0xd8>
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6b      	ldr	r2, [pc, #428]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fcee 	bl	8002428 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fcea 	bl	8002428 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e21f      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe fcda 	bl	8002428 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fe fcd6 	bl	8002428 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e20b      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x110>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d069      	beq.n	8003b7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aa6:	4b50      	ldr	r3, [pc, #320]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d11c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x190>
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1df      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	493d      	ldr	r1, [pc, #244]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	e040      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a38      	ldr	r2, [pc, #224]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fc8c 	bl	8002428 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fc88 	bl	8002428 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1bd      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b2d      	ldr	r3, [pc, #180]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4929      	ldr	r1, [pc, #164]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
 8003b46:	e018      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fc68 	bl	8002428 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fc64 	bl	8002428 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e199      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d038      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d019      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fc45 	bl	8002428 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba2:	f7fe fc41 	bl	8002428 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e176      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x23a>
 8003bc0:	e01a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc6:	4a08      	ldr	r2, [pc, #32]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe fc2b 	bl	8002428 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fc27 	bl	8002428 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d903      	bls.n	8003bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e15c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
 8003be8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b91      	ldr	r3, [pc, #580]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ee      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a4 	beq.w	8003d4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c06:	4b8b      	ldr	r3, [pc, #556]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10d      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	4a87      	ldr	r2, [pc, #540]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1e:	4b85      	ldr	r3, [pc, #532]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2e:	4b82      	ldr	r3, [pc, #520]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d118      	bne.n	8003c6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c46:	f7fe fbef 	bl	8002428 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fe fbeb 	bl	8002428 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b64      	cmp	r3, #100	; 0x64
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e120      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c60:	4b75      	ldr	r3, [pc, #468]	; (8003e38 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x31a>
 8003c74:	4b6f      	ldr	r3, [pc, #444]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a6e      	ldr	r2, [pc, #440]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	e02d      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x33c>
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	4a69      	ldr	r2, [pc, #420]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
 8003c96:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a66      	ldr	r2, [pc, #408]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca2:	e01c      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x35e>
 8003cac:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a60      	ldr	r2, [pc, #384]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b5e      	ldr	r3, [pc, #376]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a5d      	ldr	r2, [pc, #372]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a5a      	ldr	r2, [pc, #360]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a57      	ldr	r2, [pc, #348]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fe fb9f 	bl	8002428 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fe fb9b 	bl	8002428 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0ce      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ee      	beq.n	8003cee <HAL_RCC_OscConfig+0x386>
 8003d10:	e014      	b.n	8003d3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fe fb89 	bl	8002428 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fe fb85 	bl	8002428 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0b8      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d42:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a4 	beq.w	8003ea0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d06b      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d149      	bne.n	8003e00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fe fb56 	bl	8002428 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fb52 	bl	8002428 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e087      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fb26 	bl	8002428 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fe fb22 	bl	8002428 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e057      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x478>
 8003dfe:	e04f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fb0c 	bl	8002428 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe fb08 	bl	8002428 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e03d      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4ac>
 8003e32:	e035      	b.n	8003ea0 <HAL_RCC_OscConfig+0x538>
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCC_OscConfig+0x544>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d028      	beq.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d121      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d11a      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d111      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0d0      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b67      	ldr	r3, [pc, #412]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 020f 	bic.w	r2, r3, #15
 8003ede:	4965      	ldr	r1, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d040      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d115      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e073      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06b      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f92:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f023 0203 	bic.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4936      	ldr	r1, [pc, #216]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa4:	f7fe fa40 	bl	8002428 <HAL_GetTick>
 8003fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fac:	f7fe fa3c 	bl	8002428 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e053      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 020c 	and.w	r2, r3, #12
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d1eb      	bne.n	8003fac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d210      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 020f 	bic.w	r2, r3, #15
 8003fea:	4922      	ldr	r1, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1cc>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1d0>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1d4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe f99c 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	0800cd7c 	.word	0x0800cd7c
 8004080:	20000064 	.word	0x20000064
 8004084:	20000068 	.word	0x20000068

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	2300      	movs	r3, #0
 800409a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b67      	ldr	r3, [pc, #412]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80bd 	bhi.w	800422c <HAL_RCC_GetSysClockFreq+0x1a4>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e0b7      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b61      	ldr	r3, [pc, #388]	; (8004244 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040be:	60bb      	str	r3, [r7, #8]
      break;
 80040c0:	e0b7      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b61      	ldr	r3, [pc, #388]	; (8004248 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040c4:	60bb      	str	r3, [r7, #8]
      break;
 80040c6:	e0b4      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b5d      	ldr	r3, [pc, #372]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040d2:	4b5b      	ldr	r3, [pc, #364]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d04d      	beq.n	800417a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b58      	ldr	r3, [pc, #352]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	461a      	mov	r2, r3
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040ee:	f04f 0100 	mov.w	r1, #0
 80040f2:	ea02 0800 	and.w	r8, r2, r0
 80040f6:	ea03 0901 	and.w	r9, r3, r1
 80040fa:	4640      	mov	r0, r8
 80040fc:	4649      	mov	r1, r9
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	014b      	lsls	r3, r1, #5
 8004108:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800410c:	0142      	lsls	r2, r0, #5
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	ebb0 0008 	subs.w	r0, r0, r8
 8004116:	eb61 0109 	sbc.w	r1, r1, r9
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	018b      	lsls	r3, r1, #6
 8004124:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004128:	0182      	lsls	r2, r0, #6
 800412a:	1a12      	subs	r2, r2, r0
 800412c:	eb63 0301 	sbc.w	r3, r3, r1
 8004130:	f04f 0000 	mov.w	r0, #0
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	00d9      	lsls	r1, r3, #3
 800413a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800413e:	00d0      	lsls	r0, r2, #3
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	eb12 0208 	adds.w	r2, r2, r8
 8004148:	eb43 0309 	adc.w	r3, r3, r9
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	0259      	lsls	r1, r3, #9
 8004156:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800415a:	0250      	lsls	r0, r2, #9
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	461a      	mov	r2, r3
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	f7fc fdac 	bl	8000cc8 <__aeabi_uldivmod>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4613      	mov	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e04a      	b.n	8004210 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	461a      	mov	r2, r3
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	f240 10ff 	movw	r0, #511	; 0x1ff
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	ea02 0400 	and.w	r4, r2, r0
 8004192:	ea03 0501 	and.w	r5, r3, r1
 8004196:	4620      	mov	r0, r4
 8004198:	4629      	mov	r1, r5
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	014b      	lsls	r3, r1, #5
 80041a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041a8:	0142      	lsls	r2, r0, #5
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	1b00      	subs	r0, r0, r4
 80041b0:	eb61 0105 	sbc.w	r1, r1, r5
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	018b      	lsls	r3, r1, #6
 80041be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041c2:	0182      	lsls	r2, r0, #6
 80041c4:	1a12      	subs	r2, r2, r0
 80041c6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	00d9      	lsls	r1, r3, #3
 80041d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041d8:	00d0      	lsls	r0, r2, #3
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	1912      	adds	r2, r2, r4
 80041e0:	eb45 0303 	adc.w	r3, r5, r3
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0299      	lsls	r1, r3, #10
 80041ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041f2:	0290      	lsls	r0, r2, #10
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	461a      	mov	r2, r3
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	f7fc fd60 	bl	8000cc8 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4613      	mov	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	3301      	adds	r3, #1
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	60bb      	str	r3, [r7, #8]
      break;
 800422a:	e002      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800422e:	60bb      	str	r3, [r7, #8]
      break;
 8004230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004232:	68bb      	ldr	r3, [r7, #8]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	00f42400 	.word	0x00f42400
 8004248:	007a1200 	.word	0x007a1200

0800424c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_RCC_GetHCLKFreq+0x14>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000064 	.word	0x20000064

08004264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004268:	f7ff fff0 	bl	800424c <HAL_RCC_GetHCLKFreq>
 800426c:	4602      	mov	r2, r0
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	0a9b      	lsrs	r3, r3, #10
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	4903      	ldr	r1, [pc, #12]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800427a:	5ccb      	ldrb	r3, [r1, r3]
 800427c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40023800 	.word	0x40023800
 8004288:	0800cd8c 	.word	0x0800cd8c

0800428c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004290:	f7ff ffdc 	bl	800424c <HAL_RCC_GetHCLKFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	0b5b      	lsrs	r3, r3, #13
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	4903      	ldr	r1, [pc, #12]	; (80042b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40023800 	.word	0x40023800
 80042b0:	0800cd8c 	.word	0x0800cd8c

080042b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d012      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042dc:	4b69      	ldr	r3, [pc, #420]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	4a68      	ldr	r2, [pc, #416]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042e6:	6093      	str	r3, [r2, #8]
 80042e8:	4b66      	ldr	r3, [pc, #408]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	4964      	ldr	r1, [pc, #400]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d017      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800430e:	4b5d      	ldr	r3, [pc, #372]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	4959      	ldr	r1, [pc, #356]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800432c:	d101      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800433a:	2301      	movs	r3, #1
 800433c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d017      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800434a:	4b4e      	ldr	r3, [pc, #312]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	494a      	ldr	r1, [pc, #296]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004368:	d101      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800436a:	2301      	movs	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004376:	2301      	movs	r3, #1
 8004378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004386:	2301      	movs	r3, #1
 8004388:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 808b 	beq.w	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004398:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	4a39      	ldr	r2, [pc, #228]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6413      	str	r3, [r2, #64]	; 0x40
 80043a4:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	60bb      	str	r3, [r7, #8]
 80043ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a34      	ldr	r2, [pc, #208]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043bc:	f7fe f834 	bl	8002428 <HAL_GetTick>
 80043c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c4:	f7fe f830 	bl	8002428 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b64      	cmp	r3, #100	; 0x64
 80043d0:	d901      	bls.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e357      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043e2:	4b28      	ldr	r3, [pc, #160]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d035      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d02e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004400:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004408:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a1d      	ldr	r2, [pc, #116]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004420:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004428:	4b16      	ldr	r3, [pc, #88]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d114      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fff8 	bl	8002428 <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fd fff4 	bl	8002428 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e319      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ee      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800446a:	d111      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004478:	4b04      	ldr	r3, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800447a:	400b      	ands	r3, r1
 800447c:	4901      	ldr	r1, [pc, #4]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
 8004482:	e00b      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	0ffffcff 	.word	0x0ffffcff
 8004490:	4bb1      	ldr	r3, [pc, #708]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4ab0      	ldr	r2, [pc, #704]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004496:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800449a:	6093      	str	r3, [r2, #8]
 800449c:	4bae      	ldr	r3, [pc, #696]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800449e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	49ab      	ldr	r1, [pc, #684]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d010      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ba:	4ba7      	ldr	r3, [pc, #668]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c0:	4aa5      	ldr	r2, [pc, #660]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044ca:	4ba3      	ldr	r3, [pc, #652]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	49a0      	ldr	r1, [pc, #640]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e8:	4b9b      	ldr	r3, [pc, #620]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f6:	4998      	ldr	r1, [pc, #608]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800450a:	4b93      	ldr	r3, [pc, #588]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004518:	498f      	ldr	r1, [pc, #572]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800452c:	4b8a      	ldr	r3, [pc, #552]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	4987      	ldr	r1, [pc, #540]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800454e:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	497e      	ldr	r1, [pc, #504]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004570:	4b79      	ldr	r3, [pc, #484]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4976      	ldr	r1, [pc, #472]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004592:	4b71      	ldr	r3, [pc, #452]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	f023 020c 	bic.w	r2, r3, #12
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	496d      	ldr	r1, [pc, #436]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045b4:	4b68      	ldr	r3, [pc, #416]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	4965      	ldr	r1, [pc, #404]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045d6:	4b60      	ldr	r3, [pc, #384]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e4:	495c      	ldr	r1, [pc, #368]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045f8:	4b57      	ldr	r3, [pc, #348]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	4954      	ldr	r1, [pc, #336]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800461a:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	494b      	ldr	r1, [pc, #300]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800463c:	4b46      	ldr	r3, [pc, #280]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	4943      	ldr	r1, [pc, #268]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800465e:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466c:	493a      	ldr	r1, [pc, #232]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004680:	4b35      	ldr	r3, [pc, #212]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800468e:	4932      	ldr	r1, [pc, #200]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d011      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046a2:	4b2d      	ldr	r3, [pc, #180]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b0:	4929      	ldr	r1, [pc, #164]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c0:	d101      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046c2:	2301      	movs	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046e2:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f0:	4919      	ldr	r1, [pc, #100]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004714:	4910      	ldr	r1, [pc, #64]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d006      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80d9 	beq.w	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd fe74 	bl	8002428 <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004742:	e00b      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004744:	f7fd fe70 	bl	8002428 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d904      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e197      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800475c:	4b6c      	ldr	r3, [pc, #432]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1ed      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d021      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800477c:	4b64      	ldr	r3, [pc, #400]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	0c1b      	lsrs	r3, r3, #16
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800478a:	4b61      	ldr	r3, [pc, #388]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004790:	0e1b      	lsrs	r3, r3, #24
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	019a      	lsls	r2, r3, #6
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	071b      	lsls	r3, r3, #28
 80047b0:	4957      	ldr	r1, [pc, #348]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d02e      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e2:	d129      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047e4:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	0c1b      	lsrs	r3, r3, #16
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047f2:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f8:	0f1b      	lsrs	r3, r3, #28
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	019a      	lsls	r2, r3, #6
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	071b      	lsls	r3, r3, #28
 8004818:	493d      	ldr	r1, [pc, #244]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004820:	4b3b      	ldr	r3, [pc, #236]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004826:	f023 021f 	bic.w	r2, r3, #31
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	3b01      	subs	r3, #1
 8004830:	4937      	ldr	r1, [pc, #220]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01d      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004844:	4b32      	ldr	r3, [pc, #200]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	0e1b      	lsrs	r3, r3, #24
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004852:	4b2f      	ldr	r3, [pc, #188]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	0f1b      	lsrs	r3, r3, #28
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	019a      	lsls	r2, r3, #6
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	431a      	orrs	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	061b      	lsls	r3, r3, #24
 8004872:	431a      	orrs	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	071b      	lsls	r3, r3, #28
 8004878:	4925      	ldr	r1, [pc, #148]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d011      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	019a      	lsls	r2, r3, #6
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	071b      	lsls	r3, r3, #28
 80048a8:	4919      	ldr	r1, [pc, #100]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048b0:	4b17      	ldr	r3, [pc, #92]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048bc:	f7fd fdb4 	bl	8002428 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048c4:	f7fd fdb0 	bl	8002428 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0d7      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048d6:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 80cd 	bne.w	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a08      	ldr	r2, [pc, #32]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f6:	f7fd fd97 	bl	8002428 <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048fe:	f7fd fd93 	bl	8002428 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b64      	cmp	r3, #100	; 0x64
 800490a:	d903      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0ba      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004910:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004914:	4b5e      	ldr	r3, [pc, #376]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800491c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004920:	d0ed      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800493e:	2b00      	cmp	r3, #0
 8004940:	d02e      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d12a      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800494a:	4b51      	ldr	r3, [pc, #324]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	0c1b      	lsrs	r3, r3, #16
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004958:	4b4d      	ldr	r3, [pc, #308]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	0f1b      	lsrs	r3, r3, #28
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	019a      	lsls	r2, r3, #6
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	041b      	lsls	r3, r3, #16
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	071b      	lsls	r3, r3, #28
 800497e:	4944      	ldr	r1, [pc, #272]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004986:	4b42      	ldr	r3, [pc, #264]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	3b01      	subs	r3, #1
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	493d      	ldr	r1, [pc, #244]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d022      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b4:	d11d      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049b6:	4b36      	ldr	r3, [pc, #216]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	0e1b      	lsrs	r3, r3, #24
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	0f1b      	lsrs	r3, r3, #28
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	019a      	lsls	r2, r3, #6
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	061b      	lsls	r3, r3, #24
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	071b      	lsls	r3, r3, #28
 80049ea:	4929      	ldr	r1, [pc, #164]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d028      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	0e1b      	lsrs	r3, r3, #24
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a0c:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	019a      	lsls	r2, r3, #6
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	431a      	orrs	r2, r3
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	071b      	lsls	r3, r3, #28
 8004a32:	4917      	ldr	r1, [pc, #92]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4911      	ldr	r1, [pc, #68]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a50:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fd fce4 	bl	8002428 <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a64:	f7fd fce0 	bl	8002428 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e007      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a82:	d1ef      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800

08004a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e049      	b.n	8004b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd f8b2 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f000 fe3e 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d001      	beq.n	8004b5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e04c      	b.n	8004bf6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <HAL_TIM_Base_Start+0xc0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d01d      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <HAL_TIM_Base_Start+0xc4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_TIM_Base_Start+0xc8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_TIM_Base_Start+0xcc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_TIM_Base_Start+0xd0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_TIM_Base_Start+0xd4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_TIM_Base_Start+0x70>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_TIM_Base_Start+0xd8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d115      	bne.n	8004be0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <HAL_TIM_Base_Start+0xdc>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d015      	beq.n	8004bf2 <HAL_TIM_Base_Start+0xae>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d011      	beq.n	8004bf2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	e008      	b.n	8004bf2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e000      	b.n	8004bf4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40001800 	.word	0x40001800
 8004c20:	00010007 	.word	0x00010007

08004c24 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a1a      	ldr	r2, [r3, #32]
 8004c32:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10f      	bne.n	8004c5c <HAL_TIM_Base_Stop+0x38>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	f240 4344 	movw	r3, #1092	; 0x444
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_TIM_Base_Stop+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d001      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e054      	b.n	8004d36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a26      	ldr	r2, [pc, #152]	; (8004d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_TIM_Base_Start_IT+0xe0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <HAL_TIM_Base_Start_IT+0xe4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0x80>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a1b      	ldr	r2, [pc, #108]	; (8004d5c <HAL_TIM_Base_Start_IT+0xe8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d115      	bne.n	8004d20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689a      	ldr	r2, [r3, #8]
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_TIM_Base_Start_IT+0xec>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d015      	beq.n	8004d32 <HAL_TIM_Base_Start_IT+0xbe>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d0c:	d011      	beq.n	8004d32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d1e:	e008      	b.n	8004d32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	e000      	b.n	8004d34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800
 8004d50:	40000c00 	.word	0x40000c00
 8004d54:	40010400 	.word	0x40010400
 8004d58:	40014000 	.word	0x40014000
 8004d5c:	40001800 	.word	0x40001800
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e049      	b.n	8004e0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc ff82 	bl	8001c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 fcd6 	bl	8005754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d109      	bne.n	8004e38 <HAL_TIM_PWM_Start+0x24>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	bf14      	ite	ne
 8004e30:	2301      	movne	r3, #1
 8004e32:	2300      	moveq	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	e03c      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d109      	bne.n	8004e52 <HAL_TIM_PWM_Start+0x3e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e02f      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d109      	bne.n	8004e6c <HAL_TIM_PWM_Start+0x58>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e022      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d109      	bne.n	8004e86 <HAL_TIM_PWM_Start+0x72>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	e015      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d109      	bne.n	8004ea0 <HAL_TIM_PWM_Start+0x8c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e008      	b.n	8004eb2 <HAL_TIM_PWM_Start+0x9e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e092      	b.n	8004fe0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0xb6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec8:	e023      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xc6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed8:	e01b      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_PWM_Start+0xd6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee8:	e013      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b0c      	cmp	r3, #12
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xe6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef8:	e00b      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xf6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f08:	e003      	b.n	8004f12 <HAL_TIM_PWM_Start+0xfe>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 ffb2 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a30      	ldr	r2, [pc, #192]	; (8004fe8 <HAL_TIM_PWM_Start+0x1d4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_TIM_PWM_Start+0x120>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <HAL_TIM_PWM_Start+0x1d8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_PWM_Start+0x124>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <HAL_TIM_PWM_Start+0x126>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <HAL_TIM_PWM_Start+0x1d4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f60:	d01d      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a22      	ldr	r2, [pc, #136]	; (8004ff0 <HAL_TIM_PWM_Start+0x1dc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a20      	ldr	r2, [pc, #128]	; (8004ff4 <HAL_TIM_PWM_Start+0x1e0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1f      	ldr	r2, [pc, #124]	; (8004ff8 <HAL_TIM_PWM_Start+0x1e4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_TIM_PWM_Start+0x1d8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_TIM_PWM_Start+0x1e8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x18a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a19      	ldr	r2, [pc, #100]	; (8005000 <HAL_TIM_PWM_Start+0x1ec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d115      	bne.n	8004fca <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	4b17      	ldr	r3, [pc, #92]	; (8005004 <HAL_TIM_PWM_Start+0x1f0>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d015      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x1c8>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb6:	d011      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	e008      	b.n	8004fdc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0201 	orr.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e000      	b.n	8004fde <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40001800 	.word	0x40001800
 8005004:	00010007 	.word	0x00010007

08005008 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ff32 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a36      	ldr	r2, [pc, #216]	; (8005100 <HAL_TIM_PWM_Stop+0xf8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_TIM_PWM_Stop+0x2c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a35      	ldr	r2, [pc, #212]	; (8005104 <HAL_TIM_PWM_Stop+0xfc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_TIM_PWM_Stop+0x30>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_TIM_PWM_Stop+0x32>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d017      	beq.n	800506e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	f241 1311 	movw	r3, #4369	; 0x1111
 8005048:	4013      	ands	r3, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <HAL_TIM_PWM_Stop+0x66>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	f240 4344 	movw	r3, #1092	; 0x444
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d107      	bne.n	800506e <HAL_TIM_PWM_Stop+0x66>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	f241 1311 	movw	r3, #4369	; 0x1111
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <HAL_TIM_PWM_Stop+0x96>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	f240 4344 	movw	r3, #1092	; 0x444
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d107      	bne.n	800509e <HAL_TIM_PWM_Stop+0x96>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_PWM_Stop+0xa6>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ac:	e023      	b.n	80050f6 <HAL_TIM_PWM_Stop+0xee>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d104      	bne.n	80050be <HAL_TIM_PWM_Stop+0xb6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050bc:	e01b      	b.n	80050f6 <HAL_TIM_PWM_Stop+0xee>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_PWM_Stop+0xc6>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_PWM_Stop+0xee>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Stop+0xd6>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_PWM_Stop+0xee>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b10      	cmp	r3, #16
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Stop+0xe6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_PWM_Stop+0xee>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40010000 	.word	0x40010000
 8005104:	40010400 	.word	0x40010400

08005108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0202 	mvn.w	r2, #2
 8005134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fae4 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fad6 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fae7 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d122      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11b      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0204 	mvn.w	r2, #4
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faba 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 80051a4:	e005      	b.n	80051b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 faac 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fabd 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d122      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d11b      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0208 	mvn.w	r2, #8
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2204      	movs	r2, #4
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa90 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e005      	b.n	8005206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fa82 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa93 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2208      	movs	r2, #8
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa66 	bl	8005718 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa58 	bl	8005704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fa69 	bl	800572c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0201 	mvn.w	r2, #1
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc f9a4 	bl	80015d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fea4 	bl	8006000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c6:	d10e      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b80      	cmp	r3, #128	; 0x80
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fe97 	bl	8006014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa17 	bl	8005740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b20      	cmp	r3, #32
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0220 	mvn.w	r2, #32
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fe57 	bl	8005fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005362:	2302      	movs	r3, #2
 8005364:	e0ff      	b.n	8005566 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b14      	cmp	r3, #20
 8005372:	f200 80f0 	bhi.w	8005556 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053d1 	.word	0x080053d1
 8005380:	08005557 	.word	0x08005557
 8005384:	08005557 	.word	0x08005557
 8005388:	08005557 	.word	0x08005557
 800538c:	08005411 	.word	0x08005411
 8005390:	08005557 	.word	0x08005557
 8005394:	08005557 	.word	0x08005557
 8005398:	08005557 	.word	0x08005557
 800539c:	08005453 	.word	0x08005453
 80053a0:	08005557 	.word	0x08005557
 80053a4:	08005557 	.word	0x08005557
 80053a8:	08005557 	.word	0x08005557
 80053ac:	08005493 	.word	0x08005493
 80053b0:	08005557 	.word	0x08005557
 80053b4:	08005557 	.word	0x08005557
 80053b8:	08005557 	.word	0x08005557
 80053bc:	080054d5 	.word	0x080054d5
 80053c0:	08005557 	.word	0x08005557
 80053c4:	08005557 	.word	0x08005557
 80053c8:	08005557 	.word	0x08005557
 80053cc:	08005515 	.word	0x08005515
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fa5c 	bl	8005894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0208 	orr.w	r2, r2, #8
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0204 	bic.w	r2, r2, #4
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	619a      	str	r2, [r3, #24]
      break;
 800540e:	e0a5      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 faae 	bl	8005978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800542a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	021a      	lsls	r2, r3, #8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	619a      	str	r2, [r3, #24]
      break;
 8005450:	e084      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fb05 	bl	8005a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0208 	orr.w	r2, r2, #8
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0204 	bic.w	r2, r2, #4
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	61da      	str	r2, [r3, #28]
      break;
 8005490:	e064      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fb5b 	bl	8005b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	021a      	lsls	r2, r3, #8
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	61da      	str	r2, [r3, #28]
      break;
 80054d2:	e043      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fb92 	bl	8005c04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0208 	orr.w	r2, r2, #8
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0204 	bic.w	r2, r2, #4
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005512:	e023      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fbc4 	bl	8005ca8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005554:	e002      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
      break;
 800555a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop

08005570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x1c>
 8005588:	2302      	movs	r3, #2
 800558a:	e0b4      	b.n	80056f6 <HAL_TIM_ConfigClockSource+0x186>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4b56      	ldr	r3, [pc, #344]	; (8005700 <HAL_TIM_ConfigClockSource+0x190>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c4:	d03e      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0xd4>
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	f200 8087 	bhi.w	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_TIM_ConfigClockSource+0x172>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d87f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b70      	cmp	r3, #112	; 0x70
 80055de:	d01a      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0xa6>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d87b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d050      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x11a>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d877      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b50      	cmp	r3, #80	; 0x50
 80055ee:	d03c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0xfa>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d873      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d058      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x13a>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d86f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d064      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d86b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d060      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d867      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	2b10      	cmp	r3, #16
 8005612:	d05a      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	e062      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6899      	ldr	r1, [r3, #8]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f000 fc0d 	bl	8005e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	609a      	str	r2, [r3, #8]
      break;
 8005642:	e04f      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f000 fbf6 	bl	8005e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005666:	609a      	str	r2, [r3, #8]
      break;
 8005668:	e03c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 fb6a 	bl	8005d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2150      	movs	r1, #80	; 0x50
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fbc3 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005688:	e02c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	461a      	mov	r2, r3
 8005698:	f000 fb89 	bl	8005dae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2160      	movs	r1, #96	; 0x60
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fbb3 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80056a8:	e01c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 fb4a 	bl	8005d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2140      	movs	r1, #64	; 0x40
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fba3 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80056c8:	e00c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f000 fb9a 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80056da:	e003      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e000      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	fffeff88 	.word	0xfffeff88

08005704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a40      	ldr	r2, [pc, #256]	; (8005868 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d00f      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3d      	ldr	r2, [pc, #244]	; (800586c <TIM_Base_SetConfig+0x118>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3c      	ldr	r2, [pc, #240]	; (8005870 <TIM_Base_SetConfig+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3b      	ldr	r2, [pc, #236]	; (8005874 <TIM_Base_SetConfig+0x120>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3a      	ldr	r2, [pc, #232]	; (8005878 <TIM_Base_SetConfig+0x124>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2f      	ldr	r2, [pc, #188]	; (8005868 <TIM_Base_SetConfig+0x114>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d02b      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d027      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2c      	ldr	r2, [pc, #176]	; (800586c <TIM_Base_SetConfig+0x118>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d023      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2b      	ldr	r2, [pc, #172]	; (8005870 <TIM_Base_SetConfig+0x11c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01f      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <TIM_Base_SetConfig+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01b      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a29      	ldr	r2, [pc, #164]	; (8005878 <TIM_Base_SetConfig+0x124>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d017      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a28      	ldr	r2, [pc, #160]	; (800587c <TIM_Base_SetConfig+0x128>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <TIM_Base_SetConfig+0x12c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a26      	ldr	r2, [pc, #152]	; (8005884 <TIM_Base_SetConfig+0x130>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a25      	ldr	r2, [pc, #148]	; (8005888 <TIM_Base_SetConfig+0x134>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a24      	ldr	r2, [pc, #144]	; (800588c <TIM_Base_SetConfig+0x138>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a23      	ldr	r2, [pc, #140]	; (8005890 <TIM_Base_SetConfig+0x13c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d108      	bne.n	8005818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <TIM_Base_SetConfig+0x114>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a0c      	ldr	r2, [pc, #48]	; (8005878 <TIM_Base_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d103      	bne.n	8005854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	615a      	str	r2, [r3, #20]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	40010000 	.word	0x40010000
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40010400 	.word	0x40010400
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800
 8005888:	40001800 	.word	0x40001800
 800588c:	40001c00 	.word	0x40001c00
 8005890:	40002000 	.word	0x40002000

08005894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4b2b      	ldr	r3, [pc, #172]	; (800596c <TIM_OC1_SetConfig+0xd8>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 0302 	bic.w	r3, r3, #2
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a21      	ldr	r2, [pc, #132]	; (8005970 <TIM_OC1_SetConfig+0xdc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC1_SetConfig+0x64>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a20      	ldr	r2, [pc, #128]	; (8005974 <TIM_OC1_SetConfig+0xe0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10c      	bne.n	8005912 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0308 	bic.w	r3, r3, #8
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f023 0304 	bic.w	r3, r3, #4
 8005910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a16      	ldr	r2, [pc, #88]	; (8005970 <TIM_OC1_SetConfig+0xdc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC1_SetConfig+0x8e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <TIM_OC1_SetConfig+0xe0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d111      	bne.n	8005946 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	fffeff8f 	.word	0xfffeff8f
 8005970:	40010000 	.word	0x40010000
 8005974:	40010400 	.word	0x40010400

08005978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f023 0210 	bic.w	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <TIM_OC2_SetConfig+0xe4>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0320 	bic.w	r3, r3, #32
 80059c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <TIM_OC2_SetConfig+0xe8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC2_SetConfig+0x68>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a22      	ldr	r2, [pc, #136]	; (8005a64 <TIM_OC2_SetConfig+0xec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10d      	bne.n	80059fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <TIM_OC2_SetConfig+0xe8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_OC2_SetConfig+0x94>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <TIM_OC2_SetConfig+0xec>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d113      	bne.n	8005a34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	621a      	str	r2, [r3, #32]
}
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	feff8fff 	.word	0xfeff8fff
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40010400 	.word	0x40010400

08005a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <TIM_OC3_SetConfig+0xe0>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a22      	ldr	r2, [pc, #136]	; (8005b4c <TIM_OC3_SetConfig+0xe4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC3_SetConfig+0x66>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <TIM_OC3_SetConfig+0xe8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10d      	bne.n	8005aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <TIM_OC3_SetConfig+0xe4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC3_SetConfig+0x92>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <TIM_OC3_SetConfig+0xe8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d113      	bne.n	8005b22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	621a      	str	r2, [r3, #32]
}
 8005b3c:	bf00      	nop
 8005b3e:	371c      	adds	r7, #28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	fffeff8f 	.word	0xfffeff8f
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40010400 	.word	0x40010400

08005b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <TIM_OC4_SetConfig+0xa4>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	031b      	lsls	r3, r3, #12
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <TIM_OC4_SetConfig+0xa8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC4_SetConfig+0x68>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a12      	ldr	r2, [pc, #72]	; (8005c00 <TIM_OC4_SetConfig+0xac>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d109      	bne.n	8005bd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	019b      	lsls	r3, r3, #6
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	feff8fff 	.word	0xfeff8fff
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010400 	.word	0x40010400

08005c04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <TIM_OC5_SetConfig+0x98>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	041b      	lsls	r3, r3, #16
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <TIM_OC5_SetConfig+0x9c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC5_SetConfig+0x5e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a11      	ldr	r2, [pc, #68]	; (8005ca4 <TIM_OC5_SetConfig+0xa0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d109      	bne.n	8005c76 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	fffeff8f 	.word	0xfffeff8f
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <TIM_OC6_SetConfig+0x9c>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	051b      	lsls	r3, r3, #20
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <TIM_OC6_SetConfig+0xa0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_OC6_SetConfig+0x60>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <TIM_OC6_SetConfig+0xa4>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d109      	bne.n	8005d1c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	621a      	str	r2, [r3, #32]
}
 8005d36:	bf00      	nop
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	feff8fff 	.word	0xfeff8fff
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 030a 	bic.w	r3, r3, #10
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0210 	bic.w	r2, r3, #16
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f043 0307 	orr.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2201      	movs	r2, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e06d      	b.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a30      	ldr	r2, [pc, #192]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d004      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2f      	ldr	r2, [pc, #188]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d108      	bne.n	8005f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a20      	ldr	r2, [pc, #128]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d022      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5a:	d01d      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d018      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1c      	ldr	r2, [pc, #112]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1a      	ldr	r2, [pc, #104]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00e      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a15      	ldr	r2, [pc, #84]	; (8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d009      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a16      	ldr	r2, [pc, #88]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d10c      	bne.n	8005fb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40001800 	.word	0x40001800

08005fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e040      	b.n	80060bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fb fe9e 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2224      	movs	r2, #36	; 0x24
 8006054:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0201 	bic.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fbf8 	bl	800685c <UART_SetConfig>
 800606c:	4603      	mov	r3, r0
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e022      	b.n	80060bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fe4e 	bl	8006d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fed5 	bl	8006e64 <UART_CheckIdleState>
 80060ba:	4603      	mov	r3, r0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060d8:	2b20      	cmp	r3, #32
 80060da:	f040 8081 	bne.w	80061e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_UART_Transmit+0x26>
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e079      	b.n	80061e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Transmit+0x38>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e072      	b.n	80061e2 <HAL_UART_Transmit+0x11e>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2221      	movs	r2, #33	; 0x21
 8006110:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006112:	f7fc f989 	bl	8002428 <HAL_GetTick>
 8006116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006130:	d108      	bne.n	8006144 <HAL_UART_Transmit+0x80>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	e003      	b.n	800614c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006154:	e02c      	b.n	80061b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2200      	movs	r2, #0
 800615e:	2180      	movs	r1, #128	; 0x80
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 feb2 	bl	8006eca <UART_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e038      	b.n	80061e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006184:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	3302      	adds	r3, #2
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	e007      	b.n	800619e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	781a      	ldrb	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1cc      	bne.n	8006156 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2140      	movs	r1, #64	; 0x40
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fe7f 	bl	8006eca <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e005      	b.n	80061e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	e000      	b.n	80061e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	; 0x28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4613      	mov	r3, r2
 80061f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d13d      	bne.n	800627c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_UART_Receive_IT+0x22>
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e036      	b.n	800627e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_UART_Receive_IT+0x34>
 800621a:	2302      	movs	r3, #2
 800621c:	e02f      	b.n	800627e <HAL_UART_Receive_IT+0x94>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d018      	beq.n	800626c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	61bb      	str	r3, [r7, #24]
   return(result);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	461a      	mov	r2, r3
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 feee 	bl	8007054 <UART_Start_Receive_IT>
 8006278:	4603      	mov	r3, r0
 800627a:	e000      	b.n	800627e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3728      	adds	r7, #40	; 0x28
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b0ba      	sub	sp, #232	; 0xe8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80062b6:	4013      	ands	r3, r2
 80062b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d115      	bne.n	80062f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 828f 	beq.w	8006804 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
      }
      return;
 80062ee:	e289      	b.n	8006804 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8117 	beq.w	8006528 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006306:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800630a:	4b85      	ldr	r3, [pc, #532]	; (8006520 <HAL_UART_IRQHandler+0x298>)
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 810a 	beq.w	8006528 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d011      	beq.n	8006344 <HAL_UART_IRQHandler+0xbc>
 8006320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800633a:	f043 0201 	orr.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d011      	beq.n	8006374 <HAL_UART_IRQHandler+0xec>
 8006350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2202      	movs	r2, #2
 8006362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636a:	f043 0204 	orr.w	r2, r3, #4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d011      	beq.n	80063a4 <HAL_UART_IRQHandler+0x11c>
 8006380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2204      	movs	r2, #4
 8006392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800639a:	f043 0202 	orr.w	r2, r3, #2
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d017      	beq.n	80063e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2208      	movs	r2, #8
 80063ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d6:	f043 0208 	orr.w	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d012      	beq.n	8006412 <HAL_UART_IRQHandler+0x18a>
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 81f5 	beq.w	8006808 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800641e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00d      	beq.n	8006446 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800642a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d005      	beq.n	800646a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800645e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006462:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006466:	2b00      	cmp	r3, #0
 8006468:	d04f      	beq.n	800650a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 febc 	bl	80071e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d141      	bne.n	8006502 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3308      	adds	r3, #8
 8006484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006494:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800649c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1d9      	bne.n	800647e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d013      	beq.n	80064fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a13      	ldr	r2, [pc, #76]	; (8006524 <HAL_UART_IRQHandler+0x29c>)
 80064d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fc f953 	bl	800278a <HAL_DMA_Abort_IT>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d017      	beq.n	800651a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	e00f      	b.n	800651a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f998 	bl	8006830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	e00b      	b.n	800651a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f994 	bl	8006830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006508:	e007      	b.n	800651a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f990 	bl	8006830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006518:	e176      	b.n	8006808 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651a:	bf00      	nop
    return;
 800651c:	e174      	b.n	8006808 <HAL_UART_IRQHandler+0x580>
 800651e:	bf00      	nop
 8006520:	04000120 	.word	0x04000120
 8006524:	080072af 	.word	0x080072af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652c:	2b01      	cmp	r3, #1
 800652e:	f040 8144 	bne.w	80067ba <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 813d 	beq.w	80067ba <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8136 	beq.w	80067ba <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2210      	movs	r2, #16
 8006554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	f040 80b2 	bne.w	80066ca <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006572:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8148 	beq.w	800680c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006586:	429a      	cmp	r2, r3
 8006588:	f080 8140 	bcs.w	800680c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a0:	f000 8085 	beq.w	80066ae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1da      	bne.n	80065a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006612:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006616:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800661a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e1      	bne.n	80065ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800663a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800663c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800664e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006650:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800665c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e3      	bne.n	800662a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006690:	65bb      	str	r3, [r7, #88]	; 0x58
 8006692:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006696:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800669e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e4      	bne.n	800666e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fb fffe 	bl	80026aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4619      	mov	r1, r3
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8be 	bl	8006844 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066c8:	e0a0      	b.n	800680c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8092 	beq.w	8006810 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80066ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 808d 	beq.w	8006810 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800670a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006718:	647b      	str	r3, [r7, #68]	; 0x44
 800671a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800671e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e4      	bne.n	80066f6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	623b      	str	r3, [r7, #32]
   return(result);
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006750:	633a      	str	r2, [r7, #48]	; 0x30
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e3      	bne.n	800672c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	60fb      	str	r3, [r7, #12]
   return(result);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	69b9      	ldr	r1, [r7, #24]
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	617b      	str	r3, [r7, #20]
   return(result);
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e4      	bne.n	8006776 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f846 	bl	8006844 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067b8:	e02a      	b.n	8006810 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d01c      	beq.n	8006814 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
    }
    return;
 80067e2:	e017      	b.n	8006814 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <HAL_UART_IRQHandler+0x58e>
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00c      	beq.n	8006816 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fd6c 	bl	80072da <UART_EndTransmit_IT>
    return;
 8006802:	e008      	b.n	8006816 <HAL_UART_IRQHandler+0x58e>
      return;
 8006804:	bf00      	nop
 8006806:	e006      	b.n	8006816 <HAL_UART_IRQHandler+0x58e>
    return;
 8006808:	bf00      	nop
 800680a:	e004      	b.n	8006816 <HAL_UART_IRQHandler+0x58e>
      return;
 800680c:	bf00      	nop
 800680e:	e002      	b.n	8006816 <HAL_UART_IRQHandler+0x58e>
      return;
 8006810:	bf00      	nop
 8006812:	e000      	b.n	8006816 <HAL_UART_IRQHandler+0x58e>
    return;
 8006814:	bf00      	nop
  }

}
 8006816:	37e8      	adds	r7, #232	; 0xe8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4ba7      	ldr	r3, [pc, #668]	; (8006b24 <UART_SetConfig+0x2c8>)
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	430b      	orrs	r3, r1
 8006892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a95      	ldr	r2, [pc, #596]	; (8006b28 <UART_SetConfig+0x2cc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d120      	bne.n	800691a <UART_SetConfig+0xbe>
 80068d8:	4b94      	ldr	r3, [pc, #592]	; (8006b2c <UART_SetConfig+0x2d0>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d816      	bhi.n	8006914 <UART_SetConfig+0xb8>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <UART_SetConfig+0x90>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006909 	.word	0x08006909
 80068f4:	08006903 	.word	0x08006903
 80068f8:	0800690f 	.word	0x0800690f
 80068fc:	2301      	movs	r3, #1
 80068fe:	77fb      	strb	r3, [r7, #31]
 8006900:	e14f      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006902:	2302      	movs	r3, #2
 8006904:	77fb      	strb	r3, [r7, #31]
 8006906:	e14c      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006908:	2304      	movs	r3, #4
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e149      	b.n	8006ba2 <UART_SetConfig+0x346>
 800690e:	2308      	movs	r3, #8
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e146      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006914:	2310      	movs	r3, #16
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e143      	b.n	8006ba2 <UART_SetConfig+0x346>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a84      	ldr	r2, [pc, #528]	; (8006b30 <UART_SetConfig+0x2d4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d132      	bne.n	800698a <UART_SetConfig+0x12e>
 8006924:	4b81      	ldr	r3, [pc, #516]	; (8006b2c <UART_SetConfig+0x2d0>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	2b0c      	cmp	r3, #12
 8006930:	d828      	bhi.n	8006984 <UART_SetConfig+0x128>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0xdc>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800696d 	.word	0x0800696d
 800693c:	08006985 	.word	0x08006985
 8006940:	08006985 	.word	0x08006985
 8006944:	08006985 	.word	0x08006985
 8006948:	08006979 	.word	0x08006979
 800694c:	08006985 	.word	0x08006985
 8006950:	08006985 	.word	0x08006985
 8006954:	08006985 	.word	0x08006985
 8006958:	08006973 	.word	0x08006973
 800695c:	08006985 	.word	0x08006985
 8006960:	08006985 	.word	0x08006985
 8006964:	08006985 	.word	0x08006985
 8006968:	0800697f 	.word	0x0800697f
 800696c:	2300      	movs	r3, #0
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e117      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006972:	2302      	movs	r3, #2
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e114      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006978:	2304      	movs	r3, #4
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	e111      	b.n	8006ba2 <UART_SetConfig+0x346>
 800697e:	2308      	movs	r3, #8
 8006980:	77fb      	strb	r3, [r7, #31]
 8006982:	e10e      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006984:	2310      	movs	r3, #16
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	e10b      	b.n	8006ba2 <UART_SetConfig+0x346>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a69      	ldr	r2, [pc, #420]	; (8006b34 <UART_SetConfig+0x2d8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d120      	bne.n	80069d6 <UART_SetConfig+0x17a>
 8006994:	4b65      	ldr	r3, [pc, #404]	; (8006b2c <UART_SetConfig+0x2d0>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d013      	beq.n	80069ca <UART_SetConfig+0x16e>
 80069a2:	2b30      	cmp	r3, #48	; 0x30
 80069a4:	d814      	bhi.n	80069d0 <UART_SetConfig+0x174>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d009      	beq.n	80069be <UART_SetConfig+0x162>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d810      	bhi.n	80069d0 <UART_SetConfig+0x174>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <UART_SetConfig+0x15c>
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d006      	beq.n	80069c4 <UART_SetConfig+0x168>
 80069b6:	e00b      	b.n	80069d0 <UART_SetConfig+0x174>
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e0f1      	b.n	8006ba2 <UART_SetConfig+0x346>
 80069be:	2302      	movs	r3, #2
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e0ee      	b.n	8006ba2 <UART_SetConfig+0x346>
 80069c4:	2304      	movs	r3, #4
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e0eb      	b.n	8006ba2 <UART_SetConfig+0x346>
 80069ca:	2308      	movs	r3, #8
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e0e8      	b.n	8006ba2 <UART_SetConfig+0x346>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e0e5      	b.n	8006ba2 <UART_SetConfig+0x346>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a57      	ldr	r2, [pc, #348]	; (8006b38 <UART_SetConfig+0x2dc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d120      	bne.n	8006a22 <UART_SetConfig+0x1c6>
 80069e0:	4b52      	ldr	r3, [pc, #328]	; (8006b2c <UART_SetConfig+0x2d0>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ea:	2bc0      	cmp	r3, #192	; 0xc0
 80069ec:	d013      	beq.n	8006a16 <UART_SetConfig+0x1ba>
 80069ee:	2bc0      	cmp	r3, #192	; 0xc0
 80069f0:	d814      	bhi.n	8006a1c <UART_SetConfig+0x1c0>
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d009      	beq.n	8006a0a <UART_SetConfig+0x1ae>
 80069f6:	2b80      	cmp	r3, #128	; 0x80
 80069f8:	d810      	bhi.n	8006a1c <UART_SetConfig+0x1c0>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <UART_SetConfig+0x1a8>
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d006      	beq.n	8006a10 <UART_SetConfig+0x1b4>
 8006a02:	e00b      	b.n	8006a1c <UART_SetConfig+0x1c0>
 8006a04:	2300      	movs	r3, #0
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e0cb      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	77fb      	strb	r3, [r7, #31]
 8006a0e:	e0c8      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a10:	2304      	movs	r3, #4
 8006a12:	77fb      	strb	r3, [r7, #31]
 8006a14:	e0c5      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a16:	2308      	movs	r3, #8
 8006a18:	77fb      	strb	r3, [r7, #31]
 8006a1a:	e0c2      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	77fb      	strb	r3, [r7, #31]
 8006a20:	e0bf      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a45      	ldr	r2, [pc, #276]	; (8006b3c <UART_SetConfig+0x2e0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d125      	bne.n	8006a78 <UART_SetConfig+0x21c>
 8006a2c:	4b3f      	ldr	r3, [pc, #252]	; (8006b2c <UART_SetConfig+0x2d0>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3a:	d017      	beq.n	8006a6c <UART_SetConfig+0x210>
 8006a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a40:	d817      	bhi.n	8006a72 <UART_SetConfig+0x216>
 8006a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a46:	d00b      	beq.n	8006a60 <UART_SetConfig+0x204>
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d811      	bhi.n	8006a72 <UART_SetConfig+0x216>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <UART_SetConfig+0x1fe>
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d006      	beq.n	8006a66 <UART_SetConfig+0x20a>
 8006a58:	e00b      	b.n	8006a72 <UART_SetConfig+0x216>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e0a0      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a60:	2302      	movs	r3, #2
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e09d      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a66:	2304      	movs	r3, #4
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e09a      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e097      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a72:	2310      	movs	r3, #16
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e094      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a30      	ldr	r2, [pc, #192]	; (8006b40 <UART_SetConfig+0x2e4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d125      	bne.n	8006ace <UART_SetConfig+0x272>
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <UART_SetConfig+0x2d0>)
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a90:	d017      	beq.n	8006ac2 <UART_SetConfig+0x266>
 8006a92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a96:	d817      	bhi.n	8006ac8 <UART_SetConfig+0x26c>
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9c:	d00b      	beq.n	8006ab6 <UART_SetConfig+0x25a>
 8006a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa2:	d811      	bhi.n	8006ac8 <UART_SetConfig+0x26c>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <UART_SetConfig+0x254>
 8006aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aac:	d006      	beq.n	8006abc <UART_SetConfig+0x260>
 8006aae:	e00b      	b.n	8006ac8 <UART_SetConfig+0x26c>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e075      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e072      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006abc:	2304      	movs	r3, #4
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e06f      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e06c      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e069      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	; (8006b44 <UART_SetConfig+0x2e8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d137      	bne.n	8006b48 <UART_SetConfig+0x2ec>
 8006ad8:	4b14      	ldr	r3, [pc, #80]	; (8006b2c <UART_SetConfig+0x2d0>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ae2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae6:	d017      	beq.n	8006b18 <UART_SetConfig+0x2bc>
 8006ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aec:	d817      	bhi.n	8006b1e <UART_SetConfig+0x2c2>
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af2:	d00b      	beq.n	8006b0c <UART_SetConfig+0x2b0>
 8006af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af8:	d811      	bhi.n	8006b1e <UART_SetConfig+0x2c2>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <UART_SetConfig+0x2aa>
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d006      	beq.n	8006b12 <UART_SetConfig+0x2b6>
 8006b04:	e00b      	b.n	8006b1e <UART_SetConfig+0x2c2>
 8006b06:	2300      	movs	r3, #0
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e04a      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	77fb      	strb	r3, [r7, #31]
 8006b10:	e047      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b12:	2304      	movs	r3, #4
 8006b14:	77fb      	strb	r3, [r7, #31]
 8006b16:	e044      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e041      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b1e:	2310      	movs	r3, #16
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e03e      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b24:	efff69f3 	.word	0xefff69f3
 8006b28:	40011000 	.word	0x40011000
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	40004400 	.word	0x40004400
 8006b34:	40004800 	.word	0x40004800
 8006b38:	40004c00 	.word	0x40004c00
 8006b3c:	40005000 	.word	0x40005000
 8006b40:	40011400 	.word	0x40011400
 8006b44:	40007800 	.word	0x40007800
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a71      	ldr	r2, [pc, #452]	; (8006d14 <UART_SetConfig+0x4b8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d125      	bne.n	8006b9e <UART_SetConfig+0x342>
 8006b52:	4b71      	ldr	r3, [pc, #452]	; (8006d18 <UART_SetConfig+0x4bc>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b60:	d017      	beq.n	8006b92 <UART_SetConfig+0x336>
 8006b62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b66:	d817      	bhi.n	8006b98 <UART_SetConfig+0x33c>
 8006b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6c:	d00b      	beq.n	8006b86 <UART_SetConfig+0x32a>
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d811      	bhi.n	8006b98 <UART_SetConfig+0x33c>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <UART_SetConfig+0x324>
 8006b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b7c:	d006      	beq.n	8006b8c <UART_SetConfig+0x330>
 8006b7e:	e00b      	b.n	8006b98 <UART_SetConfig+0x33c>
 8006b80:	2300      	movs	r3, #0
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e00d      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b86:	2302      	movs	r3, #2
 8006b88:	77fb      	strb	r3, [r7, #31]
 8006b8a:	e00a      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	77fb      	strb	r3, [r7, #31]
 8006b90:	e007      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b92:	2308      	movs	r3, #8
 8006b94:	77fb      	strb	r3, [r7, #31]
 8006b96:	e004      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e001      	b.n	8006ba2 <UART_SetConfig+0x346>
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006baa:	d15a      	bne.n	8006c62 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006bac:	7ffb      	ldrb	r3, [r7, #31]
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d827      	bhi.n	8006c02 <UART_SetConfig+0x3a6>
 8006bb2:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x35c>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006bf3 	.word	0x08006bf3
 8006bcc:	08006c03 	.word	0x08006c03
 8006bd0:	08006c03 	.word	0x08006c03
 8006bd4:	08006c03 	.word	0x08006c03
 8006bd8:	08006bfb 	.word	0x08006bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fd fb42 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8006be0:	61b8      	str	r0, [r7, #24]
        break;
 8006be2:	e013      	b.n	8006c0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7fd fb52 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 8006be8:	61b8      	str	r0, [r7, #24]
        break;
 8006bea:	e00f      	b.n	8006c0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <UART_SetConfig+0x4c0>)
 8006bee:	61bb      	str	r3, [r7, #24]
        break;
 8006bf0:	e00c      	b.n	8006c0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd fa49 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8006bf6:	61b8      	str	r0, [r7, #24]
        break;
 8006bf8:	e008      	b.n	8006c0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e004      	b.n	8006c0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	77bb      	strb	r3, [r7, #30]
        break;
 8006c0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d074      	beq.n	8006cfc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	005a      	lsls	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	d916      	bls.n	8006c5c <UART_SetConfig+0x400>
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d212      	bcs.n	8006c5c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f023 030f 	bic.w	r3, r3, #15
 8006c3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	89fb      	ldrh	r3, [r7, #14]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	89fa      	ldrh	r2, [r7, #14]
 8006c58:	60da      	str	r2, [r3, #12]
 8006c5a:	e04f      	b.n	8006cfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77bb      	strb	r3, [r7, #30]
 8006c60:	e04c      	b.n	8006cfc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d828      	bhi.n	8006cba <UART_SetConfig+0x45e>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <UART_SetConfig+0x414>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	08006cbb 	.word	0x08006cbb
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cbb 	.word	0x08006cbb
 8006c88:	08006cbb 	.word	0x08006cbb
 8006c8c:	08006cbb 	.word	0x08006cbb
 8006c90:	08006cb3 	.word	0x08006cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c94:	f7fd fae6 	bl	8004264 <HAL_RCC_GetPCLK1Freq>
 8006c98:	61b8      	str	r0, [r7, #24]
        break;
 8006c9a:	e013      	b.n	8006cc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7fd faf6 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 8006ca0:	61b8      	str	r0, [r7, #24]
        break;
 8006ca2:	e00f      	b.n	8006cc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <UART_SetConfig+0x4c0>)
 8006ca6:	61bb      	str	r3, [r7, #24]
        break;
 8006ca8:	e00c      	b.n	8006cc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006caa:	f7fd f9ed 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8006cae:	61b8      	str	r0, [r7, #24]
        break;
 8006cb0:	e008      	b.n	8006cc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb6:	61bb      	str	r3, [r7, #24]
        break;
 8006cb8:	e004      	b.n	8006cc4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cc2:	bf00      	nop
    }

    if (pclk != 0U)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d018      	beq.n	8006cfc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	085a      	lsrs	r2, r3, #1
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	441a      	add	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d909      	bls.n	8006cf8 <UART_SetConfig+0x49c>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cea:	d205      	bcs.n	8006cf8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	e001      	b.n	8006cfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d08:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40007c00 	.word	0x40007c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	00f42400 	.word	0x00f42400

08006d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d10a      	bne.n	8006e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e74:	f7fb fad8 	bl	8002428 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d10e      	bne.n	8006ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f817 	bl	8006eca <UART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e00d      	b.n	8006ec2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b09c      	sub	sp, #112	; 0x70
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	60f8      	str	r0, [r7, #12]
 8006ed2:	60b9      	str	r1, [r7, #8]
 8006ed4:	603b      	str	r3, [r7, #0]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eda:	e0a5      	b.n	8007028 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	f000 80a1 	beq.w	8007028 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fb fa9f 	bl	8002428 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <UART_WaitOnFlagUntilTimeout+0x32>
 8006ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d13e      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f10:	667b      	str	r3, [r7, #100]	; 0x64
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	663b      	str	r3, [r7, #96]	; 0x60
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e067      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0304 	and.w	r3, r3, #4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d04f      	beq.n	8007028 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f96:	d147      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e6      	bne.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ff4:	623a      	str	r2, [r7, #32]
 8006ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	61bb      	str	r3, [r7, #24]
   return(result);
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e5      	bne.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2220      	movs	r2, #32
 800700c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e010      	b.n	800704a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69da      	ldr	r2, [r3, #28]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4013      	ands	r3, r2
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	429a      	cmp	r2, r3
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	429a      	cmp	r2, r3
 8007044:	f43f af4a 	beq.w	8006edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3770      	adds	r7, #112	; 0x70
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007054:	b480      	push	{r7}
 8007056:	b097      	sub	sp, #92	; 0x5c
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	d10e      	bne.n	80070a6 <UART_Start_Receive_IT+0x52>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d105      	bne.n	800709c <UART_Start_Receive_IT+0x48>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007096:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800709a:	e02d      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	22ff      	movs	r2, #255	; 0xff
 80070a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070a4:	e028      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10d      	bne.n	80070ca <UART_Start_Receive_IT+0x76>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d104      	bne.n	80070c0 <UART_Start_Receive_IT+0x6c>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070be:	e01b      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	227f      	movs	r2, #127	; 0x7f
 80070c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070c8:	e016      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d2:	d10d      	bne.n	80070f0 <UART_Start_Receive_IT+0x9c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d104      	bne.n	80070e6 <UART_Start_Receive_IT+0x92>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	227f      	movs	r2, #127	; 0x7f
 80070e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070e4:	e008      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	223f      	movs	r2, #63	; 0x3f
 80070ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ee:	e003      	b.n	80070f8 <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2222      	movs	r2, #34	; 0x22
 8007104:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	f043 0301 	orr.w	r3, r3, #1
 800711c:	657b      	str	r3, [r7, #84]	; 0x54
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007126:	64ba      	str	r2, [r7, #72]	; 0x48
 8007128:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800712c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e5      	bne.n	8007106 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007142:	d107      	bne.n	8007154 <UART_Start_Receive_IT+0x100>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4a24      	ldr	r2, [pc, #144]	; (80071e0 <UART_Start_Receive_IT+0x18c>)
 8007150:	665a      	str	r2, [r3, #100]	; 0x64
 8007152:	e002      	b.n	800715a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a23      	ldr	r2, [pc, #140]	; (80071e4 <UART_Start_Receive_IT+0x190>)
 8007158:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d019      	beq.n	800719e <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800718e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e6      	bne.n	800716a <UART_Start_Receive_IT+0x116>
 800719c:	e018      	b.n	80071d0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	613b      	str	r3, [r7, #16]
   return(result);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f043 0320 	orr.w	r3, r3, #32
 80071b2:	653b      	str	r3, [r7, #80]	; 0x50
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071bc:	623b      	str	r3, [r7, #32]
 80071be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	69f9      	ldr	r1, [r7, #28]
 80071c2:	6a3a      	ldr	r2, [r7, #32]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e6      	bne.n	800719e <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	375c      	adds	r7, #92	; 0x5c
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	0800748b 	.word	0x0800748b
 80071e4:	0800732f 	.word	0x0800732f

080071e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b095      	sub	sp, #84	; 0x54
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
 8007210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e6      	bne.n	80071f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	61fb      	str	r3, [r7, #28]
   return(result);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	64bb      	str	r3, [r7, #72]	; 0x48
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e5      	bne.n	8007222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725a:	2b01      	cmp	r3, #1
 800725c:	d118      	bne.n	8007290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	60bb      	str	r3, [r7, #8]
   return(result);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 0310 	bic.w	r3, r3, #16
 8007272:	647b      	str	r3, [r7, #68]	; 0x44
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	613b      	str	r3, [r7, #16]
   return(result);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e6      	bne.n	800725e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2220      	movs	r2, #32
 8007294:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072a2:	bf00      	nop
 80072a4:	3754      	adds	r7, #84	; 0x54
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff faaf 	bl	8006830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b088      	sub	sp, #32
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	613b      	str	r3, [r7, #16]
   return(result);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff fa7b 	bl	800681c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007326:	bf00      	nop
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b096      	sub	sp, #88	; 0x58
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800733c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007344:	2b22      	cmp	r3, #34	; 0x22
 8007346:	f040 8094 	bne.w	8007472 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007354:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007358:	b2d9      	uxtb	r1, r3
 800735a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800735e:	b2da      	uxtb	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	400a      	ands	r2, r1
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d177      	bne.n	8007482 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073a6:	653b      	str	r3, [r7, #80]	; 0x50
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b0:	647b      	str	r3, [r7, #68]	; 0x44
 80073b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e6      	bne.n	8007392 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	623b      	str	r3, [r7, #32]
   return(result);
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f023 0301 	bic.w	r3, r3, #1
 80073da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073e4:	633a      	str	r2, [r7, #48]	; 0x30
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ec:	e841 2300 	strex	r3, r2, [r1]
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e5      	bne.n	80073c4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2220      	movs	r2, #32
 80073fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007408:	2b01      	cmp	r3, #1
 800740a:	d12e      	bne.n	800746a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0310 	bic.w	r3, r3, #16
 8007426:	64bb      	str	r3, [r7, #72]	; 0x48
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	69b9      	ldr	r1, [r7, #24]
 8007436:	69fa      	ldr	r2, [r7, #28]
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	617b      	str	r3, [r7, #20]
   return(result);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e6      	bne.n	8007412 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f003 0310 	and.w	r3, r3, #16
 800744e:	2b10      	cmp	r3, #16
 8007450:	d103      	bne.n	800745a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2210      	movs	r2, #16
 8007458:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7ff f9ee 	bl	8006844 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007468:	e00b      	b.n	8007482 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fa f938 	bl	80016e0 <HAL_UART_RxCpltCallback>
}
 8007470:	e007      	b.n	8007482 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0208 	orr.w	r2, r2, #8
 8007480:	619a      	str	r2, [r3, #24]
}
 8007482:	bf00      	nop
 8007484:	3758      	adds	r7, #88	; 0x58
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b096      	sub	sp, #88	; 0x58
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007498:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a0:	2b22      	cmp	r3, #34	; 0x22
 80074a2:	f040 8094 	bne.w	80075ce <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80074b6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80074ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074be:	4013      	ands	r3, r2
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	1c9a      	adds	r2, r3, #2
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d177      	bne.n	80075de <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f6:	e853 3f00 	ldrex	r3, [r3]
 80074fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800750c:	643b      	str	r3, [r7, #64]	; 0x40
 800750e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e6      	bne.n	80074ee <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	e853 3f00 	ldrex	r3, [r3]
 800752e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f023 0301 	bic.w	r3, r3, #1
 8007536:	64bb      	str	r3, [r7, #72]	; 0x48
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007548:	e841 2300 	strex	r3, r2, [r1]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d1e5      	bne.n	8007520 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007564:	2b01      	cmp	r3, #1
 8007566:	d12e      	bne.n	80075c6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	60bb      	str	r3, [r7, #8]
   return(result);
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f023 0310 	bic.w	r3, r3, #16
 8007582:	647b      	str	r3, [r7, #68]	; 0x44
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6979      	ldr	r1, [r7, #20]
 8007592:	69ba      	ldr	r2, [r7, #24]
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	613b      	str	r3, [r7, #16]
   return(result);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e6      	bne.n	800756e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	d103      	bne.n	80075b6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2210      	movs	r2, #16
 80075b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff f940 	bl	8006844 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075c4:	e00b      	b.n	80075de <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fa f88a 	bl	80016e0 <HAL_UART_RxCpltCallback>
}
 80075cc:	e007      	b.n	80075de <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699a      	ldr	r2, [r3, #24]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0208 	orr.w	r2, r2, #8
 80075dc:	619a      	str	r2, [r3, #24]
}
 80075de:	bf00      	nop
 80075e0:	3758      	adds	r7, #88	; 0x58
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075e8:	b084      	sub	sp, #16
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	f107 001c 	add.w	r0, r7, #28
 80075f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d120      	bne.n	8007642 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	4b20      	ldr	r3, [pc, #128]	; (8007694 <USB_CoreInit+0xac>)
 8007612:	4013      	ands	r3, r2
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007626:	2b01      	cmp	r3, #1
 8007628:	d105      	bne.n	8007636 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa92 	bl	8007b60 <USB_CoreReset>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]
 8007640:	e010      	b.n	8007664 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa86 	bl	8007b60 <USB_CoreReset>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	2b01      	cmp	r3, #1
 8007668:	d10b      	bne.n	8007682 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f043 0206 	orr.w	r2, r3, #6
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f043 0220 	orr.w	r2, r3, #32
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800768e:	b004      	add	sp, #16
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	ffbdffbf 	.word	0xffbdffbf

08007698 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f023 0201 	bic.w	r2, r3, #1
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d115      	bne.n	8007708 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076e8:	2001      	movs	r0, #1
 80076ea:	f7fa fea9 	bl	8002440 <HAL_Delay>
      ms++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa25 	bl	8007b44 <USB_GetMode>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d01e      	beq.n	800773e <USB_SetCurrentMode+0x84>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b31      	cmp	r3, #49	; 0x31
 8007704:	d9f0      	bls.n	80076e8 <USB_SetCurrentMode+0x2e>
 8007706:	e01a      	b.n	800773e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d115      	bne.n	800773a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800771a:	2001      	movs	r0, #1
 800771c:	f7fa fe90 	bl	8002440 <HAL_Delay>
      ms++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa0c 	bl	8007b44 <USB_GetMode>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d005      	beq.n	800773e <USB_SetCurrentMode+0x84>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b31      	cmp	r3, #49	; 0x31
 8007736:	d9f0      	bls.n	800771a <USB_SetCurrentMode+0x60>
 8007738:	e001      	b.n	800773e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e005      	b.n	800774a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b32      	cmp	r3, #50	; 0x32
 8007742:	d101      	bne.n	8007748 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007754:	b084      	sub	sp, #16
 8007756:	b580      	push	{r7, lr}
 8007758:	b086      	sub	sp, #24
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	e009      	b.n	8007788 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	3340      	adds	r3, #64	; 0x40
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3301      	adds	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2b0e      	cmp	r3, #14
 800778c:	d9f2      	bls.n	8007774 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800778e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11c      	bne.n	80077ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e005      	b.n	80077da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	4619      	mov	r1, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f4:	461a      	mov	r2, r3
 80077f6:	680b      	ldr	r3, [r1, #0]
 80077f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d10c      	bne.n	800781a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007806:	2100      	movs	r1, #0
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f961 	bl	8007ad0 <USB_SetDevSpeed>
 800780e:	e008      	b.n	8007822 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007810:	2101      	movs	r1, #1
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f95c 	bl	8007ad0 <USB_SetDevSpeed>
 8007818:	e003      	b.n	8007822 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800781a:	2103      	movs	r1, #3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f957 	bl	8007ad0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007822:	2110      	movs	r1, #16
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8f3 	bl	8007a10 <USB_FlushTxFifo>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f91d 	bl	8007a74 <USB_FlushRxFifo>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	461a      	mov	r2, r3
 800784c:	2300      	movs	r3, #0
 800784e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	461a      	mov	r2, r3
 8007858:	2300      	movs	r3, #0
 800785a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	461a      	mov	r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	e043      	b.n	80078f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007884:	d118      	bne.n	80078b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	461a      	mov	r2, r3
 800789a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e013      	b.n	80078ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	461a      	mov	r2, r3
 80078b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	e008      	b.n	80078ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c4:	461a      	mov	r2, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d6:	461a      	mov	r2, r3
 80078d8:	2300      	movs	r3, #0
 80078da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e8:	461a      	mov	r2, r3
 80078ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3301      	adds	r3, #1
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3b7      	bcc.n	800786e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078fe:	2300      	movs	r3, #0
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	e043      	b.n	800798c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800791a:	d118      	bne.n	800794e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	e013      	b.n	8007960 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	461a      	mov	r2, r3
 8007946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	e008      	b.n	8007960 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795a:	461a      	mov	r2, r3
 800795c:	2300      	movs	r3, #0
 800795e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	461a      	mov	r2, r3
 800796e:	2300      	movs	r3, #0
 8007970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	461a      	mov	r2, r3
 8007980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	429a      	cmp	r2, r3
 8007992:	d3b7      	bcc.n	8007904 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d105      	bne.n	80079c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	f043 0210 	orr.w	r2, r3, #16
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <USB_DevInit+0x2b4>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f043 0208 	orr.w	r2, r3, #8
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d105      	bne.n	80079f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <USB_DevInit+0x2b8>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a04:	b004      	add	sp, #16
 8007a06:	4770      	bx	lr
 8007a08:	803c3800 	.word	0x803c3800
 8007a0c:	40000004 	.word	0x40000004

08007a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3301      	adds	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	4a12      	ldr	r2, [pc, #72]	; (8007a70 <USB_FlushTxFifo+0x60>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e01a      	b.n	8007a64 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	daf3      	bge.n	8007a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	019b      	lsls	r3, r3, #6
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	4a08      	ldr	r2, [pc, #32]	; (8007a70 <USB_FlushTxFifo+0x60>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d901      	bls.n	8007a56 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e006      	b.n	8007a64 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0320 	and.w	r3, r3, #32
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d0f1      	beq.n	8007a46 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	00030d40 	.word	0x00030d40

08007a74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]
 8007a86:	4a11      	ldr	r2, [pc, #68]	; (8007acc <USB_FlushRxFifo+0x58>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d901      	bls.n	8007a90 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e017      	b.n	8007ac0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	daf3      	bge.n	8007a80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	4a08      	ldr	r2, [pc, #32]	; (8007acc <USB_FlushRxFifo+0x58>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d901      	bls.n	8007ab2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e006      	b.n	8007ac0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b10      	cmp	r3, #16
 8007abc:	d0f1      	beq.n	8007aa2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	00030d40 	.word	0x00030d40

08007ad0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007af0:	4313      	orrs	r3, r2
 8007af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b1c:	f023 0303 	bic.w	r3, r3, #3
 8007b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b30:	f043 0302 	orr.w	r3, r3, #2
 8007b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0301 	and.w	r3, r3, #1
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <USB_CoreReset+0x60>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d901      	bls.n	8007b7c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e01a      	b.n	8007bb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	daf3      	bge.n	8007b6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f043 0201 	orr.w	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <USB_CoreReset+0x60>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e006      	b.n	8007bb2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d0f1      	beq.n	8007b94 <USB_CoreReset+0x34>

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	00030d40 	.word	0x00030d40

08007bc4 <__errno>:
 8007bc4:	4b01      	ldr	r3, [pc, #4]	; (8007bcc <__errno+0x8>)
 8007bc6:	6818      	ldr	r0, [r3, #0]
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	20000070 	.word	0x20000070

08007bd0 <__libc_init_array>:
 8007bd0:	b570      	push	{r4, r5, r6, lr}
 8007bd2:	4d0d      	ldr	r5, [pc, #52]	; (8007c08 <__libc_init_array+0x38>)
 8007bd4:	4c0d      	ldr	r4, [pc, #52]	; (8007c0c <__libc_init_array+0x3c>)
 8007bd6:	1b64      	subs	r4, r4, r5
 8007bd8:	10a4      	asrs	r4, r4, #2
 8007bda:	2600      	movs	r6, #0
 8007bdc:	42a6      	cmp	r6, r4
 8007bde:	d109      	bne.n	8007bf4 <__libc_init_array+0x24>
 8007be0:	4d0b      	ldr	r5, [pc, #44]	; (8007c10 <__libc_init_array+0x40>)
 8007be2:	4c0c      	ldr	r4, [pc, #48]	; (8007c14 <__libc_init_array+0x44>)
 8007be4:	f005 f8a4 	bl	800cd30 <_init>
 8007be8:	1b64      	subs	r4, r4, r5
 8007bea:	10a4      	asrs	r4, r4, #2
 8007bec:	2600      	movs	r6, #0
 8007bee:	42a6      	cmp	r6, r4
 8007bf0:	d105      	bne.n	8007bfe <__libc_init_array+0x2e>
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf8:	4798      	blx	r3
 8007bfa:	3601      	adds	r6, #1
 8007bfc:	e7ee      	b.n	8007bdc <__libc_init_array+0xc>
 8007bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c02:	4798      	blx	r3
 8007c04:	3601      	adds	r6, #1
 8007c06:	e7f2      	b.n	8007bee <__libc_init_array+0x1e>
 8007c08:	0800d264 	.word	0x0800d264
 8007c0c:	0800d264 	.word	0x0800d264
 8007c10:	0800d264 	.word	0x0800d264
 8007c14:	0800d268 	.word	0x0800d268

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <__cvt>:
 8007c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	ec55 4b10 	vmov	r4, r5, d0
 8007c30:	2d00      	cmp	r5, #0
 8007c32:	460e      	mov	r6, r1
 8007c34:	4619      	mov	r1, r3
 8007c36:	462b      	mov	r3, r5
 8007c38:	bfbb      	ittet	lt
 8007c3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c3e:	461d      	movlt	r5, r3
 8007c40:	2300      	movge	r3, #0
 8007c42:	232d      	movlt	r3, #45	; 0x2d
 8007c44:	700b      	strb	r3, [r1, #0]
 8007c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c4c:	4691      	mov	r9, r2
 8007c4e:	f023 0820 	bic.w	r8, r3, #32
 8007c52:	bfbc      	itt	lt
 8007c54:	4622      	movlt	r2, r4
 8007c56:	4614      	movlt	r4, r2
 8007c58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c5c:	d005      	beq.n	8007c6a <__cvt+0x42>
 8007c5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c62:	d100      	bne.n	8007c66 <__cvt+0x3e>
 8007c64:	3601      	adds	r6, #1
 8007c66:	2102      	movs	r1, #2
 8007c68:	e000      	b.n	8007c6c <__cvt+0x44>
 8007c6a:	2103      	movs	r1, #3
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	ab02      	add	r3, sp, #8
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	ec45 4b10 	vmov	d0, r4, r5
 8007c78:	4653      	mov	r3, sl
 8007c7a:	4632      	mov	r2, r6
 8007c7c:	f001 fe68 	bl	8009950 <_dtoa_r>
 8007c80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c84:	4607      	mov	r7, r0
 8007c86:	d102      	bne.n	8007c8e <__cvt+0x66>
 8007c88:	f019 0f01 	tst.w	r9, #1
 8007c8c:	d022      	beq.n	8007cd4 <__cvt+0xac>
 8007c8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c92:	eb07 0906 	add.w	r9, r7, r6
 8007c96:	d110      	bne.n	8007cba <__cvt+0x92>
 8007c98:	783b      	ldrb	r3, [r7, #0]
 8007c9a:	2b30      	cmp	r3, #48	; 0x30
 8007c9c:	d10a      	bne.n	8007cb4 <__cvt+0x8c>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	f7f8 ff2f 	bl	8000b08 <__aeabi_dcmpeq>
 8007caa:	b918      	cbnz	r0, 8007cb4 <__cvt+0x8c>
 8007cac:	f1c6 0601 	rsb	r6, r6, #1
 8007cb0:	f8ca 6000 	str.w	r6, [sl]
 8007cb4:	f8da 3000 	ldr.w	r3, [sl]
 8007cb8:	4499      	add	r9, r3
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 ff21 	bl	8000b08 <__aeabi_dcmpeq>
 8007cc6:	b108      	cbz	r0, 8007ccc <__cvt+0xa4>
 8007cc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ccc:	2230      	movs	r2, #48	; 0x30
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	454b      	cmp	r3, r9
 8007cd2:	d307      	bcc.n	8007ce4 <__cvt+0xbc>
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cd8:	1bdb      	subs	r3, r3, r7
 8007cda:	4638      	mov	r0, r7
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	b004      	add	sp, #16
 8007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce4:	1c59      	adds	r1, r3, #1
 8007ce6:	9103      	str	r1, [sp, #12]
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	e7f0      	b.n	8007cce <__cvt+0xa6>

08007cec <__exponent>:
 8007cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	bfb8      	it	lt
 8007cf4:	4249      	neglt	r1, r1
 8007cf6:	f803 2b02 	strb.w	r2, [r3], #2
 8007cfa:	bfb4      	ite	lt
 8007cfc:	222d      	movlt	r2, #45	; 0x2d
 8007cfe:	222b      	movge	r2, #43	; 0x2b
 8007d00:	2909      	cmp	r1, #9
 8007d02:	7042      	strb	r2, [r0, #1]
 8007d04:	dd2a      	ble.n	8007d5c <__exponent+0x70>
 8007d06:	f10d 0407 	add.w	r4, sp, #7
 8007d0a:	46a4      	mov	ip, r4
 8007d0c:	270a      	movs	r7, #10
 8007d0e:	46a6      	mov	lr, r4
 8007d10:	460a      	mov	r2, r1
 8007d12:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d16:	fb07 1516 	mls	r5, r7, r6, r1
 8007d1a:	3530      	adds	r5, #48	; 0x30
 8007d1c:	2a63      	cmp	r2, #99	; 0x63
 8007d1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007d22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d26:	4631      	mov	r1, r6
 8007d28:	dcf1      	bgt.n	8007d0e <__exponent+0x22>
 8007d2a:	3130      	adds	r1, #48	; 0x30
 8007d2c:	f1ae 0502 	sub.w	r5, lr, #2
 8007d30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d34:	1c44      	adds	r4, r0, #1
 8007d36:	4629      	mov	r1, r5
 8007d38:	4561      	cmp	r1, ip
 8007d3a:	d30a      	bcc.n	8007d52 <__exponent+0x66>
 8007d3c:	f10d 0209 	add.w	r2, sp, #9
 8007d40:	eba2 020e 	sub.w	r2, r2, lr
 8007d44:	4565      	cmp	r5, ip
 8007d46:	bf88      	it	hi
 8007d48:	2200      	movhi	r2, #0
 8007d4a:	4413      	add	r3, r2
 8007d4c:	1a18      	subs	r0, r3, r0
 8007d4e:	b003      	add	sp, #12
 8007d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d5a:	e7ed      	b.n	8007d38 <__exponent+0x4c>
 8007d5c:	2330      	movs	r3, #48	; 0x30
 8007d5e:	3130      	adds	r1, #48	; 0x30
 8007d60:	7083      	strb	r3, [r0, #2]
 8007d62:	70c1      	strb	r1, [r0, #3]
 8007d64:	1d03      	adds	r3, r0, #4
 8007d66:	e7f1      	b.n	8007d4c <__exponent+0x60>

08007d68 <_printf_float>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	ed2d 8b02 	vpush	{d8}
 8007d70:	b08d      	sub	sp, #52	; 0x34
 8007d72:	460c      	mov	r4, r1
 8007d74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d78:	4616      	mov	r6, r2
 8007d7a:	461f      	mov	r7, r3
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	f002 ff43 	bl	800ac08 <_localeconv_r>
 8007d82:	f8d0 a000 	ldr.w	sl, [r0]
 8007d86:	4650      	mov	r0, sl
 8007d88:	f7f8 fa42 	bl	8000210 <strlen>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	f8d8 3000 	ldr.w	r3, [r8]
 8007d98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	f023 0307 	bic.w	r3, r3, #7
 8007da2:	f103 0208 	add.w	r2, r3, #8
 8007da6:	f8c8 2000 	str.w	r2, [r8]
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007db2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007db6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dba:	9307      	str	r3, [sp, #28]
 8007dbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dc0:	ee08 0a10 	vmov	s16, r0
 8007dc4:	4b9f      	ldr	r3, [pc, #636]	; (8008044 <_printf_float+0x2dc>)
 8007dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dca:	f04f 32ff 	mov.w	r2, #4294967295
 8007dce:	f7f8 fecd 	bl	8000b6c <__aeabi_dcmpun>
 8007dd2:	bb88      	cbnz	r0, 8007e38 <_printf_float+0xd0>
 8007dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dd8:	4b9a      	ldr	r3, [pc, #616]	; (8008044 <_printf_float+0x2dc>)
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	f7f8 fea7 	bl	8000b30 <__aeabi_dcmple>
 8007de2:	bb48      	cbnz	r0, 8007e38 <_printf_float+0xd0>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fe96 	bl	8000b1c <__aeabi_dcmplt>
 8007df0:	b110      	cbz	r0, 8007df8 <_printf_float+0x90>
 8007df2:	232d      	movs	r3, #45	; 0x2d
 8007df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df8:	4b93      	ldr	r3, [pc, #588]	; (8008048 <_printf_float+0x2e0>)
 8007dfa:	4894      	ldr	r0, [pc, #592]	; (800804c <_printf_float+0x2e4>)
 8007dfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e00:	bf94      	ite	ls
 8007e02:	4698      	movls	r8, r3
 8007e04:	4680      	movhi	r8, r0
 8007e06:	2303      	movs	r3, #3
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	9b05      	ldr	r3, [sp, #20]
 8007e0c:	f023 0204 	bic.w	r2, r3, #4
 8007e10:	6022      	str	r2, [r4, #0]
 8007e12:	f04f 0900 	mov.w	r9, #0
 8007e16:	9700      	str	r7, [sp, #0]
 8007e18:	4633      	mov	r3, r6
 8007e1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 f9d8 	bl	80081d4 <_printf_common>
 8007e24:	3001      	adds	r0, #1
 8007e26:	f040 8090 	bne.w	8007f4a <_printf_float+0x1e2>
 8007e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2e:	b00d      	add	sp, #52	; 0x34
 8007e30:	ecbd 8b02 	vpop	{d8}
 8007e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e38:	4642      	mov	r2, r8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	4640      	mov	r0, r8
 8007e3e:	4649      	mov	r1, r9
 8007e40:	f7f8 fe94 	bl	8000b6c <__aeabi_dcmpun>
 8007e44:	b140      	cbz	r0, 8007e58 <_printf_float+0xf0>
 8007e46:	464b      	mov	r3, r9
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	bfbc      	itt	lt
 8007e4c:	232d      	movlt	r3, #45	; 0x2d
 8007e4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e52:	487f      	ldr	r0, [pc, #508]	; (8008050 <_printf_float+0x2e8>)
 8007e54:	4b7f      	ldr	r3, [pc, #508]	; (8008054 <_printf_float+0x2ec>)
 8007e56:	e7d1      	b.n	8007dfc <_printf_float+0x94>
 8007e58:	6863      	ldr	r3, [r4, #4]
 8007e5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	d13f      	bne.n	8007ee4 <_printf_float+0x17c>
 8007e64:	2306      	movs	r3, #6
 8007e66:	6063      	str	r3, [r4, #4]
 8007e68:	9b05      	ldr	r3, [sp, #20]
 8007e6a:	6861      	ldr	r1, [r4, #4]
 8007e6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e70:	2300      	movs	r3, #0
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	ab0a      	add	r3, sp, #40	; 0x28
 8007e76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e7a:	ab09      	add	r3, sp, #36	; 0x24
 8007e7c:	ec49 8b10 	vmov	d0, r8, r9
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	6022      	str	r2, [r4, #0]
 8007e84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff fecd 	bl	8007c28 <__cvt>
 8007e8e:	9b06      	ldr	r3, [sp, #24]
 8007e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e92:	2b47      	cmp	r3, #71	; 0x47
 8007e94:	4680      	mov	r8, r0
 8007e96:	d108      	bne.n	8007eaa <_printf_float+0x142>
 8007e98:	1cc8      	adds	r0, r1, #3
 8007e9a:	db02      	blt.n	8007ea2 <_printf_float+0x13a>
 8007e9c:	6863      	ldr	r3, [r4, #4]
 8007e9e:	4299      	cmp	r1, r3
 8007ea0:	dd41      	ble.n	8007f26 <_printf_float+0x1be>
 8007ea2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007ea6:	fa5f fb8b 	uxtb.w	fp, fp
 8007eaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007eae:	d820      	bhi.n	8007ef2 <_printf_float+0x18a>
 8007eb0:	3901      	subs	r1, #1
 8007eb2:	465a      	mov	r2, fp
 8007eb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eb8:	9109      	str	r1, [sp, #36]	; 0x24
 8007eba:	f7ff ff17 	bl	8007cec <__exponent>
 8007ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec0:	1813      	adds	r3, r2, r0
 8007ec2:	2a01      	cmp	r2, #1
 8007ec4:	4681      	mov	r9, r0
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	dc02      	bgt.n	8007ed0 <_printf_float+0x168>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	07d2      	lsls	r2, r2, #31
 8007ece:	d501      	bpl.n	8007ed4 <_printf_float+0x16c>
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d09c      	beq.n	8007e16 <_printf_float+0xae>
 8007edc:	232d      	movs	r3, #45	; 0x2d
 8007ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ee2:	e798      	b.n	8007e16 <_printf_float+0xae>
 8007ee4:	9a06      	ldr	r2, [sp, #24]
 8007ee6:	2a47      	cmp	r2, #71	; 0x47
 8007ee8:	d1be      	bne.n	8007e68 <_printf_float+0x100>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1bc      	bne.n	8007e68 <_printf_float+0x100>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7b9      	b.n	8007e66 <_printf_float+0xfe>
 8007ef2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ef6:	d118      	bne.n	8007f2a <_printf_float+0x1c2>
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	dd0b      	ble.n	8007f16 <_printf_float+0x1ae>
 8007efe:	6121      	str	r1, [r4, #16]
 8007f00:	b913      	cbnz	r3, 8007f08 <_printf_float+0x1a0>
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	07d0      	lsls	r0, r2, #31
 8007f06:	d502      	bpl.n	8007f0e <_printf_float+0x1a6>
 8007f08:	3301      	adds	r3, #1
 8007f0a:	440b      	add	r3, r1
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f10:	f04f 0900 	mov.w	r9, #0
 8007f14:	e7de      	b.n	8007ed4 <_printf_float+0x16c>
 8007f16:	b913      	cbnz	r3, 8007f1e <_printf_float+0x1b6>
 8007f18:	6822      	ldr	r2, [r4, #0]
 8007f1a:	07d2      	lsls	r2, r2, #31
 8007f1c:	d501      	bpl.n	8007f22 <_printf_float+0x1ba>
 8007f1e:	3302      	adds	r3, #2
 8007f20:	e7f4      	b.n	8007f0c <_printf_float+0x1a4>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7f2      	b.n	8007f0c <_printf_float+0x1a4>
 8007f26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2c:	4299      	cmp	r1, r3
 8007f2e:	db05      	blt.n	8007f3c <_printf_float+0x1d4>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	6121      	str	r1, [r4, #16]
 8007f34:	07d8      	lsls	r0, r3, #31
 8007f36:	d5ea      	bpl.n	8007f0e <_printf_float+0x1a6>
 8007f38:	1c4b      	adds	r3, r1, #1
 8007f3a:	e7e7      	b.n	8007f0c <_printf_float+0x1a4>
 8007f3c:	2900      	cmp	r1, #0
 8007f3e:	bfd4      	ite	le
 8007f40:	f1c1 0202 	rsble	r2, r1, #2
 8007f44:	2201      	movgt	r2, #1
 8007f46:	4413      	add	r3, r2
 8007f48:	e7e0      	b.n	8007f0c <_printf_float+0x1a4>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	055a      	lsls	r2, r3, #21
 8007f4e:	d407      	bmi.n	8007f60 <_printf_float+0x1f8>
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	4642      	mov	r2, r8
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d12c      	bne.n	8007fb8 <_printf_float+0x250>
 8007f5e:	e764      	b.n	8007e2a <_printf_float+0xc2>
 8007f60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f64:	f240 80e0 	bls.w	8008128 <_printf_float+0x3c0>
 8007f68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f7f8 fdca 	bl	8000b08 <__aeabi_dcmpeq>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d034      	beq.n	8007fe2 <_printf_float+0x27a>
 8007f78:	4a37      	ldr	r2, [pc, #220]	; (8008058 <_printf_float+0x2f0>)
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	f43f af51 	beq.w	8007e2a <_printf_float+0xc2>
 8007f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	db02      	blt.n	8007f96 <_printf_float+0x22e>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07d8      	lsls	r0, r3, #31
 8007f94:	d510      	bpl.n	8007fb8 <_printf_float+0x250>
 8007f96:	ee18 3a10 	vmov	r3, s16
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af41 	beq.w	8007e2a <_printf_float+0xc2>
 8007fa8:	f04f 0800 	mov.w	r8, #0
 8007fac:	f104 091a 	add.w	r9, r4, #26
 8007fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	4543      	cmp	r3, r8
 8007fb6:	dc09      	bgt.n	8007fcc <_printf_float+0x264>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	079b      	lsls	r3, r3, #30
 8007fbc:	f100 8105 	bmi.w	80081ca <_printf_float+0x462>
 8007fc0:	68e0      	ldr	r0, [r4, #12]
 8007fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fc4:	4298      	cmp	r0, r3
 8007fc6:	bfb8      	it	lt
 8007fc8:	4618      	movlt	r0, r3
 8007fca:	e730      	b.n	8007e2e <_printf_float+0xc6>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	464a      	mov	r2, r9
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af27 	beq.w	8007e2a <_printf_float+0xc2>
 8007fdc:	f108 0801 	add.w	r8, r8, #1
 8007fe0:	e7e6      	b.n	8007fb0 <_printf_float+0x248>
 8007fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dc39      	bgt.n	800805c <_printf_float+0x2f4>
 8007fe8:	4a1b      	ldr	r2, [pc, #108]	; (8008058 <_printf_float+0x2f0>)
 8007fea:	2301      	movs	r3, #1
 8007fec:	4631      	mov	r1, r6
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b8      	blx	r7
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	f43f af19 	beq.w	8007e2a <_printf_float+0xc2>
 8007ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	d102      	bne.n	8008006 <_printf_float+0x29e>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	07d9      	lsls	r1, r3, #31
 8008004:	d5d8      	bpl.n	8007fb8 <_printf_float+0x250>
 8008006:	ee18 3a10 	vmov	r3, s16
 800800a:	4652      	mov	r2, sl
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f af09 	beq.w	8007e2a <_printf_float+0xc2>
 8008018:	f04f 0900 	mov.w	r9, #0
 800801c:	f104 0a1a 	add.w	sl, r4, #26
 8008020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008022:	425b      	negs	r3, r3
 8008024:	454b      	cmp	r3, r9
 8008026:	dc01      	bgt.n	800802c <_printf_float+0x2c4>
 8008028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802a:	e792      	b.n	8007f52 <_printf_float+0x1ea>
 800802c:	2301      	movs	r3, #1
 800802e:	4652      	mov	r2, sl
 8008030:	4631      	mov	r1, r6
 8008032:	4628      	mov	r0, r5
 8008034:	47b8      	blx	r7
 8008036:	3001      	adds	r0, #1
 8008038:	f43f aef7 	beq.w	8007e2a <_printf_float+0xc2>
 800803c:	f109 0901 	add.w	r9, r9, #1
 8008040:	e7ee      	b.n	8008020 <_printf_float+0x2b8>
 8008042:	bf00      	nop
 8008044:	7fefffff 	.word	0x7fefffff
 8008048:	0800cd98 	.word	0x0800cd98
 800804c:	0800cd9c 	.word	0x0800cd9c
 8008050:	0800cda4 	.word	0x0800cda4
 8008054:	0800cda0 	.word	0x0800cda0
 8008058:	0800d1a9 	.word	0x0800d1a9
 800805c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008060:	429a      	cmp	r2, r3
 8008062:	bfa8      	it	ge
 8008064:	461a      	movge	r2, r3
 8008066:	2a00      	cmp	r2, #0
 8008068:	4691      	mov	r9, r2
 800806a:	dc37      	bgt.n	80080dc <_printf_float+0x374>
 800806c:	f04f 0b00 	mov.w	fp, #0
 8008070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008074:	f104 021a 	add.w	r2, r4, #26
 8008078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800807a:	9305      	str	r3, [sp, #20]
 800807c:	eba3 0309 	sub.w	r3, r3, r9
 8008080:	455b      	cmp	r3, fp
 8008082:	dc33      	bgt.n	80080ec <_printf_float+0x384>
 8008084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008088:	429a      	cmp	r2, r3
 800808a:	db3b      	blt.n	8008104 <_printf_float+0x39c>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	07da      	lsls	r2, r3, #31
 8008090:	d438      	bmi.n	8008104 <_printf_float+0x39c>
 8008092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008094:	9b05      	ldr	r3, [sp, #20]
 8008096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	eba2 0901 	sub.w	r9, r2, r1
 800809e:	4599      	cmp	r9, r3
 80080a0:	bfa8      	it	ge
 80080a2:	4699      	movge	r9, r3
 80080a4:	f1b9 0f00 	cmp.w	r9, #0
 80080a8:	dc35      	bgt.n	8008116 <_printf_float+0x3ae>
 80080aa:	f04f 0800 	mov.w	r8, #0
 80080ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080b2:	f104 0a1a 	add.w	sl, r4, #26
 80080b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ba:	1a9b      	subs	r3, r3, r2
 80080bc:	eba3 0309 	sub.w	r3, r3, r9
 80080c0:	4543      	cmp	r3, r8
 80080c2:	f77f af79 	ble.w	8007fb8 <_printf_float+0x250>
 80080c6:	2301      	movs	r3, #1
 80080c8:	4652      	mov	r2, sl
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	f43f aeaa 	beq.w	8007e2a <_printf_float+0xc2>
 80080d6:	f108 0801 	add.w	r8, r8, #1
 80080da:	e7ec      	b.n	80080b6 <_printf_float+0x34e>
 80080dc:	4613      	mov	r3, r2
 80080de:	4631      	mov	r1, r6
 80080e0:	4642      	mov	r2, r8
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	d1c0      	bne.n	800806c <_printf_float+0x304>
 80080ea:	e69e      	b.n	8007e2a <_printf_float+0xc2>
 80080ec:	2301      	movs	r3, #1
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	9205      	str	r2, [sp, #20]
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f ae97 	beq.w	8007e2a <_printf_float+0xc2>
 80080fc:	9a05      	ldr	r2, [sp, #20]
 80080fe:	f10b 0b01 	add.w	fp, fp, #1
 8008102:	e7b9      	b.n	8008078 <_printf_float+0x310>
 8008104:	ee18 3a10 	vmov	r3, s16
 8008108:	4652      	mov	r2, sl
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	d1be      	bne.n	8008092 <_printf_float+0x32a>
 8008114:	e689      	b.n	8007e2a <_printf_float+0xc2>
 8008116:	9a05      	ldr	r2, [sp, #20]
 8008118:	464b      	mov	r3, r9
 800811a:	4442      	add	r2, r8
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	d1c1      	bne.n	80080aa <_printf_float+0x342>
 8008126:	e680      	b.n	8007e2a <_printf_float+0xc2>
 8008128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800812a:	2a01      	cmp	r2, #1
 800812c:	dc01      	bgt.n	8008132 <_printf_float+0x3ca>
 800812e:	07db      	lsls	r3, r3, #31
 8008130:	d538      	bpl.n	80081a4 <_printf_float+0x43c>
 8008132:	2301      	movs	r3, #1
 8008134:	4642      	mov	r2, r8
 8008136:	4631      	mov	r1, r6
 8008138:	4628      	mov	r0, r5
 800813a:	47b8      	blx	r7
 800813c:	3001      	adds	r0, #1
 800813e:	f43f ae74 	beq.w	8007e2a <_printf_float+0xc2>
 8008142:	ee18 3a10 	vmov	r3, s16
 8008146:	4652      	mov	r2, sl
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f ae6b 	beq.w	8007e2a <_printf_float+0xc2>
 8008154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	f7f8 fcd4 	bl	8000b08 <__aeabi_dcmpeq>
 8008160:	b9d8      	cbnz	r0, 800819a <_printf_float+0x432>
 8008162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008164:	f108 0201 	add.w	r2, r8, #1
 8008168:	3b01      	subs	r3, #1
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	d10e      	bne.n	8008192 <_printf_float+0x42a>
 8008174:	e659      	b.n	8007e2a <_printf_float+0xc2>
 8008176:	2301      	movs	r3, #1
 8008178:	4652      	mov	r2, sl
 800817a:	4631      	mov	r1, r6
 800817c:	4628      	mov	r0, r5
 800817e:	47b8      	blx	r7
 8008180:	3001      	adds	r0, #1
 8008182:	f43f ae52 	beq.w	8007e2a <_printf_float+0xc2>
 8008186:	f108 0801 	add.w	r8, r8, #1
 800818a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818c:	3b01      	subs	r3, #1
 800818e:	4543      	cmp	r3, r8
 8008190:	dcf1      	bgt.n	8008176 <_printf_float+0x40e>
 8008192:	464b      	mov	r3, r9
 8008194:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008198:	e6dc      	b.n	8007f54 <_printf_float+0x1ec>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0a1a 	add.w	sl, r4, #26
 80081a2:	e7f2      	b.n	800818a <_printf_float+0x422>
 80081a4:	2301      	movs	r3, #1
 80081a6:	4642      	mov	r2, r8
 80081a8:	e7df      	b.n	800816a <_printf_float+0x402>
 80081aa:	2301      	movs	r3, #1
 80081ac:	464a      	mov	r2, r9
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	f43f ae38 	beq.w	8007e2a <_printf_float+0xc2>
 80081ba:	f108 0801 	add.w	r8, r8, #1
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	4543      	cmp	r3, r8
 80081c6:	dcf0      	bgt.n	80081aa <_printf_float+0x442>
 80081c8:	e6fa      	b.n	8007fc0 <_printf_float+0x258>
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	f104 0919 	add.w	r9, r4, #25
 80081d2:	e7f4      	b.n	80081be <_printf_float+0x456>

080081d4 <_printf_common>:
 80081d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	4616      	mov	r6, r2
 80081da:	4699      	mov	r9, r3
 80081dc:	688a      	ldr	r2, [r1, #8]
 80081de:	690b      	ldr	r3, [r1, #16]
 80081e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081e4:	4293      	cmp	r3, r2
 80081e6:	bfb8      	it	lt
 80081e8:	4613      	movlt	r3, r2
 80081ea:	6033      	str	r3, [r6, #0]
 80081ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081f0:	4607      	mov	r7, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	b10a      	cbz	r2, 80081fa <_printf_common+0x26>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6033      	str	r3, [r6, #0]
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	0699      	lsls	r1, r3, #26
 80081fe:	bf42      	ittt	mi
 8008200:	6833      	ldrmi	r3, [r6, #0]
 8008202:	3302      	addmi	r3, #2
 8008204:	6033      	strmi	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	f015 0506 	ands.w	r5, r5, #6
 800820c:	d106      	bne.n	800821c <_printf_common+0x48>
 800820e:	f104 0a19 	add.w	sl, r4, #25
 8008212:	68e3      	ldr	r3, [r4, #12]
 8008214:	6832      	ldr	r2, [r6, #0]
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ab      	cmp	r3, r5
 800821a:	dc26      	bgt.n	800826a <_printf_common+0x96>
 800821c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008220:	1e13      	subs	r3, r2, #0
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	bf18      	it	ne
 8008226:	2301      	movne	r3, #1
 8008228:	0692      	lsls	r2, r2, #26
 800822a:	d42b      	bmi.n	8008284 <_printf_common+0xb0>
 800822c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008230:	4649      	mov	r1, r9
 8008232:	4638      	mov	r0, r7
 8008234:	47c0      	blx	r8
 8008236:	3001      	adds	r0, #1
 8008238:	d01e      	beq.n	8008278 <_printf_common+0xa4>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	68e5      	ldr	r5, [r4, #12]
 800823e:	6832      	ldr	r2, [r6, #0]
 8008240:	f003 0306 	and.w	r3, r3, #6
 8008244:	2b04      	cmp	r3, #4
 8008246:	bf08      	it	eq
 8008248:	1aad      	subeq	r5, r5, r2
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	6922      	ldr	r2, [r4, #16]
 800824e:	bf0c      	ite	eq
 8008250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008254:	2500      	movne	r5, #0
 8008256:	4293      	cmp	r3, r2
 8008258:	bfc4      	itt	gt
 800825a:	1a9b      	subgt	r3, r3, r2
 800825c:	18ed      	addgt	r5, r5, r3
 800825e:	2600      	movs	r6, #0
 8008260:	341a      	adds	r4, #26
 8008262:	42b5      	cmp	r5, r6
 8008264:	d11a      	bne.n	800829c <_printf_common+0xc8>
 8008266:	2000      	movs	r0, #0
 8008268:	e008      	b.n	800827c <_printf_common+0xa8>
 800826a:	2301      	movs	r3, #1
 800826c:	4652      	mov	r2, sl
 800826e:	4649      	mov	r1, r9
 8008270:	4638      	mov	r0, r7
 8008272:	47c0      	blx	r8
 8008274:	3001      	adds	r0, #1
 8008276:	d103      	bne.n	8008280 <_printf_common+0xac>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	3501      	adds	r5, #1
 8008282:	e7c6      	b.n	8008212 <_printf_common+0x3e>
 8008284:	18e1      	adds	r1, r4, r3
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	2030      	movs	r0, #48	; 0x30
 800828a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800828e:	4422      	add	r2, r4
 8008290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008298:	3302      	adds	r3, #2
 800829a:	e7c7      	b.n	800822c <_printf_common+0x58>
 800829c:	2301      	movs	r3, #1
 800829e:	4622      	mov	r2, r4
 80082a0:	4649      	mov	r1, r9
 80082a2:	4638      	mov	r0, r7
 80082a4:	47c0      	blx	r8
 80082a6:	3001      	adds	r0, #1
 80082a8:	d0e6      	beq.n	8008278 <_printf_common+0xa4>
 80082aa:	3601      	adds	r6, #1
 80082ac:	e7d9      	b.n	8008262 <_printf_common+0x8e>
	...

080082b0 <_printf_i>:
 80082b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	460c      	mov	r4, r1
 80082b6:	4691      	mov	r9, r2
 80082b8:	7e27      	ldrb	r7, [r4, #24]
 80082ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082bc:	2f78      	cmp	r7, #120	; 0x78
 80082be:	4680      	mov	r8, r0
 80082c0:	469a      	mov	sl, r3
 80082c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082c6:	d807      	bhi.n	80082d8 <_printf_i+0x28>
 80082c8:	2f62      	cmp	r7, #98	; 0x62
 80082ca:	d80a      	bhi.n	80082e2 <_printf_i+0x32>
 80082cc:	2f00      	cmp	r7, #0
 80082ce:	f000 80d8 	beq.w	8008482 <_printf_i+0x1d2>
 80082d2:	2f58      	cmp	r7, #88	; 0x58
 80082d4:	f000 80a3 	beq.w	800841e <_printf_i+0x16e>
 80082d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082e0:	e03a      	b.n	8008358 <_printf_i+0xa8>
 80082e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082e6:	2b15      	cmp	r3, #21
 80082e8:	d8f6      	bhi.n	80082d8 <_printf_i+0x28>
 80082ea:	a001      	add	r0, pc, #4	; (adr r0, 80082f0 <_printf_i+0x40>)
 80082ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80082f0:	08008349 	.word	0x08008349
 80082f4:	0800835d 	.word	0x0800835d
 80082f8:	080082d9 	.word	0x080082d9
 80082fc:	080082d9 	.word	0x080082d9
 8008300:	080082d9 	.word	0x080082d9
 8008304:	080082d9 	.word	0x080082d9
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080082d9 	.word	0x080082d9
 8008310:	080082d9 	.word	0x080082d9
 8008314:	080082d9 	.word	0x080082d9
 8008318:	080082d9 	.word	0x080082d9
 800831c:	08008469 	.word	0x08008469
 8008320:	0800838d 	.word	0x0800838d
 8008324:	0800844b 	.word	0x0800844b
 8008328:	080082d9 	.word	0x080082d9
 800832c:	080082d9 	.word	0x080082d9
 8008330:	0800848b 	.word	0x0800848b
 8008334:	080082d9 	.word	0x080082d9
 8008338:	0800838d 	.word	0x0800838d
 800833c:	080082d9 	.word	0x080082d9
 8008340:	080082d9 	.word	0x080082d9
 8008344:	08008453 	.word	0x08008453
 8008348:	680b      	ldr	r3, [r1, #0]
 800834a:	1d1a      	adds	r2, r3, #4
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	600a      	str	r2, [r1, #0]
 8008350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008358:	2301      	movs	r3, #1
 800835a:	e0a3      	b.n	80084a4 <_printf_i+0x1f4>
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	6808      	ldr	r0, [r1, #0]
 8008360:	062e      	lsls	r6, r5, #24
 8008362:	f100 0304 	add.w	r3, r0, #4
 8008366:	d50a      	bpl.n	800837e <_printf_i+0xce>
 8008368:	6805      	ldr	r5, [r0, #0]
 800836a:	600b      	str	r3, [r1, #0]
 800836c:	2d00      	cmp	r5, #0
 800836e:	da03      	bge.n	8008378 <_printf_i+0xc8>
 8008370:	232d      	movs	r3, #45	; 0x2d
 8008372:	426d      	negs	r5, r5
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008378:	485e      	ldr	r0, [pc, #376]	; (80084f4 <_printf_i+0x244>)
 800837a:	230a      	movs	r3, #10
 800837c:	e019      	b.n	80083b2 <_printf_i+0x102>
 800837e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008382:	6805      	ldr	r5, [r0, #0]
 8008384:	600b      	str	r3, [r1, #0]
 8008386:	bf18      	it	ne
 8008388:	b22d      	sxthne	r5, r5
 800838a:	e7ef      	b.n	800836c <_printf_i+0xbc>
 800838c:	680b      	ldr	r3, [r1, #0]
 800838e:	6825      	ldr	r5, [r4, #0]
 8008390:	1d18      	adds	r0, r3, #4
 8008392:	6008      	str	r0, [r1, #0]
 8008394:	0628      	lsls	r0, r5, #24
 8008396:	d501      	bpl.n	800839c <_printf_i+0xec>
 8008398:	681d      	ldr	r5, [r3, #0]
 800839a:	e002      	b.n	80083a2 <_printf_i+0xf2>
 800839c:	0669      	lsls	r1, r5, #25
 800839e:	d5fb      	bpl.n	8008398 <_printf_i+0xe8>
 80083a0:	881d      	ldrh	r5, [r3, #0]
 80083a2:	4854      	ldr	r0, [pc, #336]	; (80084f4 <_printf_i+0x244>)
 80083a4:	2f6f      	cmp	r7, #111	; 0x6f
 80083a6:	bf0c      	ite	eq
 80083a8:	2308      	moveq	r3, #8
 80083aa:	230a      	movne	r3, #10
 80083ac:	2100      	movs	r1, #0
 80083ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083b2:	6866      	ldr	r6, [r4, #4]
 80083b4:	60a6      	str	r6, [r4, #8]
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	bfa2      	ittt	ge
 80083ba:	6821      	ldrge	r1, [r4, #0]
 80083bc:	f021 0104 	bicge.w	r1, r1, #4
 80083c0:	6021      	strge	r1, [r4, #0]
 80083c2:	b90d      	cbnz	r5, 80083c8 <_printf_i+0x118>
 80083c4:	2e00      	cmp	r6, #0
 80083c6:	d04d      	beq.n	8008464 <_printf_i+0x1b4>
 80083c8:	4616      	mov	r6, r2
 80083ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ce:	fb03 5711 	mls	r7, r3, r1, r5
 80083d2:	5dc7      	ldrb	r7, [r0, r7]
 80083d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083d8:	462f      	mov	r7, r5
 80083da:	42bb      	cmp	r3, r7
 80083dc:	460d      	mov	r5, r1
 80083de:	d9f4      	bls.n	80083ca <_printf_i+0x11a>
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d10b      	bne.n	80083fc <_printf_i+0x14c>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	07df      	lsls	r7, r3, #31
 80083e8:	d508      	bpl.n	80083fc <_printf_i+0x14c>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	6861      	ldr	r1, [r4, #4]
 80083ee:	4299      	cmp	r1, r3
 80083f0:	bfde      	ittt	le
 80083f2:	2330      	movle	r3, #48	; 0x30
 80083f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083fc:	1b92      	subs	r2, r2, r6
 80083fe:	6122      	str	r2, [r4, #16]
 8008400:	f8cd a000 	str.w	sl, [sp]
 8008404:	464b      	mov	r3, r9
 8008406:	aa03      	add	r2, sp, #12
 8008408:	4621      	mov	r1, r4
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff fee2 	bl	80081d4 <_printf_common>
 8008410:	3001      	adds	r0, #1
 8008412:	d14c      	bne.n	80084ae <_printf_i+0x1fe>
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	b004      	add	sp, #16
 800841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841e:	4835      	ldr	r0, [pc, #212]	; (80084f4 <_printf_i+0x244>)
 8008420:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	680e      	ldr	r6, [r1, #0]
 8008428:	061f      	lsls	r7, r3, #24
 800842a:	f856 5b04 	ldr.w	r5, [r6], #4
 800842e:	600e      	str	r6, [r1, #0]
 8008430:	d514      	bpl.n	800845c <_printf_i+0x1ac>
 8008432:	07d9      	lsls	r1, r3, #31
 8008434:	bf44      	itt	mi
 8008436:	f043 0320 	orrmi.w	r3, r3, #32
 800843a:	6023      	strmi	r3, [r4, #0]
 800843c:	b91d      	cbnz	r5, 8008446 <_printf_i+0x196>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f023 0320 	bic.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	2310      	movs	r3, #16
 8008448:	e7b0      	b.n	80083ac <_printf_i+0xfc>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f043 0320 	orr.w	r3, r3, #32
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	2378      	movs	r3, #120	; 0x78
 8008454:	4828      	ldr	r0, [pc, #160]	; (80084f8 <_printf_i+0x248>)
 8008456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800845a:	e7e3      	b.n	8008424 <_printf_i+0x174>
 800845c:	065e      	lsls	r6, r3, #25
 800845e:	bf48      	it	mi
 8008460:	b2ad      	uxthmi	r5, r5
 8008462:	e7e6      	b.n	8008432 <_printf_i+0x182>
 8008464:	4616      	mov	r6, r2
 8008466:	e7bb      	b.n	80083e0 <_printf_i+0x130>
 8008468:	680b      	ldr	r3, [r1, #0]
 800846a:	6826      	ldr	r6, [r4, #0]
 800846c:	6960      	ldr	r0, [r4, #20]
 800846e:	1d1d      	adds	r5, r3, #4
 8008470:	600d      	str	r5, [r1, #0]
 8008472:	0635      	lsls	r5, r6, #24
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	d501      	bpl.n	800847c <_printf_i+0x1cc>
 8008478:	6018      	str	r0, [r3, #0]
 800847a:	e002      	b.n	8008482 <_printf_i+0x1d2>
 800847c:	0671      	lsls	r1, r6, #25
 800847e:	d5fb      	bpl.n	8008478 <_printf_i+0x1c8>
 8008480:	8018      	strh	r0, [r3, #0]
 8008482:	2300      	movs	r3, #0
 8008484:	6123      	str	r3, [r4, #16]
 8008486:	4616      	mov	r6, r2
 8008488:	e7ba      	b.n	8008400 <_printf_i+0x150>
 800848a:	680b      	ldr	r3, [r1, #0]
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	600a      	str	r2, [r1, #0]
 8008490:	681e      	ldr	r6, [r3, #0]
 8008492:	6862      	ldr	r2, [r4, #4]
 8008494:	2100      	movs	r1, #0
 8008496:	4630      	mov	r0, r6
 8008498:	f7f7 fec2 	bl	8000220 <memchr>
 800849c:	b108      	cbz	r0, 80084a2 <_printf_i+0x1f2>
 800849e:	1b80      	subs	r0, r0, r6
 80084a0:	6060      	str	r0, [r4, #4]
 80084a2:	6863      	ldr	r3, [r4, #4]
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	2300      	movs	r3, #0
 80084a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084ac:	e7a8      	b.n	8008400 <_printf_i+0x150>
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	4632      	mov	r2, r6
 80084b2:	4649      	mov	r1, r9
 80084b4:	4640      	mov	r0, r8
 80084b6:	47d0      	blx	sl
 80084b8:	3001      	adds	r0, #1
 80084ba:	d0ab      	beq.n	8008414 <_printf_i+0x164>
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	079b      	lsls	r3, r3, #30
 80084c0:	d413      	bmi.n	80084ea <_printf_i+0x23a>
 80084c2:	68e0      	ldr	r0, [r4, #12]
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	4298      	cmp	r0, r3
 80084c8:	bfb8      	it	lt
 80084ca:	4618      	movlt	r0, r3
 80084cc:	e7a4      	b.n	8008418 <_printf_i+0x168>
 80084ce:	2301      	movs	r3, #1
 80084d0:	4632      	mov	r2, r6
 80084d2:	4649      	mov	r1, r9
 80084d4:	4640      	mov	r0, r8
 80084d6:	47d0      	blx	sl
 80084d8:	3001      	adds	r0, #1
 80084da:	d09b      	beq.n	8008414 <_printf_i+0x164>
 80084dc:	3501      	adds	r5, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	9903      	ldr	r1, [sp, #12]
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	42ab      	cmp	r3, r5
 80084e6:	dcf2      	bgt.n	80084ce <_printf_i+0x21e>
 80084e8:	e7eb      	b.n	80084c2 <_printf_i+0x212>
 80084ea:	2500      	movs	r5, #0
 80084ec:	f104 0619 	add.w	r6, r4, #25
 80084f0:	e7f5      	b.n	80084de <_printf_i+0x22e>
 80084f2:	bf00      	nop
 80084f4:	0800cda8 	.word	0x0800cda8
 80084f8:	0800cdb9 	.word	0x0800cdb9

080084fc <_scanf_float>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	b087      	sub	sp, #28
 8008502:	4617      	mov	r7, r2
 8008504:	9303      	str	r3, [sp, #12]
 8008506:	688b      	ldr	r3, [r1, #8]
 8008508:	1e5a      	subs	r2, r3, #1
 800850a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800850e:	bf83      	ittte	hi
 8008510:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008514:	195b      	addhi	r3, r3, r5
 8008516:	9302      	strhi	r3, [sp, #8]
 8008518:	2300      	movls	r3, #0
 800851a:	bf86      	itte	hi
 800851c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008520:	608b      	strhi	r3, [r1, #8]
 8008522:	9302      	strls	r3, [sp, #8]
 8008524:	680b      	ldr	r3, [r1, #0]
 8008526:	468b      	mov	fp, r1
 8008528:	2500      	movs	r5, #0
 800852a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800852e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008532:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008536:	4680      	mov	r8, r0
 8008538:	460c      	mov	r4, r1
 800853a:	465e      	mov	r6, fp
 800853c:	46aa      	mov	sl, r5
 800853e:	46a9      	mov	r9, r5
 8008540:	9501      	str	r5, [sp, #4]
 8008542:	68a2      	ldr	r2, [r4, #8]
 8008544:	b152      	cbz	r2, 800855c <_scanf_float+0x60>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b4e      	cmp	r3, #78	; 0x4e
 800854c:	d864      	bhi.n	8008618 <_scanf_float+0x11c>
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	d83c      	bhi.n	80085cc <_scanf_float+0xd0>
 8008552:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008556:	b2c8      	uxtb	r0, r1
 8008558:	280e      	cmp	r0, #14
 800855a:	d93a      	bls.n	80085d2 <_scanf_float+0xd6>
 800855c:	f1b9 0f00 	cmp.w	r9, #0
 8008560:	d003      	beq.n	800856a <_scanf_float+0x6e>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800856e:	f1ba 0f01 	cmp.w	sl, #1
 8008572:	f200 8113 	bhi.w	800879c <_scanf_float+0x2a0>
 8008576:	455e      	cmp	r6, fp
 8008578:	f200 8105 	bhi.w	8008786 <_scanf_float+0x28a>
 800857c:	2501      	movs	r5, #1
 800857e:	4628      	mov	r0, r5
 8008580:	b007      	add	sp, #28
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800858a:	2a0d      	cmp	r2, #13
 800858c:	d8e6      	bhi.n	800855c <_scanf_float+0x60>
 800858e:	a101      	add	r1, pc, #4	; (adr r1, 8008594 <_scanf_float+0x98>)
 8008590:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008594:	080086d3 	.word	0x080086d3
 8008598:	0800855d 	.word	0x0800855d
 800859c:	0800855d 	.word	0x0800855d
 80085a0:	0800855d 	.word	0x0800855d
 80085a4:	08008733 	.word	0x08008733
 80085a8:	0800870b 	.word	0x0800870b
 80085ac:	0800855d 	.word	0x0800855d
 80085b0:	0800855d 	.word	0x0800855d
 80085b4:	080086e1 	.word	0x080086e1
 80085b8:	0800855d 	.word	0x0800855d
 80085bc:	0800855d 	.word	0x0800855d
 80085c0:	0800855d 	.word	0x0800855d
 80085c4:	0800855d 	.word	0x0800855d
 80085c8:	08008699 	.word	0x08008699
 80085cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085d0:	e7db      	b.n	800858a <_scanf_float+0x8e>
 80085d2:	290e      	cmp	r1, #14
 80085d4:	d8c2      	bhi.n	800855c <_scanf_float+0x60>
 80085d6:	a001      	add	r0, pc, #4	; (adr r0, 80085dc <_scanf_float+0xe0>)
 80085d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085dc:	0800868b 	.word	0x0800868b
 80085e0:	0800855d 	.word	0x0800855d
 80085e4:	0800868b 	.word	0x0800868b
 80085e8:	0800871f 	.word	0x0800871f
 80085ec:	0800855d 	.word	0x0800855d
 80085f0:	08008639 	.word	0x08008639
 80085f4:	08008675 	.word	0x08008675
 80085f8:	08008675 	.word	0x08008675
 80085fc:	08008675 	.word	0x08008675
 8008600:	08008675 	.word	0x08008675
 8008604:	08008675 	.word	0x08008675
 8008608:	08008675 	.word	0x08008675
 800860c:	08008675 	.word	0x08008675
 8008610:	08008675 	.word	0x08008675
 8008614:	08008675 	.word	0x08008675
 8008618:	2b6e      	cmp	r3, #110	; 0x6e
 800861a:	d809      	bhi.n	8008630 <_scanf_float+0x134>
 800861c:	2b60      	cmp	r3, #96	; 0x60
 800861e:	d8b2      	bhi.n	8008586 <_scanf_float+0x8a>
 8008620:	2b54      	cmp	r3, #84	; 0x54
 8008622:	d077      	beq.n	8008714 <_scanf_float+0x218>
 8008624:	2b59      	cmp	r3, #89	; 0x59
 8008626:	d199      	bne.n	800855c <_scanf_float+0x60>
 8008628:	2d07      	cmp	r5, #7
 800862a:	d197      	bne.n	800855c <_scanf_float+0x60>
 800862c:	2508      	movs	r5, #8
 800862e:	e029      	b.n	8008684 <_scanf_float+0x188>
 8008630:	2b74      	cmp	r3, #116	; 0x74
 8008632:	d06f      	beq.n	8008714 <_scanf_float+0x218>
 8008634:	2b79      	cmp	r3, #121	; 0x79
 8008636:	e7f6      	b.n	8008626 <_scanf_float+0x12a>
 8008638:	6821      	ldr	r1, [r4, #0]
 800863a:	05c8      	lsls	r0, r1, #23
 800863c:	d51a      	bpl.n	8008674 <_scanf_float+0x178>
 800863e:	9b02      	ldr	r3, [sp, #8]
 8008640:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008644:	6021      	str	r1, [r4, #0]
 8008646:	f109 0901 	add.w	r9, r9, #1
 800864a:	b11b      	cbz	r3, 8008654 <_scanf_float+0x158>
 800864c:	3b01      	subs	r3, #1
 800864e:	3201      	adds	r2, #1
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	60a2      	str	r2, [r4, #8]
 8008654:	68a3      	ldr	r3, [r4, #8]
 8008656:	3b01      	subs	r3, #1
 8008658:	60a3      	str	r3, [r4, #8]
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	3301      	adds	r3, #1
 800865e:	6123      	str	r3, [r4, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3b01      	subs	r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	f340 8084 	ble.w	8008774 <_scanf_float+0x278>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	3301      	adds	r3, #1
 8008670:	603b      	str	r3, [r7, #0]
 8008672:	e766      	b.n	8008542 <_scanf_float+0x46>
 8008674:	eb1a 0f05 	cmn.w	sl, r5
 8008678:	f47f af70 	bne.w	800855c <_scanf_float+0x60>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008682:	6022      	str	r2, [r4, #0]
 8008684:	f806 3b01 	strb.w	r3, [r6], #1
 8008688:	e7e4      	b.n	8008654 <_scanf_float+0x158>
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	0610      	lsls	r0, r2, #24
 800868e:	f57f af65 	bpl.w	800855c <_scanf_float+0x60>
 8008692:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008696:	e7f4      	b.n	8008682 <_scanf_float+0x186>
 8008698:	f1ba 0f00 	cmp.w	sl, #0
 800869c:	d10e      	bne.n	80086bc <_scanf_float+0x1c0>
 800869e:	f1b9 0f00 	cmp.w	r9, #0
 80086a2:	d10e      	bne.n	80086c2 <_scanf_float+0x1c6>
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086ae:	d108      	bne.n	80086c2 <_scanf_float+0x1c6>
 80086b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	f04f 0a01 	mov.w	sl, #1
 80086ba:	e7e3      	b.n	8008684 <_scanf_float+0x188>
 80086bc:	f1ba 0f02 	cmp.w	sl, #2
 80086c0:	d055      	beq.n	800876e <_scanf_float+0x272>
 80086c2:	2d01      	cmp	r5, #1
 80086c4:	d002      	beq.n	80086cc <_scanf_float+0x1d0>
 80086c6:	2d04      	cmp	r5, #4
 80086c8:	f47f af48 	bne.w	800855c <_scanf_float+0x60>
 80086cc:	3501      	adds	r5, #1
 80086ce:	b2ed      	uxtb	r5, r5
 80086d0:	e7d8      	b.n	8008684 <_scanf_float+0x188>
 80086d2:	f1ba 0f01 	cmp.w	sl, #1
 80086d6:	f47f af41 	bne.w	800855c <_scanf_float+0x60>
 80086da:	f04f 0a02 	mov.w	sl, #2
 80086de:	e7d1      	b.n	8008684 <_scanf_float+0x188>
 80086e0:	b97d      	cbnz	r5, 8008702 <_scanf_float+0x206>
 80086e2:	f1b9 0f00 	cmp.w	r9, #0
 80086e6:	f47f af3c 	bne.w	8008562 <_scanf_float+0x66>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086f4:	f47f af39 	bne.w	800856a <_scanf_float+0x6e>
 80086f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086fc:	6022      	str	r2, [r4, #0]
 80086fe:	2501      	movs	r5, #1
 8008700:	e7c0      	b.n	8008684 <_scanf_float+0x188>
 8008702:	2d03      	cmp	r5, #3
 8008704:	d0e2      	beq.n	80086cc <_scanf_float+0x1d0>
 8008706:	2d05      	cmp	r5, #5
 8008708:	e7de      	b.n	80086c8 <_scanf_float+0x1cc>
 800870a:	2d02      	cmp	r5, #2
 800870c:	f47f af26 	bne.w	800855c <_scanf_float+0x60>
 8008710:	2503      	movs	r5, #3
 8008712:	e7b7      	b.n	8008684 <_scanf_float+0x188>
 8008714:	2d06      	cmp	r5, #6
 8008716:	f47f af21 	bne.w	800855c <_scanf_float+0x60>
 800871a:	2507      	movs	r5, #7
 800871c:	e7b2      	b.n	8008684 <_scanf_float+0x188>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	0591      	lsls	r1, r2, #22
 8008722:	f57f af1b 	bpl.w	800855c <_scanf_float+0x60>
 8008726:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008730:	e7a8      	b.n	8008684 <_scanf_float+0x188>
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008738:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800873c:	d006      	beq.n	800874c <_scanf_float+0x250>
 800873e:	0550      	lsls	r0, r2, #21
 8008740:	f57f af0c 	bpl.w	800855c <_scanf_float+0x60>
 8008744:	f1b9 0f00 	cmp.w	r9, #0
 8008748:	f43f af0f 	beq.w	800856a <_scanf_float+0x6e>
 800874c:	0591      	lsls	r1, r2, #22
 800874e:	bf58      	it	pl
 8008750:	9901      	ldrpl	r1, [sp, #4]
 8008752:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008756:	bf58      	it	pl
 8008758:	eba9 0101 	subpl.w	r1, r9, r1
 800875c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008760:	bf58      	it	pl
 8008762:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008766:	6022      	str	r2, [r4, #0]
 8008768:	f04f 0900 	mov.w	r9, #0
 800876c:	e78a      	b.n	8008684 <_scanf_float+0x188>
 800876e:	f04f 0a03 	mov.w	sl, #3
 8008772:	e787      	b.n	8008684 <_scanf_float+0x188>
 8008774:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008778:	4639      	mov	r1, r7
 800877a:	4640      	mov	r0, r8
 800877c:	4798      	blx	r3
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f aedf 	beq.w	8008542 <_scanf_float+0x46>
 8008784:	e6ea      	b.n	800855c <_scanf_float+0x60>
 8008786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800878a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800878e:	463a      	mov	r2, r7
 8008790:	4640      	mov	r0, r8
 8008792:	4798      	blx	r3
 8008794:	6923      	ldr	r3, [r4, #16]
 8008796:	3b01      	subs	r3, #1
 8008798:	6123      	str	r3, [r4, #16]
 800879a:	e6ec      	b.n	8008576 <_scanf_float+0x7a>
 800879c:	1e6b      	subs	r3, r5, #1
 800879e:	2b06      	cmp	r3, #6
 80087a0:	d825      	bhi.n	80087ee <_scanf_float+0x2f2>
 80087a2:	2d02      	cmp	r5, #2
 80087a4:	d836      	bhi.n	8008814 <_scanf_float+0x318>
 80087a6:	455e      	cmp	r6, fp
 80087a8:	f67f aee8 	bls.w	800857c <_scanf_float+0x80>
 80087ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087b4:	463a      	mov	r2, r7
 80087b6:	4640      	mov	r0, r8
 80087b8:	4798      	blx	r3
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	3b01      	subs	r3, #1
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	e7f1      	b.n	80087a6 <_scanf_float+0x2aa>
 80087c2:	9802      	ldr	r0, [sp, #8]
 80087c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087cc:	9002      	str	r0, [sp, #8]
 80087ce:	463a      	mov	r2, r7
 80087d0:	4640      	mov	r0, r8
 80087d2:	4798      	blx	r3
 80087d4:	6923      	ldr	r3, [r4, #16]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	6123      	str	r3, [r4, #16]
 80087da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087de:	fa5f fa8a 	uxtb.w	sl, sl
 80087e2:	f1ba 0f02 	cmp.w	sl, #2
 80087e6:	d1ec      	bne.n	80087c2 <_scanf_float+0x2c6>
 80087e8:	3d03      	subs	r5, #3
 80087ea:	b2ed      	uxtb	r5, r5
 80087ec:	1b76      	subs	r6, r6, r5
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	05da      	lsls	r2, r3, #23
 80087f2:	d52f      	bpl.n	8008854 <_scanf_float+0x358>
 80087f4:	055b      	lsls	r3, r3, #21
 80087f6:	d510      	bpl.n	800881a <_scanf_float+0x31e>
 80087f8:	455e      	cmp	r6, fp
 80087fa:	f67f aebf 	bls.w	800857c <_scanf_float+0x80>
 80087fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008806:	463a      	mov	r2, r7
 8008808:	4640      	mov	r0, r8
 800880a:	4798      	blx	r3
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	3b01      	subs	r3, #1
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	e7f1      	b.n	80087f8 <_scanf_float+0x2fc>
 8008814:	46aa      	mov	sl, r5
 8008816:	9602      	str	r6, [sp, #8]
 8008818:	e7df      	b.n	80087da <_scanf_float+0x2de>
 800881a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	2965      	cmp	r1, #101	; 0x65
 8008822:	f103 33ff 	add.w	r3, r3, #4294967295
 8008826:	f106 35ff 	add.w	r5, r6, #4294967295
 800882a:	6123      	str	r3, [r4, #16]
 800882c:	d00c      	beq.n	8008848 <_scanf_float+0x34c>
 800882e:	2945      	cmp	r1, #69	; 0x45
 8008830:	d00a      	beq.n	8008848 <_scanf_float+0x34c>
 8008832:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008836:	463a      	mov	r2, r7
 8008838:	4640      	mov	r0, r8
 800883a:	4798      	blx	r3
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008842:	3b01      	subs	r3, #1
 8008844:	1eb5      	subs	r5, r6, #2
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800884c:	463a      	mov	r2, r7
 800884e:	4640      	mov	r0, r8
 8008850:	4798      	blx	r3
 8008852:	462e      	mov	r6, r5
 8008854:	6825      	ldr	r5, [r4, #0]
 8008856:	f015 0510 	ands.w	r5, r5, #16
 800885a:	d158      	bne.n	800890e <_scanf_float+0x412>
 800885c:	7035      	strb	r5, [r6, #0]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008868:	d11c      	bne.n	80088a4 <_scanf_float+0x3a8>
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	454b      	cmp	r3, r9
 800886e:	eba3 0209 	sub.w	r2, r3, r9
 8008872:	d124      	bne.n	80088be <_scanf_float+0x3c2>
 8008874:	2200      	movs	r2, #0
 8008876:	4659      	mov	r1, fp
 8008878:	4640      	mov	r0, r8
 800887a:	f000 ff0f 	bl	800969c <_strtod_r>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	6821      	ldr	r1, [r4, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f011 0f02 	tst.w	r1, #2
 8008888:	ec57 6b10 	vmov	r6, r7, d0
 800888c:	f103 0204 	add.w	r2, r3, #4
 8008890:	d020      	beq.n	80088d4 <_scanf_float+0x3d8>
 8008892:	9903      	ldr	r1, [sp, #12]
 8008894:	600a      	str	r2, [r1, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	e9c3 6700 	strd	r6, r7, [r3]
 800889c:	68e3      	ldr	r3, [r4, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60e3      	str	r3, [r4, #12]
 80088a2:	e66c      	b.n	800857e <_scanf_float+0x82>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0e4      	beq.n	8008874 <_scanf_float+0x378>
 80088aa:	9905      	ldr	r1, [sp, #20]
 80088ac:	230a      	movs	r3, #10
 80088ae:	462a      	mov	r2, r5
 80088b0:	3101      	adds	r1, #1
 80088b2:	4640      	mov	r0, r8
 80088b4:	f000 ff7c 	bl	80097b0 <_strtol_r>
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	9e05      	ldr	r6, [sp, #20]
 80088bc:	1ac2      	subs	r2, r0, r3
 80088be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088c2:	429e      	cmp	r6, r3
 80088c4:	bf28      	it	cs
 80088c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088ca:	4912      	ldr	r1, [pc, #72]	; (8008914 <_scanf_float+0x418>)
 80088cc:	4630      	mov	r0, r6
 80088ce:	f000 f82b 	bl	8008928 <siprintf>
 80088d2:	e7cf      	b.n	8008874 <_scanf_float+0x378>
 80088d4:	f011 0f04 	tst.w	r1, #4
 80088d8:	9903      	ldr	r1, [sp, #12]
 80088da:	600a      	str	r2, [r1, #0]
 80088dc:	d1db      	bne.n	8008896 <_scanf_float+0x39a>
 80088de:	f8d3 8000 	ldr.w	r8, [r3]
 80088e2:	ee10 2a10 	vmov	r2, s0
 80088e6:	ee10 0a10 	vmov	r0, s0
 80088ea:	463b      	mov	r3, r7
 80088ec:	4639      	mov	r1, r7
 80088ee:	f7f8 f93d 	bl	8000b6c <__aeabi_dcmpun>
 80088f2:	b128      	cbz	r0, 8008900 <_scanf_float+0x404>
 80088f4:	4808      	ldr	r0, [pc, #32]	; (8008918 <_scanf_float+0x41c>)
 80088f6:	f000 f811 	bl	800891c <nanf>
 80088fa:	ed88 0a00 	vstr	s0, [r8]
 80088fe:	e7cd      	b.n	800889c <_scanf_float+0x3a0>
 8008900:	4630      	mov	r0, r6
 8008902:	4639      	mov	r1, r7
 8008904:	f7f8 f990 	bl	8000c28 <__aeabi_d2f>
 8008908:	f8c8 0000 	str.w	r0, [r8]
 800890c:	e7c6      	b.n	800889c <_scanf_float+0x3a0>
 800890e:	2500      	movs	r5, #0
 8008910:	e635      	b.n	800857e <_scanf_float+0x82>
 8008912:	bf00      	nop
 8008914:	0800cdca 	.word	0x0800cdca
 8008918:	0800d1fb 	.word	0x0800d1fb

0800891c <nanf>:
 800891c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008924 <nanf+0x8>
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	7fc00000 	.word	0x7fc00000

08008928 <siprintf>:
 8008928:	b40e      	push	{r1, r2, r3}
 800892a:	b500      	push	{lr}
 800892c:	b09c      	sub	sp, #112	; 0x70
 800892e:	ab1d      	add	r3, sp, #116	; 0x74
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	9006      	str	r0, [sp, #24]
 8008934:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008938:	4809      	ldr	r0, [pc, #36]	; (8008960 <siprintf+0x38>)
 800893a:	9107      	str	r1, [sp, #28]
 800893c:	9104      	str	r1, [sp, #16]
 800893e:	4909      	ldr	r1, [pc, #36]	; (8008964 <siprintf+0x3c>)
 8008940:	f853 2b04 	ldr.w	r2, [r3], #4
 8008944:	9105      	str	r1, [sp, #20]
 8008946:	6800      	ldr	r0, [r0, #0]
 8008948:	9301      	str	r3, [sp, #4]
 800894a:	a902      	add	r1, sp, #8
 800894c:	f002 ff6a 	bl	800b824 <_svfiprintf_r>
 8008950:	9b02      	ldr	r3, [sp, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	b01c      	add	sp, #112	; 0x70
 8008958:	f85d eb04 	ldr.w	lr, [sp], #4
 800895c:	b003      	add	sp, #12
 800895e:	4770      	bx	lr
 8008960:	20000070 	.word	0x20000070
 8008964:	ffff0208 	.word	0xffff0208

08008968 <siscanf>:
 8008968:	b40e      	push	{r1, r2, r3}
 800896a:	b510      	push	{r4, lr}
 800896c:	b09f      	sub	sp, #124	; 0x7c
 800896e:	ac21      	add	r4, sp, #132	; 0x84
 8008970:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008974:	f854 2b04 	ldr.w	r2, [r4], #4
 8008978:	9201      	str	r2, [sp, #4]
 800897a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800897e:	9004      	str	r0, [sp, #16]
 8008980:	9008      	str	r0, [sp, #32]
 8008982:	f7f7 fc45 	bl	8000210 <strlen>
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <siscanf+0x50>)
 8008988:	9005      	str	r0, [sp, #20]
 800898a:	9009      	str	r0, [sp, #36]	; 0x24
 800898c:	930d      	str	r3, [sp, #52]	; 0x34
 800898e:	480b      	ldr	r0, [pc, #44]	; (80089bc <siscanf+0x54>)
 8008990:	9a01      	ldr	r2, [sp, #4]
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	9403      	str	r4, [sp, #12]
 8008996:	2300      	movs	r3, #0
 8008998:	9311      	str	r3, [sp, #68]	; 0x44
 800899a:	9316      	str	r3, [sp, #88]	; 0x58
 800899c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80089a4:	a904      	add	r1, sp, #16
 80089a6:	4623      	mov	r3, r4
 80089a8:	f003 f896 	bl	800bad8 <__ssvfiscanf_r>
 80089ac:	b01f      	add	sp, #124	; 0x7c
 80089ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089b2:	b003      	add	sp, #12
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	080089e3 	.word	0x080089e3
 80089bc:	20000070 	.word	0x20000070

080089c0 <__sread>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	460c      	mov	r4, r1
 80089c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c8:	f003 fb4a 	bl	800c060 <_read_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	bfab      	itete	ge
 80089d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089d2:	89a3      	ldrhlt	r3, [r4, #12]
 80089d4:	181b      	addge	r3, r3, r0
 80089d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089da:	bfac      	ite	ge
 80089dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80089de:	81a3      	strhlt	r3, [r4, #12]
 80089e0:	bd10      	pop	{r4, pc}

080089e2 <__seofread>:
 80089e2:	2000      	movs	r0, #0
 80089e4:	4770      	bx	lr

080089e6 <__swrite>:
 80089e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ea:	461f      	mov	r7, r3
 80089ec:	898b      	ldrh	r3, [r1, #12]
 80089ee:	05db      	lsls	r3, r3, #23
 80089f0:	4605      	mov	r5, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	4616      	mov	r6, r2
 80089f6:	d505      	bpl.n	8008a04 <__swrite+0x1e>
 80089f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fc:	2302      	movs	r3, #2
 80089fe:	2200      	movs	r2, #0
 8008a00:	f002 f906 	bl	800ac10 <_lseek_r>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a0e:	81a3      	strh	r3, [r4, #12]
 8008a10:	4632      	mov	r2, r6
 8008a12:	463b      	mov	r3, r7
 8008a14:	4628      	mov	r0, r5
 8008a16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1a:	f000 beeb 	b.w	80097f4 <_write_r>

08008a1e <__sseek>:
 8008a1e:	b510      	push	{r4, lr}
 8008a20:	460c      	mov	r4, r1
 8008a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a26:	f002 f8f3 	bl	800ac10 <_lseek_r>
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	bf15      	itete	ne
 8008a30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a3a:	81a3      	strheq	r3, [r4, #12]
 8008a3c:	bf18      	it	ne
 8008a3e:	81a3      	strhne	r3, [r4, #12]
 8008a40:	bd10      	pop	{r4, pc}

08008a42 <__sclose>:
 8008a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a46:	f000 bee7 	b.w	8009818 <_close_r>

08008a4a <sulp>:
 8008a4a:	b570      	push	{r4, r5, r6, lr}
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	460d      	mov	r5, r1
 8008a50:	ec45 4b10 	vmov	d0, r4, r5
 8008a54:	4616      	mov	r6, r2
 8008a56:	f002 fc81 	bl	800b35c <__ulp>
 8008a5a:	ec51 0b10 	vmov	r0, r1, d0
 8008a5e:	b17e      	cbz	r6, 8008a80 <sulp+0x36>
 8008a60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd09      	ble.n	8008a80 <sulp+0x36>
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008a72:	2400      	movs	r4, #0
 8008a74:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008a78:	4622      	mov	r2, r4
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	f7f7 fddc 	bl	8000638 <__aeabi_dmul>
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	0000      	movs	r0, r0
 8008a84:	0000      	movs	r0, r0
	...

08008a88 <_strtod_l>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	b0a3      	sub	sp, #140	; 0x8c
 8008a8e:	461f      	mov	r7, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	931e      	str	r3, [sp, #120]	; 0x78
 8008a94:	4ba4      	ldr	r3, [pc, #656]	; (8008d28 <_strtod_l+0x2a0>)
 8008a96:	9219      	str	r2, [sp, #100]	; 0x64
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	4688      	mov	r8, r1
 8008aa2:	f7f7 fbb5 	bl	8000210 <strlen>
 8008aa6:	f04f 0a00 	mov.w	sl, #0
 8008aaa:	4605      	mov	r5, r0
 8008aac:	f04f 0b00 	mov.w	fp, #0
 8008ab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	2a2b      	cmp	r2, #43	; 0x2b
 8008aba:	d04c      	beq.n	8008b56 <_strtod_l+0xce>
 8008abc:	d839      	bhi.n	8008b32 <_strtod_l+0xaa>
 8008abe:	2a0d      	cmp	r2, #13
 8008ac0:	d832      	bhi.n	8008b28 <_strtod_l+0xa0>
 8008ac2:	2a08      	cmp	r2, #8
 8008ac4:	d832      	bhi.n	8008b2c <_strtod_l+0xa4>
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	d03c      	beq.n	8008b44 <_strtod_l+0xbc>
 8008aca:	2300      	movs	r3, #0
 8008acc:	930e      	str	r3, [sp, #56]	; 0x38
 8008ace:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008ad0:	7833      	ldrb	r3, [r6, #0]
 8008ad2:	2b30      	cmp	r3, #48	; 0x30
 8008ad4:	f040 80b4 	bne.w	8008c40 <_strtod_l+0x1b8>
 8008ad8:	7873      	ldrb	r3, [r6, #1]
 8008ada:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ade:	2b58      	cmp	r3, #88	; 0x58
 8008ae0:	d16c      	bne.n	8008bbc <_strtod_l+0x134>
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	ab1e      	add	r3, sp, #120	; 0x78
 8008ae8:	9702      	str	r7, [sp, #8]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	4a8f      	ldr	r2, [pc, #572]	; (8008d2c <_strtod_l+0x2a4>)
 8008aee:	ab1f      	add	r3, sp, #124	; 0x7c
 8008af0:	a91d      	add	r1, sp, #116	; 0x74
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 fd80 	bl	800a5f8 <__gethex>
 8008af8:	f010 0707 	ands.w	r7, r0, #7
 8008afc:	4605      	mov	r5, r0
 8008afe:	d005      	beq.n	8008b0c <_strtod_l+0x84>
 8008b00:	2f06      	cmp	r7, #6
 8008b02:	d12a      	bne.n	8008b5a <_strtod_l+0xd2>
 8008b04:	3601      	adds	r6, #1
 8008b06:	2300      	movs	r3, #0
 8008b08:	961d      	str	r6, [sp, #116]	; 0x74
 8008b0a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f040 8596 	bne.w	8009640 <_strtod_l+0xbb8>
 8008b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b16:	b1db      	cbz	r3, 8008b50 <_strtod_l+0xc8>
 8008b18:	4652      	mov	r2, sl
 8008b1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008b1e:	ec43 2b10 	vmov	d0, r2, r3
 8008b22:	b023      	add	sp, #140	; 0x8c
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	2a20      	cmp	r2, #32
 8008b2a:	d1ce      	bne.n	8008aca <_strtod_l+0x42>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	931d      	str	r3, [sp, #116]	; 0x74
 8008b30:	e7c0      	b.n	8008ab4 <_strtod_l+0x2c>
 8008b32:	2a2d      	cmp	r2, #45	; 0x2d
 8008b34:	d1c9      	bne.n	8008aca <_strtod_l+0x42>
 8008b36:	2201      	movs	r2, #1
 8008b38:	920e      	str	r2, [sp, #56]	; 0x38
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	921d      	str	r2, [sp, #116]	; 0x74
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1c4      	bne.n	8008ace <_strtod_l+0x46>
 8008b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b46:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f040 8576 	bne.w	800963c <_strtod_l+0xbb4>
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	e7e3      	b.n	8008b1e <_strtod_l+0x96>
 8008b56:	2200      	movs	r2, #0
 8008b58:	e7ee      	b.n	8008b38 <_strtod_l+0xb0>
 8008b5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b5c:	b13a      	cbz	r2, 8008b6e <_strtod_l+0xe6>
 8008b5e:	2135      	movs	r1, #53	; 0x35
 8008b60:	a820      	add	r0, sp, #128	; 0x80
 8008b62:	f002 fd06 	bl	800b572 <__copybits>
 8008b66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f002 f8cb 	bl	800ad04 <_Bfree>
 8008b6e:	3f01      	subs	r7, #1
 8008b70:	2f05      	cmp	r7, #5
 8008b72:	d807      	bhi.n	8008b84 <_strtod_l+0xfc>
 8008b74:	e8df f007 	tbb	[pc, r7]
 8008b78:	1d180b0e 	.word	0x1d180b0e
 8008b7c:	030e      	.short	0x030e
 8008b7e:	f04f 0b00 	mov.w	fp, #0
 8008b82:	46da      	mov	sl, fp
 8008b84:	0728      	lsls	r0, r5, #28
 8008b86:	d5c1      	bpl.n	8008b0c <_strtod_l+0x84>
 8008b88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008b8c:	e7be      	b.n	8008b0c <_strtod_l+0x84>
 8008b8e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008b92:	e7f7      	b.n	8008b84 <_strtod_l+0xfc>
 8008b94:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008b98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ba6:	e7ed      	b.n	8008b84 <_strtod_l+0xfc>
 8008ba8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008d30 <_strtod_l+0x2a8>
 8008bac:	f04f 0a00 	mov.w	sl, #0
 8008bb0:	e7e8      	b.n	8008b84 <_strtod_l+0xfc>
 8008bb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008bb6:	f04f 3aff 	mov.w	sl, #4294967295
 8008bba:	e7e3      	b.n	8008b84 <_strtod_l+0xfc>
 8008bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	921d      	str	r2, [sp, #116]	; 0x74
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b30      	cmp	r3, #48	; 0x30
 8008bc6:	d0f9      	beq.n	8008bbc <_strtod_l+0x134>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d09f      	beq.n	8008b0c <_strtod_l+0x84>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f04f 0900 	mov.w	r9, #0
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008bdc:	464f      	mov	r7, r9
 8008bde:	220a      	movs	r2, #10
 8008be0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008be2:	7806      	ldrb	r6, [r0, #0]
 8008be4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008be8:	b2d9      	uxtb	r1, r3
 8008bea:	2909      	cmp	r1, #9
 8008bec:	d92a      	bls.n	8008c44 <_strtod_l+0x1bc>
 8008bee:	9907      	ldr	r1, [sp, #28]
 8008bf0:	462a      	mov	r2, r5
 8008bf2:	f003 fa9b 	bl	800c12c <strncmp>
 8008bf6:	b398      	cbz	r0, 8008c60 <_strtod_l+0x1d8>
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	4633      	mov	r3, r6
 8008bfc:	463d      	mov	r5, r7
 8008bfe:	9007      	str	r0, [sp, #28]
 8008c00:	4602      	mov	r2, r0
 8008c02:	2b65      	cmp	r3, #101	; 0x65
 8008c04:	d001      	beq.n	8008c0a <_strtod_l+0x182>
 8008c06:	2b45      	cmp	r3, #69	; 0x45
 8008c08:	d118      	bne.n	8008c3c <_strtod_l+0x1b4>
 8008c0a:	b91d      	cbnz	r5, 8008c14 <_strtod_l+0x18c>
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	4303      	orrs	r3, r0
 8008c10:	d098      	beq.n	8008b44 <_strtod_l+0xbc>
 8008c12:	2500      	movs	r5, #0
 8008c14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008c18:	f108 0301 	add.w	r3, r8, #1
 8008c1c:	931d      	str	r3, [sp, #116]	; 0x74
 8008c1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c22:	2b2b      	cmp	r3, #43	; 0x2b
 8008c24:	d075      	beq.n	8008d12 <_strtod_l+0x28a>
 8008c26:	2b2d      	cmp	r3, #45	; 0x2d
 8008c28:	d07b      	beq.n	8008d22 <_strtod_l+0x29a>
 8008c2a:	f04f 0c00 	mov.w	ip, #0
 8008c2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c32:	2909      	cmp	r1, #9
 8008c34:	f240 8082 	bls.w	8008d3c <_strtod_l+0x2b4>
 8008c38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	e09d      	b.n	8008d7c <_strtod_l+0x2f4>
 8008c40:	2300      	movs	r3, #0
 8008c42:	e7c4      	b.n	8008bce <_strtod_l+0x146>
 8008c44:	2f08      	cmp	r7, #8
 8008c46:	bfd8      	it	le
 8008c48:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c4a:	f100 0001 	add.w	r0, r0, #1
 8008c4e:	bfda      	itte	le
 8008c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c54:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c56:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008c5a:	3701      	adds	r7, #1
 8008c5c:	901d      	str	r0, [sp, #116]	; 0x74
 8008c5e:	e7bf      	b.n	8008be0 <_strtod_l+0x158>
 8008c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c62:	195a      	adds	r2, r3, r5
 8008c64:	921d      	str	r2, [sp, #116]	; 0x74
 8008c66:	5d5b      	ldrb	r3, [r3, r5]
 8008c68:	2f00      	cmp	r7, #0
 8008c6a:	d037      	beq.n	8008cdc <_strtod_l+0x254>
 8008c6c:	9007      	str	r0, [sp, #28]
 8008c6e:	463d      	mov	r5, r7
 8008c70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008c74:	2a09      	cmp	r2, #9
 8008c76:	d912      	bls.n	8008c9e <_strtod_l+0x216>
 8008c78:	2201      	movs	r2, #1
 8008c7a:	e7c2      	b.n	8008c02 <_strtod_l+0x17a>
 8008c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	921d      	str	r2, [sp, #116]	; 0x74
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	3001      	adds	r0, #1
 8008c86:	2b30      	cmp	r3, #48	; 0x30
 8008c88:	d0f8      	beq.n	8008c7c <_strtod_l+0x1f4>
 8008c8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008c8e:	2a08      	cmp	r2, #8
 8008c90:	f200 84db 	bhi.w	800964a <_strtod_l+0xbc2>
 8008c94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c96:	9007      	str	r0, [sp, #28]
 8008c98:	2000      	movs	r0, #0
 8008c9a:	920a      	str	r2, [sp, #40]	; 0x28
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	3b30      	subs	r3, #48	; 0x30
 8008ca0:	f100 0201 	add.w	r2, r0, #1
 8008ca4:	d014      	beq.n	8008cd0 <_strtod_l+0x248>
 8008ca6:	9907      	ldr	r1, [sp, #28]
 8008ca8:	4411      	add	r1, r2
 8008caa:	9107      	str	r1, [sp, #28]
 8008cac:	462a      	mov	r2, r5
 8008cae:	eb00 0e05 	add.w	lr, r0, r5
 8008cb2:	210a      	movs	r1, #10
 8008cb4:	4572      	cmp	r2, lr
 8008cb6:	d113      	bne.n	8008ce0 <_strtod_l+0x258>
 8008cb8:	182a      	adds	r2, r5, r0
 8008cba:	2a08      	cmp	r2, #8
 8008cbc:	f105 0501 	add.w	r5, r5, #1
 8008cc0:	4405      	add	r5, r0
 8008cc2:	dc1c      	bgt.n	8008cfe <_strtod_l+0x276>
 8008cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cc6:	220a      	movs	r2, #10
 8008cc8:	fb02 3301 	mla	r3, r2, r1, r3
 8008ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cce:	2200      	movs	r2, #0
 8008cd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cd2:	1c59      	adds	r1, r3, #1
 8008cd4:	911d      	str	r1, [sp, #116]	; 0x74
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	4610      	mov	r0, r2
 8008cda:	e7c9      	b.n	8008c70 <_strtod_l+0x1e8>
 8008cdc:	4638      	mov	r0, r7
 8008cde:	e7d2      	b.n	8008c86 <_strtod_l+0x1fe>
 8008ce0:	2a08      	cmp	r2, #8
 8008ce2:	dc04      	bgt.n	8008cee <_strtod_l+0x266>
 8008ce4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ce6:	434e      	muls	r6, r1
 8008ce8:	9609      	str	r6, [sp, #36]	; 0x24
 8008cea:	3201      	adds	r2, #1
 8008cec:	e7e2      	b.n	8008cb4 <_strtod_l+0x22c>
 8008cee:	f102 0c01 	add.w	ip, r2, #1
 8008cf2:	f1bc 0f10 	cmp.w	ip, #16
 8008cf6:	bfd8      	it	le
 8008cf8:	fb01 f909 	mulle.w	r9, r1, r9
 8008cfc:	e7f5      	b.n	8008cea <_strtod_l+0x262>
 8008cfe:	2d10      	cmp	r5, #16
 8008d00:	bfdc      	itt	le
 8008d02:	220a      	movle	r2, #10
 8008d04:	fb02 3909 	mlale	r9, r2, r9, r3
 8008d08:	e7e1      	b.n	8008cce <_strtod_l+0x246>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	9307      	str	r3, [sp, #28]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	e77c      	b.n	8008c0c <_strtod_l+0x184>
 8008d12:	f04f 0c00 	mov.w	ip, #0
 8008d16:	f108 0302 	add.w	r3, r8, #2
 8008d1a:	931d      	str	r3, [sp, #116]	; 0x74
 8008d1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008d20:	e785      	b.n	8008c2e <_strtod_l+0x1a6>
 8008d22:	f04f 0c01 	mov.w	ip, #1
 8008d26:	e7f6      	b.n	8008d16 <_strtod_l+0x28e>
 8008d28:	0800d020 	.word	0x0800d020
 8008d2c:	0800cdd0 	.word	0x0800cdd0
 8008d30:	7ff00000 	.word	0x7ff00000
 8008d34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d36:	1c59      	adds	r1, r3, #1
 8008d38:	911d      	str	r1, [sp, #116]	; 0x74
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b30      	cmp	r3, #48	; 0x30
 8008d3e:	d0f9      	beq.n	8008d34 <_strtod_l+0x2ac>
 8008d40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008d44:	2908      	cmp	r1, #8
 8008d46:	f63f af79 	bhi.w	8008c3c <_strtod_l+0x1b4>
 8008d4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008d4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d50:	9308      	str	r3, [sp, #32]
 8008d52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d54:	1c59      	adds	r1, r3, #1
 8008d56:	911d      	str	r1, [sp, #116]	; 0x74
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008d5e:	2e09      	cmp	r6, #9
 8008d60:	d937      	bls.n	8008dd2 <_strtod_l+0x34a>
 8008d62:	9e08      	ldr	r6, [sp, #32]
 8008d64:	1b89      	subs	r1, r1, r6
 8008d66:	2908      	cmp	r1, #8
 8008d68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008d6c:	dc02      	bgt.n	8008d74 <_strtod_l+0x2ec>
 8008d6e:	4576      	cmp	r6, lr
 8008d70:	bfa8      	it	ge
 8008d72:	4676      	movge	r6, lr
 8008d74:	f1bc 0f00 	cmp.w	ip, #0
 8008d78:	d000      	beq.n	8008d7c <_strtod_l+0x2f4>
 8008d7a:	4276      	negs	r6, r6
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	d14f      	bne.n	8008e20 <_strtod_l+0x398>
 8008d80:	9904      	ldr	r1, [sp, #16]
 8008d82:	4301      	orrs	r1, r0
 8008d84:	f47f aec2 	bne.w	8008b0c <_strtod_l+0x84>
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	f47f aedb 	bne.w	8008b44 <_strtod_l+0xbc>
 8008d8e:	2b69      	cmp	r3, #105	; 0x69
 8008d90:	d027      	beq.n	8008de2 <_strtod_l+0x35a>
 8008d92:	dc24      	bgt.n	8008dde <_strtod_l+0x356>
 8008d94:	2b49      	cmp	r3, #73	; 0x49
 8008d96:	d024      	beq.n	8008de2 <_strtod_l+0x35a>
 8008d98:	2b4e      	cmp	r3, #78	; 0x4e
 8008d9a:	f47f aed3 	bne.w	8008b44 <_strtod_l+0xbc>
 8008d9e:	499e      	ldr	r1, [pc, #632]	; (8009018 <_strtod_l+0x590>)
 8008da0:	a81d      	add	r0, sp, #116	; 0x74
 8008da2:	f001 fe81 	bl	800aaa8 <__match>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	f43f aecc 	beq.w	8008b44 <_strtod_l+0xbc>
 8008dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b28      	cmp	r3, #40	; 0x28
 8008db2:	d12d      	bne.n	8008e10 <_strtod_l+0x388>
 8008db4:	4999      	ldr	r1, [pc, #612]	; (800901c <_strtod_l+0x594>)
 8008db6:	aa20      	add	r2, sp, #128	; 0x80
 8008db8:	a81d      	add	r0, sp, #116	; 0x74
 8008dba:	f001 fe89 	bl	800aad0 <__hexnan>
 8008dbe:	2805      	cmp	r0, #5
 8008dc0:	d126      	bne.n	8008e10 <_strtod_l+0x388>
 8008dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008dc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008dcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008dd0:	e69c      	b.n	8008b0c <_strtod_l+0x84>
 8008dd2:	210a      	movs	r1, #10
 8008dd4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008dd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ddc:	e7b9      	b.n	8008d52 <_strtod_l+0x2ca>
 8008dde:	2b6e      	cmp	r3, #110	; 0x6e
 8008de0:	e7db      	b.n	8008d9a <_strtod_l+0x312>
 8008de2:	498f      	ldr	r1, [pc, #572]	; (8009020 <_strtod_l+0x598>)
 8008de4:	a81d      	add	r0, sp, #116	; 0x74
 8008de6:	f001 fe5f 	bl	800aaa8 <__match>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	f43f aeaa 	beq.w	8008b44 <_strtod_l+0xbc>
 8008df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008df2:	498c      	ldr	r1, [pc, #560]	; (8009024 <_strtod_l+0x59c>)
 8008df4:	3b01      	subs	r3, #1
 8008df6:	a81d      	add	r0, sp, #116	; 0x74
 8008df8:	931d      	str	r3, [sp, #116]	; 0x74
 8008dfa:	f001 fe55 	bl	800aaa8 <__match>
 8008dfe:	b910      	cbnz	r0, 8008e06 <_strtod_l+0x37e>
 8008e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e02:	3301      	adds	r3, #1
 8008e04:	931d      	str	r3, [sp, #116]	; 0x74
 8008e06:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009034 <_strtod_l+0x5ac>
 8008e0a:	f04f 0a00 	mov.w	sl, #0
 8008e0e:	e67d      	b.n	8008b0c <_strtod_l+0x84>
 8008e10:	4885      	ldr	r0, [pc, #532]	; (8009028 <_strtod_l+0x5a0>)
 8008e12:	f003 f939 	bl	800c088 <nan>
 8008e16:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008e1a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008e1e:	e675      	b.n	8008b0c <_strtod_l+0x84>
 8008e20:	9b07      	ldr	r3, [sp, #28]
 8008e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e24:	1af3      	subs	r3, r6, r3
 8008e26:	2f00      	cmp	r7, #0
 8008e28:	bf08      	it	eq
 8008e2a:	462f      	moveq	r7, r5
 8008e2c:	2d10      	cmp	r5, #16
 8008e2e:	9308      	str	r3, [sp, #32]
 8008e30:	46a8      	mov	r8, r5
 8008e32:	bfa8      	it	ge
 8008e34:	f04f 0810 	movge.w	r8, #16
 8008e38:	f7f7 fb84 	bl	8000544 <__aeabi_ui2d>
 8008e3c:	2d09      	cmp	r5, #9
 8008e3e:	4682      	mov	sl, r0
 8008e40:	468b      	mov	fp, r1
 8008e42:	dd13      	ble.n	8008e6c <_strtod_l+0x3e4>
 8008e44:	4b79      	ldr	r3, [pc, #484]	; (800902c <_strtod_l+0x5a4>)
 8008e46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008e4e:	f7f7 fbf3 	bl	8000638 <__aeabi_dmul>
 8008e52:	4682      	mov	sl, r0
 8008e54:	4648      	mov	r0, r9
 8008e56:	468b      	mov	fp, r1
 8008e58:	f7f7 fb74 	bl	8000544 <__aeabi_ui2d>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	f7f7 fa32 	bl	80002cc <__adddf3>
 8008e68:	4682      	mov	sl, r0
 8008e6a:	468b      	mov	fp, r1
 8008e6c:	2d0f      	cmp	r5, #15
 8008e6e:	dc38      	bgt.n	8008ee2 <_strtod_l+0x45a>
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f43f ae4a 	beq.w	8008b0c <_strtod_l+0x84>
 8008e78:	dd24      	ble.n	8008ec4 <_strtod_l+0x43c>
 8008e7a:	2b16      	cmp	r3, #22
 8008e7c:	dc0b      	bgt.n	8008e96 <_strtod_l+0x40e>
 8008e7e:	4d6b      	ldr	r5, [pc, #428]	; (800902c <_strtod_l+0x5a4>)
 8008e80:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008e84:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e88:	4652      	mov	r2, sl
 8008e8a:	465b      	mov	r3, fp
 8008e8c:	f7f7 fbd4 	bl	8000638 <__aeabi_dmul>
 8008e90:	4682      	mov	sl, r0
 8008e92:	468b      	mov	fp, r1
 8008e94:	e63a      	b.n	8008b0c <_strtod_l+0x84>
 8008e96:	9a08      	ldr	r2, [sp, #32]
 8008e98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	db20      	blt.n	8008ee2 <_strtod_l+0x45a>
 8008ea0:	4c62      	ldr	r4, [pc, #392]	; (800902c <_strtod_l+0x5a4>)
 8008ea2:	f1c5 050f 	rsb	r5, r5, #15
 8008ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eaa:	4652      	mov	r2, sl
 8008eac:	465b      	mov	r3, fp
 8008eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb2:	f7f7 fbc1 	bl	8000638 <__aeabi_dmul>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	1b5d      	subs	r5, r3, r5
 8008eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ec2:	e7e3      	b.n	8008e8c <_strtod_l+0x404>
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	3316      	adds	r3, #22
 8008ec8:	db0b      	blt.n	8008ee2 <_strtod_l+0x45a>
 8008eca:	9b07      	ldr	r3, [sp, #28]
 8008ecc:	4a57      	ldr	r2, [pc, #348]	; (800902c <_strtod_l+0x5a4>)
 8008ece:	1b9e      	subs	r6, r3, r6
 8008ed0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4659      	mov	r1, fp
 8008edc:	f7f7 fcd6 	bl	800088c <__aeabi_ddiv>
 8008ee0:	e7d6      	b.n	8008e90 <_strtod_l+0x408>
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	eba5 0808 	sub.w	r8, r5, r8
 8008ee8:	4498      	add	r8, r3
 8008eea:	f1b8 0f00 	cmp.w	r8, #0
 8008eee:	dd71      	ble.n	8008fd4 <_strtod_l+0x54c>
 8008ef0:	f018 030f 	ands.w	r3, r8, #15
 8008ef4:	d00a      	beq.n	8008f0c <_strtod_l+0x484>
 8008ef6:	494d      	ldr	r1, [pc, #308]	; (800902c <_strtod_l+0x5a4>)
 8008ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008efc:	4652      	mov	r2, sl
 8008efe:	465b      	mov	r3, fp
 8008f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f04:	f7f7 fb98 	bl	8000638 <__aeabi_dmul>
 8008f08:	4682      	mov	sl, r0
 8008f0a:	468b      	mov	fp, r1
 8008f0c:	f038 080f 	bics.w	r8, r8, #15
 8008f10:	d04d      	beq.n	8008fae <_strtod_l+0x526>
 8008f12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008f16:	dd22      	ble.n	8008f5e <_strtod_l+0x4d6>
 8008f18:	2500      	movs	r5, #0
 8008f1a:	462e      	mov	r6, r5
 8008f1c:	9509      	str	r5, [sp, #36]	; 0x24
 8008f1e:	9507      	str	r5, [sp, #28]
 8008f20:	2322      	movs	r3, #34	; 0x22
 8008f22:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009034 <_strtod_l+0x5ac>
 8008f26:	6023      	str	r3, [r4, #0]
 8008f28:	f04f 0a00 	mov.w	sl, #0
 8008f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f43f adec 	beq.w	8008b0c <_strtod_l+0x84>
 8008f34:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f36:	4620      	mov	r0, r4
 8008f38:	f001 fee4 	bl	800ad04 <_Bfree>
 8008f3c:	9907      	ldr	r1, [sp, #28]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f001 fee0 	bl	800ad04 <_Bfree>
 8008f44:	4631      	mov	r1, r6
 8008f46:	4620      	mov	r0, r4
 8008f48:	f001 fedc 	bl	800ad04 <_Bfree>
 8008f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 fed8 	bl	800ad04 <_Bfree>
 8008f54:	4629      	mov	r1, r5
 8008f56:	4620      	mov	r0, r4
 8008f58:	f001 fed4 	bl	800ad04 <_Bfree>
 8008f5c:	e5d6      	b.n	8008b0c <_strtod_l+0x84>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008f64:	4650      	mov	r0, sl
 8008f66:	4659      	mov	r1, fp
 8008f68:	4699      	mov	r9, r3
 8008f6a:	f1b8 0f01 	cmp.w	r8, #1
 8008f6e:	dc21      	bgt.n	8008fb4 <_strtod_l+0x52c>
 8008f70:	b10b      	cbz	r3, 8008f76 <_strtod_l+0x4ee>
 8008f72:	4682      	mov	sl, r0
 8008f74:	468b      	mov	fp, r1
 8008f76:	4b2e      	ldr	r3, [pc, #184]	; (8009030 <_strtod_l+0x5a8>)
 8008f78:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008f7c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008f80:	4652      	mov	r2, sl
 8008f82:	465b      	mov	r3, fp
 8008f84:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008f88:	f7f7 fb56 	bl	8000638 <__aeabi_dmul>
 8008f8c:	4b29      	ldr	r3, [pc, #164]	; (8009034 <_strtod_l+0x5ac>)
 8008f8e:	460a      	mov	r2, r1
 8008f90:	400b      	ands	r3, r1
 8008f92:	4929      	ldr	r1, [pc, #164]	; (8009038 <_strtod_l+0x5b0>)
 8008f94:	428b      	cmp	r3, r1
 8008f96:	4682      	mov	sl, r0
 8008f98:	d8be      	bhi.n	8008f18 <_strtod_l+0x490>
 8008f9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008f9e:	428b      	cmp	r3, r1
 8008fa0:	bf86      	itte	hi
 8008fa2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800903c <_strtod_l+0x5b4>
 8008fa6:	f04f 3aff 	movhi.w	sl, #4294967295
 8008faa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008fae:	2300      	movs	r3, #0
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	e081      	b.n	80090b8 <_strtod_l+0x630>
 8008fb4:	f018 0f01 	tst.w	r8, #1
 8008fb8:	d007      	beq.n	8008fca <_strtod_l+0x542>
 8008fba:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <_strtod_l+0x5a8>)
 8008fbc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 fb38 	bl	8000638 <__aeabi_dmul>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f109 0901 	add.w	r9, r9, #1
 8008fce:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fd2:	e7ca      	b.n	8008f6a <_strtod_l+0x4e2>
 8008fd4:	d0eb      	beq.n	8008fae <_strtod_l+0x526>
 8008fd6:	f1c8 0800 	rsb	r8, r8, #0
 8008fda:	f018 020f 	ands.w	r2, r8, #15
 8008fde:	d00a      	beq.n	8008ff6 <_strtod_l+0x56e>
 8008fe0:	4b12      	ldr	r3, [pc, #72]	; (800902c <_strtod_l+0x5a4>)
 8008fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 fc4d 	bl	800088c <__aeabi_ddiv>
 8008ff2:	4682      	mov	sl, r0
 8008ff4:	468b      	mov	fp, r1
 8008ff6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ffa:	d0d8      	beq.n	8008fae <_strtod_l+0x526>
 8008ffc:	f1b8 0f1f 	cmp.w	r8, #31
 8009000:	dd1e      	ble.n	8009040 <_strtod_l+0x5b8>
 8009002:	2500      	movs	r5, #0
 8009004:	462e      	mov	r6, r5
 8009006:	9509      	str	r5, [sp, #36]	; 0x24
 8009008:	9507      	str	r5, [sp, #28]
 800900a:	2322      	movs	r3, #34	; 0x22
 800900c:	f04f 0a00 	mov.w	sl, #0
 8009010:	f04f 0b00 	mov.w	fp, #0
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	e789      	b.n	8008f2c <_strtod_l+0x4a4>
 8009018:	0800cda5 	.word	0x0800cda5
 800901c:	0800cde4 	.word	0x0800cde4
 8009020:	0800cd9d 	.word	0x0800cd9d
 8009024:	0800cf24 	.word	0x0800cf24
 8009028:	0800d1fb 	.word	0x0800d1fb
 800902c:	0800d0c0 	.word	0x0800d0c0
 8009030:	0800d098 	.word	0x0800d098
 8009034:	7ff00000 	.word	0x7ff00000
 8009038:	7ca00000 	.word	0x7ca00000
 800903c:	7fefffff 	.word	0x7fefffff
 8009040:	f018 0310 	ands.w	r3, r8, #16
 8009044:	bf18      	it	ne
 8009046:	236a      	movne	r3, #106	; 0x6a
 8009048:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009400 <_strtod_l+0x978>
 800904c:	9304      	str	r3, [sp, #16]
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	2300      	movs	r3, #0
 8009054:	f018 0f01 	tst.w	r8, #1
 8009058:	d004      	beq.n	8009064 <_strtod_l+0x5dc>
 800905a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800905e:	f7f7 faeb 	bl	8000638 <__aeabi_dmul>
 8009062:	2301      	movs	r3, #1
 8009064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009068:	f109 0908 	add.w	r9, r9, #8
 800906c:	d1f2      	bne.n	8009054 <_strtod_l+0x5cc>
 800906e:	b10b      	cbz	r3, 8009074 <_strtod_l+0x5ec>
 8009070:	4682      	mov	sl, r0
 8009072:	468b      	mov	fp, r1
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	b1bb      	cbz	r3, 80090a8 <_strtod_l+0x620>
 8009078:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800907c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009080:	2b00      	cmp	r3, #0
 8009082:	4659      	mov	r1, fp
 8009084:	dd10      	ble.n	80090a8 <_strtod_l+0x620>
 8009086:	2b1f      	cmp	r3, #31
 8009088:	f340 8128 	ble.w	80092dc <_strtod_l+0x854>
 800908c:	2b34      	cmp	r3, #52	; 0x34
 800908e:	bfde      	ittt	le
 8009090:	3b20      	suble	r3, #32
 8009092:	f04f 32ff 	movle.w	r2, #4294967295
 8009096:	fa02 f303 	lslle.w	r3, r2, r3
 800909a:	f04f 0a00 	mov.w	sl, #0
 800909e:	bfcc      	ite	gt
 80090a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80090a4:	ea03 0b01 	andle.w	fp, r3, r1
 80090a8:	2200      	movs	r2, #0
 80090aa:	2300      	movs	r3, #0
 80090ac:	4650      	mov	r0, sl
 80090ae:	4659      	mov	r1, fp
 80090b0:	f7f7 fd2a 	bl	8000b08 <__aeabi_dcmpeq>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d1a4      	bne.n	8009002 <_strtod_l+0x57a>
 80090b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090be:	462b      	mov	r3, r5
 80090c0:	463a      	mov	r2, r7
 80090c2:	4620      	mov	r0, r4
 80090c4:	f001 fe8a 	bl	800addc <__s2b>
 80090c8:	9009      	str	r0, [sp, #36]	; 0x24
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f af24 	beq.w	8008f18 <_strtod_l+0x490>
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	1b9e      	subs	r6, r3, r6
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfb4      	ite	lt
 80090da:	4633      	movlt	r3, r6
 80090dc:	2300      	movge	r3, #0
 80090de:	9310      	str	r3, [sp, #64]	; 0x40
 80090e0:	9b08      	ldr	r3, [sp, #32]
 80090e2:	2500      	movs	r5, #0
 80090e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090e8:	9318      	str	r3, [sp, #96]	; 0x60
 80090ea:	462e      	mov	r6, r5
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	4620      	mov	r0, r4
 80090f0:	6859      	ldr	r1, [r3, #4]
 80090f2:	f001 fdc7 	bl	800ac84 <_Balloc>
 80090f6:	9007      	str	r0, [sp, #28]
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f43f af11 	beq.w	8008f20 <_strtod_l+0x498>
 80090fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	3202      	adds	r2, #2
 8009104:	f103 010c 	add.w	r1, r3, #12
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	300c      	adds	r0, #12
 800910c:	f001 fdac 	bl	800ac68 <memcpy>
 8009110:	ec4b ab10 	vmov	d0, sl, fp
 8009114:	aa20      	add	r2, sp, #128	; 0x80
 8009116:	a91f      	add	r1, sp, #124	; 0x7c
 8009118:	4620      	mov	r0, r4
 800911a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800911e:	f002 f999 	bl	800b454 <__d2b>
 8009122:	901e      	str	r0, [sp, #120]	; 0x78
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f aefb 	beq.w	8008f20 <_strtod_l+0x498>
 800912a:	2101      	movs	r1, #1
 800912c:	4620      	mov	r0, r4
 800912e:	f001 feef 	bl	800af10 <__i2b>
 8009132:	4606      	mov	r6, r0
 8009134:	2800      	cmp	r0, #0
 8009136:	f43f aef3 	beq.w	8008f20 <_strtod_l+0x498>
 800913a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800913c:	9904      	ldr	r1, [sp, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfab      	itete	ge
 8009142:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009144:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009146:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009148:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800914c:	bfac      	ite	ge
 800914e:	eb03 0902 	addge.w	r9, r3, r2
 8009152:	1ad7      	sublt	r7, r2, r3
 8009154:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009156:	eba3 0801 	sub.w	r8, r3, r1
 800915a:	4490      	add	r8, r2
 800915c:	4ba3      	ldr	r3, [pc, #652]	; (80093ec <_strtod_l+0x964>)
 800915e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009162:	4598      	cmp	r8, r3
 8009164:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009168:	f280 80cc 	bge.w	8009304 <_strtod_l+0x87c>
 800916c:	eba3 0308 	sub.w	r3, r3, r8
 8009170:	2b1f      	cmp	r3, #31
 8009172:	eba2 0203 	sub.w	r2, r2, r3
 8009176:	f04f 0101 	mov.w	r1, #1
 800917a:	f300 80b6 	bgt.w	80092ea <_strtod_l+0x862>
 800917e:	fa01 f303 	lsl.w	r3, r1, r3
 8009182:	9311      	str	r3, [sp, #68]	; 0x44
 8009184:	2300      	movs	r3, #0
 8009186:	930c      	str	r3, [sp, #48]	; 0x30
 8009188:	eb09 0802 	add.w	r8, r9, r2
 800918c:	9b04      	ldr	r3, [sp, #16]
 800918e:	45c1      	cmp	r9, r8
 8009190:	4417      	add	r7, r2
 8009192:	441f      	add	r7, r3
 8009194:	464b      	mov	r3, r9
 8009196:	bfa8      	it	ge
 8009198:	4643      	movge	r3, r8
 800919a:	42bb      	cmp	r3, r7
 800919c:	bfa8      	it	ge
 800919e:	463b      	movge	r3, r7
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bfc2      	ittt	gt
 80091a4:	eba8 0803 	subgt.w	r8, r8, r3
 80091a8:	1aff      	subgt	r7, r7, r3
 80091aa:	eba9 0903 	subgt.w	r9, r9, r3
 80091ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dd17      	ble.n	80091e4 <_strtod_l+0x75c>
 80091b4:	4631      	mov	r1, r6
 80091b6:	461a      	mov	r2, r3
 80091b8:	4620      	mov	r0, r4
 80091ba:	f001 ff65 	bl	800b088 <__pow5mult>
 80091be:	4606      	mov	r6, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f43f aead 	beq.w	8008f20 <_strtod_l+0x498>
 80091c6:	4601      	mov	r1, r0
 80091c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091ca:	4620      	mov	r0, r4
 80091cc:	f001 feb6 	bl	800af3c <__multiply>
 80091d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f43f aea4 	beq.w	8008f20 <_strtod_l+0x498>
 80091d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091da:	4620      	mov	r0, r4
 80091dc:	f001 fd92 	bl	800ad04 <_Bfree>
 80091e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091e2:	931e      	str	r3, [sp, #120]	; 0x78
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	f300 8091 	bgt.w	800930e <_strtod_l+0x886>
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd08      	ble.n	8009204 <_strtod_l+0x77c>
 80091f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80091f4:	9907      	ldr	r1, [sp, #28]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 ff46 	bl	800b088 <__pow5mult>
 80091fc:	9007      	str	r0, [sp, #28]
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f ae8e 	beq.w	8008f20 <_strtod_l+0x498>
 8009204:	2f00      	cmp	r7, #0
 8009206:	dd08      	ble.n	800921a <_strtod_l+0x792>
 8009208:	9907      	ldr	r1, [sp, #28]
 800920a:	463a      	mov	r2, r7
 800920c:	4620      	mov	r0, r4
 800920e:	f001 ff95 	bl	800b13c <__lshift>
 8009212:	9007      	str	r0, [sp, #28]
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f ae83 	beq.w	8008f20 <_strtod_l+0x498>
 800921a:	f1b9 0f00 	cmp.w	r9, #0
 800921e:	dd08      	ble.n	8009232 <_strtod_l+0x7aa>
 8009220:	4631      	mov	r1, r6
 8009222:	464a      	mov	r2, r9
 8009224:	4620      	mov	r0, r4
 8009226:	f001 ff89 	bl	800b13c <__lshift>
 800922a:	4606      	mov	r6, r0
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f ae77 	beq.w	8008f20 <_strtod_l+0x498>
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009236:	4620      	mov	r0, r4
 8009238:	f002 f808 	bl	800b24c <__mdiff>
 800923c:	4605      	mov	r5, r0
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f ae6e 	beq.w	8008f20 <_strtod_l+0x498>
 8009244:	68c3      	ldr	r3, [r0, #12]
 8009246:	930f      	str	r3, [sp, #60]	; 0x3c
 8009248:	2300      	movs	r3, #0
 800924a:	60c3      	str	r3, [r0, #12]
 800924c:	4631      	mov	r1, r6
 800924e:	f001 ffe1 	bl	800b214 <__mcmp>
 8009252:	2800      	cmp	r0, #0
 8009254:	da65      	bge.n	8009322 <_strtod_l+0x89a>
 8009256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009258:	ea53 030a 	orrs.w	r3, r3, sl
 800925c:	f040 8087 	bne.w	800936e <_strtod_l+0x8e6>
 8009260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 8082 	bne.w	800936e <_strtod_l+0x8e6>
 800926a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800926e:	0d1b      	lsrs	r3, r3, #20
 8009270:	051b      	lsls	r3, r3, #20
 8009272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009276:	d97a      	bls.n	800936e <_strtod_l+0x8e6>
 8009278:	696b      	ldr	r3, [r5, #20]
 800927a:	b913      	cbnz	r3, 8009282 <_strtod_l+0x7fa>
 800927c:	692b      	ldr	r3, [r5, #16]
 800927e:	2b01      	cmp	r3, #1
 8009280:	dd75      	ble.n	800936e <_strtod_l+0x8e6>
 8009282:	4629      	mov	r1, r5
 8009284:	2201      	movs	r2, #1
 8009286:	4620      	mov	r0, r4
 8009288:	f001 ff58 	bl	800b13c <__lshift>
 800928c:	4631      	mov	r1, r6
 800928e:	4605      	mov	r5, r0
 8009290:	f001 ffc0 	bl	800b214 <__mcmp>
 8009294:	2800      	cmp	r0, #0
 8009296:	dd6a      	ble.n	800936e <_strtod_l+0x8e6>
 8009298:	9904      	ldr	r1, [sp, #16]
 800929a:	4a55      	ldr	r2, [pc, #340]	; (80093f0 <_strtod_l+0x968>)
 800929c:	465b      	mov	r3, fp
 800929e:	2900      	cmp	r1, #0
 80092a0:	f000 8085 	beq.w	80093ae <_strtod_l+0x926>
 80092a4:	ea02 010b 	and.w	r1, r2, fp
 80092a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092ac:	dc7f      	bgt.n	80093ae <_strtod_l+0x926>
 80092ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092b2:	f77f aeaa 	ble.w	800900a <_strtod_l+0x582>
 80092b6:	4a4f      	ldr	r2, [pc, #316]	; (80093f4 <_strtod_l+0x96c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80092be:	4650      	mov	r0, sl
 80092c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80092c4:	4659      	mov	r1, fp
 80092c6:	f7f7 f9b7 	bl	8000638 <__aeabi_dmul>
 80092ca:	460b      	mov	r3, r1
 80092cc:	4303      	orrs	r3, r0
 80092ce:	bf08      	it	eq
 80092d0:	2322      	moveq	r3, #34	; 0x22
 80092d2:	4682      	mov	sl, r0
 80092d4:	468b      	mov	fp, r1
 80092d6:	bf08      	it	eq
 80092d8:	6023      	streq	r3, [r4, #0]
 80092da:	e62b      	b.n	8008f34 <_strtod_l+0x4ac>
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	fa02 f303 	lsl.w	r3, r2, r3
 80092e4:	ea03 0a0a 	and.w	sl, r3, sl
 80092e8:	e6de      	b.n	80090a8 <_strtod_l+0x620>
 80092ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80092ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80092f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80092f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80092fa:	fa01 f308 	lsl.w	r3, r1, r8
 80092fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009300:	9111      	str	r1, [sp, #68]	; 0x44
 8009302:	e741      	b.n	8009188 <_strtod_l+0x700>
 8009304:	2300      	movs	r3, #0
 8009306:	930c      	str	r3, [sp, #48]	; 0x30
 8009308:	2301      	movs	r3, #1
 800930a:	9311      	str	r3, [sp, #68]	; 0x44
 800930c:	e73c      	b.n	8009188 <_strtod_l+0x700>
 800930e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009310:	4642      	mov	r2, r8
 8009312:	4620      	mov	r0, r4
 8009314:	f001 ff12 	bl	800b13c <__lshift>
 8009318:	901e      	str	r0, [sp, #120]	; 0x78
 800931a:	2800      	cmp	r0, #0
 800931c:	f47f af66 	bne.w	80091ec <_strtod_l+0x764>
 8009320:	e5fe      	b.n	8008f20 <_strtod_l+0x498>
 8009322:	465f      	mov	r7, fp
 8009324:	d16e      	bne.n	8009404 <_strtod_l+0x97c>
 8009326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800932c:	b342      	cbz	r2, 8009380 <_strtod_l+0x8f8>
 800932e:	4a32      	ldr	r2, [pc, #200]	; (80093f8 <_strtod_l+0x970>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d128      	bne.n	8009386 <_strtod_l+0x8fe>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	4650      	mov	r0, sl
 8009338:	b1eb      	cbz	r3, 8009376 <_strtod_l+0x8ee>
 800933a:	4a2d      	ldr	r2, [pc, #180]	; (80093f0 <_strtod_l+0x968>)
 800933c:	403a      	ands	r2, r7
 800933e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009342:	f04f 31ff 	mov.w	r1, #4294967295
 8009346:	d819      	bhi.n	800937c <_strtod_l+0x8f4>
 8009348:	0d12      	lsrs	r2, r2, #20
 800934a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800934e:	fa01 f303 	lsl.w	r3, r1, r3
 8009352:	4298      	cmp	r0, r3
 8009354:	d117      	bne.n	8009386 <_strtod_l+0x8fe>
 8009356:	4b29      	ldr	r3, [pc, #164]	; (80093fc <_strtod_l+0x974>)
 8009358:	429f      	cmp	r7, r3
 800935a:	d102      	bne.n	8009362 <_strtod_l+0x8da>
 800935c:	3001      	adds	r0, #1
 800935e:	f43f addf 	beq.w	8008f20 <_strtod_l+0x498>
 8009362:	4b23      	ldr	r3, [pc, #140]	; (80093f0 <_strtod_l+0x968>)
 8009364:	403b      	ands	r3, r7
 8009366:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800936a:	f04f 0a00 	mov.w	sl, #0
 800936e:	9b04      	ldr	r3, [sp, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1a0      	bne.n	80092b6 <_strtod_l+0x82e>
 8009374:	e5de      	b.n	8008f34 <_strtod_l+0x4ac>
 8009376:	f04f 33ff 	mov.w	r3, #4294967295
 800937a:	e7ea      	b.n	8009352 <_strtod_l+0x8ca>
 800937c:	460b      	mov	r3, r1
 800937e:	e7e8      	b.n	8009352 <_strtod_l+0x8ca>
 8009380:	ea53 030a 	orrs.w	r3, r3, sl
 8009384:	d088      	beq.n	8009298 <_strtod_l+0x810>
 8009386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009388:	b1db      	cbz	r3, 80093c2 <_strtod_l+0x93a>
 800938a:	423b      	tst	r3, r7
 800938c:	d0ef      	beq.n	800936e <_strtod_l+0x8e6>
 800938e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009390:	9a04      	ldr	r2, [sp, #16]
 8009392:	4650      	mov	r0, sl
 8009394:	4659      	mov	r1, fp
 8009396:	b1c3      	cbz	r3, 80093ca <_strtod_l+0x942>
 8009398:	f7ff fb57 	bl	8008a4a <sulp>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093a4:	f7f6 ff92 	bl	80002cc <__adddf3>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	e7df      	b.n	800936e <_strtod_l+0x8e6>
 80093ae:	4013      	ands	r3, r2
 80093b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093bc:	f04f 3aff 	mov.w	sl, #4294967295
 80093c0:	e7d5      	b.n	800936e <_strtod_l+0x8e6>
 80093c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c4:	ea13 0f0a 	tst.w	r3, sl
 80093c8:	e7e0      	b.n	800938c <_strtod_l+0x904>
 80093ca:	f7ff fb3e 	bl	8008a4a <sulp>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093d6:	f7f6 ff77 	bl	80002c8 <__aeabi_dsub>
 80093da:	2200      	movs	r2, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	4682      	mov	sl, r0
 80093e0:	468b      	mov	fp, r1
 80093e2:	f7f7 fb91 	bl	8000b08 <__aeabi_dcmpeq>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d0c1      	beq.n	800936e <_strtod_l+0x8e6>
 80093ea:	e60e      	b.n	800900a <_strtod_l+0x582>
 80093ec:	fffffc02 	.word	0xfffffc02
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	39500000 	.word	0x39500000
 80093f8:	000fffff 	.word	0x000fffff
 80093fc:	7fefffff 	.word	0x7fefffff
 8009400:	0800cdf8 	.word	0x0800cdf8
 8009404:	4631      	mov	r1, r6
 8009406:	4628      	mov	r0, r5
 8009408:	f002 f880 	bl	800b50c <__ratio>
 800940c:	ec59 8b10 	vmov	r8, r9, d0
 8009410:	ee10 0a10 	vmov	r0, s0
 8009414:	2200      	movs	r2, #0
 8009416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800941a:	4649      	mov	r1, r9
 800941c:	f7f7 fb88 	bl	8000b30 <__aeabi_dcmple>
 8009420:	2800      	cmp	r0, #0
 8009422:	d07c      	beq.n	800951e <_strtod_l+0xa96>
 8009424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d04c      	beq.n	80094c4 <_strtod_l+0xa3c>
 800942a:	4b95      	ldr	r3, [pc, #596]	; (8009680 <_strtod_l+0xbf8>)
 800942c:	2200      	movs	r2, #0
 800942e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009432:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009680 <_strtod_l+0xbf8>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	4b92      	ldr	r3, [pc, #584]	; (8009684 <_strtod_l+0xbfc>)
 800943c:	403b      	ands	r3, r7
 800943e:	9311      	str	r3, [sp, #68]	; 0x44
 8009440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009442:	4b91      	ldr	r3, [pc, #580]	; (8009688 <_strtod_l+0xc00>)
 8009444:	429a      	cmp	r2, r3
 8009446:	f040 80b2 	bne.w	80095ae <_strtod_l+0xb26>
 800944a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800944e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009452:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009456:	ec4b ab10 	vmov	d0, sl, fp
 800945a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800945e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009462:	f001 ff7b 	bl	800b35c <__ulp>
 8009466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800946a:	ec53 2b10 	vmov	r2, r3, d0
 800946e:	f7f7 f8e3 	bl	8000638 <__aeabi_dmul>
 8009472:	4652      	mov	r2, sl
 8009474:	465b      	mov	r3, fp
 8009476:	f7f6 ff29 	bl	80002cc <__adddf3>
 800947a:	460b      	mov	r3, r1
 800947c:	4981      	ldr	r1, [pc, #516]	; (8009684 <_strtod_l+0xbfc>)
 800947e:	4a83      	ldr	r2, [pc, #524]	; (800968c <_strtod_l+0xc04>)
 8009480:	4019      	ands	r1, r3
 8009482:	4291      	cmp	r1, r2
 8009484:	4682      	mov	sl, r0
 8009486:	d95e      	bls.n	8009546 <_strtod_l+0xabe>
 8009488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800948e:	4293      	cmp	r3, r2
 8009490:	d103      	bne.n	800949a <_strtod_l+0xa12>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	3301      	adds	r3, #1
 8009496:	f43f ad43 	beq.w	8008f20 <_strtod_l+0x498>
 800949a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009698 <_strtod_l+0xc10>
 800949e:	f04f 3aff 	mov.w	sl, #4294967295
 80094a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094a4:	4620      	mov	r0, r4
 80094a6:	f001 fc2d 	bl	800ad04 <_Bfree>
 80094aa:	9907      	ldr	r1, [sp, #28]
 80094ac:	4620      	mov	r0, r4
 80094ae:	f001 fc29 	bl	800ad04 <_Bfree>
 80094b2:	4631      	mov	r1, r6
 80094b4:	4620      	mov	r0, r4
 80094b6:	f001 fc25 	bl	800ad04 <_Bfree>
 80094ba:	4629      	mov	r1, r5
 80094bc:	4620      	mov	r0, r4
 80094be:	f001 fc21 	bl	800ad04 <_Bfree>
 80094c2:	e613      	b.n	80090ec <_strtod_l+0x664>
 80094c4:	f1ba 0f00 	cmp.w	sl, #0
 80094c8:	d11b      	bne.n	8009502 <_strtod_l+0xa7a>
 80094ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094ce:	b9f3      	cbnz	r3, 800950e <_strtod_l+0xa86>
 80094d0:	4b6b      	ldr	r3, [pc, #428]	; (8009680 <_strtod_l+0xbf8>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f7 fb20 	bl	8000b1c <__aeabi_dcmplt>
 80094dc:	b9d0      	cbnz	r0, 8009514 <_strtod_l+0xa8c>
 80094de:	4640      	mov	r0, r8
 80094e0:	4649      	mov	r1, r9
 80094e2:	4b6b      	ldr	r3, [pc, #428]	; (8009690 <_strtod_l+0xc08>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	f7f7 f8a7 	bl	8000638 <__aeabi_dmul>
 80094ea:	4680      	mov	r8, r0
 80094ec:	4689      	mov	r9, r1
 80094ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80094f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80094f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80094fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009500:	e79b      	b.n	800943a <_strtod_l+0x9b2>
 8009502:	f1ba 0f01 	cmp.w	sl, #1
 8009506:	d102      	bne.n	800950e <_strtod_l+0xa86>
 8009508:	2f00      	cmp	r7, #0
 800950a:	f43f ad7e 	beq.w	800900a <_strtod_l+0x582>
 800950e:	4b61      	ldr	r3, [pc, #388]	; (8009694 <_strtod_l+0xc0c>)
 8009510:	2200      	movs	r2, #0
 8009512:	e78c      	b.n	800942e <_strtod_l+0x9a6>
 8009514:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009690 <_strtod_l+0xc08>
 8009518:	f04f 0800 	mov.w	r8, #0
 800951c:	e7e7      	b.n	80094ee <_strtod_l+0xa66>
 800951e:	4b5c      	ldr	r3, [pc, #368]	; (8009690 <_strtod_l+0xc08>)
 8009520:	4640      	mov	r0, r8
 8009522:	4649      	mov	r1, r9
 8009524:	2200      	movs	r2, #0
 8009526:	f7f7 f887 	bl	8000638 <__aeabi_dmul>
 800952a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952c:	4680      	mov	r8, r0
 800952e:	4689      	mov	r9, r1
 8009530:	b933      	cbnz	r3, 8009540 <_strtod_l+0xab8>
 8009532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009536:	9012      	str	r0, [sp, #72]	; 0x48
 8009538:	9313      	str	r3, [sp, #76]	; 0x4c
 800953a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800953e:	e7dd      	b.n	80094fc <_strtod_l+0xa74>
 8009540:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009544:	e7f9      	b.n	800953a <_strtod_l+0xab2>
 8009546:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1a8      	bne.n	80094a2 <_strtod_l+0xa1a>
 8009550:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009554:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009556:	0d1b      	lsrs	r3, r3, #20
 8009558:	051b      	lsls	r3, r3, #20
 800955a:	429a      	cmp	r2, r3
 800955c:	d1a1      	bne.n	80094a2 <_strtod_l+0xa1a>
 800955e:	4640      	mov	r0, r8
 8009560:	4649      	mov	r1, r9
 8009562:	f7f7 fbc9 	bl	8000cf8 <__aeabi_d2lz>
 8009566:	f7f7 f839 	bl	80005dc <__aeabi_l2d>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4640      	mov	r0, r8
 8009570:	4649      	mov	r1, r9
 8009572:	f7f6 fea9 	bl	80002c8 <__aeabi_dsub>
 8009576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800957c:	ea43 030a 	orr.w	r3, r3, sl
 8009580:	4313      	orrs	r3, r2
 8009582:	4680      	mov	r8, r0
 8009584:	4689      	mov	r9, r1
 8009586:	d053      	beq.n	8009630 <_strtod_l+0xba8>
 8009588:	a335      	add	r3, pc, #212	; (adr r3, 8009660 <_strtod_l+0xbd8>)
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	f7f7 fac5 	bl	8000b1c <__aeabi_dcmplt>
 8009592:	2800      	cmp	r0, #0
 8009594:	f47f acce 	bne.w	8008f34 <_strtod_l+0x4ac>
 8009598:	a333      	add	r3, pc, #204	; (adr r3, 8009668 <_strtod_l+0xbe0>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f7 fad9 	bl	8000b58 <__aeabi_dcmpgt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	f43f af7b 	beq.w	80094a2 <_strtod_l+0xa1a>
 80095ac:	e4c2      	b.n	8008f34 <_strtod_l+0x4ac>
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	b333      	cbz	r3, 8009600 <_strtod_l+0xb78>
 80095b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80095b8:	d822      	bhi.n	8009600 <_strtod_l+0xb78>
 80095ba:	a32d      	add	r3, pc, #180	; (adr r3, 8009670 <_strtod_l+0xbe8>)
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	4640      	mov	r0, r8
 80095c2:	4649      	mov	r1, r9
 80095c4:	f7f7 fab4 	bl	8000b30 <__aeabi_dcmple>
 80095c8:	b1a0      	cbz	r0, 80095f4 <_strtod_l+0xb6c>
 80095ca:	4649      	mov	r1, r9
 80095cc:	4640      	mov	r0, r8
 80095ce:	f7f7 fb0b 	bl	8000be8 <__aeabi_d2uiz>
 80095d2:	2801      	cmp	r0, #1
 80095d4:	bf38      	it	cc
 80095d6:	2001      	movcc	r0, #1
 80095d8:	f7f6 ffb4 	bl	8000544 <__aeabi_ui2d>
 80095dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095de:	4680      	mov	r8, r0
 80095e0:	4689      	mov	r9, r1
 80095e2:	bb13      	cbnz	r3, 800962a <_strtod_l+0xba2>
 80095e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095e8:	9014      	str	r0, [sp, #80]	; 0x50
 80095ea:	9315      	str	r3, [sp, #84]	; 0x54
 80095ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80095f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80095f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	930d      	str	r3, [sp, #52]	; 0x34
 8009600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009604:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800960c:	f001 fea6 	bl	800b35c <__ulp>
 8009610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009614:	ec53 2b10 	vmov	r2, r3, d0
 8009618:	f7f7 f80e 	bl	8000638 <__aeabi_dmul>
 800961c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009620:	f7f6 fe54 	bl	80002cc <__adddf3>
 8009624:	4682      	mov	sl, r0
 8009626:	468b      	mov	fp, r1
 8009628:	e78f      	b.n	800954a <_strtod_l+0xac2>
 800962a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800962e:	e7dd      	b.n	80095ec <_strtod_l+0xb64>
 8009630:	a311      	add	r3, pc, #68	; (adr r3, 8009678 <_strtod_l+0xbf0>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	f7f7 fa71 	bl	8000b1c <__aeabi_dcmplt>
 800963a:	e7b4      	b.n	80095a6 <_strtod_l+0xb1e>
 800963c:	2300      	movs	r3, #0
 800963e:	930e      	str	r3, [sp, #56]	; 0x38
 8009640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009642:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	f7ff ba65 	b.w	8008b14 <_strtod_l+0x8c>
 800964a:	2b65      	cmp	r3, #101	; 0x65
 800964c:	f43f ab5d 	beq.w	8008d0a <_strtod_l+0x282>
 8009650:	2b45      	cmp	r3, #69	; 0x45
 8009652:	f43f ab5a 	beq.w	8008d0a <_strtod_l+0x282>
 8009656:	2201      	movs	r2, #1
 8009658:	f7ff bb92 	b.w	8008d80 <_strtod_l+0x2f8>
 800965c:	f3af 8000 	nop.w
 8009660:	94a03595 	.word	0x94a03595
 8009664:	3fdfffff 	.word	0x3fdfffff
 8009668:	35afe535 	.word	0x35afe535
 800966c:	3fe00000 	.word	0x3fe00000
 8009670:	ffc00000 	.word	0xffc00000
 8009674:	41dfffff 	.word	0x41dfffff
 8009678:	94a03595 	.word	0x94a03595
 800967c:	3fcfffff 	.word	0x3fcfffff
 8009680:	3ff00000 	.word	0x3ff00000
 8009684:	7ff00000 	.word	0x7ff00000
 8009688:	7fe00000 	.word	0x7fe00000
 800968c:	7c9fffff 	.word	0x7c9fffff
 8009690:	3fe00000 	.word	0x3fe00000
 8009694:	bff00000 	.word	0xbff00000
 8009698:	7fefffff 	.word	0x7fefffff

0800969c <_strtod_r>:
 800969c:	4b01      	ldr	r3, [pc, #4]	; (80096a4 <_strtod_r+0x8>)
 800969e:	f7ff b9f3 	b.w	8008a88 <_strtod_l>
 80096a2:	bf00      	nop
 80096a4:	200000d8 	.word	0x200000d8

080096a8 <_strtol_l.isra.0>:
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ae:	d001      	beq.n	80096b4 <_strtol_l.isra.0+0xc>
 80096b0:	2b24      	cmp	r3, #36	; 0x24
 80096b2:	d906      	bls.n	80096c2 <_strtol_l.isra.0+0x1a>
 80096b4:	f7fe fa86 	bl	8007bc4 <__errno>
 80096b8:	2316      	movs	r3, #22
 80096ba:	6003      	str	r3, [r0, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	4f3a      	ldr	r7, [pc, #232]	; (80097ac <_strtol_l.isra.0+0x104>)
 80096c4:	468e      	mov	lr, r1
 80096c6:	4676      	mov	r6, lr
 80096c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80096cc:	5de5      	ldrb	r5, [r4, r7]
 80096ce:	f015 0508 	ands.w	r5, r5, #8
 80096d2:	d1f8      	bne.n	80096c6 <_strtol_l.isra.0+0x1e>
 80096d4:	2c2d      	cmp	r4, #45	; 0x2d
 80096d6:	d134      	bne.n	8009742 <_strtol_l.isra.0+0x9a>
 80096d8:	f89e 4000 	ldrb.w	r4, [lr]
 80096dc:	f04f 0801 	mov.w	r8, #1
 80096e0:	f106 0e02 	add.w	lr, r6, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d05c      	beq.n	80097a2 <_strtol_l.isra.0+0xfa>
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	d10c      	bne.n	8009706 <_strtol_l.isra.0+0x5e>
 80096ec:	2c30      	cmp	r4, #48	; 0x30
 80096ee:	d10a      	bne.n	8009706 <_strtol_l.isra.0+0x5e>
 80096f0:	f89e 4000 	ldrb.w	r4, [lr]
 80096f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096f8:	2c58      	cmp	r4, #88	; 0x58
 80096fa:	d14d      	bne.n	8009798 <_strtol_l.isra.0+0xf0>
 80096fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009700:	2310      	movs	r3, #16
 8009702:	f10e 0e02 	add.w	lr, lr, #2
 8009706:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800970a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800970e:	2600      	movs	r6, #0
 8009710:	fbbc f9f3 	udiv	r9, ip, r3
 8009714:	4635      	mov	r5, r6
 8009716:	fb03 ca19 	mls	sl, r3, r9, ip
 800971a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800971e:	2f09      	cmp	r7, #9
 8009720:	d818      	bhi.n	8009754 <_strtol_l.isra.0+0xac>
 8009722:	463c      	mov	r4, r7
 8009724:	42a3      	cmp	r3, r4
 8009726:	dd24      	ble.n	8009772 <_strtol_l.isra.0+0xca>
 8009728:	2e00      	cmp	r6, #0
 800972a:	db1f      	blt.n	800976c <_strtol_l.isra.0+0xc4>
 800972c:	45a9      	cmp	r9, r5
 800972e:	d31d      	bcc.n	800976c <_strtol_l.isra.0+0xc4>
 8009730:	d101      	bne.n	8009736 <_strtol_l.isra.0+0x8e>
 8009732:	45a2      	cmp	sl, r4
 8009734:	db1a      	blt.n	800976c <_strtol_l.isra.0+0xc4>
 8009736:	fb05 4503 	mla	r5, r5, r3, r4
 800973a:	2601      	movs	r6, #1
 800973c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009740:	e7eb      	b.n	800971a <_strtol_l.isra.0+0x72>
 8009742:	2c2b      	cmp	r4, #43	; 0x2b
 8009744:	bf08      	it	eq
 8009746:	f89e 4000 	ldrbeq.w	r4, [lr]
 800974a:	46a8      	mov	r8, r5
 800974c:	bf08      	it	eq
 800974e:	f106 0e02 	addeq.w	lr, r6, #2
 8009752:	e7c7      	b.n	80096e4 <_strtol_l.isra.0+0x3c>
 8009754:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009758:	2f19      	cmp	r7, #25
 800975a:	d801      	bhi.n	8009760 <_strtol_l.isra.0+0xb8>
 800975c:	3c37      	subs	r4, #55	; 0x37
 800975e:	e7e1      	b.n	8009724 <_strtol_l.isra.0+0x7c>
 8009760:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009764:	2f19      	cmp	r7, #25
 8009766:	d804      	bhi.n	8009772 <_strtol_l.isra.0+0xca>
 8009768:	3c57      	subs	r4, #87	; 0x57
 800976a:	e7db      	b.n	8009724 <_strtol_l.isra.0+0x7c>
 800976c:	f04f 36ff 	mov.w	r6, #4294967295
 8009770:	e7e4      	b.n	800973c <_strtol_l.isra.0+0x94>
 8009772:	2e00      	cmp	r6, #0
 8009774:	da05      	bge.n	8009782 <_strtol_l.isra.0+0xda>
 8009776:	2322      	movs	r3, #34	; 0x22
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	4665      	mov	r5, ip
 800977c:	b942      	cbnz	r2, 8009790 <_strtol_l.isra.0+0xe8>
 800977e:	4628      	mov	r0, r5
 8009780:	e79d      	b.n	80096be <_strtol_l.isra.0+0x16>
 8009782:	f1b8 0f00 	cmp.w	r8, #0
 8009786:	d000      	beq.n	800978a <_strtol_l.isra.0+0xe2>
 8009788:	426d      	negs	r5, r5
 800978a:	2a00      	cmp	r2, #0
 800978c:	d0f7      	beq.n	800977e <_strtol_l.isra.0+0xd6>
 800978e:	b10e      	cbz	r6, 8009794 <_strtol_l.isra.0+0xec>
 8009790:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009794:	6011      	str	r1, [r2, #0]
 8009796:	e7f2      	b.n	800977e <_strtol_l.isra.0+0xd6>
 8009798:	2430      	movs	r4, #48	; 0x30
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1b3      	bne.n	8009706 <_strtol_l.isra.0+0x5e>
 800979e:	2308      	movs	r3, #8
 80097a0:	e7b1      	b.n	8009706 <_strtol_l.isra.0+0x5e>
 80097a2:	2c30      	cmp	r4, #48	; 0x30
 80097a4:	d0a4      	beq.n	80096f0 <_strtol_l.isra.0+0x48>
 80097a6:	230a      	movs	r3, #10
 80097a8:	e7ad      	b.n	8009706 <_strtol_l.isra.0+0x5e>
 80097aa:	bf00      	nop
 80097ac:	0800ce21 	.word	0x0800ce21

080097b0 <_strtol_r>:
 80097b0:	f7ff bf7a 	b.w	80096a8 <_strtol_l.isra.0>

080097b4 <_vsiprintf_r>:
 80097b4:	b500      	push	{lr}
 80097b6:	b09b      	sub	sp, #108	; 0x6c
 80097b8:	9100      	str	r1, [sp, #0]
 80097ba:	9104      	str	r1, [sp, #16]
 80097bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097c0:	9105      	str	r1, [sp, #20]
 80097c2:	9102      	str	r1, [sp, #8]
 80097c4:	4905      	ldr	r1, [pc, #20]	; (80097dc <_vsiprintf_r+0x28>)
 80097c6:	9103      	str	r1, [sp, #12]
 80097c8:	4669      	mov	r1, sp
 80097ca:	f002 f82b 	bl	800b824 <_svfiprintf_r>
 80097ce:	9b00      	ldr	r3, [sp, #0]
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	b01b      	add	sp, #108	; 0x6c
 80097d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80097da:	bf00      	nop
 80097dc:	ffff0208 	.word	0xffff0208

080097e0 <vsiprintf>:
 80097e0:	4613      	mov	r3, r2
 80097e2:	460a      	mov	r2, r1
 80097e4:	4601      	mov	r1, r0
 80097e6:	4802      	ldr	r0, [pc, #8]	; (80097f0 <vsiprintf+0x10>)
 80097e8:	6800      	ldr	r0, [r0, #0]
 80097ea:	f7ff bfe3 	b.w	80097b4 <_vsiprintf_r>
 80097ee:	bf00      	nop
 80097f0:	20000070 	.word	0x20000070

080097f4 <_write_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	; (8009814 <_write_r+0x20>)
 80097f8:	4604      	mov	r4, r0
 80097fa:	4608      	mov	r0, r1
 80097fc:	4611      	mov	r1, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	602a      	str	r2, [r5, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f7f8 fbf9 	bl	8001ffa <_write>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_write_r+0x1e>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_write_r+0x1e>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	2000084c 	.word	0x2000084c

08009818 <_close_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	; (8009834 <_close_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f8 fc05 	bl	8002032 <_close>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_close_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_close_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	2000084c 	.word	0x2000084c

08009838 <quorem>:
 8009838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	6903      	ldr	r3, [r0, #16]
 800983e:	690c      	ldr	r4, [r1, #16]
 8009840:	42a3      	cmp	r3, r4
 8009842:	4607      	mov	r7, r0
 8009844:	f2c0 8081 	blt.w	800994a <quorem+0x112>
 8009848:	3c01      	subs	r4, #1
 800984a:	f101 0814 	add.w	r8, r1, #20
 800984e:	f100 0514 	add.w	r5, r0, #20
 8009852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800985c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009860:	3301      	adds	r3, #1
 8009862:	429a      	cmp	r2, r3
 8009864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800986c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009870:	d331      	bcc.n	80098d6 <quorem+0x9e>
 8009872:	f04f 0e00 	mov.w	lr, #0
 8009876:	4640      	mov	r0, r8
 8009878:	46ac      	mov	ip, r5
 800987a:	46f2      	mov	sl, lr
 800987c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009880:	b293      	uxth	r3, r2
 8009882:	fb06 e303 	mla	r3, r6, r3, lr
 8009886:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800988a:	b29b      	uxth	r3, r3
 800988c:	ebaa 0303 	sub.w	r3, sl, r3
 8009890:	0c12      	lsrs	r2, r2, #16
 8009892:	f8dc a000 	ldr.w	sl, [ip]
 8009896:	fb06 e202 	mla	r2, r6, r2, lr
 800989a:	fa13 f38a 	uxtah	r3, r3, sl
 800989e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098a2:	fa1f fa82 	uxth.w	sl, r2
 80098a6:	f8dc 2000 	ldr.w	r2, [ip]
 80098aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80098ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098b8:	4581      	cmp	r9, r0
 80098ba:	f84c 3b04 	str.w	r3, [ip], #4
 80098be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098c2:	d2db      	bcs.n	800987c <quorem+0x44>
 80098c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80098c8:	b92b      	cbnz	r3, 80098d6 <quorem+0x9e>
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	3b04      	subs	r3, #4
 80098ce:	429d      	cmp	r5, r3
 80098d0:	461a      	mov	r2, r3
 80098d2:	d32e      	bcc.n	8009932 <quorem+0xfa>
 80098d4:	613c      	str	r4, [r7, #16]
 80098d6:	4638      	mov	r0, r7
 80098d8:	f001 fc9c 	bl	800b214 <__mcmp>
 80098dc:	2800      	cmp	r0, #0
 80098de:	db24      	blt.n	800992a <quorem+0xf2>
 80098e0:	3601      	adds	r6, #1
 80098e2:	4628      	mov	r0, r5
 80098e4:	f04f 0c00 	mov.w	ip, #0
 80098e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ec:	f8d0 e000 	ldr.w	lr, [r0]
 80098f0:	b293      	uxth	r3, r2
 80098f2:	ebac 0303 	sub.w	r3, ip, r3
 80098f6:	0c12      	lsrs	r2, r2, #16
 80098f8:	fa13 f38e 	uxtah	r3, r3, lr
 80098fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009904:	b29b      	uxth	r3, r3
 8009906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800990a:	45c1      	cmp	r9, r8
 800990c:	f840 3b04 	str.w	r3, [r0], #4
 8009910:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009914:	d2e8      	bcs.n	80098e8 <quorem+0xb0>
 8009916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800991e:	b922      	cbnz	r2, 800992a <quorem+0xf2>
 8009920:	3b04      	subs	r3, #4
 8009922:	429d      	cmp	r5, r3
 8009924:	461a      	mov	r2, r3
 8009926:	d30a      	bcc.n	800993e <quorem+0x106>
 8009928:	613c      	str	r4, [r7, #16]
 800992a:	4630      	mov	r0, r6
 800992c:	b003      	add	sp, #12
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	6812      	ldr	r2, [r2, #0]
 8009934:	3b04      	subs	r3, #4
 8009936:	2a00      	cmp	r2, #0
 8009938:	d1cc      	bne.n	80098d4 <quorem+0x9c>
 800993a:	3c01      	subs	r4, #1
 800993c:	e7c7      	b.n	80098ce <quorem+0x96>
 800993e:	6812      	ldr	r2, [r2, #0]
 8009940:	3b04      	subs	r3, #4
 8009942:	2a00      	cmp	r2, #0
 8009944:	d1f0      	bne.n	8009928 <quorem+0xf0>
 8009946:	3c01      	subs	r4, #1
 8009948:	e7eb      	b.n	8009922 <quorem+0xea>
 800994a:	2000      	movs	r0, #0
 800994c:	e7ee      	b.n	800992c <quorem+0xf4>
	...

08009950 <_dtoa_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	ed2d 8b02 	vpush	{d8}
 8009958:	ec57 6b10 	vmov	r6, r7, d0
 800995c:	b095      	sub	sp, #84	; 0x54
 800995e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009960:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009964:	9105      	str	r1, [sp, #20]
 8009966:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800996a:	4604      	mov	r4, r0
 800996c:	9209      	str	r2, [sp, #36]	; 0x24
 800996e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009970:	b975      	cbnz	r5, 8009990 <_dtoa_r+0x40>
 8009972:	2010      	movs	r0, #16
 8009974:	f001 f95e 	bl	800ac34 <malloc>
 8009978:	4602      	mov	r2, r0
 800997a:	6260      	str	r0, [r4, #36]	; 0x24
 800997c:	b920      	cbnz	r0, 8009988 <_dtoa_r+0x38>
 800997e:	4bb2      	ldr	r3, [pc, #712]	; (8009c48 <_dtoa_r+0x2f8>)
 8009980:	21ea      	movs	r1, #234	; 0xea
 8009982:	48b2      	ldr	r0, [pc, #712]	; (8009c4c <_dtoa_r+0x2fc>)
 8009984:	f002 fcaa 	bl	800c2dc <__assert_func>
 8009988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800998c:	6005      	str	r5, [r0, #0]
 800998e:	60c5      	str	r5, [r0, #12]
 8009990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	b151      	cbz	r1, 80099ac <_dtoa_r+0x5c>
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	604a      	str	r2, [r1, #4]
 800999a:	2301      	movs	r3, #1
 800999c:	4093      	lsls	r3, r2
 800999e:	608b      	str	r3, [r1, #8]
 80099a0:	4620      	mov	r0, r4
 80099a2:	f001 f9af 	bl	800ad04 <_Bfree>
 80099a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	1e3b      	subs	r3, r7, #0
 80099ae:	bfb9      	ittee	lt
 80099b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099b4:	9303      	strlt	r3, [sp, #12]
 80099b6:	2300      	movge	r3, #0
 80099b8:	f8c8 3000 	strge.w	r3, [r8]
 80099bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80099c0:	4ba3      	ldr	r3, [pc, #652]	; (8009c50 <_dtoa_r+0x300>)
 80099c2:	bfbc      	itt	lt
 80099c4:	2201      	movlt	r2, #1
 80099c6:	f8c8 2000 	strlt.w	r2, [r8]
 80099ca:	ea33 0309 	bics.w	r3, r3, r9
 80099ce:	d11b      	bne.n	8009a08 <_dtoa_r+0xb8>
 80099d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099dc:	4333      	orrs	r3, r6
 80099de:	f000 857a 	beq.w	800a4d6 <_dtoa_r+0xb86>
 80099e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e4:	b963      	cbnz	r3, 8009a00 <_dtoa_r+0xb0>
 80099e6:	4b9b      	ldr	r3, [pc, #620]	; (8009c54 <_dtoa_r+0x304>)
 80099e8:	e024      	b.n	8009a34 <_dtoa_r+0xe4>
 80099ea:	4b9b      	ldr	r3, [pc, #620]	; (8009c58 <_dtoa_r+0x308>)
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	9800      	ldr	r0, [sp, #0]
 80099f6:	b015      	add	sp, #84	; 0x54
 80099f8:	ecbd 8b02 	vpop	{d8}
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	4b94      	ldr	r3, [pc, #592]	; (8009c54 <_dtoa_r+0x304>)
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	3303      	adds	r3, #3
 8009a06:	e7f3      	b.n	80099f0 <_dtoa_r+0xa0>
 8009a08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	ec51 0b17 	vmov	r0, r1, d7
 8009a12:	2300      	movs	r3, #0
 8009a14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009a18:	f7f7 f876 	bl	8000b08 <__aeabi_dcmpeq>
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	b158      	cbz	r0, 8009a38 <_dtoa_r+0xe8>
 8009a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a22:	2301      	movs	r3, #1
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 8551 	beq.w	800a4d0 <_dtoa_r+0xb80>
 8009a2e:	488b      	ldr	r0, [pc, #556]	; (8009c5c <_dtoa_r+0x30c>)
 8009a30:	6018      	str	r0, [r3, #0]
 8009a32:	1e43      	subs	r3, r0, #1
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	e7dd      	b.n	80099f4 <_dtoa_r+0xa4>
 8009a38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a3c:	aa12      	add	r2, sp, #72	; 0x48
 8009a3e:	a913      	add	r1, sp, #76	; 0x4c
 8009a40:	4620      	mov	r0, r4
 8009a42:	f001 fd07 	bl	800b454 <__d2b>
 8009a46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a4a:	4683      	mov	fp, r0
 8009a4c:	2d00      	cmp	r5, #0
 8009a4e:	d07c      	beq.n	8009b4a <_dtoa_r+0x1fa>
 8009a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a6a:	4b7d      	ldr	r3, [pc, #500]	; (8009c60 <_dtoa_r+0x310>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	4639      	mov	r1, r7
 8009a72:	f7f6 fc29 	bl	80002c8 <__aeabi_dsub>
 8009a76:	a36e      	add	r3, pc, #440	; (adr r3, 8009c30 <_dtoa_r+0x2e0>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 fddc 	bl	8000638 <__aeabi_dmul>
 8009a80:	a36d      	add	r3, pc, #436	; (adr r3, 8009c38 <_dtoa_r+0x2e8>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fc21 	bl	80002cc <__adddf3>
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	460f      	mov	r7, r1
 8009a90:	f7f6 fd68 	bl	8000564 <__aeabi_i2d>
 8009a94:	a36a      	add	r3, pc, #424	; (adr r3, 8009c40 <_dtoa_r+0x2f0>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	f7f6 fdcd 	bl	8000638 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	4639      	mov	r1, r7
 8009aa6:	f7f6 fc11 	bl	80002cc <__adddf3>
 8009aaa:	4606      	mov	r6, r0
 8009aac:	460f      	mov	r7, r1
 8009aae:	f7f7 f873 	bl	8000b98 <__aeabi_d2iz>
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	4639      	mov	r1, r7
 8009abc:	f7f7 f82e 	bl	8000b1c <__aeabi_dcmplt>
 8009ac0:	b148      	cbz	r0, 8009ad6 <_dtoa_r+0x186>
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	f7f6 fd4e 	bl	8000564 <__aeabi_i2d>
 8009ac8:	4632      	mov	r2, r6
 8009aca:	463b      	mov	r3, r7
 8009acc:	f7f7 f81c 	bl	8000b08 <__aeabi_dcmpeq>
 8009ad0:	b908      	cbnz	r0, 8009ad6 <_dtoa_r+0x186>
 8009ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ad6:	f1ba 0f16 	cmp.w	sl, #22
 8009ada:	d854      	bhi.n	8009b86 <_dtoa_r+0x236>
 8009adc:	4b61      	ldr	r3, [pc, #388]	; (8009c64 <_dtoa_r+0x314>)
 8009ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009aea:	f7f7 f817 	bl	8000b1c <__aeabi_dcmplt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d04b      	beq.n	8009b8a <_dtoa_r+0x23a>
 8009af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009af6:	2300      	movs	r3, #0
 8009af8:	930e      	str	r3, [sp, #56]	; 0x38
 8009afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009afc:	1b5d      	subs	r5, r3, r5
 8009afe:	1e6b      	subs	r3, r5, #1
 8009b00:	9304      	str	r3, [sp, #16]
 8009b02:	bf43      	ittte	mi
 8009b04:	2300      	movmi	r3, #0
 8009b06:	f1c5 0801 	rsbmi	r8, r5, #1
 8009b0a:	9304      	strmi	r3, [sp, #16]
 8009b0c:	f04f 0800 	movpl.w	r8, #0
 8009b10:	f1ba 0f00 	cmp.w	sl, #0
 8009b14:	db3b      	blt.n	8009b8e <_dtoa_r+0x23e>
 8009b16:	9b04      	ldr	r3, [sp, #16]
 8009b18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009b1c:	4453      	add	r3, sl
 8009b1e:	9304      	str	r3, [sp, #16]
 8009b20:	2300      	movs	r3, #0
 8009b22:	9306      	str	r3, [sp, #24]
 8009b24:	9b05      	ldr	r3, [sp, #20]
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d869      	bhi.n	8009bfe <_dtoa_r+0x2ae>
 8009b2a:	2b05      	cmp	r3, #5
 8009b2c:	bfc4      	itt	gt
 8009b2e:	3b04      	subgt	r3, #4
 8009b30:	9305      	strgt	r3, [sp, #20]
 8009b32:	9b05      	ldr	r3, [sp, #20]
 8009b34:	f1a3 0302 	sub.w	r3, r3, #2
 8009b38:	bfcc      	ite	gt
 8009b3a:	2500      	movgt	r5, #0
 8009b3c:	2501      	movle	r5, #1
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d869      	bhi.n	8009c16 <_dtoa_r+0x2c6>
 8009b42:	e8df f003 	tbb	[pc, r3]
 8009b46:	4e2c      	.short	0x4e2c
 8009b48:	5a4c      	.short	0x5a4c
 8009b4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b4e:	441d      	add	r5, r3
 8009b50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	bfc1      	itttt	gt
 8009b58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b60:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b68:	bfda      	itte	le
 8009b6a:	f1c3 0320 	rsble	r3, r3, #32
 8009b6e:	fa06 f003 	lslle.w	r0, r6, r3
 8009b72:	4318      	orrgt	r0, r3
 8009b74:	f7f6 fce6 	bl	8000544 <__aeabi_ui2d>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b80:	3d01      	subs	r5, #1
 8009b82:	9310      	str	r3, [sp, #64]	; 0x40
 8009b84:	e771      	b.n	8009a6a <_dtoa_r+0x11a>
 8009b86:	2301      	movs	r3, #1
 8009b88:	e7b6      	b.n	8009af8 <_dtoa_r+0x1a8>
 8009b8a:	900e      	str	r0, [sp, #56]	; 0x38
 8009b8c:	e7b5      	b.n	8009afa <_dtoa_r+0x1aa>
 8009b8e:	f1ca 0300 	rsb	r3, sl, #0
 8009b92:	9306      	str	r3, [sp, #24]
 8009b94:	2300      	movs	r3, #0
 8009b96:	eba8 080a 	sub.w	r8, r8, sl
 8009b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b9c:	e7c2      	b.n	8009b24 <_dtoa_r+0x1d4>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9308      	str	r3, [sp, #32]
 8009ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dc39      	bgt.n	8009c1c <_dtoa_r+0x2cc>
 8009ba8:	f04f 0901 	mov.w	r9, #1
 8009bac:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009bb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bb8:	2200      	movs	r2, #0
 8009bba:	6042      	str	r2, [r0, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	f102 0614 	add.w	r6, r2, #20
 8009bc2:	429e      	cmp	r6, r3
 8009bc4:	6841      	ldr	r1, [r0, #4]
 8009bc6:	d92f      	bls.n	8009c28 <_dtoa_r+0x2d8>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f001 f85b 	bl	800ac84 <_Balloc>
 8009bce:	9000      	str	r0, [sp, #0]
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d14b      	bne.n	8009c6c <_dtoa_r+0x31c>
 8009bd4:	4b24      	ldr	r3, [pc, #144]	; (8009c68 <_dtoa_r+0x318>)
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bdc:	e6d1      	b.n	8009982 <_dtoa_r+0x32>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e7de      	b.n	8009ba0 <_dtoa_r+0x250>
 8009be2:	2300      	movs	r3, #0
 8009be4:	9308      	str	r3, [sp, #32]
 8009be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be8:	eb0a 0903 	add.w	r9, sl, r3
 8009bec:	f109 0301 	add.w	r3, r9, #1
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	9301      	str	r3, [sp, #4]
 8009bf4:	bfb8      	it	lt
 8009bf6:	2301      	movlt	r3, #1
 8009bf8:	e7dd      	b.n	8009bb6 <_dtoa_r+0x266>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e7f2      	b.n	8009be4 <_dtoa_r+0x294>
 8009bfe:	2501      	movs	r5, #1
 8009c00:	2300      	movs	r3, #0
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	9508      	str	r5, [sp, #32]
 8009c06:	f04f 39ff 	mov.w	r9, #4294967295
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c10:	2312      	movs	r3, #18
 8009c12:	9209      	str	r2, [sp, #36]	; 0x24
 8009c14:	e7cf      	b.n	8009bb6 <_dtoa_r+0x266>
 8009c16:	2301      	movs	r3, #1
 8009c18:	9308      	str	r3, [sp, #32]
 8009c1a:	e7f4      	b.n	8009c06 <_dtoa_r+0x2b6>
 8009c1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009c20:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c24:	464b      	mov	r3, r9
 8009c26:	e7c6      	b.n	8009bb6 <_dtoa_r+0x266>
 8009c28:	3101      	adds	r1, #1
 8009c2a:	6041      	str	r1, [r0, #4]
 8009c2c:	0052      	lsls	r2, r2, #1
 8009c2e:	e7c6      	b.n	8009bbe <_dtoa_r+0x26e>
 8009c30:	636f4361 	.word	0x636f4361
 8009c34:	3fd287a7 	.word	0x3fd287a7
 8009c38:	8b60c8b3 	.word	0x8b60c8b3
 8009c3c:	3fc68a28 	.word	0x3fc68a28
 8009c40:	509f79fb 	.word	0x509f79fb
 8009c44:	3fd34413 	.word	0x3fd34413
 8009c48:	0800cf2e 	.word	0x0800cf2e
 8009c4c:	0800cf45 	.word	0x0800cf45
 8009c50:	7ff00000 	.word	0x7ff00000
 8009c54:	0800cf2a 	.word	0x0800cf2a
 8009c58:	0800cf21 	.word	0x0800cf21
 8009c5c:	0800d1aa 	.word	0x0800d1aa
 8009c60:	3ff80000 	.word	0x3ff80000
 8009c64:	0800d0c0 	.word	0x0800d0c0
 8009c68:	0800cfa4 	.word	0x0800cfa4
 8009c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c6e:	9a00      	ldr	r2, [sp, #0]
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	2b0e      	cmp	r3, #14
 8009c76:	f200 80ad 	bhi.w	8009dd4 <_dtoa_r+0x484>
 8009c7a:	2d00      	cmp	r5, #0
 8009c7c:	f000 80aa 	beq.w	8009dd4 <_dtoa_r+0x484>
 8009c80:	f1ba 0f00 	cmp.w	sl, #0
 8009c84:	dd36      	ble.n	8009cf4 <_dtoa_r+0x3a4>
 8009c86:	4ac3      	ldr	r2, [pc, #780]	; (8009f94 <_dtoa_r+0x644>)
 8009c88:	f00a 030f 	and.w	r3, sl, #15
 8009c8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c90:	ed93 7b00 	vldr	d7, [r3]
 8009c94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c9c:	eeb0 8a47 	vmov.f32	s16, s14
 8009ca0:	eef0 8a67 	vmov.f32	s17, s15
 8009ca4:	d016      	beq.n	8009cd4 <_dtoa_r+0x384>
 8009ca6:	4bbc      	ldr	r3, [pc, #752]	; (8009f98 <_dtoa_r+0x648>)
 8009ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cb0:	f7f6 fdec 	bl	800088c <__aeabi_ddiv>
 8009cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cb8:	f007 070f 	and.w	r7, r7, #15
 8009cbc:	2503      	movs	r5, #3
 8009cbe:	4eb6      	ldr	r6, [pc, #728]	; (8009f98 <_dtoa_r+0x648>)
 8009cc0:	b957      	cbnz	r7, 8009cd8 <_dtoa_r+0x388>
 8009cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc6:	ec53 2b18 	vmov	r2, r3, d8
 8009cca:	f7f6 fddf 	bl	800088c <__aeabi_ddiv>
 8009cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cd2:	e029      	b.n	8009d28 <_dtoa_r+0x3d8>
 8009cd4:	2502      	movs	r5, #2
 8009cd6:	e7f2      	b.n	8009cbe <_dtoa_r+0x36e>
 8009cd8:	07f9      	lsls	r1, r7, #31
 8009cda:	d508      	bpl.n	8009cee <_dtoa_r+0x39e>
 8009cdc:	ec51 0b18 	vmov	r0, r1, d8
 8009ce0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ce4:	f7f6 fca8 	bl	8000638 <__aeabi_dmul>
 8009ce8:	ec41 0b18 	vmov	d8, r0, r1
 8009cec:	3501      	adds	r5, #1
 8009cee:	107f      	asrs	r7, r7, #1
 8009cf0:	3608      	adds	r6, #8
 8009cf2:	e7e5      	b.n	8009cc0 <_dtoa_r+0x370>
 8009cf4:	f000 80a6 	beq.w	8009e44 <_dtoa_r+0x4f4>
 8009cf8:	f1ca 0600 	rsb	r6, sl, #0
 8009cfc:	4ba5      	ldr	r3, [pc, #660]	; (8009f94 <_dtoa_r+0x644>)
 8009cfe:	4fa6      	ldr	r7, [pc, #664]	; (8009f98 <_dtoa_r+0x648>)
 8009d00:	f006 020f 	and.w	r2, r6, #15
 8009d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d10:	f7f6 fc92 	bl	8000638 <__aeabi_dmul>
 8009d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d18:	1136      	asrs	r6, r6, #4
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	2502      	movs	r5, #2
 8009d1e:	2e00      	cmp	r6, #0
 8009d20:	f040 8085 	bne.w	8009e2e <_dtoa_r+0x4de>
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1d2      	bne.n	8009cce <_dtoa_r+0x37e>
 8009d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 808c 	beq.w	8009e48 <_dtoa_r+0x4f8>
 8009d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d34:	4b99      	ldr	r3, [pc, #612]	; (8009f9c <_dtoa_r+0x64c>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	4630      	mov	r0, r6
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	f7f6 feee 	bl	8000b1c <__aeabi_dcmplt>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f000 8081 	beq.w	8009e48 <_dtoa_r+0x4f8>
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d07d      	beq.n	8009e48 <_dtoa_r+0x4f8>
 8009d4c:	f1b9 0f00 	cmp.w	r9, #0
 8009d50:	dd3c      	ble.n	8009dcc <_dtoa_r+0x47c>
 8009d52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d56:	9307      	str	r3, [sp, #28]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4b91      	ldr	r3, [pc, #580]	; (8009fa0 <_dtoa_r+0x650>)
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 fc6a 	bl	8000638 <__aeabi_dmul>
 8009d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d68:	3501      	adds	r5, #1
 8009d6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d72:	4628      	mov	r0, r5
 8009d74:	f7f6 fbf6 	bl	8000564 <__aeabi_i2d>
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	f7f6 fc5c 	bl	8000638 <__aeabi_dmul>
 8009d80:	4b88      	ldr	r3, [pc, #544]	; (8009fa4 <_dtoa_r+0x654>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	f7f6 faa2 	bl	80002cc <__adddf3>
 8009d88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d15c      	bne.n	8009e52 <_dtoa_r+0x502>
 8009d98:	4b83      	ldr	r3, [pc, #524]	; (8009fa8 <_dtoa_r+0x658>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	4639      	mov	r1, r7
 8009da0:	f7f6 fa92 	bl	80002c8 <__aeabi_dsub>
 8009da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009da8:	4606      	mov	r6, r0
 8009daa:	460f      	mov	r7, r1
 8009dac:	f7f6 fed4 	bl	8000b58 <__aeabi_dcmpgt>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f040 8296 	bne.w	800a2e2 <_dtoa_r+0x992>
 8009db6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	f7f6 feab 	bl	8000b1c <__aeabi_dcmplt>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f040 8288 	bne.w	800a2dc <_dtoa_r+0x98c>
 8009dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f2c0 8158 	blt.w	800a08c <_dtoa_r+0x73c>
 8009ddc:	f1ba 0f0e 	cmp.w	sl, #14
 8009de0:	f300 8154 	bgt.w	800a08c <_dtoa_r+0x73c>
 8009de4:	4b6b      	ldr	r3, [pc, #428]	; (8009f94 <_dtoa_r+0x644>)
 8009de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f280 80e3 	bge.w	8009fbc <_dtoa_r+0x66c>
 8009df6:	9b01      	ldr	r3, [sp, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f300 80df 	bgt.w	8009fbc <_dtoa_r+0x66c>
 8009dfe:	f040 826d 	bne.w	800a2dc <_dtoa_r+0x98c>
 8009e02:	4b69      	ldr	r3, [pc, #420]	; (8009fa8 <_dtoa_r+0x658>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 fc15 	bl	8000638 <__aeabi_dmul>
 8009e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e12:	f7f6 fe97 	bl	8000b44 <__aeabi_dcmpge>
 8009e16:	9e01      	ldr	r6, [sp, #4]
 8009e18:	4637      	mov	r7, r6
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	f040 8243 	bne.w	800a2a6 <_dtoa_r+0x956>
 8009e20:	9d00      	ldr	r5, [sp, #0]
 8009e22:	2331      	movs	r3, #49	; 0x31
 8009e24:	f805 3b01 	strb.w	r3, [r5], #1
 8009e28:	f10a 0a01 	add.w	sl, sl, #1
 8009e2c:	e23f      	b.n	800a2ae <_dtoa_r+0x95e>
 8009e2e:	07f2      	lsls	r2, r6, #31
 8009e30:	d505      	bpl.n	8009e3e <_dtoa_r+0x4ee>
 8009e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e36:	f7f6 fbff 	bl	8000638 <__aeabi_dmul>
 8009e3a:	3501      	adds	r5, #1
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	1076      	asrs	r6, r6, #1
 8009e40:	3708      	adds	r7, #8
 8009e42:	e76c      	b.n	8009d1e <_dtoa_r+0x3ce>
 8009e44:	2502      	movs	r5, #2
 8009e46:	e76f      	b.n	8009d28 <_dtoa_r+0x3d8>
 8009e48:	9b01      	ldr	r3, [sp, #4]
 8009e4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e50:	e78d      	b.n	8009d6e <_dtoa_r+0x41e>
 8009e52:	9900      	ldr	r1, [sp, #0]
 8009e54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e58:	4b4e      	ldr	r3, [pc, #312]	; (8009f94 <_dtoa_r+0x644>)
 8009e5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e5e:	4401      	add	r1, r0
 8009e60:	9102      	str	r1, [sp, #8]
 8009e62:	9908      	ldr	r1, [sp, #32]
 8009e64:	eeb0 8a47 	vmov.f32	s16, s14
 8009e68:	eef0 8a67 	vmov.f32	s17, s15
 8009e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e74:	2900      	cmp	r1, #0
 8009e76:	d045      	beq.n	8009f04 <_dtoa_r+0x5b4>
 8009e78:	494c      	ldr	r1, [pc, #304]	; (8009fac <_dtoa_r+0x65c>)
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f7f6 fd06 	bl	800088c <__aeabi_ddiv>
 8009e80:	ec53 2b18 	vmov	r2, r3, d8
 8009e84:	f7f6 fa20 	bl	80002c8 <__aeabi_dsub>
 8009e88:	9d00      	ldr	r5, [sp, #0]
 8009e8a:	ec41 0b18 	vmov	d8, r0, r1
 8009e8e:	4639      	mov	r1, r7
 8009e90:	4630      	mov	r0, r6
 8009e92:	f7f6 fe81 	bl	8000b98 <__aeabi_d2iz>
 8009e96:	900c      	str	r0, [sp, #48]	; 0x30
 8009e98:	f7f6 fb64 	bl	8000564 <__aeabi_i2d>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 fa10 	bl	80002c8 <__aeabi_dsub>
 8009ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eaa:	3330      	adds	r3, #48	; 0x30
 8009eac:	f805 3b01 	strb.w	r3, [r5], #1
 8009eb0:	ec53 2b18 	vmov	r2, r3, d8
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	460f      	mov	r7, r1
 8009eb8:	f7f6 fe30 	bl	8000b1c <__aeabi_dcmplt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d165      	bne.n	8009f8c <_dtoa_r+0x63c>
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	463b      	mov	r3, r7
 8009ec4:	4935      	ldr	r1, [pc, #212]	; (8009f9c <_dtoa_r+0x64c>)
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	f7f6 f9fe 	bl	80002c8 <__aeabi_dsub>
 8009ecc:	ec53 2b18 	vmov	r2, r3, d8
 8009ed0:	f7f6 fe24 	bl	8000b1c <__aeabi_dcmplt>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f040 80b9 	bne.w	800a04c <_dtoa_r+0x6fc>
 8009eda:	9b02      	ldr	r3, [sp, #8]
 8009edc:	429d      	cmp	r5, r3
 8009ede:	f43f af75 	beq.w	8009dcc <_dtoa_r+0x47c>
 8009ee2:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <_dtoa_r+0x650>)
 8009ee4:	ec51 0b18 	vmov	r0, r1, d8
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f7f6 fba5 	bl	8000638 <__aeabi_dmul>
 8009eee:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <_dtoa_r+0x650>)
 8009ef0:	ec41 0b18 	vmov	d8, r0, r1
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7f6 fb9d 	bl	8000638 <__aeabi_dmul>
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	e7c4      	b.n	8009e8e <_dtoa_r+0x53e>
 8009f04:	ec51 0b17 	vmov	r0, r1, d7
 8009f08:	f7f6 fb96 	bl	8000638 <__aeabi_dmul>
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	9d00      	ldr	r5, [sp, #0]
 8009f10:	930c      	str	r3, [sp, #48]	; 0x30
 8009f12:	ec41 0b18 	vmov	d8, r0, r1
 8009f16:	4639      	mov	r1, r7
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7f6 fe3d 	bl	8000b98 <__aeabi_d2iz>
 8009f1e:	9011      	str	r0, [sp, #68]	; 0x44
 8009f20:	f7f6 fb20 	bl	8000564 <__aeabi_i2d>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4630      	mov	r0, r6
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	f7f6 f9cc 	bl	80002c8 <__aeabi_dsub>
 8009f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f32:	3330      	adds	r3, #48	; 0x30
 8009f34:	f805 3b01 	strb.w	r3, [r5], #1
 8009f38:	9b02      	ldr	r3, [sp, #8]
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	f04f 0200 	mov.w	r2, #0
 8009f44:	d134      	bne.n	8009fb0 <_dtoa_r+0x660>
 8009f46:	4b19      	ldr	r3, [pc, #100]	; (8009fac <_dtoa_r+0x65c>)
 8009f48:	ec51 0b18 	vmov	r0, r1, d8
 8009f4c:	f7f6 f9be 	bl	80002cc <__adddf3>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4630      	mov	r0, r6
 8009f56:	4639      	mov	r1, r7
 8009f58:	f7f6 fdfe 	bl	8000b58 <__aeabi_dcmpgt>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d175      	bne.n	800a04c <_dtoa_r+0x6fc>
 8009f60:	ec53 2b18 	vmov	r2, r3, d8
 8009f64:	4911      	ldr	r1, [pc, #68]	; (8009fac <_dtoa_r+0x65c>)
 8009f66:	2000      	movs	r0, #0
 8009f68:	f7f6 f9ae 	bl	80002c8 <__aeabi_dsub>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 fdd2 	bl	8000b1c <__aeabi_dcmplt>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f43f af27 	beq.w	8009dcc <_dtoa_r+0x47c>
 8009f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f80:	1e6b      	subs	r3, r5, #1
 8009f82:	930c      	str	r3, [sp, #48]	; 0x30
 8009f84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f88:	2b30      	cmp	r3, #48	; 0x30
 8009f8a:	d0f8      	beq.n	8009f7e <_dtoa_r+0x62e>
 8009f8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f90:	e04a      	b.n	800a028 <_dtoa_r+0x6d8>
 8009f92:	bf00      	nop
 8009f94:	0800d0c0 	.word	0x0800d0c0
 8009f98:	0800d098 	.word	0x0800d098
 8009f9c:	3ff00000 	.word	0x3ff00000
 8009fa0:	40240000 	.word	0x40240000
 8009fa4:	401c0000 	.word	0x401c0000
 8009fa8:	40140000 	.word	0x40140000
 8009fac:	3fe00000 	.word	0x3fe00000
 8009fb0:	4baf      	ldr	r3, [pc, #700]	; (800a270 <_dtoa_r+0x920>)
 8009fb2:	f7f6 fb41 	bl	8000638 <__aeabi_dmul>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	e7ac      	b.n	8009f16 <_dtoa_r+0x5c6>
 8009fbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fc0:	9d00      	ldr	r5, [sp, #0]
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 fc5f 	bl	800088c <__aeabi_ddiv>
 8009fce:	f7f6 fde3 	bl	8000b98 <__aeabi_d2iz>
 8009fd2:	9002      	str	r0, [sp, #8]
 8009fd4:	f7f6 fac6 	bl	8000564 <__aeabi_i2d>
 8009fd8:	4642      	mov	r2, r8
 8009fda:	464b      	mov	r3, r9
 8009fdc:	f7f6 fb2c 	bl	8000638 <__aeabi_dmul>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	f7f6 f96e 	bl	80002c8 <__aeabi_dsub>
 8009fec:	9e02      	ldr	r6, [sp, #8]
 8009fee:	9f01      	ldr	r7, [sp, #4]
 8009ff0:	3630      	adds	r6, #48	; 0x30
 8009ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ff6:	9e00      	ldr	r6, [sp, #0]
 8009ff8:	1bae      	subs	r6, r5, r6
 8009ffa:	42b7      	cmp	r7, r6
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	d137      	bne.n	800a072 <_dtoa_r+0x722>
 800a002:	f7f6 f963 	bl	80002cc <__adddf3>
 800a006:	4642      	mov	r2, r8
 800a008:	464b      	mov	r3, r9
 800a00a:	4606      	mov	r6, r0
 800a00c:	460f      	mov	r7, r1
 800a00e:	f7f6 fda3 	bl	8000b58 <__aeabi_dcmpgt>
 800a012:	b9c8      	cbnz	r0, 800a048 <_dtoa_r+0x6f8>
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	4630      	mov	r0, r6
 800a01a:	4639      	mov	r1, r7
 800a01c:	f7f6 fd74 	bl	8000b08 <__aeabi_dcmpeq>
 800a020:	b110      	cbz	r0, 800a028 <_dtoa_r+0x6d8>
 800a022:	9b02      	ldr	r3, [sp, #8]
 800a024:	07d9      	lsls	r1, r3, #31
 800a026:	d40f      	bmi.n	800a048 <_dtoa_r+0x6f8>
 800a028:	4620      	mov	r0, r4
 800a02a:	4659      	mov	r1, fp
 800a02c:	f000 fe6a 	bl	800ad04 <_Bfree>
 800a030:	2300      	movs	r3, #0
 800a032:	702b      	strb	r3, [r5, #0]
 800a034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a036:	f10a 0001 	add.w	r0, sl, #1
 800a03a:	6018      	str	r0, [r3, #0]
 800a03c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f43f acd8 	beq.w	80099f4 <_dtoa_r+0xa4>
 800a044:	601d      	str	r5, [r3, #0]
 800a046:	e4d5      	b.n	80099f4 <_dtoa_r+0xa4>
 800a048:	f8cd a01c 	str.w	sl, [sp, #28]
 800a04c:	462b      	mov	r3, r5
 800a04e:	461d      	mov	r5, r3
 800a050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a054:	2a39      	cmp	r2, #57	; 0x39
 800a056:	d108      	bne.n	800a06a <_dtoa_r+0x71a>
 800a058:	9a00      	ldr	r2, [sp, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d1f7      	bne.n	800a04e <_dtoa_r+0x6fe>
 800a05e:	9a07      	ldr	r2, [sp, #28]
 800a060:	9900      	ldr	r1, [sp, #0]
 800a062:	3201      	adds	r2, #1
 800a064:	9207      	str	r2, [sp, #28]
 800a066:	2230      	movs	r2, #48	; 0x30
 800a068:	700a      	strb	r2, [r1, #0]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	3201      	adds	r2, #1
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	e78c      	b.n	8009f8c <_dtoa_r+0x63c>
 800a072:	4b7f      	ldr	r3, [pc, #508]	; (800a270 <_dtoa_r+0x920>)
 800a074:	2200      	movs	r2, #0
 800a076:	f7f6 fadf 	bl	8000638 <__aeabi_dmul>
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	4606      	mov	r6, r0
 800a080:	460f      	mov	r7, r1
 800a082:	f7f6 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 800a086:	2800      	cmp	r0, #0
 800a088:	d09b      	beq.n	8009fc2 <_dtoa_r+0x672>
 800a08a:	e7cd      	b.n	800a028 <_dtoa_r+0x6d8>
 800a08c:	9a08      	ldr	r2, [sp, #32]
 800a08e:	2a00      	cmp	r2, #0
 800a090:	f000 80c4 	beq.w	800a21c <_dtoa_r+0x8cc>
 800a094:	9a05      	ldr	r2, [sp, #20]
 800a096:	2a01      	cmp	r2, #1
 800a098:	f300 80a8 	bgt.w	800a1ec <_dtoa_r+0x89c>
 800a09c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	f000 80a0 	beq.w	800a1e4 <_dtoa_r+0x894>
 800a0a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0a8:	9e06      	ldr	r6, [sp, #24]
 800a0aa:	4645      	mov	r5, r8
 800a0ac:	9a04      	ldr	r2, [sp, #16]
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	441a      	add	r2, r3
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4498      	add	r8, r3
 800a0b6:	9204      	str	r2, [sp, #16]
 800a0b8:	f000 ff2a 	bl	800af10 <__i2b>
 800a0bc:	4607      	mov	r7, r0
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	dd0b      	ble.n	800a0da <_dtoa_r+0x78a>
 800a0c2:	9b04      	ldr	r3, [sp, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dd08      	ble.n	800a0da <_dtoa_r+0x78a>
 800a0c8:	42ab      	cmp	r3, r5
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	bfa8      	it	ge
 800a0ce:	462b      	movge	r3, r5
 800a0d0:	eba8 0803 	sub.w	r8, r8, r3
 800a0d4:	1aed      	subs	r5, r5, r3
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	9304      	str	r3, [sp, #16]
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	b1fb      	cbz	r3, 800a11e <_dtoa_r+0x7ce>
 800a0de:	9b08      	ldr	r3, [sp, #32]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 809f 	beq.w	800a224 <_dtoa_r+0x8d4>
 800a0e6:	2e00      	cmp	r6, #0
 800a0e8:	dd11      	ble.n	800a10e <_dtoa_r+0x7be>
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 ffca 	bl	800b088 <__pow5mult>
 800a0f4:	465a      	mov	r2, fp
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f000 ff1e 	bl	800af3c <__multiply>
 800a100:	4659      	mov	r1, fp
 800a102:	9007      	str	r0, [sp, #28]
 800a104:	4620      	mov	r0, r4
 800a106:	f000 fdfd 	bl	800ad04 <_Bfree>
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	469b      	mov	fp, r3
 800a10e:	9b06      	ldr	r3, [sp, #24]
 800a110:	1b9a      	subs	r2, r3, r6
 800a112:	d004      	beq.n	800a11e <_dtoa_r+0x7ce>
 800a114:	4659      	mov	r1, fp
 800a116:	4620      	mov	r0, r4
 800a118:	f000 ffb6 	bl	800b088 <__pow5mult>
 800a11c:	4683      	mov	fp, r0
 800a11e:	2101      	movs	r1, #1
 800a120:	4620      	mov	r0, r4
 800a122:	f000 fef5 	bl	800af10 <__i2b>
 800a126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a128:	2b00      	cmp	r3, #0
 800a12a:	4606      	mov	r6, r0
 800a12c:	dd7c      	ble.n	800a228 <_dtoa_r+0x8d8>
 800a12e:	461a      	mov	r2, r3
 800a130:	4601      	mov	r1, r0
 800a132:	4620      	mov	r0, r4
 800a134:	f000 ffa8 	bl	800b088 <__pow5mult>
 800a138:	9b05      	ldr	r3, [sp, #20]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	4606      	mov	r6, r0
 800a13e:	dd76      	ble.n	800a22e <_dtoa_r+0x8de>
 800a140:	2300      	movs	r3, #0
 800a142:	9306      	str	r3, [sp, #24]
 800a144:	6933      	ldr	r3, [r6, #16]
 800a146:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a14a:	6918      	ldr	r0, [r3, #16]
 800a14c:	f000 fe90 	bl	800ae70 <__hi0bits>
 800a150:	f1c0 0020 	rsb	r0, r0, #32
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	4418      	add	r0, r3
 800a158:	f010 001f 	ands.w	r0, r0, #31
 800a15c:	f000 8086 	beq.w	800a26c <_dtoa_r+0x91c>
 800a160:	f1c0 0320 	rsb	r3, r0, #32
 800a164:	2b04      	cmp	r3, #4
 800a166:	dd7f      	ble.n	800a268 <_dtoa_r+0x918>
 800a168:	f1c0 001c 	rsb	r0, r0, #28
 800a16c:	9b04      	ldr	r3, [sp, #16]
 800a16e:	4403      	add	r3, r0
 800a170:	4480      	add	r8, r0
 800a172:	4405      	add	r5, r0
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	dd05      	ble.n	800a188 <_dtoa_r+0x838>
 800a17c:	4659      	mov	r1, fp
 800a17e:	4642      	mov	r2, r8
 800a180:	4620      	mov	r0, r4
 800a182:	f000 ffdb 	bl	800b13c <__lshift>
 800a186:	4683      	mov	fp, r0
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dd05      	ble.n	800a19a <_dtoa_r+0x84a>
 800a18e:	4631      	mov	r1, r6
 800a190:	461a      	mov	r2, r3
 800a192:	4620      	mov	r0, r4
 800a194:	f000 ffd2 	bl	800b13c <__lshift>
 800a198:	4606      	mov	r6, r0
 800a19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d069      	beq.n	800a274 <_dtoa_r+0x924>
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4658      	mov	r0, fp
 800a1a4:	f001 f836 	bl	800b214 <__mcmp>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	da63      	bge.n	800a274 <_dtoa_r+0x924>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	4659      	mov	r1, fp
 800a1b0:	220a      	movs	r2, #10
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fdc8 	bl	800ad48 <__multadd>
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1be:	4683      	mov	fp, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f000 818f 	beq.w	800a4e4 <_dtoa_r+0xb94>
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	220a      	movs	r2, #10
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fdbb 	bl	800ad48 <__multadd>
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	f300 808e 	bgt.w	800a2f8 <_dtoa_r+0x9a8>
 800a1dc:	9b05      	ldr	r3, [sp, #20]
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	dc50      	bgt.n	800a284 <_dtoa_r+0x934>
 800a1e2:	e089      	b.n	800a2f8 <_dtoa_r+0x9a8>
 800a1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1ea:	e75d      	b.n	800a0a8 <_dtoa_r+0x758>
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	1e5e      	subs	r6, r3, #1
 800a1f0:	9b06      	ldr	r3, [sp, #24]
 800a1f2:	42b3      	cmp	r3, r6
 800a1f4:	bfbf      	itttt	lt
 800a1f6:	9b06      	ldrlt	r3, [sp, #24]
 800a1f8:	9606      	strlt	r6, [sp, #24]
 800a1fa:	1af2      	sublt	r2, r6, r3
 800a1fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a1fe:	bfb6      	itet	lt
 800a200:	189b      	addlt	r3, r3, r2
 800a202:	1b9e      	subge	r6, r3, r6
 800a204:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a206:	9b01      	ldr	r3, [sp, #4]
 800a208:	bfb8      	it	lt
 800a20a:	2600      	movlt	r6, #0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfb5      	itete	lt
 800a210:	eba8 0503 	sublt.w	r5, r8, r3
 800a214:	9b01      	ldrge	r3, [sp, #4]
 800a216:	2300      	movlt	r3, #0
 800a218:	4645      	movge	r5, r8
 800a21a:	e747      	b.n	800a0ac <_dtoa_r+0x75c>
 800a21c:	9e06      	ldr	r6, [sp, #24]
 800a21e:	9f08      	ldr	r7, [sp, #32]
 800a220:	4645      	mov	r5, r8
 800a222:	e74c      	b.n	800a0be <_dtoa_r+0x76e>
 800a224:	9a06      	ldr	r2, [sp, #24]
 800a226:	e775      	b.n	800a114 <_dtoa_r+0x7c4>
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	dc18      	bgt.n	800a260 <_dtoa_r+0x910>
 800a22e:	9b02      	ldr	r3, [sp, #8]
 800a230:	b9b3      	cbnz	r3, 800a260 <_dtoa_r+0x910>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a238:	b9a3      	cbnz	r3, 800a264 <_dtoa_r+0x914>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a240:	0d1b      	lsrs	r3, r3, #20
 800a242:	051b      	lsls	r3, r3, #20
 800a244:	b12b      	cbz	r3, 800a252 <_dtoa_r+0x902>
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	3301      	adds	r3, #1
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	f108 0801 	add.w	r8, r8, #1
 800a250:	2301      	movs	r3, #1
 800a252:	9306      	str	r3, [sp, #24]
 800a254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a256:	2b00      	cmp	r3, #0
 800a258:	f47f af74 	bne.w	800a144 <_dtoa_r+0x7f4>
 800a25c:	2001      	movs	r0, #1
 800a25e:	e779      	b.n	800a154 <_dtoa_r+0x804>
 800a260:	2300      	movs	r3, #0
 800a262:	e7f6      	b.n	800a252 <_dtoa_r+0x902>
 800a264:	9b02      	ldr	r3, [sp, #8]
 800a266:	e7f4      	b.n	800a252 <_dtoa_r+0x902>
 800a268:	d085      	beq.n	800a176 <_dtoa_r+0x826>
 800a26a:	4618      	mov	r0, r3
 800a26c:	301c      	adds	r0, #28
 800a26e:	e77d      	b.n	800a16c <_dtoa_r+0x81c>
 800a270:	40240000 	.word	0x40240000
 800a274:	9b01      	ldr	r3, [sp, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	dc38      	bgt.n	800a2ec <_dtoa_r+0x99c>
 800a27a:	9b05      	ldr	r3, [sp, #20]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	dd35      	ble.n	800a2ec <_dtoa_r+0x99c>
 800a280:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a284:	f1b9 0f00 	cmp.w	r9, #0
 800a288:	d10d      	bne.n	800a2a6 <_dtoa_r+0x956>
 800a28a:	4631      	mov	r1, r6
 800a28c:	464b      	mov	r3, r9
 800a28e:	2205      	movs	r2, #5
 800a290:	4620      	mov	r0, r4
 800a292:	f000 fd59 	bl	800ad48 <__multadd>
 800a296:	4601      	mov	r1, r0
 800a298:	4606      	mov	r6, r0
 800a29a:	4658      	mov	r0, fp
 800a29c:	f000 ffba 	bl	800b214 <__mcmp>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f73f adbd 	bgt.w	8009e20 <_dtoa_r+0x4d0>
 800a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a8:	9d00      	ldr	r5, [sp, #0]
 800a2aa:	ea6f 0a03 	mvn.w	sl, r3
 800a2ae:	f04f 0800 	mov.w	r8, #0
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 fd25 	bl	800ad04 <_Bfree>
 800a2ba:	2f00      	cmp	r7, #0
 800a2bc:	f43f aeb4 	beq.w	800a028 <_dtoa_r+0x6d8>
 800a2c0:	f1b8 0f00 	cmp.w	r8, #0
 800a2c4:	d005      	beq.n	800a2d2 <_dtoa_r+0x982>
 800a2c6:	45b8      	cmp	r8, r7
 800a2c8:	d003      	beq.n	800a2d2 <_dtoa_r+0x982>
 800a2ca:	4641      	mov	r1, r8
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 fd19 	bl	800ad04 <_Bfree>
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fd15 	bl	800ad04 <_Bfree>
 800a2da:	e6a5      	b.n	800a028 <_dtoa_r+0x6d8>
 800a2dc:	2600      	movs	r6, #0
 800a2de:	4637      	mov	r7, r6
 800a2e0:	e7e1      	b.n	800a2a6 <_dtoa_r+0x956>
 800a2e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2e8:	4637      	mov	r7, r6
 800a2ea:	e599      	b.n	8009e20 <_dtoa_r+0x4d0>
 800a2ec:	9b08      	ldr	r3, [sp, #32]
 800a2ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80fd 	beq.w	800a4f2 <_dtoa_r+0xba2>
 800a2f8:	2d00      	cmp	r5, #0
 800a2fa:	dd05      	ble.n	800a308 <_dtoa_r+0x9b8>
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	462a      	mov	r2, r5
 800a300:	4620      	mov	r0, r4
 800a302:	f000 ff1b 	bl	800b13c <__lshift>
 800a306:	4607      	mov	r7, r0
 800a308:	9b06      	ldr	r3, [sp, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d05c      	beq.n	800a3c8 <_dtoa_r+0xa78>
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fcb7 	bl	800ac84 <_Balloc>
 800a316:	4605      	mov	r5, r0
 800a318:	b928      	cbnz	r0, 800a326 <_dtoa_r+0x9d6>
 800a31a:	4b80      	ldr	r3, [pc, #512]	; (800a51c <_dtoa_r+0xbcc>)
 800a31c:	4602      	mov	r2, r0
 800a31e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a322:	f7ff bb2e 	b.w	8009982 <_dtoa_r+0x32>
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	3202      	adds	r2, #2
 800a32a:	0092      	lsls	r2, r2, #2
 800a32c:	f107 010c 	add.w	r1, r7, #12
 800a330:	300c      	adds	r0, #12
 800a332:	f000 fc99 	bl	800ac68 <memcpy>
 800a336:	2201      	movs	r2, #1
 800a338:	4629      	mov	r1, r5
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fefe 	bl	800b13c <__lshift>
 800a340:	9b00      	ldr	r3, [sp, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	9b00      	ldr	r3, [sp, #0]
 800a348:	444b      	add	r3, r9
 800a34a:	9307      	str	r3, [sp, #28]
 800a34c:	9b02      	ldr	r3, [sp, #8]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	46b8      	mov	r8, r7
 800a354:	9306      	str	r3, [sp, #24]
 800a356:	4607      	mov	r7, r0
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	4631      	mov	r1, r6
 800a35c:	3b01      	subs	r3, #1
 800a35e:	4658      	mov	r0, fp
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	f7ff fa69 	bl	8009838 <quorem>
 800a366:	4603      	mov	r3, r0
 800a368:	3330      	adds	r3, #48	; 0x30
 800a36a:	9004      	str	r0, [sp, #16]
 800a36c:	4641      	mov	r1, r8
 800a36e:	4658      	mov	r0, fp
 800a370:	9308      	str	r3, [sp, #32]
 800a372:	f000 ff4f 	bl	800b214 <__mcmp>
 800a376:	463a      	mov	r2, r7
 800a378:	4681      	mov	r9, r0
 800a37a:	4631      	mov	r1, r6
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 ff65 	bl	800b24c <__mdiff>
 800a382:	68c2      	ldr	r2, [r0, #12]
 800a384:	9b08      	ldr	r3, [sp, #32]
 800a386:	4605      	mov	r5, r0
 800a388:	bb02      	cbnz	r2, 800a3cc <_dtoa_r+0xa7c>
 800a38a:	4601      	mov	r1, r0
 800a38c:	4658      	mov	r0, fp
 800a38e:	f000 ff41 	bl	800b214 <__mcmp>
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	4602      	mov	r2, r0
 800a396:	4629      	mov	r1, r5
 800a398:	4620      	mov	r0, r4
 800a39a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a39e:	f000 fcb1 	bl	800ad04 <_Bfree>
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3a6:	9d01      	ldr	r5, [sp, #4]
 800a3a8:	ea43 0102 	orr.w	r1, r3, r2
 800a3ac:	9b06      	ldr	r3, [sp, #24]
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	9b08      	ldr	r3, [sp, #32]
 800a3b2:	d10d      	bne.n	800a3d0 <_dtoa_r+0xa80>
 800a3b4:	2b39      	cmp	r3, #57	; 0x39
 800a3b6:	d029      	beq.n	800a40c <_dtoa_r+0xabc>
 800a3b8:	f1b9 0f00 	cmp.w	r9, #0
 800a3bc:	dd01      	ble.n	800a3c2 <_dtoa_r+0xa72>
 800a3be:	9b04      	ldr	r3, [sp, #16]
 800a3c0:	3331      	adds	r3, #49	; 0x31
 800a3c2:	9a02      	ldr	r2, [sp, #8]
 800a3c4:	7013      	strb	r3, [r2, #0]
 800a3c6:	e774      	b.n	800a2b2 <_dtoa_r+0x962>
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	e7b9      	b.n	800a340 <_dtoa_r+0x9f0>
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	e7e2      	b.n	800a396 <_dtoa_r+0xa46>
 800a3d0:	f1b9 0f00 	cmp.w	r9, #0
 800a3d4:	db06      	blt.n	800a3e4 <_dtoa_r+0xa94>
 800a3d6:	9905      	ldr	r1, [sp, #20]
 800a3d8:	ea41 0909 	orr.w	r9, r1, r9
 800a3dc:	9906      	ldr	r1, [sp, #24]
 800a3de:	ea59 0101 	orrs.w	r1, r9, r1
 800a3e2:	d120      	bne.n	800a426 <_dtoa_r+0xad6>
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	ddec      	ble.n	800a3c2 <_dtoa_r+0xa72>
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	f000 fea4 	bl	800b13c <__lshift>
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4683      	mov	fp, r0
 800a3f8:	f000 ff0c 	bl	800b214 <__mcmp>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	dc02      	bgt.n	800a408 <_dtoa_r+0xab8>
 800a402:	d1de      	bne.n	800a3c2 <_dtoa_r+0xa72>
 800a404:	07da      	lsls	r2, r3, #31
 800a406:	d5dc      	bpl.n	800a3c2 <_dtoa_r+0xa72>
 800a408:	2b39      	cmp	r3, #57	; 0x39
 800a40a:	d1d8      	bne.n	800a3be <_dtoa_r+0xa6e>
 800a40c:	9a02      	ldr	r2, [sp, #8]
 800a40e:	2339      	movs	r3, #57	; 0x39
 800a410:	7013      	strb	r3, [r2, #0]
 800a412:	462b      	mov	r3, r5
 800a414:	461d      	mov	r5, r3
 800a416:	3b01      	subs	r3, #1
 800a418:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a41c:	2a39      	cmp	r2, #57	; 0x39
 800a41e:	d050      	beq.n	800a4c2 <_dtoa_r+0xb72>
 800a420:	3201      	adds	r2, #1
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	e745      	b.n	800a2b2 <_dtoa_r+0x962>
 800a426:	2a00      	cmp	r2, #0
 800a428:	dd03      	ble.n	800a432 <_dtoa_r+0xae2>
 800a42a:	2b39      	cmp	r3, #57	; 0x39
 800a42c:	d0ee      	beq.n	800a40c <_dtoa_r+0xabc>
 800a42e:	3301      	adds	r3, #1
 800a430:	e7c7      	b.n	800a3c2 <_dtoa_r+0xa72>
 800a432:	9a01      	ldr	r2, [sp, #4]
 800a434:	9907      	ldr	r1, [sp, #28]
 800a436:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a43a:	428a      	cmp	r2, r1
 800a43c:	d02a      	beq.n	800a494 <_dtoa_r+0xb44>
 800a43e:	4659      	mov	r1, fp
 800a440:	2300      	movs	r3, #0
 800a442:	220a      	movs	r2, #10
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fc7f 	bl	800ad48 <__multadd>
 800a44a:	45b8      	cmp	r8, r7
 800a44c:	4683      	mov	fp, r0
 800a44e:	f04f 0300 	mov.w	r3, #0
 800a452:	f04f 020a 	mov.w	r2, #10
 800a456:	4641      	mov	r1, r8
 800a458:	4620      	mov	r0, r4
 800a45a:	d107      	bne.n	800a46c <_dtoa_r+0xb1c>
 800a45c:	f000 fc74 	bl	800ad48 <__multadd>
 800a460:	4680      	mov	r8, r0
 800a462:	4607      	mov	r7, r0
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	3301      	adds	r3, #1
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	e775      	b.n	800a358 <_dtoa_r+0xa08>
 800a46c:	f000 fc6c 	bl	800ad48 <__multadd>
 800a470:	4639      	mov	r1, r7
 800a472:	4680      	mov	r8, r0
 800a474:	2300      	movs	r3, #0
 800a476:	220a      	movs	r2, #10
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 fc65 	bl	800ad48 <__multadd>
 800a47e:	4607      	mov	r7, r0
 800a480:	e7f0      	b.n	800a464 <_dtoa_r+0xb14>
 800a482:	f1b9 0f00 	cmp.w	r9, #0
 800a486:	9a00      	ldr	r2, [sp, #0]
 800a488:	bfcc      	ite	gt
 800a48a:	464d      	movgt	r5, r9
 800a48c:	2501      	movle	r5, #1
 800a48e:	4415      	add	r5, r2
 800a490:	f04f 0800 	mov.w	r8, #0
 800a494:	4659      	mov	r1, fp
 800a496:	2201      	movs	r2, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	f000 fe4e 	bl	800b13c <__lshift>
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4683      	mov	fp, r0
 800a4a4:	f000 feb6 	bl	800b214 <__mcmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	dcb2      	bgt.n	800a412 <_dtoa_r+0xac2>
 800a4ac:	d102      	bne.n	800a4b4 <_dtoa_r+0xb64>
 800a4ae:	9b01      	ldr	r3, [sp, #4]
 800a4b0:	07db      	lsls	r3, r3, #31
 800a4b2:	d4ae      	bmi.n	800a412 <_dtoa_r+0xac2>
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	461d      	mov	r5, r3
 800a4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4bc:	2a30      	cmp	r2, #48	; 0x30
 800a4be:	d0fa      	beq.n	800a4b6 <_dtoa_r+0xb66>
 800a4c0:	e6f7      	b.n	800a2b2 <_dtoa_r+0x962>
 800a4c2:	9a00      	ldr	r2, [sp, #0]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d1a5      	bne.n	800a414 <_dtoa_r+0xac4>
 800a4c8:	f10a 0a01 	add.w	sl, sl, #1
 800a4cc:	2331      	movs	r3, #49	; 0x31
 800a4ce:	e779      	b.n	800a3c4 <_dtoa_r+0xa74>
 800a4d0:	4b13      	ldr	r3, [pc, #76]	; (800a520 <_dtoa_r+0xbd0>)
 800a4d2:	f7ff baaf 	b.w	8009a34 <_dtoa_r+0xe4>
 800a4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f47f aa86 	bne.w	80099ea <_dtoa_r+0x9a>
 800a4de:	4b11      	ldr	r3, [pc, #68]	; (800a524 <_dtoa_r+0xbd4>)
 800a4e0:	f7ff baa8 	b.w	8009a34 <_dtoa_r+0xe4>
 800a4e4:	f1b9 0f00 	cmp.w	r9, #0
 800a4e8:	dc03      	bgt.n	800a4f2 <_dtoa_r+0xba2>
 800a4ea:	9b05      	ldr	r3, [sp, #20]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	f73f aec9 	bgt.w	800a284 <_dtoa_r+0x934>
 800a4f2:	9d00      	ldr	r5, [sp, #0]
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4658      	mov	r0, fp
 800a4f8:	f7ff f99e 	bl	8009838 <quorem>
 800a4fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a500:	f805 3b01 	strb.w	r3, [r5], #1
 800a504:	9a00      	ldr	r2, [sp, #0]
 800a506:	1aaa      	subs	r2, r5, r2
 800a508:	4591      	cmp	r9, r2
 800a50a:	ddba      	ble.n	800a482 <_dtoa_r+0xb32>
 800a50c:	4659      	mov	r1, fp
 800a50e:	2300      	movs	r3, #0
 800a510:	220a      	movs	r2, #10
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fc18 	bl	800ad48 <__multadd>
 800a518:	4683      	mov	fp, r0
 800a51a:	e7eb      	b.n	800a4f4 <_dtoa_r+0xba4>
 800a51c:	0800cfa4 	.word	0x0800cfa4
 800a520:	0800d1a9 	.word	0x0800d1a9
 800a524:	0800cf21 	.word	0x0800cf21

0800a528 <rshift>:
 800a528:	6903      	ldr	r3, [r0, #16]
 800a52a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a532:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a536:	f100 0414 	add.w	r4, r0, #20
 800a53a:	dd45      	ble.n	800a5c8 <rshift+0xa0>
 800a53c:	f011 011f 	ands.w	r1, r1, #31
 800a540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a548:	d10c      	bne.n	800a564 <rshift+0x3c>
 800a54a:	f100 0710 	add.w	r7, r0, #16
 800a54e:	4629      	mov	r1, r5
 800a550:	42b1      	cmp	r1, r6
 800a552:	d334      	bcc.n	800a5be <rshift+0x96>
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	1eea      	subs	r2, r5, #3
 800a55a:	4296      	cmp	r6, r2
 800a55c:	bf38      	it	cc
 800a55e:	2300      	movcc	r3, #0
 800a560:	4423      	add	r3, r4
 800a562:	e015      	b.n	800a590 <rshift+0x68>
 800a564:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a568:	f1c1 0820 	rsb	r8, r1, #32
 800a56c:	40cf      	lsrs	r7, r1
 800a56e:	f105 0e04 	add.w	lr, r5, #4
 800a572:	46a1      	mov	r9, r4
 800a574:	4576      	cmp	r6, lr
 800a576:	46f4      	mov	ip, lr
 800a578:	d815      	bhi.n	800a5a6 <rshift+0x7e>
 800a57a:	1a9b      	subs	r3, r3, r2
 800a57c:	009a      	lsls	r2, r3, #2
 800a57e:	3a04      	subs	r2, #4
 800a580:	3501      	adds	r5, #1
 800a582:	42ae      	cmp	r6, r5
 800a584:	bf38      	it	cc
 800a586:	2200      	movcc	r2, #0
 800a588:	18a3      	adds	r3, r4, r2
 800a58a:	50a7      	str	r7, [r4, r2]
 800a58c:	b107      	cbz	r7, 800a590 <rshift+0x68>
 800a58e:	3304      	adds	r3, #4
 800a590:	1b1a      	subs	r2, r3, r4
 800a592:	42a3      	cmp	r3, r4
 800a594:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a598:	bf08      	it	eq
 800a59a:	2300      	moveq	r3, #0
 800a59c:	6102      	str	r2, [r0, #16]
 800a59e:	bf08      	it	eq
 800a5a0:	6143      	streq	r3, [r0, #20]
 800a5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5a6:	f8dc c000 	ldr.w	ip, [ip]
 800a5aa:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5ae:	ea4c 0707 	orr.w	r7, ip, r7
 800a5b2:	f849 7b04 	str.w	r7, [r9], #4
 800a5b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5ba:	40cf      	lsrs	r7, r1
 800a5bc:	e7da      	b.n	800a574 <rshift+0x4c>
 800a5be:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5c2:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5c6:	e7c3      	b.n	800a550 <rshift+0x28>
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	e7e1      	b.n	800a590 <rshift+0x68>

0800a5cc <__hexdig_fun>:
 800a5cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a5d0:	2b09      	cmp	r3, #9
 800a5d2:	d802      	bhi.n	800a5da <__hexdig_fun+0xe>
 800a5d4:	3820      	subs	r0, #32
 800a5d6:	b2c0      	uxtb	r0, r0
 800a5d8:	4770      	bx	lr
 800a5da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d801      	bhi.n	800a5e6 <__hexdig_fun+0x1a>
 800a5e2:	3847      	subs	r0, #71	; 0x47
 800a5e4:	e7f7      	b.n	800a5d6 <__hexdig_fun+0xa>
 800a5e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a5ea:	2b05      	cmp	r3, #5
 800a5ec:	d801      	bhi.n	800a5f2 <__hexdig_fun+0x26>
 800a5ee:	3827      	subs	r0, #39	; 0x27
 800a5f0:	e7f1      	b.n	800a5d6 <__hexdig_fun+0xa>
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <__gethex>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	ed2d 8b02 	vpush	{d8}
 800a600:	b089      	sub	sp, #36	; 0x24
 800a602:	ee08 0a10 	vmov	s16, r0
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	4bbc      	ldr	r3, [pc, #752]	; (800a8fc <__gethex+0x304>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	4618      	mov	r0, r3
 800a610:	468b      	mov	fp, r1
 800a612:	4690      	mov	r8, r2
 800a614:	f7f5 fdfc 	bl	8000210 <strlen>
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	f8db 2000 	ldr.w	r2, [fp]
 800a61e:	4403      	add	r3, r0
 800a620:	4682      	mov	sl, r0
 800a622:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	1c93      	adds	r3, r2, #2
 800a62a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a62e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a632:	32fe      	adds	r2, #254	; 0xfe
 800a634:	18d1      	adds	r1, r2, r3
 800a636:	461f      	mov	r7, r3
 800a638:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a63c:	9100      	str	r1, [sp, #0]
 800a63e:	2830      	cmp	r0, #48	; 0x30
 800a640:	d0f8      	beq.n	800a634 <__gethex+0x3c>
 800a642:	f7ff ffc3 	bl	800a5cc <__hexdig_fun>
 800a646:	4604      	mov	r4, r0
 800a648:	2800      	cmp	r0, #0
 800a64a:	d13a      	bne.n	800a6c2 <__gethex+0xca>
 800a64c:	9901      	ldr	r1, [sp, #4]
 800a64e:	4652      	mov	r2, sl
 800a650:	4638      	mov	r0, r7
 800a652:	f001 fd6b 	bl	800c12c <strncmp>
 800a656:	4605      	mov	r5, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d168      	bne.n	800a72e <__gethex+0x136>
 800a65c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a660:	eb07 060a 	add.w	r6, r7, sl
 800a664:	f7ff ffb2 	bl	800a5cc <__hexdig_fun>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d062      	beq.n	800a732 <__gethex+0x13a>
 800a66c:	4633      	mov	r3, r6
 800a66e:	7818      	ldrb	r0, [r3, #0]
 800a670:	2830      	cmp	r0, #48	; 0x30
 800a672:	461f      	mov	r7, r3
 800a674:	f103 0301 	add.w	r3, r3, #1
 800a678:	d0f9      	beq.n	800a66e <__gethex+0x76>
 800a67a:	f7ff ffa7 	bl	800a5cc <__hexdig_fun>
 800a67e:	2301      	movs	r3, #1
 800a680:	fab0 f480 	clz	r4, r0
 800a684:	0964      	lsrs	r4, r4, #5
 800a686:	4635      	mov	r5, r6
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	463a      	mov	r2, r7
 800a68c:	4616      	mov	r6, r2
 800a68e:	3201      	adds	r2, #1
 800a690:	7830      	ldrb	r0, [r6, #0]
 800a692:	f7ff ff9b 	bl	800a5cc <__hexdig_fun>
 800a696:	2800      	cmp	r0, #0
 800a698:	d1f8      	bne.n	800a68c <__gethex+0x94>
 800a69a:	9901      	ldr	r1, [sp, #4]
 800a69c:	4652      	mov	r2, sl
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f001 fd44 	bl	800c12c <strncmp>
 800a6a4:	b980      	cbnz	r0, 800a6c8 <__gethex+0xd0>
 800a6a6:	b94d      	cbnz	r5, 800a6bc <__gethex+0xc4>
 800a6a8:	eb06 050a 	add.w	r5, r6, sl
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4616      	mov	r6, r2
 800a6b0:	3201      	adds	r2, #1
 800a6b2:	7830      	ldrb	r0, [r6, #0]
 800a6b4:	f7ff ff8a 	bl	800a5cc <__hexdig_fun>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d1f8      	bne.n	800a6ae <__gethex+0xb6>
 800a6bc:	1bad      	subs	r5, r5, r6
 800a6be:	00ad      	lsls	r5, r5, #2
 800a6c0:	e004      	b.n	800a6cc <__gethex+0xd4>
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	4625      	mov	r5, r4
 800a6c6:	e7e0      	b.n	800a68a <__gethex+0x92>
 800a6c8:	2d00      	cmp	r5, #0
 800a6ca:	d1f7      	bne.n	800a6bc <__gethex+0xc4>
 800a6cc:	7833      	ldrb	r3, [r6, #0]
 800a6ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6d2:	2b50      	cmp	r3, #80	; 0x50
 800a6d4:	d13b      	bne.n	800a74e <__gethex+0x156>
 800a6d6:	7873      	ldrb	r3, [r6, #1]
 800a6d8:	2b2b      	cmp	r3, #43	; 0x2b
 800a6da:	d02c      	beq.n	800a736 <__gethex+0x13e>
 800a6dc:	2b2d      	cmp	r3, #45	; 0x2d
 800a6de:	d02e      	beq.n	800a73e <__gethex+0x146>
 800a6e0:	1c71      	adds	r1, r6, #1
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	7808      	ldrb	r0, [r1, #0]
 800a6e8:	f7ff ff70 	bl	800a5cc <__hexdig_fun>
 800a6ec:	1e43      	subs	r3, r0, #1
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b18      	cmp	r3, #24
 800a6f2:	d82c      	bhi.n	800a74e <__gethex+0x156>
 800a6f4:	f1a0 0210 	sub.w	r2, r0, #16
 800a6f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6fc:	f7ff ff66 	bl	800a5cc <__hexdig_fun>
 800a700:	1e43      	subs	r3, r0, #1
 800a702:	b2db      	uxtb	r3, r3
 800a704:	2b18      	cmp	r3, #24
 800a706:	d91d      	bls.n	800a744 <__gethex+0x14c>
 800a708:	f1b9 0f00 	cmp.w	r9, #0
 800a70c:	d000      	beq.n	800a710 <__gethex+0x118>
 800a70e:	4252      	negs	r2, r2
 800a710:	4415      	add	r5, r2
 800a712:	f8cb 1000 	str.w	r1, [fp]
 800a716:	b1e4      	cbz	r4, 800a752 <__gethex+0x15a>
 800a718:	9b00      	ldr	r3, [sp, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bf14      	ite	ne
 800a71e:	2700      	movne	r7, #0
 800a720:	2706      	moveq	r7, #6
 800a722:	4638      	mov	r0, r7
 800a724:	b009      	add	sp, #36	; 0x24
 800a726:	ecbd 8b02 	vpop	{d8}
 800a72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a72e:	463e      	mov	r6, r7
 800a730:	4625      	mov	r5, r4
 800a732:	2401      	movs	r4, #1
 800a734:	e7ca      	b.n	800a6cc <__gethex+0xd4>
 800a736:	f04f 0900 	mov.w	r9, #0
 800a73a:	1cb1      	adds	r1, r6, #2
 800a73c:	e7d3      	b.n	800a6e6 <__gethex+0xee>
 800a73e:	f04f 0901 	mov.w	r9, #1
 800a742:	e7fa      	b.n	800a73a <__gethex+0x142>
 800a744:	230a      	movs	r3, #10
 800a746:	fb03 0202 	mla	r2, r3, r2, r0
 800a74a:	3a10      	subs	r2, #16
 800a74c:	e7d4      	b.n	800a6f8 <__gethex+0x100>
 800a74e:	4631      	mov	r1, r6
 800a750:	e7df      	b.n	800a712 <__gethex+0x11a>
 800a752:	1bf3      	subs	r3, r6, r7
 800a754:	3b01      	subs	r3, #1
 800a756:	4621      	mov	r1, r4
 800a758:	2b07      	cmp	r3, #7
 800a75a:	dc0b      	bgt.n	800a774 <__gethex+0x17c>
 800a75c:	ee18 0a10 	vmov	r0, s16
 800a760:	f000 fa90 	bl	800ac84 <_Balloc>
 800a764:	4604      	mov	r4, r0
 800a766:	b940      	cbnz	r0, 800a77a <__gethex+0x182>
 800a768:	4b65      	ldr	r3, [pc, #404]	; (800a900 <__gethex+0x308>)
 800a76a:	4602      	mov	r2, r0
 800a76c:	21de      	movs	r1, #222	; 0xde
 800a76e:	4865      	ldr	r0, [pc, #404]	; (800a904 <__gethex+0x30c>)
 800a770:	f001 fdb4 	bl	800c2dc <__assert_func>
 800a774:	3101      	adds	r1, #1
 800a776:	105b      	asrs	r3, r3, #1
 800a778:	e7ee      	b.n	800a758 <__gethex+0x160>
 800a77a:	f100 0914 	add.w	r9, r0, #20
 800a77e:	f04f 0b00 	mov.w	fp, #0
 800a782:	f1ca 0301 	rsb	r3, sl, #1
 800a786:	f8cd 9008 	str.w	r9, [sp, #8]
 800a78a:	f8cd b000 	str.w	fp, [sp]
 800a78e:	9306      	str	r3, [sp, #24]
 800a790:	42b7      	cmp	r7, r6
 800a792:	d340      	bcc.n	800a816 <__gethex+0x21e>
 800a794:	9802      	ldr	r0, [sp, #8]
 800a796:	9b00      	ldr	r3, [sp, #0]
 800a798:	f840 3b04 	str.w	r3, [r0], #4
 800a79c:	eba0 0009 	sub.w	r0, r0, r9
 800a7a0:	1080      	asrs	r0, r0, #2
 800a7a2:	0146      	lsls	r6, r0, #5
 800a7a4:	6120      	str	r0, [r4, #16]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fb62 	bl	800ae70 <__hi0bits>
 800a7ac:	1a30      	subs	r0, r6, r0
 800a7ae:	f8d8 6000 	ldr.w	r6, [r8]
 800a7b2:	42b0      	cmp	r0, r6
 800a7b4:	dd63      	ble.n	800a87e <__gethex+0x286>
 800a7b6:	1b87      	subs	r7, r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fefc 	bl	800b5b8 <__any_on>
 800a7c0:	4682      	mov	sl, r0
 800a7c2:	b1a8      	cbz	r0, 800a7f0 <__gethex+0x1f8>
 800a7c4:	1e7b      	subs	r3, r7, #1
 800a7c6:	1159      	asrs	r1, r3, #5
 800a7c8:	f003 021f 	and.w	r2, r3, #31
 800a7cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a7d0:	f04f 0a01 	mov.w	sl, #1
 800a7d4:	fa0a f202 	lsl.w	r2, sl, r2
 800a7d8:	420a      	tst	r2, r1
 800a7da:	d009      	beq.n	800a7f0 <__gethex+0x1f8>
 800a7dc:	4553      	cmp	r3, sl
 800a7de:	dd05      	ble.n	800a7ec <__gethex+0x1f4>
 800a7e0:	1eb9      	subs	r1, r7, #2
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 fee8 	bl	800b5b8 <__any_on>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d145      	bne.n	800a878 <__gethex+0x280>
 800a7ec:	f04f 0a02 	mov.w	sl, #2
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff fe98 	bl	800a528 <rshift>
 800a7f8:	443d      	add	r5, r7
 800a7fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7fe:	42ab      	cmp	r3, r5
 800a800:	da4c      	bge.n	800a89c <__gethex+0x2a4>
 800a802:	ee18 0a10 	vmov	r0, s16
 800a806:	4621      	mov	r1, r4
 800a808:	f000 fa7c 	bl	800ad04 <_Bfree>
 800a80c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a80e:	2300      	movs	r3, #0
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	27a3      	movs	r7, #163	; 0xa3
 800a814:	e785      	b.n	800a722 <__gethex+0x12a>
 800a816:	1e73      	subs	r3, r6, #1
 800a818:	9a05      	ldr	r2, [sp, #20]
 800a81a:	9303      	str	r3, [sp, #12]
 800a81c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a820:	4293      	cmp	r3, r2
 800a822:	d019      	beq.n	800a858 <__gethex+0x260>
 800a824:	f1bb 0f20 	cmp.w	fp, #32
 800a828:	d107      	bne.n	800a83a <__gethex+0x242>
 800a82a:	9b02      	ldr	r3, [sp, #8]
 800a82c:	9a00      	ldr	r2, [sp, #0]
 800a82e:	f843 2b04 	str.w	r2, [r3], #4
 800a832:	9302      	str	r3, [sp, #8]
 800a834:	2300      	movs	r3, #0
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	469b      	mov	fp, r3
 800a83a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a83e:	f7ff fec5 	bl	800a5cc <__hexdig_fun>
 800a842:	9b00      	ldr	r3, [sp, #0]
 800a844:	f000 000f 	and.w	r0, r0, #15
 800a848:	fa00 f00b 	lsl.w	r0, r0, fp
 800a84c:	4303      	orrs	r3, r0
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	f10b 0b04 	add.w	fp, fp, #4
 800a854:	9b03      	ldr	r3, [sp, #12]
 800a856:	e00d      	b.n	800a874 <__gethex+0x27c>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	9a06      	ldr	r2, [sp, #24]
 800a85c:	4413      	add	r3, r2
 800a85e:	42bb      	cmp	r3, r7
 800a860:	d3e0      	bcc.n	800a824 <__gethex+0x22c>
 800a862:	4618      	mov	r0, r3
 800a864:	9901      	ldr	r1, [sp, #4]
 800a866:	9307      	str	r3, [sp, #28]
 800a868:	4652      	mov	r2, sl
 800a86a:	f001 fc5f 	bl	800c12c <strncmp>
 800a86e:	9b07      	ldr	r3, [sp, #28]
 800a870:	2800      	cmp	r0, #0
 800a872:	d1d7      	bne.n	800a824 <__gethex+0x22c>
 800a874:	461e      	mov	r6, r3
 800a876:	e78b      	b.n	800a790 <__gethex+0x198>
 800a878:	f04f 0a03 	mov.w	sl, #3
 800a87c:	e7b8      	b.n	800a7f0 <__gethex+0x1f8>
 800a87e:	da0a      	bge.n	800a896 <__gethex+0x29e>
 800a880:	1a37      	subs	r7, r6, r0
 800a882:	4621      	mov	r1, r4
 800a884:	ee18 0a10 	vmov	r0, s16
 800a888:	463a      	mov	r2, r7
 800a88a:	f000 fc57 	bl	800b13c <__lshift>
 800a88e:	1bed      	subs	r5, r5, r7
 800a890:	4604      	mov	r4, r0
 800a892:	f100 0914 	add.w	r9, r0, #20
 800a896:	f04f 0a00 	mov.w	sl, #0
 800a89a:	e7ae      	b.n	800a7fa <__gethex+0x202>
 800a89c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a8a0:	42a8      	cmp	r0, r5
 800a8a2:	dd72      	ble.n	800a98a <__gethex+0x392>
 800a8a4:	1b45      	subs	r5, r0, r5
 800a8a6:	42ae      	cmp	r6, r5
 800a8a8:	dc36      	bgt.n	800a918 <__gethex+0x320>
 800a8aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d02a      	beq.n	800a908 <__gethex+0x310>
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d02c      	beq.n	800a910 <__gethex+0x318>
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d115      	bne.n	800a8e6 <__gethex+0x2ee>
 800a8ba:	42ae      	cmp	r6, r5
 800a8bc:	d113      	bne.n	800a8e6 <__gethex+0x2ee>
 800a8be:	2e01      	cmp	r6, #1
 800a8c0:	d10b      	bne.n	800a8da <__gethex+0x2e2>
 800a8c2:	9a04      	ldr	r2, [sp, #16]
 800a8c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	6123      	str	r3, [r4, #16]
 800a8ce:	f8c9 3000 	str.w	r3, [r9]
 800a8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8d4:	2762      	movs	r7, #98	; 0x62
 800a8d6:	601c      	str	r4, [r3, #0]
 800a8d8:	e723      	b.n	800a722 <__gethex+0x12a>
 800a8da:	1e71      	subs	r1, r6, #1
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fe6b 	bl	800b5b8 <__any_on>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d1ed      	bne.n	800a8c2 <__gethex+0x2ca>
 800a8e6:	ee18 0a10 	vmov	r0, s16
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	f000 fa0a 	bl	800ad04 <_Bfree>
 800a8f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	2750      	movs	r7, #80	; 0x50
 800a8f8:	e713      	b.n	800a722 <__gethex+0x12a>
 800a8fa:	bf00      	nop
 800a8fc:	0800d020 	.word	0x0800d020
 800a900:	0800cfa4 	.word	0x0800cfa4
 800a904:	0800cfb5 	.word	0x0800cfb5
 800a908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1eb      	bne.n	800a8e6 <__gethex+0x2ee>
 800a90e:	e7d8      	b.n	800a8c2 <__gethex+0x2ca>
 800a910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1d5      	bne.n	800a8c2 <__gethex+0x2ca>
 800a916:	e7e6      	b.n	800a8e6 <__gethex+0x2ee>
 800a918:	1e6f      	subs	r7, r5, #1
 800a91a:	f1ba 0f00 	cmp.w	sl, #0
 800a91e:	d131      	bne.n	800a984 <__gethex+0x38c>
 800a920:	b127      	cbz	r7, 800a92c <__gethex+0x334>
 800a922:	4639      	mov	r1, r7
 800a924:	4620      	mov	r0, r4
 800a926:	f000 fe47 	bl	800b5b8 <__any_on>
 800a92a:	4682      	mov	sl, r0
 800a92c:	117b      	asrs	r3, r7, #5
 800a92e:	2101      	movs	r1, #1
 800a930:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a934:	f007 071f 	and.w	r7, r7, #31
 800a938:	fa01 f707 	lsl.w	r7, r1, r7
 800a93c:	421f      	tst	r7, r3
 800a93e:	4629      	mov	r1, r5
 800a940:	4620      	mov	r0, r4
 800a942:	bf18      	it	ne
 800a944:	f04a 0a02 	orrne.w	sl, sl, #2
 800a948:	1b76      	subs	r6, r6, r5
 800a94a:	f7ff fded 	bl	800a528 <rshift>
 800a94e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a952:	2702      	movs	r7, #2
 800a954:	f1ba 0f00 	cmp.w	sl, #0
 800a958:	d048      	beq.n	800a9ec <__gethex+0x3f4>
 800a95a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d015      	beq.n	800a98e <__gethex+0x396>
 800a962:	2b03      	cmp	r3, #3
 800a964:	d017      	beq.n	800a996 <__gethex+0x39e>
 800a966:	2b01      	cmp	r3, #1
 800a968:	d109      	bne.n	800a97e <__gethex+0x386>
 800a96a:	f01a 0f02 	tst.w	sl, #2
 800a96e:	d006      	beq.n	800a97e <__gethex+0x386>
 800a970:	f8d9 0000 	ldr.w	r0, [r9]
 800a974:	ea4a 0a00 	orr.w	sl, sl, r0
 800a978:	f01a 0f01 	tst.w	sl, #1
 800a97c:	d10e      	bne.n	800a99c <__gethex+0x3a4>
 800a97e:	f047 0710 	orr.w	r7, r7, #16
 800a982:	e033      	b.n	800a9ec <__gethex+0x3f4>
 800a984:	f04f 0a01 	mov.w	sl, #1
 800a988:	e7d0      	b.n	800a92c <__gethex+0x334>
 800a98a:	2701      	movs	r7, #1
 800a98c:	e7e2      	b.n	800a954 <__gethex+0x35c>
 800a98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a990:	f1c3 0301 	rsb	r3, r3, #1
 800a994:	9315      	str	r3, [sp, #84]	; 0x54
 800a996:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0f0      	beq.n	800a97e <__gethex+0x386>
 800a99c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a9a0:	f104 0314 	add.w	r3, r4, #20
 800a9a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a9a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a9ac:	f04f 0c00 	mov.w	ip, #0
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a9ba:	d01c      	beq.n	800a9f6 <__gethex+0x3fe>
 800a9bc:	3201      	adds	r2, #1
 800a9be:	6002      	str	r2, [r0, #0]
 800a9c0:	2f02      	cmp	r7, #2
 800a9c2:	f104 0314 	add.w	r3, r4, #20
 800a9c6:	d13f      	bne.n	800aa48 <__gethex+0x450>
 800a9c8:	f8d8 2000 	ldr.w	r2, [r8]
 800a9cc:	3a01      	subs	r2, #1
 800a9ce:	42b2      	cmp	r2, r6
 800a9d0:	d10a      	bne.n	800a9e8 <__gethex+0x3f0>
 800a9d2:	1171      	asrs	r1, r6, #5
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9da:	f006 061f 	and.w	r6, r6, #31
 800a9de:	fa02 f606 	lsl.w	r6, r2, r6
 800a9e2:	421e      	tst	r6, r3
 800a9e4:	bf18      	it	ne
 800a9e6:	4617      	movne	r7, r2
 800a9e8:	f047 0720 	orr.w	r7, r7, #32
 800a9ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ee:	601c      	str	r4, [r3, #0]
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	601d      	str	r5, [r3, #0]
 800a9f4:	e695      	b.n	800a722 <__gethex+0x12a>
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9fc:	d8d8      	bhi.n	800a9b0 <__gethex+0x3b8>
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	459b      	cmp	fp, r3
 800aa02:	db19      	blt.n	800aa38 <__gethex+0x440>
 800aa04:	6861      	ldr	r1, [r4, #4]
 800aa06:	ee18 0a10 	vmov	r0, s16
 800aa0a:	3101      	adds	r1, #1
 800aa0c:	f000 f93a 	bl	800ac84 <_Balloc>
 800aa10:	4681      	mov	r9, r0
 800aa12:	b918      	cbnz	r0, 800aa1c <__gethex+0x424>
 800aa14:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <__gethex+0x488>)
 800aa16:	4602      	mov	r2, r0
 800aa18:	2184      	movs	r1, #132	; 0x84
 800aa1a:	e6a8      	b.n	800a76e <__gethex+0x176>
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	3202      	adds	r2, #2
 800aa20:	f104 010c 	add.w	r1, r4, #12
 800aa24:	0092      	lsls	r2, r2, #2
 800aa26:	300c      	adds	r0, #12
 800aa28:	f000 f91e 	bl	800ac68 <memcpy>
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	ee18 0a10 	vmov	r0, s16
 800aa32:	f000 f967 	bl	800ad04 <_Bfree>
 800aa36:	464c      	mov	r4, r9
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa40:	6122      	str	r2, [r4, #16]
 800aa42:	2201      	movs	r2, #1
 800aa44:	615a      	str	r2, [r3, #20]
 800aa46:	e7bb      	b.n	800a9c0 <__gethex+0x3c8>
 800aa48:	6922      	ldr	r2, [r4, #16]
 800aa4a:	455a      	cmp	r2, fp
 800aa4c:	dd0b      	ble.n	800aa66 <__gethex+0x46e>
 800aa4e:	2101      	movs	r1, #1
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7ff fd69 	bl	800a528 <rshift>
 800aa56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa5a:	3501      	adds	r5, #1
 800aa5c:	42ab      	cmp	r3, r5
 800aa5e:	f6ff aed0 	blt.w	800a802 <__gethex+0x20a>
 800aa62:	2701      	movs	r7, #1
 800aa64:	e7c0      	b.n	800a9e8 <__gethex+0x3f0>
 800aa66:	f016 061f 	ands.w	r6, r6, #31
 800aa6a:	d0fa      	beq.n	800aa62 <__gethex+0x46a>
 800aa6c:	449a      	add	sl, r3
 800aa6e:	f1c6 0620 	rsb	r6, r6, #32
 800aa72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800aa76:	f000 f9fb 	bl	800ae70 <__hi0bits>
 800aa7a:	42b0      	cmp	r0, r6
 800aa7c:	dbe7      	blt.n	800aa4e <__gethex+0x456>
 800aa7e:	e7f0      	b.n	800aa62 <__gethex+0x46a>
 800aa80:	0800cfa4 	.word	0x0800cfa4

0800aa84 <L_shift>:
 800aa84:	f1c2 0208 	rsb	r2, r2, #8
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	f1c2 0620 	rsb	r6, r2, #32
 800aa90:	6843      	ldr	r3, [r0, #4]
 800aa92:	6804      	ldr	r4, [r0, #0]
 800aa94:	fa03 f506 	lsl.w	r5, r3, r6
 800aa98:	432c      	orrs	r4, r5
 800aa9a:	40d3      	lsrs	r3, r2
 800aa9c:	6004      	str	r4, [r0, #0]
 800aa9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800aaa2:	4288      	cmp	r0, r1
 800aaa4:	d3f4      	bcc.n	800aa90 <L_shift+0xc>
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}

0800aaa8 <__match>:
 800aaa8:	b530      	push	{r4, r5, lr}
 800aaaa:	6803      	ldr	r3, [r0, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aab2:	b914      	cbnz	r4, 800aaba <__match+0x12>
 800aab4:	6003      	str	r3, [r0, #0]
 800aab6:	2001      	movs	r0, #1
 800aab8:	bd30      	pop	{r4, r5, pc}
 800aaba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aabe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aac2:	2d19      	cmp	r5, #25
 800aac4:	bf98      	it	ls
 800aac6:	3220      	addls	r2, #32
 800aac8:	42a2      	cmp	r2, r4
 800aaca:	d0f0      	beq.n	800aaae <__match+0x6>
 800aacc:	2000      	movs	r0, #0
 800aace:	e7f3      	b.n	800aab8 <__match+0x10>

0800aad0 <__hexnan>:
 800aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	680b      	ldr	r3, [r1, #0]
 800aad6:	6801      	ldr	r1, [r0, #0]
 800aad8:	115e      	asrs	r6, r3, #5
 800aada:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aade:	f013 031f 	ands.w	r3, r3, #31
 800aae2:	b087      	sub	sp, #28
 800aae4:	bf18      	it	ne
 800aae6:	3604      	addne	r6, #4
 800aae8:	2500      	movs	r5, #0
 800aaea:	1f37      	subs	r7, r6, #4
 800aaec:	4682      	mov	sl, r0
 800aaee:	4690      	mov	r8, r2
 800aaf0:	9301      	str	r3, [sp, #4]
 800aaf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aaf6:	46b9      	mov	r9, r7
 800aaf8:	463c      	mov	r4, r7
 800aafa:	9502      	str	r5, [sp, #8]
 800aafc:	46ab      	mov	fp, r5
 800aafe:	784a      	ldrb	r2, [r1, #1]
 800ab00:	1c4b      	adds	r3, r1, #1
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	b342      	cbz	r2, 800ab58 <__hexnan+0x88>
 800ab06:	4610      	mov	r0, r2
 800ab08:	9105      	str	r1, [sp, #20]
 800ab0a:	9204      	str	r2, [sp, #16]
 800ab0c:	f7ff fd5e 	bl	800a5cc <__hexdig_fun>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d14f      	bne.n	800abb4 <__hexnan+0xe4>
 800ab14:	9a04      	ldr	r2, [sp, #16]
 800ab16:	9905      	ldr	r1, [sp, #20]
 800ab18:	2a20      	cmp	r2, #32
 800ab1a:	d818      	bhi.n	800ab4e <__hexnan+0x7e>
 800ab1c:	9b02      	ldr	r3, [sp, #8]
 800ab1e:	459b      	cmp	fp, r3
 800ab20:	dd13      	ble.n	800ab4a <__hexnan+0x7a>
 800ab22:	454c      	cmp	r4, r9
 800ab24:	d206      	bcs.n	800ab34 <__hexnan+0x64>
 800ab26:	2d07      	cmp	r5, #7
 800ab28:	dc04      	bgt.n	800ab34 <__hexnan+0x64>
 800ab2a:	462a      	mov	r2, r5
 800ab2c:	4649      	mov	r1, r9
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f7ff ffa8 	bl	800aa84 <L_shift>
 800ab34:	4544      	cmp	r4, r8
 800ab36:	d950      	bls.n	800abda <__hexnan+0x10a>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ab3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab42:	f8cd b008 	str.w	fp, [sp, #8]
 800ab46:	464c      	mov	r4, r9
 800ab48:	461d      	mov	r5, r3
 800ab4a:	9903      	ldr	r1, [sp, #12]
 800ab4c:	e7d7      	b.n	800aafe <__hexnan+0x2e>
 800ab4e:	2a29      	cmp	r2, #41	; 0x29
 800ab50:	d156      	bne.n	800ac00 <__hexnan+0x130>
 800ab52:	3102      	adds	r1, #2
 800ab54:	f8ca 1000 	str.w	r1, [sl]
 800ab58:	f1bb 0f00 	cmp.w	fp, #0
 800ab5c:	d050      	beq.n	800ac00 <__hexnan+0x130>
 800ab5e:	454c      	cmp	r4, r9
 800ab60:	d206      	bcs.n	800ab70 <__hexnan+0xa0>
 800ab62:	2d07      	cmp	r5, #7
 800ab64:	dc04      	bgt.n	800ab70 <__hexnan+0xa0>
 800ab66:	462a      	mov	r2, r5
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff ff8a 	bl	800aa84 <L_shift>
 800ab70:	4544      	cmp	r4, r8
 800ab72:	d934      	bls.n	800abde <__hexnan+0x10e>
 800ab74:	f1a8 0204 	sub.w	r2, r8, #4
 800ab78:	4623      	mov	r3, r4
 800ab7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab82:	429f      	cmp	r7, r3
 800ab84:	d2f9      	bcs.n	800ab7a <__hexnan+0xaa>
 800ab86:	1b3b      	subs	r3, r7, r4
 800ab88:	f023 0303 	bic.w	r3, r3, #3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	3401      	adds	r4, #1
 800ab90:	3e03      	subs	r6, #3
 800ab92:	42b4      	cmp	r4, r6
 800ab94:	bf88      	it	hi
 800ab96:	2304      	movhi	r3, #4
 800ab98:	4443      	add	r3, r8
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f843 2b04 	str.w	r2, [r3], #4
 800aba0:	429f      	cmp	r7, r3
 800aba2:	d2fb      	bcs.n	800ab9c <__hexnan+0xcc>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	b91b      	cbnz	r3, 800abb0 <__hexnan+0xe0>
 800aba8:	4547      	cmp	r7, r8
 800abaa:	d127      	bne.n	800abfc <__hexnan+0x12c>
 800abac:	2301      	movs	r3, #1
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	2005      	movs	r0, #5
 800abb2:	e026      	b.n	800ac02 <__hexnan+0x132>
 800abb4:	3501      	adds	r5, #1
 800abb6:	2d08      	cmp	r5, #8
 800abb8:	f10b 0b01 	add.w	fp, fp, #1
 800abbc:	dd06      	ble.n	800abcc <__hexnan+0xfc>
 800abbe:	4544      	cmp	r4, r8
 800abc0:	d9c3      	bls.n	800ab4a <__hexnan+0x7a>
 800abc2:	2300      	movs	r3, #0
 800abc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800abc8:	2501      	movs	r5, #1
 800abca:	3c04      	subs	r4, #4
 800abcc:	6822      	ldr	r2, [r4, #0]
 800abce:	f000 000f 	and.w	r0, r0, #15
 800abd2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800abd6:	6022      	str	r2, [r4, #0]
 800abd8:	e7b7      	b.n	800ab4a <__hexnan+0x7a>
 800abda:	2508      	movs	r5, #8
 800abdc:	e7b5      	b.n	800ab4a <__hexnan+0x7a>
 800abde:	9b01      	ldr	r3, [sp, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0df      	beq.n	800aba4 <__hexnan+0xd4>
 800abe4:	f04f 32ff 	mov.w	r2, #4294967295
 800abe8:	f1c3 0320 	rsb	r3, r3, #32
 800abec:	fa22 f303 	lsr.w	r3, r2, r3
 800abf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abf4:	401a      	ands	r2, r3
 800abf6:	f846 2c04 	str.w	r2, [r6, #-4]
 800abfa:	e7d3      	b.n	800aba4 <__hexnan+0xd4>
 800abfc:	3f04      	subs	r7, #4
 800abfe:	e7d1      	b.n	800aba4 <__hexnan+0xd4>
 800ac00:	2004      	movs	r0, #4
 800ac02:	b007      	add	sp, #28
 800ac04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac08 <_localeconv_r>:
 800ac08:	4800      	ldr	r0, [pc, #0]	; (800ac0c <_localeconv_r+0x4>)
 800ac0a:	4770      	bx	lr
 800ac0c:	200001c8 	.word	0x200001c8

0800ac10 <_lseek_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d07      	ldr	r5, [pc, #28]	; (800ac30 <_lseek_r+0x20>)
 800ac14:	4604      	mov	r4, r0
 800ac16:	4608      	mov	r0, r1
 800ac18:	4611      	mov	r1, r2
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	602a      	str	r2, [r5, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f7f7 fa2e 	bl	8002080 <_lseek>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_lseek_r+0x1e>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_lseek_r+0x1e>
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	2000084c 	.word	0x2000084c

0800ac34 <malloc>:
 800ac34:	4b02      	ldr	r3, [pc, #8]	; (800ac40 <malloc+0xc>)
 800ac36:	4601      	mov	r1, r0
 800ac38:	6818      	ldr	r0, [r3, #0]
 800ac3a:	f000 bd3d 	b.w	800b6b8 <_malloc_r>
 800ac3e:	bf00      	nop
 800ac40:	20000070 	.word	0x20000070

0800ac44 <__ascii_mbtowc>:
 800ac44:	b082      	sub	sp, #8
 800ac46:	b901      	cbnz	r1, 800ac4a <__ascii_mbtowc+0x6>
 800ac48:	a901      	add	r1, sp, #4
 800ac4a:	b142      	cbz	r2, 800ac5e <__ascii_mbtowc+0x1a>
 800ac4c:	b14b      	cbz	r3, 800ac62 <__ascii_mbtowc+0x1e>
 800ac4e:	7813      	ldrb	r3, [r2, #0]
 800ac50:	600b      	str	r3, [r1, #0]
 800ac52:	7812      	ldrb	r2, [r2, #0]
 800ac54:	1e10      	subs	r0, r2, #0
 800ac56:	bf18      	it	ne
 800ac58:	2001      	movne	r0, #1
 800ac5a:	b002      	add	sp, #8
 800ac5c:	4770      	bx	lr
 800ac5e:	4610      	mov	r0, r2
 800ac60:	e7fb      	b.n	800ac5a <__ascii_mbtowc+0x16>
 800ac62:	f06f 0001 	mvn.w	r0, #1
 800ac66:	e7f8      	b.n	800ac5a <__ascii_mbtowc+0x16>

0800ac68 <memcpy>:
 800ac68:	440a      	add	r2, r1
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac70:	d100      	bne.n	800ac74 <memcpy+0xc>
 800ac72:	4770      	bx	lr
 800ac74:	b510      	push	{r4, lr}
 800ac76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac7e:	4291      	cmp	r1, r2
 800ac80:	d1f9      	bne.n	800ac76 <memcpy+0xe>
 800ac82:	bd10      	pop	{r4, pc}

0800ac84 <_Balloc>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac88:	4604      	mov	r4, r0
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	b976      	cbnz	r6, 800acac <_Balloc+0x28>
 800ac8e:	2010      	movs	r0, #16
 800ac90:	f7ff ffd0 	bl	800ac34 <malloc>
 800ac94:	4602      	mov	r2, r0
 800ac96:	6260      	str	r0, [r4, #36]	; 0x24
 800ac98:	b920      	cbnz	r0, 800aca4 <_Balloc+0x20>
 800ac9a:	4b18      	ldr	r3, [pc, #96]	; (800acfc <_Balloc+0x78>)
 800ac9c:	4818      	ldr	r0, [pc, #96]	; (800ad00 <_Balloc+0x7c>)
 800ac9e:	2166      	movs	r1, #102	; 0x66
 800aca0:	f001 fb1c 	bl	800c2dc <__assert_func>
 800aca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aca8:	6006      	str	r6, [r0, #0]
 800acaa:	60c6      	str	r6, [r0, #12]
 800acac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800acae:	68f3      	ldr	r3, [r6, #12]
 800acb0:	b183      	cbz	r3, 800acd4 <_Balloc+0x50>
 800acb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800acba:	b9b8      	cbnz	r0, 800acec <_Balloc+0x68>
 800acbc:	2101      	movs	r1, #1
 800acbe:	fa01 f605 	lsl.w	r6, r1, r5
 800acc2:	1d72      	adds	r2, r6, #5
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 fc97 	bl	800b5fa <_calloc_r>
 800accc:	b160      	cbz	r0, 800ace8 <_Balloc+0x64>
 800acce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acd2:	e00e      	b.n	800acf2 <_Balloc+0x6e>
 800acd4:	2221      	movs	r2, #33	; 0x21
 800acd6:	2104      	movs	r1, #4
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 fc8e 	bl	800b5fa <_calloc_r>
 800acde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ace0:	60f0      	str	r0, [r6, #12]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1e4      	bne.n	800acb2 <_Balloc+0x2e>
 800ace8:	2000      	movs	r0, #0
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	6802      	ldr	r2, [r0, #0]
 800acee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acf2:	2300      	movs	r3, #0
 800acf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acf8:	e7f7      	b.n	800acea <_Balloc+0x66>
 800acfa:	bf00      	nop
 800acfc:	0800cf2e 	.word	0x0800cf2e
 800ad00:	0800d034 	.word	0x0800d034

0800ad04 <_Bfree>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	b976      	cbnz	r6, 800ad2c <_Bfree+0x28>
 800ad0e:	2010      	movs	r0, #16
 800ad10:	f7ff ff90 	bl	800ac34 <malloc>
 800ad14:	4602      	mov	r2, r0
 800ad16:	6268      	str	r0, [r5, #36]	; 0x24
 800ad18:	b920      	cbnz	r0, 800ad24 <_Bfree+0x20>
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <_Bfree+0x3c>)
 800ad1c:	4809      	ldr	r0, [pc, #36]	; (800ad44 <_Bfree+0x40>)
 800ad1e:	218a      	movs	r1, #138	; 0x8a
 800ad20:	f001 fadc 	bl	800c2dc <__assert_func>
 800ad24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad28:	6006      	str	r6, [r0, #0]
 800ad2a:	60c6      	str	r6, [r0, #12]
 800ad2c:	b13c      	cbz	r4, 800ad3e <_Bfree+0x3a>
 800ad2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad30:	6862      	ldr	r2, [r4, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad38:	6021      	str	r1, [r4, #0]
 800ad3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}
 800ad40:	0800cf2e 	.word	0x0800cf2e
 800ad44:	0800d034 	.word	0x0800d034

0800ad48 <__multadd>:
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	690e      	ldr	r6, [r1, #16]
 800ad4e:	4607      	mov	r7, r0
 800ad50:	4698      	mov	r8, r3
 800ad52:	460c      	mov	r4, r1
 800ad54:	f101 0014 	add.w	r0, r1, #20
 800ad58:	2300      	movs	r3, #0
 800ad5a:	6805      	ldr	r5, [r0, #0]
 800ad5c:	b2a9      	uxth	r1, r5
 800ad5e:	fb02 8101 	mla	r1, r2, r1, r8
 800ad62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ad66:	0c2d      	lsrs	r5, r5, #16
 800ad68:	fb02 c505 	mla	r5, r2, r5, ip
 800ad6c:	b289      	uxth	r1, r1
 800ad6e:	3301      	adds	r3, #1
 800ad70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ad74:	429e      	cmp	r6, r3
 800ad76:	f840 1b04 	str.w	r1, [r0], #4
 800ad7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ad7e:	dcec      	bgt.n	800ad5a <__multadd+0x12>
 800ad80:	f1b8 0f00 	cmp.w	r8, #0
 800ad84:	d022      	beq.n	800adcc <__multadd+0x84>
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	42b3      	cmp	r3, r6
 800ad8a:	dc19      	bgt.n	800adc0 <__multadd+0x78>
 800ad8c:	6861      	ldr	r1, [r4, #4]
 800ad8e:	4638      	mov	r0, r7
 800ad90:	3101      	adds	r1, #1
 800ad92:	f7ff ff77 	bl	800ac84 <_Balloc>
 800ad96:	4605      	mov	r5, r0
 800ad98:	b928      	cbnz	r0, 800ada6 <__multadd+0x5e>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4b0d      	ldr	r3, [pc, #52]	; (800add4 <__multadd+0x8c>)
 800ad9e:	480e      	ldr	r0, [pc, #56]	; (800add8 <__multadd+0x90>)
 800ada0:	21b5      	movs	r1, #181	; 0xb5
 800ada2:	f001 fa9b 	bl	800c2dc <__assert_func>
 800ada6:	6922      	ldr	r2, [r4, #16]
 800ada8:	3202      	adds	r2, #2
 800adaa:	f104 010c 	add.w	r1, r4, #12
 800adae:	0092      	lsls	r2, r2, #2
 800adb0:	300c      	adds	r0, #12
 800adb2:	f7ff ff59 	bl	800ac68 <memcpy>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4638      	mov	r0, r7
 800adba:	f7ff ffa3 	bl	800ad04 <_Bfree>
 800adbe:	462c      	mov	r4, r5
 800adc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800adc4:	3601      	adds	r6, #1
 800adc6:	f8c3 8014 	str.w	r8, [r3, #20]
 800adca:	6126      	str	r6, [r4, #16]
 800adcc:	4620      	mov	r0, r4
 800adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add2:	bf00      	nop
 800add4:	0800cfa4 	.word	0x0800cfa4
 800add8:	0800d034 	.word	0x0800d034

0800addc <__s2b>:
 800addc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	460c      	mov	r4, r1
 800ade2:	4615      	mov	r5, r2
 800ade4:	461f      	mov	r7, r3
 800ade6:	2209      	movs	r2, #9
 800ade8:	3308      	adds	r3, #8
 800adea:	4606      	mov	r6, r0
 800adec:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf0:	2100      	movs	r1, #0
 800adf2:	2201      	movs	r2, #1
 800adf4:	429a      	cmp	r2, r3
 800adf6:	db09      	blt.n	800ae0c <__s2b+0x30>
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff ff43 	bl	800ac84 <_Balloc>
 800adfe:	b940      	cbnz	r0, 800ae12 <__s2b+0x36>
 800ae00:	4602      	mov	r2, r0
 800ae02:	4b19      	ldr	r3, [pc, #100]	; (800ae68 <__s2b+0x8c>)
 800ae04:	4819      	ldr	r0, [pc, #100]	; (800ae6c <__s2b+0x90>)
 800ae06:	21ce      	movs	r1, #206	; 0xce
 800ae08:	f001 fa68 	bl	800c2dc <__assert_func>
 800ae0c:	0052      	lsls	r2, r2, #1
 800ae0e:	3101      	adds	r1, #1
 800ae10:	e7f0      	b.n	800adf4 <__s2b+0x18>
 800ae12:	9b08      	ldr	r3, [sp, #32]
 800ae14:	6143      	str	r3, [r0, #20]
 800ae16:	2d09      	cmp	r5, #9
 800ae18:	f04f 0301 	mov.w	r3, #1
 800ae1c:	6103      	str	r3, [r0, #16]
 800ae1e:	dd16      	ble.n	800ae4e <__s2b+0x72>
 800ae20:	f104 0909 	add.w	r9, r4, #9
 800ae24:	46c8      	mov	r8, r9
 800ae26:	442c      	add	r4, r5
 800ae28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ae2c:	4601      	mov	r1, r0
 800ae2e:	3b30      	subs	r3, #48	; 0x30
 800ae30:	220a      	movs	r2, #10
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ff88 	bl	800ad48 <__multadd>
 800ae38:	45a0      	cmp	r8, r4
 800ae3a:	d1f5      	bne.n	800ae28 <__s2b+0x4c>
 800ae3c:	f1a5 0408 	sub.w	r4, r5, #8
 800ae40:	444c      	add	r4, r9
 800ae42:	1b2d      	subs	r5, r5, r4
 800ae44:	1963      	adds	r3, r4, r5
 800ae46:	42bb      	cmp	r3, r7
 800ae48:	db04      	blt.n	800ae54 <__s2b+0x78>
 800ae4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4e:	340a      	adds	r4, #10
 800ae50:	2509      	movs	r5, #9
 800ae52:	e7f6      	b.n	800ae42 <__s2b+0x66>
 800ae54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae58:	4601      	mov	r1, r0
 800ae5a:	3b30      	subs	r3, #48	; 0x30
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff ff72 	bl	800ad48 <__multadd>
 800ae64:	e7ee      	b.n	800ae44 <__s2b+0x68>
 800ae66:	bf00      	nop
 800ae68:	0800cfa4 	.word	0x0800cfa4
 800ae6c:	0800d034 	.word	0x0800d034

0800ae70 <__hi0bits>:
 800ae70:	0c03      	lsrs	r3, r0, #16
 800ae72:	041b      	lsls	r3, r3, #16
 800ae74:	b9d3      	cbnz	r3, 800aeac <__hi0bits+0x3c>
 800ae76:	0400      	lsls	r0, r0, #16
 800ae78:	2310      	movs	r3, #16
 800ae7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae7e:	bf04      	itt	eq
 800ae80:	0200      	lsleq	r0, r0, #8
 800ae82:	3308      	addeq	r3, #8
 800ae84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae88:	bf04      	itt	eq
 800ae8a:	0100      	lsleq	r0, r0, #4
 800ae8c:	3304      	addeq	r3, #4
 800ae8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae92:	bf04      	itt	eq
 800ae94:	0080      	lsleq	r0, r0, #2
 800ae96:	3302      	addeq	r3, #2
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	db05      	blt.n	800aea8 <__hi0bits+0x38>
 800ae9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aea0:	f103 0301 	add.w	r3, r3, #1
 800aea4:	bf08      	it	eq
 800aea6:	2320      	moveq	r3, #32
 800aea8:	4618      	mov	r0, r3
 800aeaa:	4770      	bx	lr
 800aeac:	2300      	movs	r3, #0
 800aeae:	e7e4      	b.n	800ae7a <__hi0bits+0xa>

0800aeb0 <__lo0bits>:
 800aeb0:	6803      	ldr	r3, [r0, #0]
 800aeb2:	f013 0207 	ands.w	r2, r3, #7
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	d00b      	beq.n	800aed2 <__lo0bits+0x22>
 800aeba:	07da      	lsls	r2, r3, #31
 800aebc:	d424      	bmi.n	800af08 <__lo0bits+0x58>
 800aebe:	0798      	lsls	r0, r3, #30
 800aec0:	bf49      	itett	mi
 800aec2:	085b      	lsrmi	r3, r3, #1
 800aec4:	089b      	lsrpl	r3, r3, #2
 800aec6:	2001      	movmi	r0, #1
 800aec8:	600b      	strmi	r3, [r1, #0]
 800aeca:	bf5c      	itt	pl
 800aecc:	600b      	strpl	r3, [r1, #0]
 800aece:	2002      	movpl	r0, #2
 800aed0:	4770      	bx	lr
 800aed2:	b298      	uxth	r0, r3
 800aed4:	b9b0      	cbnz	r0, 800af04 <__lo0bits+0x54>
 800aed6:	0c1b      	lsrs	r3, r3, #16
 800aed8:	2010      	movs	r0, #16
 800aeda:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aede:	bf04      	itt	eq
 800aee0:	0a1b      	lsreq	r3, r3, #8
 800aee2:	3008      	addeq	r0, #8
 800aee4:	071a      	lsls	r2, r3, #28
 800aee6:	bf04      	itt	eq
 800aee8:	091b      	lsreq	r3, r3, #4
 800aeea:	3004      	addeq	r0, #4
 800aeec:	079a      	lsls	r2, r3, #30
 800aeee:	bf04      	itt	eq
 800aef0:	089b      	lsreq	r3, r3, #2
 800aef2:	3002      	addeq	r0, #2
 800aef4:	07da      	lsls	r2, r3, #31
 800aef6:	d403      	bmi.n	800af00 <__lo0bits+0x50>
 800aef8:	085b      	lsrs	r3, r3, #1
 800aefa:	f100 0001 	add.w	r0, r0, #1
 800aefe:	d005      	beq.n	800af0c <__lo0bits+0x5c>
 800af00:	600b      	str	r3, [r1, #0]
 800af02:	4770      	bx	lr
 800af04:	4610      	mov	r0, r2
 800af06:	e7e8      	b.n	800aeda <__lo0bits+0x2a>
 800af08:	2000      	movs	r0, #0
 800af0a:	4770      	bx	lr
 800af0c:	2020      	movs	r0, #32
 800af0e:	4770      	bx	lr

0800af10 <__i2b>:
 800af10:	b510      	push	{r4, lr}
 800af12:	460c      	mov	r4, r1
 800af14:	2101      	movs	r1, #1
 800af16:	f7ff feb5 	bl	800ac84 <_Balloc>
 800af1a:	4602      	mov	r2, r0
 800af1c:	b928      	cbnz	r0, 800af2a <__i2b+0x1a>
 800af1e:	4b05      	ldr	r3, [pc, #20]	; (800af34 <__i2b+0x24>)
 800af20:	4805      	ldr	r0, [pc, #20]	; (800af38 <__i2b+0x28>)
 800af22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af26:	f001 f9d9 	bl	800c2dc <__assert_func>
 800af2a:	2301      	movs	r3, #1
 800af2c:	6144      	str	r4, [r0, #20]
 800af2e:	6103      	str	r3, [r0, #16]
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop
 800af34:	0800cfa4 	.word	0x0800cfa4
 800af38:	0800d034 	.word	0x0800d034

0800af3c <__multiply>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	4614      	mov	r4, r2
 800af42:	690a      	ldr	r2, [r1, #16]
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	429a      	cmp	r2, r3
 800af48:	bfb8      	it	lt
 800af4a:	460b      	movlt	r3, r1
 800af4c:	460d      	mov	r5, r1
 800af4e:	bfbc      	itt	lt
 800af50:	4625      	movlt	r5, r4
 800af52:	461c      	movlt	r4, r3
 800af54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800af58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af5c:	68ab      	ldr	r3, [r5, #8]
 800af5e:	6869      	ldr	r1, [r5, #4]
 800af60:	eb0a 0709 	add.w	r7, sl, r9
 800af64:	42bb      	cmp	r3, r7
 800af66:	b085      	sub	sp, #20
 800af68:	bfb8      	it	lt
 800af6a:	3101      	addlt	r1, #1
 800af6c:	f7ff fe8a 	bl	800ac84 <_Balloc>
 800af70:	b930      	cbnz	r0, 800af80 <__multiply+0x44>
 800af72:	4602      	mov	r2, r0
 800af74:	4b42      	ldr	r3, [pc, #264]	; (800b080 <__multiply+0x144>)
 800af76:	4843      	ldr	r0, [pc, #268]	; (800b084 <__multiply+0x148>)
 800af78:	f240 115d 	movw	r1, #349	; 0x15d
 800af7c:	f001 f9ae 	bl	800c2dc <__assert_func>
 800af80:	f100 0614 	add.w	r6, r0, #20
 800af84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800af88:	4633      	mov	r3, r6
 800af8a:	2200      	movs	r2, #0
 800af8c:	4543      	cmp	r3, r8
 800af8e:	d31e      	bcc.n	800afce <__multiply+0x92>
 800af90:	f105 0c14 	add.w	ip, r5, #20
 800af94:	f104 0314 	add.w	r3, r4, #20
 800af98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800af9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800afa0:	9202      	str	r2, [sp, #8]
 800afa2:	ebac 0205 	sub.w	r2, ip, r5
 800afa6:	3a15      	subs	r2, #21
 800afa8:	f022 0203 	bic.w	r2, r2, #3
 800afac:	3204      	adds	r2, #4
 800afae:	f105 0115 	add.w	r1, r5, #21
 800afb2:	458c      	cmp	ip, r1
 800afb4:	bf38      	it	cc
 800afb6:	2204      	movcc	r2, #4
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	9a02      	ldr	r2, [sp, #8]
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d808      	bhi.n	800afd4 <__multiply+0x98>
 800afc2:	2f00      	cmp	r7, #0
 800afc4:	dc55      	bgt.n	800b072 <__multiply+0x136>
 800afc6:	6107      	str	r7, [r0, #16]
 800afc8:	b005      	add	sp, #20
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	f843 2b04 	str.w	r2, [r3], #4
 800afd2:	e7db      	b.n	800af8c <__multiply+0x50>
 800afd4:	f8b3 a000 	ldrh.w	sl, [r3]
 800afd8:	f1ba 0f00 	cmp.w	sl, #0
 800afdc:	d020      	beq.n	800b020 <__multiply+0xe4>
 800afde:	f105 0e14 	add.w	lr, r5, #20
 800afe2:	46b1      	mov	r9, r6
 800afe4:	2200      	movs	r2, #0
 800afe6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800afea:	f8d9 b000 	ldr.w	fp, [r9]
 800afee:	b2a1      	uxth	r1, r4
 800aff0:	fa1f fb8b 	uxth.w	fp, fp
 800aff4:	fb0a b101 	mla	r1, sl, r1, fp
 800aff8:	4411      	add	r1, r2
 800affa:	f8d9 2000 	ldr.w	r2, [r9]
 800affe:	0c24      	lsrs	r4, r4, #16
 800b000:	0c12      	lsrs	r2, r2, #16
 800b002:	fb0a 2404 	mla	r4, sl, r4, r2
 800b006:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b00a:	b289      	uxth	r1, r1
 800b00c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b010:	45f4      	cmp	ip, lr
 800b012:	f849 1b04 	str.w	r1, [r9], #4
 800b016:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b01a:	d8e4      	bhi.n	800afe6 <__multiply+0xaa>
 800b01c:	9901      	ldr	r1, [sp, #4]
 800b01e:	5072      	str	r2, [r6, r1]
 800b020:	9a03      	ldr	r2, [sp, #12]
 800b022:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b026:	3304      	adds	r3, #4
 800b028:	f1b9 0f00 	cmp.w	r9, #0
 800b02c:	d01f      	beq.n	800b06e <__multiply+0x132>
 800b02e:	6834      	ldr	r4, [r6, #0]
 800b030:	f105 0114 	add.w	r1, r5, #20
 800b034:	46b6      	mov	lr, r6
 800b036:	f04f 0a00 	mov.w	sl, #0
 800b03a:	880a      	ldrh	r2, [r1, #0]
 800b03c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b040:	fb09 b202 	mla	r2, r9, r2, fp
 800b044:	4492      	add	sl, r2
 800b046:	b2a4      	uxth	r4, r4
 800b048:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b04c:	f84e 4b04 	str.w	r4, [lr], #4
 800b050:	f851 4b04 	ldr.w	r4, [r1], #4
 800b054:	f8be 2000 	ldrh.w	r2, [lr]
 800b058:	0c24      	lsrs	r4, r4, #16
 800b05a:	fb09 2404 	mla	r4, r9, r4, r2
 800b05e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b062:	458c      	cmp	ip, r1
 800b064:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b068:	d8e7      	bhi.n	800b03a <__multiply+0xfe>
 800b06a:	9a01      	ldr	r2, [sp, #4]
 800b06c:	50b4      	str	r4, [r6, r2]
 800b06e:	3604      	adds	r6, #4
 800b070:	e7a3      	b.n	800afba <__multiply+0x7e>
 800b072:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1a5      	bne.n	800afc6 <__multiply+0x8a>
 800b07a:	3f01      	subs	r7, #1
 800b07c:	e7a1      	b.n	800afc2 <__multiply+0x86>
 800b07e:	bf00      	nop
 800b080:	0800cfa4 	.word	0x0800cfa4
 800b084:	0800d034 	.word	0x0800d034

0800b088 <__pow5mult>:
 800b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b08c:	4615      	mov	r5, r2
 800b08e:	f012 0203 	ands.w	r2, r2, #3
 800b092:	4606      	mov	r6, r0
 800b094:	460f      	mov	r7, r1
 800b096:	d007      	beq.n	800b0a8 <__pow5mult+0x20>
 800b098:	4c25      	ldr	r4, [pc, #148]	; (800b130 <__pow5mult+0xa8>)
 800b09a:	3a01      	subs	r2, #1
 800b09c:	2300      	movs	r3, #0
 800b09e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0a2:	f7ff fe51 	bl	800ad48 <__multadd>
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	10ad      	asrs	r5, r5, #2
 800b0aa:	d03d      	beq.n	800b128 <__pow5mult+0xa0>
 800b0ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0ae:	b97c      	cbnz	r4, 800b0d0 <__pow5mult+0x48>
 800b0b0:	2010      	movs	r0, #16
 800b0b2:	f7ff fdbf 	bl	800ac34 <malloc>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ba:	b928      	cbnz	r0, 800b0c8 <__pow5mult+0x40>
 800b0bc:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <__pow5mult+0xac>)
 800b0be:	481e      	ldr	r0, [pc, #120]	; (800b138 <__pow5mult+0xb0>)
 800b0c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0c4:	f001 f90a 	bl	800c2dc <__assert_func>
 800b0c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0cc:	6004      	str	r4, [r0, #0]
 800b0ce:	60c4      	str	r4, [r0, #12]
 800b0d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0d8:	b94c      	cbnz	r4, 800b0ee <__pow5mult+0x66>
 800b0da:	f240 2171 	movw	r1, #625	; 0x271
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7ff ff16 	bl	800af10 <__i2b>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	07eb      	lsls	r3, r5, #31
 800b0f4:	d50a      	bpl.n	800b10c <__pow5mult+0x84>
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ff1e 	bl	800af3c <__multiply>
 800b100:	4639      	mov	r1, r7
 800b102:	4680      	mov	r8, r0
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff fdfd 	bl	800ad04 <_Bfree>
 800b10a:	4647      	mov	r7, r8
 800b10c:	106d      	asrs	r5, r5, #1
 800b10e:	d00b      	beq.n	800b128 <__pow5mult+0xa0>
 800b110:	6820      	ldr	r0, [r4, #0]
 800b112:	b938      	cbnz	r0, 800b124 <__pow5mult+0x9c>
 800b114:	4622      	mov	r2, r4
 800b116:	4621      	mov	r1, r4
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff ff0f 	bl	800af3c <__multiply>
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	f8c0 9000 	str.w	r9, [r0]
 800b124:	4604      	mov	r4, r0
 800b126:	e7e4      	b.n	800b0f2 <__pow5mult+0x6a>
 800b128:	4638      	mov	r0, r7
 800b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b12e:	bf00      	nop
 800b130:	0800d188 	.word	0x0800d188
 800b134:	0800cf2e 	.word	0x0800cf2e
 800b138:	0800d034 	.word	0x0800d034

0800b13c <__lshift>:
 800b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b140:	460c      	mov	r4, r1
 800b142:	6849      	ldr	r1, [r1, #4]
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	4607      	mov	r7, r0
 800b14e:	4691      	mov	r9, r2
 800b150:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b154:	f108 0601 	add.w	r6, r8, #1
 800b158:	42b3      	cmp	r3, r6
 800b15a:	db0b      	blt.n	800b174 <__lshift+0x38>
 800b15c:	4638      	mov	r0, r7
 800b15e:	f7ff fd91 	bl	800ac84 <_Balloc>
 800b162:	4605      	mov	r5, r0
 800b164:	b948      	cbnz	r0, 800b17a <__lshift+0x3e>
 800b166:	4602      	mov	r2, r0
 800b168:	4b28      	ldr	r3, [pc, #160]	; (800b20c <__lshift+0xd0>)
 800b16a:	4829      	ldr	r0, [pc, #164]	; (800b210 <__lshift+0xd4>)
 800b16c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b170:	f001 f8b4 	bl	800c2dc <__assert_func>
 800b174:	3101      	adds	r1, #1
 800b176:	005b      	lsls	r3, r3, #1
 800b178:	e7ee      	b.n	800b158 <__lshift+0x1c>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f100 0114 	add.w	r1, r0, #20
 800b180:	f100 0210 	add.w	r2, r0, #16
 800b184:	4618      	mov	r0, r3
 800b186:	4553      	cmp	r3, sl
 800b188:	db33      	blt.n	800b1f2 <__lshift+0xb6>
 800b18a:	6920      	ldr	r0, [r4, #16]
 800b18c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b190:	f104 0314 	add.w	r3, r4, #20
 800b194:	f019 091f 	ands.w	r9, r9, #31
 800b198:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b19c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1a0:	d02b      	beq.n	800b1fa <__lshift+0xbe>
 800b1a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1a6:	468a      	mov	sl, r1
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b1b0:	4302      	orrs	r2, r0
 800b1b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ba:	459c      	cmp	ip, r3
 800b1bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1c0:	d8f3      	bhi.n	800b1aa <__lshift+0x6e>
 800b1c2:	ebac 0304 	sub.w	r3, ip, r4
 800b1c6:	3b15      	subs	r3, #21
 800b1c8:	f023 0303 	bic.w	r3, r3, #3
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	f104 0015 	add.w	r0, r4, #21
 800b1d2:	4584      	cmp	ip, r0
 800b1d4:	bf38      	it	cc
 800b1d6:	2304      	movcc	r3, #4
 800b1d8:	50ca      	str	r2, [r1, r3]
 800b1da:	b10a      	cbz	r2, 800b1e0 <__lshift+0xa4>
 800b1dc:	f108 0602 	add.w	r6, r8, #2
 800b1e0:	3e01      	subs	r6, #1
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	612e      	str	r6, [r5, #16]
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	f7ff fd8c 	bl	800ad04 <_Bfree>
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	e7c5      	b.n	800b186 <__lshift+0x4a>
 800b1fa:	3904      	subs	r1, #4
 800b1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b200:	f841 2f04 	str.w	r2, [r1, #4]!
 800b204:	459c      	cmp	ip, r3
 800b206:	d8f9      	bhi.n	800b1fc <__lshift+0xc0>
 800b208:	e7ea      	b.n	800b1e0 <__lshift+0xa4>
 800b20a:	bf00      	nop
 800b20c:	0800cfa4 	.word	0x0800cfa4
 800b210:	0800d034 	.word	0x0800d034

0800b214 <__mcmp>:
 800b214:	b530      	push	{r4, r5, lr}
 800b216:	6902      	ldr	r2, [r0, #16]
 800b218:	690c      	ldr	r4, [r1, #16]
 800b21a:	1b12      	subs	r2, r2, r4
 800b21c:	d10e      	bne.n	800b23c <__mcmp+0x28>
 800b21e:	f100 0314 	add.w	r3, r0, #20
 800b222:	3114      	adds	r1, #20
 800b224:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b228:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b22c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b230:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b234:	42a5      	cmp	r5, r4
 800b236:	d003      	beq.n	800b240 <__mcmp+0x2c>
 800b238:	d305      	bcc.n	800b246 <__mcmp+0x32>
 800b23a:	2201      	movs	r2, #1
 800b23c:	4610      	mov	r0, r2
 800b23e:	bd30      	pop	{r4, r5, pc}
 800b240:	4283      	cmp	r3, r0
 800b242:	d3f3      	bcc.n	800b22c <__mcmp+0x18>
 800b244:	e7fa      	b.n	800b23c <__mcmp+0x28>
 800b246:	f04f 32ff 	mov.w	r2, #4294967295
 800b24a:	e7f7      	b.n	800b23c <__mcmp+0x28>

0800b24c <__mdiff>:
 800b24c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	460c      	mov	r4, r1
 800b252:	4606      	mov	r6, r0
 800b254:	4611      	mov	r1, r2
 800b256:	4620      	mov	r0, r4
 800b258:	4617      	mov	r7, r2
 800b25a:	f7ff ffdb 	bl	800b214 <__mcmp>
 800b25e:	1e05      	subs	r5, r0, #0
 800b260:	d110      	bne.n	800b284 <__mdiff+0x38>
 800b262:	4629      	mov	r1, r5
 800b264:	4630      	mov	r0, r6
 800b266:	f7ff fd0d 	bl	800ac84 <_Balloc>
 800b26a:	b930      	cbnz	r0, 800b27a <__mdiff+0x2e>
 800b26c:	4b39      	ldr	r3, [pc, #228]	; (800b354 <__mdiff+0x108>)
 800b26e:	4602      	mov	r2, r0
 800b270:	f240 2132 	movw	r1, #562	; 0x232
 800b274:	4838      	ldr	r0, [pc, #224]	; (800b358 <__mdiff+0x10c>)
 800b276:	f001 f831 	bl	800c2dc <__assert_func>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b284:	bfa4      	itt	ge
 800b286:	463b      	movge	r3, r7
 800b288:	4627      	movge	r7, r4
 800b28a:	4630      	mov	r0, r6
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	bfa6      	itte	ge
 800b290:	461c      	movge	r4, r3
 800b292:	2500      	movge	r5, #0
 800b294:	2501      	movlt	r5, #1
 800b296:	f7ff fcf5 	bl	800ac84 <_Balloc>
 800b29a:	b920      	cbnz	r0, 800b2a6 <__mdiff+0x5a>
 800b29c:	4b2d      	ldr	r3, [pc, #180]	; (800b354 <__mdiff+0x108>)
 800b29e:	4602      	mov	r2, r0
 800b2a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2a4:	e7e6      	b.n	800b274 <__mdiff+0x28>
 800b2a6:	693e      	ldr	r6, [r7, #16]
 800b2a8:	60c5      	str	r5, [r0, #12]
 800b2aa:	6925      	ldr	r5, [r4, #16]
 800b2ac:	f107 0114 	add.w	r1, r7, #20
 800b2b0:	f104 0914 	add.w	r9, r4, #20
 800b2b4:	f100 0e14 	add.w	lr, r0, #20
 800b2b8:	f107 0210 	add.w	r2, r7, #16
 800b2bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b2c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b2c4:	46f2      	mov	sl, lr
 800b2c6:	2700      	movs	r7, #0
 800b2c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2d0:	fa1f f883 	uxth.w	r8, r3
 800b2d4:	fa17 f78b 	uxtah	r7, r7, fp
 800b2d8:	0c1b      	lsrs	r3, r3, #16
 800b2da:	eba7 0808 	sub.w	r8, r7, r8
 800b2de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b2e6:	fa1f f888 	uxth.w	r8, r8
 800b2ea:	141f      	asrs	r7, r3, #16
 800b2ec:	454d      	cmp	r5, r9
 800b2ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b2f2:	f84a 3b04 	str.w	r3, [sl], #4
 800b2f6:	d8e7      	bhi.n	800b2c8 <__mdiff+0x7c>
 800b2f8:	1b2b      	subs	r3, r5, r4
 800b2fa:	3b15      	subs	r3, #21
 800b2fc:	f023 0303 	bic.w	r3, r3, #3
 800b300:	3304      	adds	r3, #4
 800b302:	3415      	adds	r4, #21
 800b304:	42a5      	cmp	r5, r4
 800b306:	bf38      	it	cc
 800b308:	2304      	movcc	r3, #4
 800b30a:	4419      	add	r1, r3
 800b30c:	4473      	add	r3, lr
 800b30e:	469e      	mov	lr, r3
 800b310:	460d      	mov	r5, r1
 800b312:	4565      	cmp	r5, ip
 800b314:	d30e      	bcc.n	800b334 <__mdiff+0xe8>
 800b316:	f10c 0203 	add.w	r2, ip, #3
 800b31a:	1a52      	subs	r2, r2, r1
 800b31c:	f022 0203 	bic.w	r2, r2, #3
 800b320:	3903      	subs	r1, #3
 800b322:	458c      	cmp	ip, r1
 800b324:	bf38      	it	cc
 800b326:	2200      	movcc	r2, #0
 800b328:	441a      	add	r2, r3
 800b32a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b32e:	b17b      	cbz	r3, 800b350 <__mdiff+0x104>
 800b330:	6106      	str	r6, [r0, #16]
 800b332:	e7a5      	b.n	800b280 <__mdiff+0x34>
 800b334:	f855 8b04 	ldr.w	r8, [r5], #4
 800b338:	fa17 f488 	uxtah	r4, r7, r8
 800b33c:	1422      	asrs	r2, r4, #16
 800b33e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b342:	b2a4      	uxth	r4, r4
 800b344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b348:	f84e 4b04 	str.w	r4, [lr], #4
 800b34c:	1417      	asrs	r7, r2, #16
 800b34e:	e7e0      	b.n	800b312 <__mdiff+0xc6>
 800b350:	3e01      	subs	r6, #1
 800b352:	e7ea      	b.n	800b32a <__mdiff+0xde>
 800b354:	0800cfa4 	.word	0x0800cfa4
 800b358:	0800d034 	.word	0x0800d034

0800b35c <__ulp>:
 800b35c:	b082      	sub	sp, #8
 800b35e:	ed8d 0b00 	vstr	d0, [sp]
 800b362:	9b01      	ldr	r3, [sp, #4]
 800b364:	4912      	ldr	r1, [pc, #72]	; (800b3b0 <__ulp+0x54>)
 800b366:	4019      	ands	r1, r3
 800b368:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b36c:	2900      	cmp	r1, #0
 800b36e:	dd05      	ble.n	800b37c <__ulp+0x20>
 800b370:	2200      	movs	r2, #0
 800b372:	460b      	mov	r3, r1
 800b374:	ec43 2b10 	vmov	d0, r2, r3
 800b378:	b002      	add	sp, #8
 800b37a:	4770      	bx	lr
 800b37c:	4249      	negs	r1, r1
 800b37e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b382:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	f04f 0300 	mov.w	r3, #0
 800b38e:	da04      	bge.n	800b39a <__ulp+0x3e>
 800b390:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b394:	fa41 f300 	asr.w	r3, r1, r0
 800b398:	e7ec      	b.n	800b374 <__ulp+0x18>
 800b39a:	f1a0 0114 	sub.w	r1, r0, #20
 800b39e:	291e      	cmp	r1, #30
 800b3a0:	bfda      	itte	le
 800b3a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b3a6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b3aa:	2101      	movgt	r1, #1
 800b3ac:	460a      	mov	r2, r1
 800b3ae:	e7e1      	b.n	800b374 <__ulp+0x18>
 800b3b0:	7ff00000 	.word	0x7ff00000

0800b3b4 <__b2d>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	6905      	ldr	r5, [r0, #16]
 800b3b8:	f100 0714 	add.w	r7, r0, #20
 800b3bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b3c0:	1f2e      	subs	r6, r5, #4
 800b3c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f7ff fd52 	bl	800ae70 <__hi0bits>
 800b3cc:	f1c0 0320 	rsb	r3, r0, #32
 800b3d0:	280a      	cmp	r0, #10
 800b3d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b450 <__b2d+0x9c>
 800b3d6:	600b      	str	r3, [r1, #0]
 800b3d8:	dc14      	bgt.n	800b404 <__b2d+0x50>
 800b3da:	f1c0 0e0b 	rsb	lr, r0, #11
 800b3de:	fa24 f10e 	lsr.w	r1, r4, lr
 800b3e2:	42b7      	cmp	r7, r6
 800b3e4:	ea41 030c 	orr.w	r3, r1, ip
 800b3e8:	bf34      	ite	cc
 800b3ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3ee:	2100      	movcs	r1, #0
 800b3f0:	3015      	adds	r0, #21
 800b3f2:	fa04 f000 	lsl.w	r0, r4, r0
 800b3f6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3fa:	ea40 0201 	orr.w	r2, r0, r1
 800b3fe:	ec43 2b10 	vmov	d0, r2, r3
 800b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b404:	42b7      	cmp	r7, r6
 800b406:	bf3a      	itte	cc
 800b408:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b40c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b410:	2100      	movcs	r1, #0
 800b412:	380b      	subs	r0, #11
 800b414:	d017      	beq.n	800b446 <__b2d+0x92>
 800b416:	f1c0 0c20 	rsb	ip, r0, #32
 800b41a:	fa04 f500 	lsl.w	r5, r4, r0
 800b41e:	42be      	cmp	r6, r7
 800b420:	fa21 f40c 	lsr.w	r4, r1, ip
 800b424:	ea45 0504 	orr.w	r5, r5, r4
 800b428:	bf8c      	ite	hi
 800b42a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b42e:	2400      	movls	r4, #0
 800b430:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b434:	fa01 f000 	lsl.w	r0, r1, r0
 800b438:	fa24 f40c 	lsr.w	r4, r4, ip
 800b43c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b440:	ea40 0204 	orr.w	r2, r0, r4
 800b444:	e7db      	b.n	800b3fe <__b2d+0x4a>
 800b446:	ea44 030c 	orr.w	r3, r4, ip
 800b44a:	460a      	mov	r2, r1
 800b44c:	e7d7      	b.n	800b3fe <__b2d+0x4a>
 800b44e:	bf00      	nop
 800b450:	3ff00000 	.word	0x3ff00000

0800b454 <__d2b>:
 800b454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b458:	4689      	mov	r9, r1
 800b45a:	2101      	movs	r1, #1
 800b45c:	ec57 6b10 	vmov	r6, r7, d0
 800b460:	4690      	mov	r8, r2
 800b462:	f7ff fc0f 	bl	800ac84 <_Balloc>
 800b466:	4604      	mov	r4, r0
 800b468:	b930      	cbnz	r0, 800b478 <__d2b+0x24>
 800b46a:	4602      	mov	r2, r0
 800b46c:	4b25      	ldr	r3, [pc, #148]	; (800b504 <__d2b+0xb0>)
 800b46e:	4826      	ldr	r0, [pc, #152]	; (800b508 <__d2b+0xb4>)
 800b470:	f240 310a 	movw	r1, #778	; 0x30a
 800b474:	f000 ff32 	bl	800c2dc <__assert_func>
 800b478:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b47c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b480:	bb35      	cbnz	r5, 800b4d0 <__d2b+0x7c>
 800b482:	2e00      	cmp	r6, #0
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	d028      	beq.n	800b4da <__d2b+0x86>
 800b488:	4668      	mov	r0, sp
 800b48a:	9600      	str	r6, [sp, #0]
 800b48c:	f7ff fd10 	bl	800aeb0 <__lo0bits>
 800b490:	9900      	ldr	r1, [sp, #0]
 800b492:	b300      	cbz	r0, 800b4d6 <__d2b+0x82>
 800b494:	9a01      	ldr	r2, [sp, #4]
 800b496:	f1c0 0320 	rsb	r3, r0, #32
 800b49a:	fa02 f303 	lsl.w	r3, r2, r3
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	40c2      	lsrs	r2, r0
 800b4a2:	6163      	str	r3, [r4, #20]
 800b4a4:	9201      	str	r2, [sp, #4]
 800b4a6:	9b01      	ldr	r3, [sp, #4]
 800b4a8:	61a3      	str	r3, [r4, #24]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bf14      	ite	ne
 800b4ae:	2202      	movne	r2, #2
 800b4b0:	2201      	moveq	r2, #1
 800b4b2:	6122      	str	r2, [r4, #16]
 800b4b4:	b1d5      	cbz	r5, 800b4ec <__d2b+0x98>
 800b4b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ba:	4405      	add	r5, r0
 800b4bc:	f8c9 5000 	str.w	r5, [r9]
 800b4c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4c4:	f8c8 0000 	str.w	r0, [r8]
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	b003      	add	sp, #12
 800b4cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4d4:	e7d5      	b.n	800b482 <__d2b+0x2e>
 800b4d6:	6161      	str	r1, [r4, #20]
 800b4d8:	e7e5      	b.n	800b4a6 <__d2b+0x52>
 800b4da:	a801      	add	r0, sp, #4
 800b4dc:	f7ff fce8 	bl	800aeb0 <__lo0bits>
 800b4e0:	9b01      	ldr	r3, [sp, #4]
 800b4e2:	6163      	str	r3, [r4, #20]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	6122      	str	r2, [r4, #16]
 800b4e8:	3020      	adds	r0, #32
 800b4ea:	e7e3      	b.n	800b4b4 <__d2b+0x60>
 800b4ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4f4:	f8c9 0000 	str.w	r0, [r9]
 800b4f8:	6918      	ldr	r0, [r3, #16]
 800b4fa:	f7ff fcb9 	bl	800ae70 <__hi0bits>
 800b4fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b502:	e7df      	b.n	800b4c4 <__d2b+0x70>
 800b504:	0800cfa4 	.word	0x0800cfa4
 800b508:	0800d034 	.word	0x0800d034

0800b50c <__ratio>:
 800b50c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	4688      	mov	r8, r1
 800b512:	4669      	mov	r1, sp
 800b514:	4681      	mov	r9, r0
 800b516:	f7ff ff4d 	bl	800b3b4 <__b2d>
 800b51a:	a901      	add	r1, sp, #4
 800b51c:	4640      	mov	r0, r8
 800b51e:	ec55 4b10 	vmov	r4, r5, d0
 800b522:	f7ff ff47 	bl	800b3b4 <__b2d>
 800b526:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b52a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b52e:	eba3 0c02 	sub.w	ip, r3, r2
 800b532:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b536:	1a9b      	subs	r3, r3, r2
 800b538:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b53c:	ec51 0b10 	vmov	r0, r1, d0
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfd6      	itet	le
 800b544:	460a      	movle	r2, r1
 800b546:	462a      	movgt	r2, r5
 800b548:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b54c:	468b      	mov	fp, r1
 800b54e:	462f      	mov	r7, r5
 800b550:	bfd4      	ite	le
 800b552:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b556:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b55a:	4620      	mov	r0, r4
 800b55c:	ee10 2a10 	vmov	r2, s0
 800b560:	465b      	mov	r3, fp
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 f992 	bl	800088c <__aeabi_ddiv>
 800b568:	ec41 0b10 	vmov	d0, r0, r1
 800b56c:	b003      	add	sp, #12
 800b56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b572 <__copybits>:
 800b572:	3901      	subs	r1, #1
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	1149      	asrs	r1, r1, #5
 800b578:	6914      	ldr	r4, [r2, #16]
 800b57a:	3101      	adds	r1, #1
 800b57c:	f102 0314 	add.w	r3, r2, #20
 800b580:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b584:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b588:	1f05      	subs	r5, r0, #4
 800b58a:	42a3      	cmp	r3, r4
 800b58c:	d30c      	bcc.n	800b5a8 <__copybits+0x36>
 800b58e:	1aa3      	subs	r3, r4, r2
 800b590:	3b11      	subs	r3, #17
 800b592:	f023 0303 	bic.w	r3, r3, #3
 800b596:	3211      	adds	r2, #17
 800b598:	42a2      	cmp	r2, r4
 800b59a:	bf88      	it	hi
 800b59c:	2300      	movhi	r3, #0
 800b59e:	4418      	add	r0, r3
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4288      	cmp	r0, r1
 800b5a4:	d305      	bcc.n	800b5b2 <__copybits+0x40>
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b5ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800b5b0:	e7eb      	b.n	800b58a <__copybits+0x18>
 800b5b2:	f840 3b04 	str.w	r3, [r0], #4
 800b5b6:	e7f4      	b.n	800b5a2 <__copybits+0x30>

0800b5b8 <__any_on>:
 800b5b8:	f100 0214 	add.w	r2, r0, #20
 800b5bc:	6900      	ldr	r0, [r0, #16]
 800b5be:	114b      	asrs	r3, r1, #5
 800b5c0:	4298      	cmp	r0, r3
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	db11      	blt.n	800b5ea <__any_on+0x32>
 800b5c6:	dd0a      	ble.n	800b5de <__any_on+0x26>
 800b5c8:	f011 011f 	ands.w	r1, r1, #31
 800b5cc:	d007      	beq.n	800b5de <__any_on+0x26>
 800b5ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b5d2:	fa24 f001 	lsr.w	r0, r4, r1
 800b5d6:	fa00 f101 	lsl.w	r1, r0, r1
 800b5da:	428c      	cmp	r4, r1
 800b5dc:	d10b      	bne.n	800b5f6 <__any_on+0x3e>
 800b5de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d803      	bhi.n	800b5ee <__any_on+0x36>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	bd10      	pop	{r4, pc}
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	e7f7      	b.n	800b5de <__any_on+0x26>
 800b5ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5f2:	2900      	cmp	r1, #0
 800b5f4:	d0f5      	beq.n	800b5e2 <__any_on+0x2a>
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	e7f6      	b.n	800b5e8 <__any_on+0x30>

0800b5fa <_calloc_r>:
 800b5fa:	b513      	push	{r0, r1, r4, lr}
 800b5fc:	434a      	muls	r2, r1
 800b5fe:	4611      	mov	r1, r2
 800b600:	9201      	str	r2, [sp, #4]
 800b602:	f000 f859 	bl	800b6b8 <_malloc_r>
 800b606:	4604      	mov	r4, r0
 800b608:	b118      	cbz	r0, 800b612 <_calloc_r+0x18>
 800b60a:	9a01      	ldr	r2, [sp, #4]
 800b60c:	2100      	movs	r1, #0
 800b60e:	f7fc fb03 	bl	8007c18 <memset>
 800b612:	4620      	mov	r0, r4
 800b614:	b002      	add	sp, #8
 800b616:	bd10      	pop	{r4, pc}

0800b618 <_free_r>:
 800b618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b61a:	2900      	cmp	r1, #0
 800b61c:	d048      	beq.n	800b6b0 <_free_r+0x98>
 800b61e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b622:	9001      	str	r0, [sp, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f1a1 0404 	sub.w	r4, r1, #4
 800b62a:	bfb8      	it	lt
 800b62c:	18e4      	addlt	r4, r4, r3
 800b62e:	f001 f859 	bl	800c6e4 <__malloc_lock>
 800b632:	4a20      	ldr	r2, [pc, #128]	; (800b6b4 <_free_r+0x9c>)
 800b634:	9801      	ldr	r0, [sp, #4]
 800b636:	6813      	ldr	r3, [r2, #0]
 800b638:	4615      	mov	r5, r2
 800b63a:	b933      	cbnz	r3, 800b64a <_free_r+0x32>
 800b63c:	6063      	str	r3, [r4, #4]
 800b63e:	6014      	str	r4, [r2, #0]
 800b640:	b003      	add	sp, #12
 800b642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b646:	f001 b853 	b.w	800c6f0 <__malloc_unlock>
 800b64a:	42a3      	cmp	r3, r4
 800b64c:	d90b      	bls.n	800b666 <_free_r+0x4e>
 800b64e:	6821      	ldr	r1, [r4, #0]
 800b650:	1862      	adds	r2, r4, r1
 800b652:	4293      	cmp	r3, r2
 800b654:	bf04      	itt	eq
 800b656:	681a      	ldreq	r2, [r3, #0]
 800b658:	685b      	ldreq	r3, [r3, #4]
 800b65a:	6063      	str	r3, [r4, #4]
 800b65c:	bf04      	itt	eq
 800b65e:	1852      	addeq	r2, r2, r1
 800b660:	6022      	streq	r2, [r4, #0]
 800b662:	602c      	str	r4, [r5, #0]
 800b664:	e7ec      	b.n	800b640 <_free_r+0x28>
 800b666:	461a      	mov	r2, r3
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	b10b      	cbz	r3, 800b670 <_free_r+0x58>
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	d9fa      	bls.n	800b666 <_free_r+0x4e>
 800b670:	6811      	ldr	r1, [r2, #0]
 800b672:	1855      	adds	r5, r2, r1
 800b674:	42a5      	cmp	r5, r4
 800b676:	d10b      	bne.n	800b690 <_free_r+0x78>
 800b678:	6824      	ldr	r4, [r4, #0]
 800b67a:	4421      	add	r1, r4
 800b67c:	1854      	adds	r4, r2, r1
 800b67e:	42a3      	cmp	r3, r4
 800b680:	6011      	str	r1, [r2, #0]
 800b682:	d1dd      	bne.n	800b640 <_free_r+0x28>
 800b684:	681c      	ldr	r4, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	6053      	str	r3, [r2, #4]
 800b68a:	4421      	add	r1, r4
 800b68c:	6011      	str	r1, [r2, #0]
 800b68e:	e7d7      	b.n	800b640 <_free_r+0x28>
 800b690:	d902      	bls.n	800b698 <_free_r+0x80>
 800b692:	230c      	movs	r3, #12
 800b694:	6003      	str	r3, [r0, #0]
 800b696:	e7d3      	b.n	800b640 <_free_r+0x28>
 800b698:	6825      	ldr	r5, [r4, #0]
 800b69a:	1961      	adds	r1, r4, r5
 800b69c:	428b      	cmp	r3, r1
 800b69e:	bf04      	itt	eq
 800b6a0:	6819      	ldreq	r1, [r3, #0]
 800b6a2:	685b      	ldreq	r3, [r3, #4]
 800b6a4:	6063      	str	r3, [r4, #4]
 800b6a6:	bf04      	itt	eq
 800b6a8:	1949      	addeq	r1, r1, r5
 800b6aa:	6021      	streq	r1, [r4, #0]
 800b6ac:	6054      	str	r4, [r2, #4]
 800b6ae:	e7c7      	b.n	800b640 <_free_r+0x28>
 800b6b0:	b003      	add	sp, #12
 800b6b2:	bd30      	pop	{r4, r5, pc}
 800b6b4:	20000268 	.word	0x20000268

0800b6b8 <_malloc_r>:
 800b6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ba:	1ccd      	adds	r5, r1, #3
 800b6bc:	f025 0503 	bic.w	r5, r5, #3
 800b6c0:	3508      	adds	r5, #8
 800b6c2:	2d0c      	cmp	r5, #12
 800b6c4:	bf38      	it	cc
 800b6c6:	250c      	movcc	r5, #12
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	db01      	blt.n	800b6d2 <_malloc_r+0x1a>
 800b6ce:	42a9      	cmp	r1, r5
 800b6d0:	d903      	bls.n	800b6da <_malloc_r+0x22>
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6da:	f001 f803 	bl	800c6e4 <__malloc_lock>
 800b6de:	4921      	ldr	r1, [pc, #132]	; (800b764 <_malloc_r+0xac>)
 800b6e0:	680a      	ldr	r2, [r1, #0]
 800b6e2:	4614      	mov	r4, r2
 800b6e4:	b99c      	cbnz	r4, 800b70e <_malloc_r+0x56>
 800b6e6:	4f20      	ldr	r7, [pc, #128]	; (800b768 <_malloc_r+0xb0>)
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	b923      	cbnz	r3, 800b6f6 <_malloc_r+0x3e>
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f000 fcd2 	bl	800c098 <_sbrk_r>
 800b6f4:	6038      	str	r0, [r7, #0]
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 fccd 	bl	800c098 <_sbrk_r>
 800b6fe:	1c43      	adds	r3, r0, #1
 800b700:	d123      	bne.n	800b74a <_malloc_r+0x92>
 800b702:	230c      	movs	r3, #12
 800b704:	6033      	str	r3, [r6, #0]
 800b706:	4630      	mov	r0, r6
 800b708:	f000 fff2 	bl	800c6f0 <__malloc_unlock>
 800b70c:	e7e3      	b.n	800b6d6 <_malloc_r+0x1e>
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	1b5b      	subs	r3, r3, r5
 800b712:	d417      	bmi.n	800b744 <_malloc_r+0x8c>
 800b714:	2b0b      	cmp	r3, #11
 800b716:	d903      	bls.n	800b720 <_malloc_r+0x68>
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	441c      	add	r4, r3
 800b71c:	6025      	str	r5, [r4, #0]
 800b71e:	e004      	b.n	800b72a <_malloc_r+0x72>
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	42a2      	cmp	r2, r4
 800b724:	bf0c      	ite	eq
 800b726:	600b      	streq	r3, [r1, #0]
 800b728:	6053      	strne	r3, [r2, #4]
 800b72a:	4630      	mov	r0, r6
 800b72c:	f000 ffe0 	bl	800c6f0 <__malloc_unlock>
 800b730:	f104 000b 	add.w	r0, r4, #11
 800b734:	1d23      	adds	r3, r4, #4
 800b736:	f020 0007 	bic.w	r0, r0, #7
 800b73a:	1ac2      	subs	r2, r0, r3
 800b73c:	d0cc      	beq.n	800b6d8 <_malloc_r+0x20>
 800b73e:	1a1b      	subs	r3, r3, r0
 800b740:	50a3      	str	r3, [r4, r2]
 800b742:	e7c9      	b.n	800b6d8 <_malloc_r+0x20>
 800b744:	4622      	mov	r2, r4
 800b746:	6864      	ldr	r4, [r4, #4]
 800b748:	e7cc      	b.n	800b6e4 <_malloc_r+0x2c>
 800b74a:	1cc4      	adds	r4, r0, #3
 800b74c:	f024 0403 	bic.w	r4, r4, #3
 800b750:	42a0      	cmp	r0, r4
 800b752:	d0e3      	beq.n	800b71c <_malloc_r+0x64>
 800b754:	1a21      	subs	r1, r4, r0
 800b756:	4630      	mov	r0, r6
 800b758:	f000 fc9e 	bl	800c098 <_sbrk_r>
 800b75c:	3001      	adds	r0, #1
 800b75e:	d1dd      	bne.n	800b71c <_malloc_r+0x64>
 800b760:	e7cf      	b.n	800b702 <_malloc_r+0x4a>
 800b762:	bf00      	nop
 800b764:	20000268 	.word	0x20000268
 800b768:	2000026c 	.word	0x2000026c

0800b76c <__ssputs_r>:
 800b76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b770:	688e      	ldr	r6, [r1, #8]
 800b772:	429e      	cmp	r6, r3
 800b774:	4682      	mov	sl, r0
 800b776:	460c      	mov	r4, r1
 800b778:	4690      	mov	r8, r2
 800b77a:	461f      	mov	r7, r3
 800b77c:	d838      	bhi.n	800b7f0 <__ssputs_r+0x84>
 800b77e:	898a      	ldrh	r2, [r1, #12]
 800b780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b784:	d032      	beq.n	800b7ec <__ssputs_r+0x80>
 800b786:	6825      	ldr	r5, [r4, #0]
 800b788:	6909      	ldr	r1, [r1, #16]
 800b78a:	eba5 0901 	sub.w	r9, r5, r1
 800b78e:	6965      	ldr	r5, [r4, #20]
 800b790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b798:	3301      	adds	r3, #1
 800b79a:	444b      	add	r3, r9
 800b79c:	106d      	asrs	r5, r5, #1
 800b79e:	429d      	cmp	r5, r3
 800b7a0:	bf38      	it	cc
 800b7a2:	461d      	movcc	r5, r3
 800b7a4:	0553      	lsls	r3, r2, #21
 800b7a6:	d531      	bpl.n	800b80c <__ssputs_r+0xa0>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7ff ff85 	bl	800b6b8 <_malloc_r>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	b950      	cbnz	r0, 800b7c8 <__ssputs_r+0x5c>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	f8ca 3000 	str.w	r3, [sl]
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c8:	6921      	ldr	r1, [r4, #16]
 800b7ca:	464a      	mov	r2, r9
 800b7cc:	f7ff fa4c 	bl	800ac68 <memcpy>
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	6126      	str	r6, [r4, #16]
 800b7de:	6165      	str	r5, [r4, #20]
 800b7e0:	444e      	add	r6, r9
 800b7e2:	eba5 0509 	sub.w	r5, r5, r9
 800b7e6:	6026      	str	r6, [r4, #0]
 800b7e8:	60a5      	str	r5, [r4, #8]
 800b7ea:	463e      	mov	r6, r7
 800b7ec:	42be      	cmp	r6, r7
 800b7ee:	d900      	bls.n	800b7f2 <__ssputs_r+0x86>
 800b7f0:	463e      	mov	r6, r7
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	4641      	mov	r1, r8
 800b7f8:	f000 ff5a 	bl	800c6b0 <memmove>
 800b7fc:	68a3      	ldr	r3, [r4, #8]
 800b7fe:	6822      	ldr	r2, [r4, #0]
 800b800:	1b9b      	subs	r3, r3, r6
 800b802:	4432      	add	r2, r6
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	6022      	str	r2, [r4, #0]
 800b808:	2000      	movs	r0, #0
 800b80a:	e7db      	b.n	800b7c4 <__ssputs_r+0x58>
 800b80c:	462a      	mov	r2, r5
 800b80e:	f000 ff75 	bl	800c6fc <_realloc_r>
 800b812:	4606      	mov	r6, r0
 800b814:	2800      	cmp	r0, #0
 800b816:	d1e1      	bne.n	800b7dc <__ssputs_r+0x70>
 800b818:	6921      	ldr	r1, [r4, #16]
 800b81a:	4650      	mov	r0, sl
 800b81c:	f7ff fefc 	bl	800b618 <_free_r>
 800b820:	e7c7      	b.n	800b7b2 <__ssputs_r+0x46>
	...

0800b824 <_svfiprintf_r>:
 800b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	4698      	mov	r8, r3
 800b82a:	898b      	ldrh	r3, [r1, #12]
 800b82c:	061b      	lsls	r3, r3, #24
 800b82e:	b09d      	sub	sp, #116	; 0x74
 800b830:	4607      	mov	r7, r0
 800b832:	460d      	mov	r5, r1
 800b834:	4614      	mov	r4, r2
 800b836:	d50e      	bpl.n	800b856 <_svfiprintf_r+0x32>
 800b838:	690b      	ldr	r3, [r1, #16]
 800b83a:	b963      	cbnz	r3, 800b856 <_svfiprintf_r+0x32>
 800b83c:	2140      	movs	r1, #64	; 0x40
 800b83e:	f7ff ff3b 	bl	800b6b8 <_malloc_r>
 800b842:	6028      	str	r0, [r5, #0]
 800b844:	6128      	str	r0, [r5, #16]
 800b846:	b920      	cbnz	r0, 800b852 <_svfiprintf_r+0x2e>
 800b848:	230c      	movs	r3, #12
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295
 800b850:	e0d1      	b.n	800b9f6 <_svfiprintf_r+0x1d2>
 800b852:	2340      	movs	r3, #64	; 0x40
 800b854:	616b      	str	r3, [r5, #20]
 800b856:	2300      	movs	r3, #0
 800b858:	9309      	str	r3, [sp, #36]	; 0x24
 800b85a:	2320      	movs	r3, #32
 800b85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b860:	f8cd 800c 	str.w	r8, [sp, #12]
 800b864:	2330      	movs	r3, #48	; 0x30
 800b866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba10 <_svfiprintf_r+0x1ec>
 800b86a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b86e:	f04f 0901 	mov.w	r9, #1
 800b872:	4623      	mov	r3, r4
 800b874:	469a      	mov	sl, r3
 800b876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b87a:	b10a      	cbz	r2, 800b880 <_svfiprintf_r+0x5c>
 800b87c:	2a25      	cmp	r2, #37	; 0x25
 800b87e:	d1f9      	bne.n	800b874 <_svfiprintf_r+0x50>
 800b880:	ebba 0b04 	subs.w	fp, sl, r4
 800b884:	d00b      	beq.n	800b89e <_svfiprintf_r+0x7a>
 800b886:	465b      	mov	r3, fp
 800b888:	4622      	mov	r2, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff ff6d 	bl	800b76c <__ssputs_r>
 800b892:	3001      	adds	r0, #1
 800b894:	f000 80aa 	beq.w	800b9ec <_svfiprintf_r+0x1c8>
 800b898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b89a:	445a      	add	r2, fp
 800b89c:	9209      	str	r2, [sp, #36]	; 0x24
 800b89e:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f000 80a2 	beq.w	800b9ec <_svfiprintf_r+0x1c8>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8b2:	f10a 0a01 	add.w	sl, sl, #1
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	9307      	str	r3, [sp, #28]
 800b8ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8be:	931a      	str	r3, [sp, #104]	; 0x68
 800b8c0:	4654      	mov	r4, sl
 800b8c2:	2205      	movs	r2, #5
 800b8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c8:	4851      	ldr	r0, [pc, #324]	; (800ba10 <_svfiprintf_r+0x1ec>)
 800b8ca:	f7f4 fca9 	bl	8000220 <memchr>
 800b8ce:	9a04      	ldr	r2, [sp, #16]
 800b8d0:	b9d8      	cbnz	r0, 800b90a <_svfiprintf_r+0xe6>
 800b8d2:	06d0      	lsls	r0, r2, #27
 800b8d4:	bf44      	itt	mi
 800b8d6:	2320      	movmi	r3, #32
 800b8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8dc:	0711      	lsls	r1, r2, #28
 800b8de:	bf44      	itt	mi
 800b8e0:	232b      	movmi	r3, #43	; 0x2b
 800b8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ec:	d015      	beq.n	800b91a <_svfiprintf_r+0xf6>
 800b8ee:	9a07      	ldr	r2, [sp, #28]
 800b8f0:	4654      	mov	r4, sl
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f04f 0c0a 	mov.w	ip, #10
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8fe:	3b30      	subs	r3, #48	; 0x30
 800b900:	2b09      	cmp	r3, #9
 800b902:	d94e      	bls.n	800b9a2 <_svfiprintf_r+0x17e>
 800b904:	b1b0      	cbz	r0, 800b934 <_svfiprintf_r+0x110>
 800b906:	9207      	str	r2, [sp, #28]
 800b908:	e014      	b.n	800b934 <_svfiprintf_r+0x110>
 800b90a:	eba0 0308 	sub.w	r3, r0, r8
 800b90e:	fa09 f303 	lsl.w	r3, r9, r3
 800b912:	4313      	orrs	r3, r2
 800b914:	9304      	str	r3, [sp, #16]
 800b916:	46a2      	mov	sl, r4
 800b918:	e7d2      	b.n	800b8c0 <_svfiprintf_r+0x9c>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	1d19      	adds	r1, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9103      	str	r1, [sp, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfbb      	ittet	lt
 800b926:	425b      	neglt	r3, r3
 800b928:	f042 0202 	orrlt.w	r2, r2, #2
 800b92c:	9307      	strge	r3, [sp, #28]
 800b92e:	9307      	strlt	r3, [sp, #28]
 800b930:	bfb8      	it	lt
 800b932:	9204      	strlt	r2, [sp, #16]
 800b934:	7823      	ldrb	r3, [r4, #0]
 800b936:	2b2e      	cmp	r3, #46	; 0x2e
 800b938:	d10c      	bne.n	800b954 <_svfiprintf_r+0x130>
 800b93a:	7863      	ldrb	r3, [r4, #1]
 800b93c:	2b2a      	cmp	r3, #42	; 0x2a
 800b93e:	d135      	bne.n	800b9ac <_svfiprintf_r+0x188>
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	1d1a      	adds	r2, r3, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	9203      	str	r2, [sp, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bfb8      	it	lt
 800b94c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b950:	3402      	adds	r4, #2
 800b952:	9305      	str	r3, [sp, #20]
 800b954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba20 <_svfiprintf_r+0x1fc>
 800b958:	7821      	ldrb	r1, [r4, #0]
 800b95a:	2203      	movs	r2, #3
 800b95c:	4650      	mov	r0, sl
 800b95e:	f7f4 fc5f 	bl	8000220 <memchr>
 800b962:	b140      	cbz	r0, 800b976 <_svfiprintf_r+0x152>
 800b964:	2340      	movs	r3, #64	; 0x40
 800b966:	eba0 000a 	sub.w	r0, r0, sl
 800b96a:	fa03 f000 	lsl.w	r0, r3, r0
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	4303      	orrs	r3, r0
 800b972:	3401      	adds	r4, #1
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97a:	4826      	ldr	r0, [pc, #152]	; (800ba14 <_svfiprintf_r+0x1f0>)
 800b97c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b980:	2206      	movs	r2, #6
 800b982:	f7f4 fc4d 	bl	8000220 <memchr>
 800b986:	2800      	cmp	r0, #0
 800b988:	d038      	beq.n	800b9fc <_svfiprintf_r+0x1d8>
 800b98a:	4b23      	ldr	r3, [pc, #140]	; (800ba18 <_svfiprintf_r+0x1f4>)
 800b98c:	bb1b      	cbnz	r3, 800b9d6 <_svfiprintf_r+0x1b2>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	3307      	adds	r3, #7
 800b992:	f023 0307 	bic.w	r3, r3, #7
 800b996:	3308      	adds	r3, #8
 800b998:	9303      	str	r3, [sp, #12]
 800b99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99c:	4433      	add	r3, r6
 800b99e:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a0:	e767      	b.n	800b872 <_svfiprintf_r+0x4e>
 800b9a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	e7a5      	b.n	800b8f8 <_svfiprintf_r+0xd4>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	3401      	adds	r4, #1
 800b9b0:	9305      	str	r3, [sp, #20]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f04f 0c0a 	mov.w	ip, #10
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9be:	3a30      	subs	r2, #48	; 0x30
 800b9c0:	2a09      	cmp	r2, #9
 800b9c2:	d903      	bls.n	800b9cc <_svfiprintf_r+0x1a8>
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d0c5      	beq.n	800b954 <_svfiprintf_r+0x130>
 800b9c8:	9105      	str	r1, [sp, #20]
 800b9ca:	e7c3      	b.n	800b954 <_svfiprintf_r+0x130>
 800b9cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e7f0      	b.n	800b9b8 <_svfiprintf_r+0x194>
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <_svfiprintf_r+0x1f8>)
 800b9de:	a904      	add	r1, sp, #16
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7fc f9c1 	bl	8007d68 <_printf_float>
 800b9e6:	1c42      	adds	r2, r0, #1
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	d1d6      	bne.n	800b99a <_svfiprintf_r+0x176>
 800b9ec:	89ab      	ldrh	r3, [r5, #12]
 800b9ee:	065b      	lsls	r3, r3, #25
 800b9f0:	f53f af2c 	bmi.w	800b84c <_svfiprintf_r+0x28>
 800b9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9f6:	b01d      	add	sp, #116	; 0x74
 800b9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fc:	ab03      	add	r3, sp, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <_svfiprintf_r+0x1f8>)
 800ba04:	a904      	add	r1, sp, #16
 800ba06:	4638      	mov	r0, r7
 800ba08:	f7fc fc52 	bl	80082b0 <_printf_i>
 800ba0c:	e7eb      	b.n	800b9e6 <_svfiprintf_r+0x1c2>
 800ba0e:	bf00      	nop
 800ba10:	0800d194 	.word	0x0800d194
 800ba14:	0800d19e 	.word	0x0800d19e
 800ba18:	08007d69 	.word	0x08007d69
 800ba1c:	0800b76d 	.word	0x0800b76d
 800ba20:	0800d19a 	.word	0x0800d19a

0800ba24 <_sungetc_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	1c4b      	adds	r3, r1, #1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	d103      	bne.n	800ba34 <_sungetc_r+0x10>
 800ba2c:	f04f 35ff 	mov.w	r5, #4294967295
 800ba30:	4628      	mov	r0, r5
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	8993      	ldrh	r3, [r2, #12]
 800ba36:	f023 0320 	bic.w	r3, r3, #32
 800ba3a:	8193      	strh	r3, [r2, #12]
 800ba3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba3e:	6852      	ldr	r2, [r2, #4]
 800ba40:	b2cd      	uxtb	r5, r1
 800ba42:	b18b      	cbz	r3, 800ba68 <_sungetc_r+0x44>
 800ba44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba46:	4293      	cmp	r3, r2
 800ba48:	dd08      	ble.n	800ba5c <_sungetc_r+0x38>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	6022      	str	r2, [r4, #0]
 800ba50:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ba54:	6863      	ldr	r3, [r4, #4]
 800ba56:	3301      	adds	r3, #1
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	e7e9      	b.n	800ba30 <_sungetc_r+0xc>
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	f000 fbf5 	bl	800c24c <__submore>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d0f1      	beq.n	800ba4a <_sungetc_r+0x26>
 800ba66:	e7e1      	b.n	800ba2c <_sungetc_r+0x8>
 800ba68:	6921      	ldr	r1, [r4, #16]
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	b151      	cbz	r1, 800ba84 <_sungetc_r+0x60>
 800ba6e:	4299      	cmp	r1, r3
 800ba70:	d208      	bcs.n	800ba84 <_sungetc_r+0x60>
 800ba72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ba76:	42a9      	cmp	r1, r5
 800ba78:	d104      	bne.n	800ba84 <_sungetc_r+0x60>
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	3201      	adds	r2, #1
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	6062      	str	r2, [r4, #4]
 800ba82:	e7d5      	b.n	800ba30 <_sungetc_r+0xc>
 800ba84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba8e:	2303      	movs	r3, #3
 800ba90:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba92:	4623      	mov	r3, r4
 800ba94:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7dc      	b.n	800ba58 <_sungetc_r+0x34>

0800ba9e <__ssrefill_r>:
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	460c      	mov	r4, r1
 800baa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800baa4:	b169      	cbz	r1, 800bac2 <__ssrefill_r+0x24>
 800baa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baaa:	4299      	cmp	r1, r3
 800baac:	d001      	beq.n	800bab2 <__ssrefill_r+0x14>
 800baae:	f7ff fdb3 	bl	800b618 <_free_r>
 800bab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bab4:	6063      	str	r3, [r4, #4]
 800bab6:	2000      	movs	r0, #0
 800bab8:	6360      	str	r0, [r4, #52]	; 0x34
 800baba:	b113      	cbz	r3, 800bac2 <__ssrefill_r+0x24>
 800babc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	6923      	ldr	r3, [r4, #16]
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	2300      	movs	r3, #0
 800bac8:	6063      	str	r3, [r4, #4]
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f043 0320 	orr.w	r3, r3, #32
 800bad0:	81a3      	strh	r3, [r4, #12]
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295
 800bad6:	e7f3      	b.n	800bac0 <__ssrefill_r+0x22>

0800bad8 <__ssvfiscanf_r>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	460c      	mov	r4, r1
 800bade:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bae2:	2100      	movs	r1, #0
 800bae4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bae8:	49b2      	ldr	r1, [pc, #712]	; (800bdb4 <__ssvfiscanf_r+0x2dc>)
 800baea:	91a0      	str	r1, [sp, #640]	; 0x280
 800baec:	f10d 0804 	add.w	r8, sp, #4
 800baf0:	49b1      	ldr	r1, [pc, #708]	; (800bdb8 <__ssvfiscanf_r+0x2e0>)
 800baf2:	4fb2      	ldr	r7, [pc, #712]	; (800bdbc <__ssvfiscanf_r+0x2e4>)
 800baf4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bdc0 <__ssvfiscanf_r+0x2e8>
 800baf8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bafc:	4606      	mov	r6, r0
 800bafe:	91a1      	str	r1, [sp, #644]	; 0x284
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	f892 a000 	ldrb.w	sl, [r2]
 800bb06:	f1ba 0f00 	cmp.w	sl, #0
 800bb0a:	f000 8151 	beq.w	800bdb0 <__ssvfiscanf_r+0x2d8>
 800bb0e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bb12:	f013 0308 	ands.w	r3, r3, #8
 800bb16:	f102 0501 	add.w	r5, r2, #1
 800bb1a:	d019      	beq.n	800bb50 <__ssvfiscanf_r+0x78>
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd0f      	ble.n	800bb42 <__ssvfiscanf_r+0x6a>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	781a      	ldrb	r2, [r3, #0]
 800bb26:	5cba      	ldrb	r2, [r7, r2]
 800bb28:	0712      	lsls	r2, r2, #28
 800bb2a:	d401      	bmi.n	800bb30 <__ssvfiscanf_r+0x58>
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	e7e8      	b.n	800bb02 <__ssvfiscanf_r+0x2a>
 800bb30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb32:	3201      	adds	r2, #1
 800bb34:	9245      	str	r2, [sp, #276]	; 0x114
 800bb36:	6862      	ldr	r2, [r4, #4]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	3a01      	subs	r2, #1
 800bb3c:	6062      	str	r2, [r4, #4]
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	e7ec      	b.n	800bb1c <__ssvfiscanf_r+0x44>
 800bb42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb44:	4621      	mov	r1, r4
 800bb46:	4630      	mov	r0, r6
 800bb48:	4798      	blx	r3
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0e9      	beq.n	800bb22 <__ssvfiscanf_r+0x4a>
 800bb4e:	e7ed      	b.n	800bb2c <__ssvfiscanf_r+0x54>
 800bb50:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bb54:	f040 8083 	bne.w	800bc5e <__ssvfiscanf_r+0x186>
 800bb58:	9341      	str	r3, [sp, #260]	; 0x104
 800bb5a:	9343      	str	r3, [sp, #268]	; 0x10c
 800bb5c:	7853      	ldrb	r3, [r2, #1]
 800bb5e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb60:	bf02      	ittt	eq
 800bb62:	2310      	moveq	r3, #16
 800bb64:	1c95      	addeq	r5, r2, #2
 800bb66:	9341      	streq	r3, [sp, #260]	; 0x104
 800bb68:	220a      	movs	r2, #10
 800bb6a:	46ab      	mov	fp, r5
 800bb6c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bb70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d91d      	bls.n	800bbb4 <__ssvfiscanf_r+0xdc>
 800bb78:	4891      	ldr	r0, [pc, #580]	; (800bdc0 <__ssvfiscanf_r+0x2e8>)
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	f7f4 fb50 	bl	8000220 <memchr>
 800bb80:	b140      	cbz	r0, 800bb94 <__ssvfiscanf_r+0xbc>
 800bb82:	2301      	movs	r3, #1
 800bb84:	eba0 0009 	sub.w	r0, r0, r9
 800bb88:	fa03 f000 	lsl.w	r0, r3, r0
 800bb8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb8e:	4318      	orrs	r0, r3
 800bb90:	9041      	str	r0, [sp, #260]	; 0x104
 800bb92:	465d      	mov	r5, fp
 800bb94:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb98:	2b78      	cmp	r3, #120	; 0x78
 800bb9a:	d806      	bhi.n	800bbaa <__ssvfiscanf_r+0xd2>
 800bb9c:	2b57      	cmp	r3, #87	; 0x57
 800bb9e:	d810      	bhi.n	800bbc2 <__ssvfiscanf_r+0xea>
 800bba0:	2b25      	cmp	r3, #37	; 0x25
 800bba2:	d05c      	beq.n	800bc5e <__ssvfiscanf_r+0x186>
 800bba4:	d856      	bhi.n	800bc54 <__ssvfiscanf_r+0x17c>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d074      	beq.n	800bc94 <__ssvfiscanf_r+0x1bc>
 800bbaa:	2303      	movs	r3, #3
 800bbac:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbae:	230a      	movs	r3, #10
 800bbb0:	9342      	str	r3, [sp, #264]	; 0x108
 800bbb2:	e081      	b.n	800bcb8 <__ssvfiscanf_r+0x1e0>
 800bbb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbb6:	fb02 1303 	mla	r3, r2, r3, r1
 800bbba:	3b30      	subs	r3, #48	; 0x30
 800bbbc:	9343      	str	r3, [sp, #268]	; 0x10c
 800bbbe:	465d      	mov	r5, fp
 800bbc0:	e7d3      	b.n	800bb6a <__ssvfiscanf_r+0x92>
 800bbc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bbc6:	2a20      	cmp	r2, #32
 800bbc8:	d8ef      	bhi.n	800bbaa <__ssvfiscanf_r+0xd2>
 800bbca:	a101      	add	r1, pc, #4	; (adr r1, 800bbd0 <__ssvfiscanf_r+0xf8>)
 800bbcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bbd0:	0800bca3 	.word	0x0800bca3
 800bbd4:	0800bbab 	.word	0x0800bbab
 800bbd8:	0800bbab 	.word	0x0800bbab
 800bbdc:	0800bd01 	.word	0x0800bd01
 800bbe0:	0800bbab 	.word	0x0800bbab
 800bbe4:	0800bbab 	.word	0x0800bbab
 800bbe8:	0800bbab 	.word	0x0800bbab
 800bbec:	0800bbab 	.word	0x0800bbab
 800bbf0:	0800bbab 	.word	0x0800bbab
 800bbf4:	0800bbab 	.word	0x0800bbab
 800bbf8:	0800bbab 	.word	0x0800bbab
 800bbfc:	0800bd17 	.word	0x0800bd17
 800bc00:	0800bced 	.word	0x0800bced
 800bc04:	0800bc5b 	.word	0x0800bc5b
 800bc08:	0800bc5b 	.word	0x0800bc5b
 800bc0c:	0800bc5b 	.word	0x0800bc5b
 800bc10:	0800bbab 	.word	0x0800bbab
 800bc14:	0800bcf1 	.word	0x0800bcf1
 800bc18:	0800bbab 	.word	0x0800bbab
 800bc1c:	0800bbab 	.word	0x0800bbab
 800bc20:	0800bbab 	.word	0x0800bbab
 800bc24:	0800bbab 	.word	0x0800bbab
 800bc28:	0800bd27 	.word	0x0800bd27
 800bc2c:	0800bcf9 	.word	0x0800bcf9
 800bc30:	0800bc9b 	.word	0x0800bc9b
 800bc34:	0800bbab 	.word	0x0800bbab
 800bc38:	0800bbab 	.word	0x0800bbab
 800bc3c:	0800bd23 	.word	0x0800bd23
 800bc40:	0800bbab 	.word	0x0800bbab
 800bc44:	0800bced 	.word	0x0800bced
 800bc48:	0800bbab 	.word	0x0800bbab
 800bc4c:	0800bbab 	.word	0x0800bbab
 800bc50:	0800bca3 	.word	0x0800bca3
 800bc54:	3b45      	subs	r3, #69	; 0x45
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d8a7      	bhi.n	800bbaa <__ssvfiscanf_r+0xd2>
 800bc5a:	2305      	movs	r3, #5
 800bc5c:	e02b      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bc5e:	6863      	ldr	r3, [r4, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	dd0d      	ble.n	800bc80 <__ssvfiscanf_r+0x1a8>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	4552      	cmp	r2, sl
 800bc6a:	f040 80a1 	bne.w	800bdb0 <__ssvfiscanf_r+0x2d8>
 800bc6e:	3301      	adds	r3, #1
 800bc70:	6862      	ldr	r2, [r4, #4]
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bc76:	3a01      	subs	r2, #1
 800bc78:	3301      	adds	r3, #1
 800bc7a:	6062      	str	r2, [r4, #4]
 800bc7c:	9345      	str	r3, [sp, #276]	; 0x114
 800bc7e:	e755      	b.n	800bb2c <__ssvfiscanf_r+0x54>
 800bc80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc82:	4621      	mov	r1, r4
 800bc84:	4630      	mov	r0, r6
 800bc86:	4798      	blx	r3
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d0eb      	beq.n	800bc64 <__ssvfiscanf_r+0x18c>
 800bc8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 8084 	bne.w	800bd9c <__ssvfiscanf_r+0x2c4>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e086      	b.n	800bda8 <__ssvfiscanf_r+0x2d0>
 800bc9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc9c:	f042 0220 	orr.w	r2, r2, #32
 800bca0:	9241      	str	r2, [sp, #260]	; 0x104
 800bca2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bca8:	9241      	str	r2, [sp, #260]	; 0x104
 800bcaa:	2210      	movs	r2, #16
 800bcac:	2b6f      	cmp	r3, #111	; 0x6f
 800bcae:	9242      	str	r2, [sp, #264]	; 0x108
 800bcb0:	bf34      	ite	cc
 800bcb2:	2303      	movcc	r3, #3
 800bcb4:	2304      	movcs	r3, #4
 800bcb6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dd41      	ble.n	800bd42 <__ssvfiscanf_r+0x26a>
 800bcbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcc0:	0659      	lsls	r1, r3, #25
 800bcc2:	d404      	bmi.n	800bcce <__ssvfiscanf_r+0x1f6>
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	781a      	ldrb	r2, [r3, #0]
 800bcc8:	5cba      	ldrb	r2, [r7, r2]
 800bcca:	0712      	lsls	r2, r2, #28
 800bccc:	d440      	bmi.n	800bd50 <__ssvfiscanf_r+0x278>
 800bcce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	dc4f      	bgt.n	800bd74 <__ssvfiscanf_r+0x29c>
 800bcd4:	466b      	mov	r3, sp
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	a941      	add	r1, sp, #260	; 0x104
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 f874 	bl	800bdc8 <_scanf_chars>
 800bce0:	2801      	cmp	r0, #1
 800bce2:	d065      	beq.n	800bdb0 <__ssvfiscanf_r+0x2d8>
 800bce4:	2802      	cmp	r0, #2
 800bce6:	f47f af21 	bne.w	800bb2c <__ssvfiscanf_r+0x54>
 800bcea:	e7cf      	b.n	800bc8c <__ssvfiscanf_r+0x1b4>
 800bcec:	220a      	movs	r2, #10
 800bcee:	e7dd      	b.n	800bcac <__ssvfiscanf_r+0x1d4>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9342      	str	r3, [sp, #264]	; 0x108
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e7de      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	9342      	str	r3, [sp, #264]	; 0x108
 800bcfc:	2304      	movs	r3, #4
 800bcfe:	e7da      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4640      	mov	r0, r8
 800bd04:	f000 f9d8 	bl	800c0b8 <__sccl>
 800bd08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd0e:	9341      	str	r3, [sp, #260]	; 0x104
 800bd10:	4605      	mov	r5, r0
 800bd12:	2301      	movs	r3, #1
 800bd14:	e7cf      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd1c:	9341      	str	r3, [sp, #260]	; 0x104
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e7c9      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd22:	2302      	movs	r3, #2
 800bd24:	e7c7      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd26:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd28:	06c3      	lsls	r3, r0, #27
 800bd2a:	f53f aeff 	bmi.w	800bb2c <__ssvfiscanf_r+0x54>
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd32:	1d19      	adds	r1, r3, #4
 800bd34:	9100      	str	r1, [sp, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	07c0      	lsls	r0, r0, #31
 800bd3a:	bf4c      	ite	mi
 800bd3c:	801a      	strhmi	r2, [r3, #0]
 800bd3e:	601a      	strpl	r2, [r3, #0]
 800bd40:	e6f4      	b.n	800bb2c <__ssvfiscanf_r+0x54>
 800bd42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd44:	4621      	mov	r1, r4
 800bd46:	4630      	mov	r0, r6
 800bd48:	4798      	blx	r3
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d0b7      	beq.n	800bcbe <__ssvfiscanf_r+0x1e6>
 800bd4e:	e79d      	b.n	800bc8c <__ssvfiscanf_r+0x1b4>
 800bd50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd52:	3201      	adds	r2, #1
 800bd54:	9245      	str	r2, [sp, #276]	; 0x114
 800bd56:	6862      	ldr	r2, [r4, #4]
 800bd58:	3a01      	subs	r2, #1
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	6062      	str	r2, [r4, #4]
 800bd5e:	dd02      	ble.n	800bd66 <__ssvfiscanf_r+0x28e>
 800bd60:	3301      	adds	r3, #1
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	e7ae      	b.n	800bcc4 <__ssvfiscanf_r+0x1ec>
 800bd66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	4798      	blx	r3
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d0a8      	beq.n	800bcc4 <__ssvfiscanf_r+0x1ec>
 800bd72:	e78b      	b.n	800bc8c <__ssvfiscanf_r+0x1b4>
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	dc06      	bgt.n	800bd86 <__ssvfiscanf_r+0x2ae>
 800bd78:	466b      	mov	r3, sp
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	a941      	add	r1, sp, #260	; 0x104
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f000 f87a 	bl	800be78 <_scanf_i>
 800bd84:	e7ac      	b.n	800bce0 <__ssvfiscanf_r+0x208>
 800bd86:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <__ssvfiscanf_r+0x2ec>)
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f43f aecf 	beq.w	800bb2c <__ssvfiscanf_r+0x54>
 800bd8e:	466b      	mov	r3, sp
 800bd90:	4622      	mov	r2, r4
 800bd92:	a941      	add	r1, sp, #260	; 0x104
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7fc fbb1 	bl	80084fc <_scanf_float>
 800bd9a:	e7a1      	b.n	800bce0 <__ssvfiscanf_r+0x208>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bda2:	bf18      	it	ne
 800bda4:	f04f 30ff 	movne.w	r0, #4294967295
 800bda8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bdb2:	e7f9      	b.n	800bda8 <__ssvfiscanf_r+0x2d0>
 800bdb4:	0800ba25 	.word	0x0800ba25
 800bdb8:	0800ba9f 	.word	0x0800ba9f
 800bdbc:	0800ce21 	.word	0x0800ce21
 800bdc0:	0800d19a 	.word	0x0800d19a
 800bdc4:	080084fd 	.word	0x080084fd

0800bdc8 <_scanf_chars>:
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	4615      	mov	r5, r2
 800bdce:	688a      	ldr	r2, [r1, #8]
 800bdd0:	4680      	mov	r8, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	b932      	cbnz	r2, 800bde4 <_scanf_chars+0x1c>
 800bdd6:	698a      	ldr	r2, [r1, #24]
 800bdd8:	2a00      	cmp	r2, #0
 800bdda:	bf0c      	ite	eq
 800bddc:	2201      	moveq	r2, #1
 800bdde:	f04f 32ff 	movne.w	r2, #4294967295
 800bde2:	608a      	str	r2, [r1, #8]
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800be74 <_scanf_chars+0xac>
 800bdea:	06d1      	lsls	r1, r2, #27
 800bdec:	bf5f      	itttt	pl
 800bdee:	681a      	ldrpl	r2, [r3, #0]
 800bdf0:	1d11      	addpl	r1, r2, #4
 800bdf2:	6019      	strpl	r1, [r3, #0]
 800bdf4:	6816      	ldrpl	r6, [r2, #0]
 800bdf6:	2700      	movs	r7, #0
 800bdf8:	69a0      	ldr	r0, [r4, #24]
 800bdfa:	b188      	cbz	r0, 800be20 <_scanf_chars+0x58>
 800bdfc:	2801      	cmp	r0, #1
 800bdfe:	d107      	bne.n	800be10 <_scanf_chars+0x48>
 800be00:	682b      	ldr	r3, [r5, #0]
 800be02:	781a      	ldrb	r2, [r3, #0]
 800be04:	6963      	ldr	r3, [r4, #20]
 800be06:	5c9b      	ldrb	r3, [r3, r2]
 800be08:	b953      	cbnz	r3, 800be20 <_scanf_chars+0x58>
 800be0a:	bb27      	cbnz	r7, 800be56 <_scanf_chars+0x8e>
 800be0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be10:	2802      	cmp	r0, #2
 800be12:	d120      	bne.n	800be56 <_scanf_chars+0x8e>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	f813 3009 	ldrb.w	r3, [r3, r9]
 800be1c:	071b      	lsls	r3, r3, #28
 800be1e:	d41a      	bmi.n	800be56 <_scanf_chars+0x8e>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	06da      	lsls	r2, r3, #27
 800be24:	bf5e      	ittt	pl
 800be26:	682b      	ldrpl	r3, [r5, #0]
 800be28:	781b      	ldrbpl	r3, [r3, #0]
 800be2a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800be2e:	682a      	ldr	r2, [r5, #0]
 800be30:	686b      	ldr	r3, [r5, #4]
 800be32:	3201      	adds	r2, #1
 800be34:	602a      	str	r2, [r5, #0]
 800be36:	68a2      	ldr	r2, [r4, #8]
 800be38:	3b01      	subs	r3, #1
 800be3a:	3a01      	subs	r2, #1
 800be3c:	606b      	str	r3, [r5, #4]
 800be3e:	3701      	adds	r7, #1
 800be40:	60a2      	str	r2, [r4, #8]
 800be42:	b142      	cbz	r2, 800be56 <_scanf_chars+0x8e>
 800be44:	2b00      	cmp	r3, #0
 800be46:	dcd7      	bgt.n	800bdf8 <_scanf_chars+0x30>
 800be48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800be4c:	4629      	mov	r1, r5
 800be4e:	4640      	mov	r0, r8
 800be50:	4798      	blx	r3
 800be52:	2800      	cmp	r0, #0
 800be54:	d0d0      	beq.n	800bdf8 <_scanf_chars+0x30>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	f013 0310 	ands.w	r3, r3, #16
 800be5c:	d105      	bne.n	800be6a <_scanf_chars+0xa2>
 800be5e:	68e2      	ldr	r2, [r4, #12]
 800be60:	3201      	adds	r2, #1
 800be62:	60e2      	str	r2, [r4, #12]
 800be64:	69a2      	ldr	r2, [r4, #24]
 800be66:	b102      	cbz	r2, 800be6a <_scanf_chars+0xa2>
 800be68:	7033      	strb	r3, [r6, #0]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	441f      	add	r7, r3
 800be6e:	6127      	str	r7, [r4, #16]
 800be70:	2000      	movs	r0, #0
 800be72:	e7cb      	b.n	800be0c <_scanf_chars+0x44>
 800be74:	0800ce21 	.word	0x0800ce21

0800be78 <_scanf_i>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	4698      	mov	r8, r3
 800be7e:	4b74      	ldr	r3, [pc, #464]	; (800c050 <_scanf_i+0x1d8>)
 800be80:	460c      	mov	r4, r1
 800be82:	4682      	mov	sl, r0
 800be84:	4616      	mov	r6, r2
 800be86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be8a:	b087      	sub	sp, #28
 800be8c:	ab03      	add	r3, sp, #12
 800be8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be92:	4b70      	ldr	r3, [pc, #448]	; (800c054 <_scanf_i+0x1dc>)
 800be94:	69a1      	ldr	r1, [r4, #24]
 800be96:	4a70      	ldr	r2, [pc, #448]	; (800c058 <_scanf_i+0x1e0>)
 800be98:	2903      	cmp	r1, #3
 800be9a:	bf18      	it	ne
 800be9c:	461a      	movne	r2, r3
 800be9e:	68a3      	ldr	r3, [r4, #8]
 800bea0:	9201      	str	r2, [sp, #4]
 800bea2:	1e5a      	subs	r2, r3, #1
 800bea4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bea8:	bf88      	it	hi
 800beaa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800beae:	4627      	mov	r7, r4
 800beb0:	bf82      	ittt	hi
 800beb2:	eb03 0905 	addhi.w	r9, r3, r5
 800beb6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800beba:	60a3      	strhi	r3, [r4, #8]
 800bebc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bec0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bec4:	bf98      	it	ls
 800bec6:	f04f 0900 	movls.w	r9, #0
 800beca:	6023      	str	r3, [r4, #0]
 800becc:	463d      	mov	r5, r7
 800bece:	f04f 0b00 	mov.w	fp, #0
 800bed2:	6831      	ldr	r1, [r6, #0]
 800bed4:	ab03      	add	r3, sp, #12
 800bed6:	7809      	ldrb	r1, [r1, #0]
 800bed8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bedc:	2202      	movs	r2, #2
 800bede:	f7f4 f99f 	bl	8000220 <memchr>
 800bee2:	b328      	cbz	r0, 800bf30 <_scanf_i+0xb8>
 800bee4:	f1bb 0f01 	cmp.w	fp, #1
 800bee8:	d159      	bne.n	800bf9e <_scanf_i+0x126>
 800beea:	6862      	ldr	r2, [r4, #4]
 800beec:	b92a      	cbnz	r2, 800befa <_scanf_i+0x82>
 800beee:	6822      	ldr	r2, [r4, #0]
 800bef0:	2308      	movs	r3, #8
 800bef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bef6:	6063      	str	r3, [r4, #4]
 800bef8:	6022      	str	r2, [r4, #0]
 800befa:	6822      	ldr	r2, [r4, #0]
 800befc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bf00:	6022      	str	r2, [r4, #0]
 800bf02:	68a2      	ldr	r2, [r4, #8]
 800bf04:	1e51      	subs	r1, r2, #1
 800bf06:	60a1      	str	r1, [r4, #8]
 800bf08:	b192      	cbz	r2, 800bf30 <_scanf_i+0xb8>
 800bf0a:	6832      	ldr	r2, [r6, #0]
 800bf0c:	1c51      	adds	r1, r2, #1
 800bf0e:	6031      	str	r1, [r6, #0]
 800bf10:	7812      	ldrb	r2, [r2, #0]
 800bf12:	f805 2b01 	strb.w	r2, [r5], #1
 800bf16:	6872      	ldr	r2, [r6, #4]
 800bf18:	3a01      	subs	r2, #1
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	6072      	str	r2, [r6, #4]
 800bf1e:	dc07      	bgt.n	800bf30 <_scanf_i+0xb8>
 800bf20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bf24:	4631      	mov	r1, r6
 800bf26:	4650      	mov	r0, sl
 800bf28:	4790      	blx	r2
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	f040 8085 	bne.w	800c03a <_scanf_i+0x1c2>
 800bf30:	f10b 0b01 	add.w	fp, fp, #1
 800bf34:	f1bb 0f03 	cmp.w	fp, #3
 800bf38:	d1cb      	bne.n	800bed2 <_scanf_i+0x5a>
 800bf3a:	6863      	ldr	r3, [r4, #4]
 800bf3c:	b90b      	cbnz	r3, 800bf42 <_scanf_i+0xca>
 800bf3e:	230a      	movs	r3, #10
 800bf40:	6063      	str	r3, [r4, #4]
 800bf42:	6863      	ldr	r3, [r4, #4]
 800bf44:	4945      	ldr	r1, [pc, #276]	; (800c05c <_scanf_i+0x1e4>)
 800bf46:	6960      	ldr	r0, [r4, #20]
 800bf48:	1ac9      	subs	r1, r1, r3
 800bf4a:	f000 f8b5 	bl	800c0b8 <__sccl>
 800bf4e:	f04f 0b00 	mov.w	fp, #0
 800bf52:	68a3      	ldr	r3, [r4, #8]
 800bf54:	6822      	ldr	r2, [r4, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d03d      	beq.n	800bfd6 <_scanf_i+0x15e>
 800bf5a:	6831      	ldr	r1, [r6, #0]
 800bf5c:	6960      	ldr	r0, [r4, #20]
 800bf5e:	f891 c000 	ldrb.w	ip, [r1]
 800bf62:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d035      	beq.n	800bfd6 <_scanf_i+0x15e>
 800bf6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bf6e:	d124      	bne.n	800bfba <_scanf_i+0x142>
 800bf70:	0510      	lsls	r0, r2, #20
 800bf72:	d522      	bpl.n	800bfba <_scanf_i+0x142>
 800bf74:	f10b 0b01 	add.w	fp, fp, #1
 800bf78:	f1b9 0f00 	cmp.w	r9, #0
 800bf7c:	d003      	beq.n	800bf86 <_scanf_i+0x10e>
 800bf7e:	3301      	adds	r3, #1
 800bf80:	f109 39ff 	add.w	r9, r9, #4294967295
 800bf84:	60a3      	str	r3, [r4, #8]
 800bf86:	6873      	ldr	r3, [r6, #4]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	6073      	str	r3, [r6, #4]
 800bf8e:	dd1b      	ble.n	800bfc8 <_scanf_i+0x150>
 800bf90:	6833      	ldr	r3, [r6, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	6033      	str	r3, [r6, #0]
 800bf96:	68a3      	ldr	r3, [r4, #8]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	60a3      	str	r3, [r4, #8]
 800bf9c:	e7d9      	b.n	800bf52 <_scanf_i+0xda>
 800bf9e:	f1bb 0f02 	cmp.w	fp, #2
 800bfa2:	d1ae      	bne.n	800bf02 <_scanf_i+0x8a>
 800bfa4:	6822      	ldr	r2, [r4, #0]
 800bfa6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bfaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bfae:	d1bf      	bne.n	800bf30 <_scanf_i+0xb8>
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	6063      	str	r3, [r4, #4]
 800bfb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfb8:	e7a2      	b.n	800bf00 <_scanf_i+0x88>
 800bfba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bfbe:	6022      	str	r2, [r4, #0]
 800bfc0:	780b      	ldrb	r3, [r1, #0]
 800bfc2:	f805 3b01 	strb.w	r3, [r5], #1
 800bfc6:	e7de      	b.n	800bf86 <_scanf_i+0x10e>
 800bfc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4650      	mov	r0, sl
 800bfd0:	4798      	blx	r3
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d0df      	beq.n	800bf96 <_scanf_i+0x11e>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	05d9      	lsls	r1, r3, #23
 800bfda:	d50d      	bpl.n	800bff8 <_scanf_i+0x180>
 800bfdc:	42bd      	cmp	r5, r7
 800bfde:	d909      	bls.n	800bff4 <_scanf_i+0x17c>
 800bfe0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bfe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfe8:	4632      	mov	r2, r6
 800bfea:	4650      	mov	r0, sl
 800bfec:	4798      	blx	r3
 800bfee:	f105 39ff 	add.w	r9, r5, #4294967295
 800bff2:	464d      	mov	r5, r9
 800bff4:	42bd      	cmp	r5, r7
 800bff6:	d028      	beq.n	800c04a <_scanf_i+0x1d2>
 800bff8:	6822      	ldr	r2, [r4, #0]
 800bffa:	f012 0210 	ands.w	r2, r2, #16
 800bffe:	d113      	bne.n	800c028 <_scanf_i+0x1b0>
 800c000:	702a      	strb	r2, [r5, #0]
 800c002:	6863      	ldr	r3, [r4, #4]
 800c004:	9e01      	ldr	r6, [sp, #4]
 800c006:	4639      	mov	r1, r7
 800c008:	4650      	mov	r0, sl
 800c00a:	47b0      	blx	r6
 800c00c:	f8d8 3000 	ldr.w	r3, [r8]
 800c010:	6821      	ldr	r1, [r4, #0]
 800c012:	1d1a      	adds	r2, r3, #4
 800c014:	f8c8 2000 	str.w	r2, [r8]
 800c018:	f011 0f20 	tst.w	r1, #32
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	d00f      	beq.n	800c040 <_scanf_i+0x1c8>
 800c020:	6018      	str	r0, [r3, #0]
 800c022:	68e3      	ldr	r3, [r4, #12]
 800c024:	3301      	adds	r3, #1
 800c026:	60e3      	str	r3, [r4, #12]
 800c028:	1bed      	subs	r5, r5, r7
 800c02a:	44ab      	add	fp, r5
 800c02c:	6925      	ldr	r5, [r4, #16]
 800c02e:	445d      	add	r5, fp
 800c030:	6125      	str	r5, [r4, #16]
 800c032:	2000      	movs	r0, #0
 800c034:	b007      	add	sp, #28
 800c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03a:	f04f 0b00 	mov.w	fp, #0
 800c03e:	e7ca      	b.n	800bfd6 <_scanf_i+0x15e>
 800c040:	07ca      	lsls	r2, r1, #31
 800c042:	bf4c      	ite	mi
 800c044:	8018      	strhmi	r0, [r3, #0]
 800c046:	6018      	strpl	r0, [r3, #0]
 800c048:	e7eb      	b.n	800c022 <_scanf_i+0x1aa>
 800c04a:	2001      	movs	r0, #1
 800c04c:	e7f2      	b.n	800c034 <_scanf_i+0x1bc>
 800c04e:	bf00      	nop
 800c050:	0800cd70 	.word	0x0800cd70
 800c054:	0800c249 	.word	0x0800c249
 800c058:	080097b1 	.word	0x080097b1
 800c05c:	0800d1be 	.word	0x0800d1be

0800c060 <_read_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_read_r+0x20>)
 800c064:	4604      	mov	r4, r0
 800c066:	4608      	mov	r0, r1
 800c068:	4611      	mov	r1, r2
 800c06a:	2200      	movs	r2, #0
 800c06c:	602a      	str	r2, [r5, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	f7f5 ffa6 	bl	8001fc0 <_read>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_read_r+0x1e>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_read_r+0x1e>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	2000084c 	.word	0x2000084c
 800c084:	00000000 	.word	0x00000000

0800c088 <nan>:
 800c088:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c090 <nan+0x8>
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	00000000 	.word	0x00000000
 800c094:	7ff80000 	.word	0x7ff80000

0800c098 <_sbrk_r>:
 800c098:	b538      	push	{r3, r4, r5, lr}
 800c09a:	4d06      	ldr	r5, [pc, #24]	; (800c0b4 <_sbrk_r+0x1c>)
 800c09c:	2300      	movs	r3, #0
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4608      	mov	r0, r1
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	f7f5 fffa 	bl	800209c <_sbrk>
 800c0a8:	1c43      	adds	r3, r0, #1
 800c0aa:	d102      	bne.n	800c0b2 <_sbrk_r+0x1a>
 800c0ac:	682b      	ldr	r3, [r5, #0]
 800c0ae:	b103      	cbz	r3, 800c0b2 <_sbrk_r+0x1a>
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	2000084c 	.word	0x2000084c

0800c0b8 <__sccl>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	780b      	ldrb	r3, [r1, #0]
 800c0bc:	4604      	mov	r4, r0
 800c0be:	2b5e      	cmp	r3, #94	; 0x5e
 800c0c0:	bf0b      	itete	eq
 800c0c2:	784b      	ldrbeq	r3, [r1, #1]
 800c0c4:	1c48      	addne	r0, r1, #1
 800c0c6:	1c88      	addeq	r0, r1, #2
 800c0c8:	2200      	movne	r2, #0
 800c0ca:	bf08      	it	eq
 800c0cc:	2201      	moveq	r2, #1
 800c0ce:	1e61      	subs	r1, r4, #1
 800c0d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c0d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c0d8:	42a9      	cmp	r1, r5
 800c0da:	d1fb      	bne.n	800c0d4 <__sccl+0x1c>
 800c0dc:	b90b      	cbnz	r3, 800c0e2 <__sccl+0x2a>
 800c0de:	3801      	subs	r0, #1
 800c0e0:	bd70      	pop	{r4, r5, r6, pc}
 800c0e2:	f082 0101 	eor.w	r1, r2, #1
 800c0e6:	54e1      	strb	r1, [r4, r3]
 800c0e8:	1c42      	adds	r2, r0, #1
 800c0ea:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c0ee:	2d2d      	cmp	r5, #45	; 0x2d
 800c0f0:	f102 36ff 	add.w	r6, r2, #4294967295
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	d006      	beq.n	800c106 <__sccl+0x4e>
 800c0f8:	2d5d      	cmp	r5, #93	; 0x5d
 800c0fa:	d0f1      	beq.n	800c0e0 <__sccl+0x28>
 800c0fc:	b90d      	cbnz	r5, 800c102 <__sccl+0x4a>
 800c0fe:	4630      	mov	r0, r6
 800c100:	e7ee      	b.n	800c0e0 <__sccl+0x28>
 800c102:	462b      	mov	r3, r5
 800c104:	e7ef      	b.n	800c0e6 <__sccl+0x2e>
 800c106:	7816      	ldrb	r6, [r2, #0]
 800c108:	2e5d      	cmp	r6, #93	; 0x5d
 800c10a:	d0fa      	beq.n	800c102 <__sccl+0x4a>
 800c10c:	42b3      	cmp	r3, r6
 800c10e:	dcf8      	bgt.n	800c102 <__sccl+0x4a>
 800c110:	4618      	mov	r0, r3
 800c112:	3001      	adds	r0, #1
 800c114:	4286      	cmp	r6, r0
 800c116:	5421      	strb	r1, [r4, r0]
 800c118:	dcfb      	bgt.n	800c112 <__sccl+0x5a>
 800c11a:	43d8      	mvns	r0, r3
 800c11c:	4430      	add	r0, r6
 800c11e:	1c5d      	adds	r5, r3, #1
 800c120:	42b3      	cmp	r3, r6
 800c122:	bfa8      	it	ge
 800c124:	2000      	movge	r0, #0
 800c126:	182b      	adds	r3, r5, r0
 800c128:	3202      	adds	r2, #2
 800c12a:	e7de      	b.n	800c0ea <__sccl+0x32>

0800c12c <strncmp>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	b16a      	cbz	r2, 800c14c <strncmp+0x20>
 800c130:	3901      	subs	r1, #1
 800c132:	1884      	adds	r4, r0, r2
 800c134:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c138:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d103      	bne.n	800c148 <strncmp+0x1c>
 800c140:	42a0      	cmp	r0, r4
 800c142:	d001      	beq.n	800c148 <strncmp+0x1c>
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1f5      	bne.n	800c134 <strncmp+0x8>
 800c148:	1a98      	subs	r0, r3, r2
 800c14a:	bd10      	pop	{r4, pc}
 800c14c:	4610      	mov	r0, r2
 800c14e:	e7fc      	b.n	800c14a <strncmp+0x1e>

0800c150 <_strtoul_l.isra.0>:
 800c150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c154:	4e3b      	ldr	r6, [pc, #236]	; (800c244 <_strtoul_l.isra.0+0xf4>)
 800c156:	4686      	mov	lr, r0
 800c158:	468c      	mov	ip, r1
 800c15a:	4660      	mov	r0, ip
 800c15c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c160:	5da5      	ldrb	r5, [r4, r6]
 800c162:	f015 0508 	ands.w	r5, r5, #8
 800c166:	d1f8      	bne.n	800c15a <_strtoul_l.isra.0+0xa>
 800c168:	2c2d      	cmp	r4, #45	; 0x2d
 800c16a:	d134      	bne.n	800c1d6 <_strtoul_l.isra.0+0x86>
 800c16c:	f89c 4000 	ldrb.w	r4, [ip]
 800c170:	f04f 0801 	mov.w	r8, #1
 800c174:	f100 0c02 	add.w	ip, r0, #2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d05e      	beq.n	800c23a <_strtoul_l.isra.0+0xea>
 800c17c:	2b10      	cmp	r3, #16
 800c17e:	d10c      	bne.n	800c19a <_strtoul_l.isra.0+0x4a>
 800c180:	2c30      	cmp	r4, #48	; 0x30
 800c182:	d10a      	bne.n	800c19a <_strtoul_l.isra.0+0x4a>
 800c184:	f89c 0000 	ldrb.w	r0, [ip]
 800c188:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c18c:	2858      	cmp	r0, #88	; 0x58
 800c18e:	d14f      	bne.n	800c230 <_strtoul_l.isra.0+0xe0>
 800c190:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c194:	2310      	movs	r3, #16
 800c196:	f10c 0c02 	add.w	ip, ip, #2
 800c19a:	f04f 37ff 	mov.w	r7, #4294967295
 800c19e:	2500      	movs	r5, #0
 800c1a0:	fbb7 f7f3 	udiv	r7, r7, r3
 800c1a4:	fb03 f907 	mul.w	r9, r3, r7
 800c1a8:	ea6f 0909 	mvn.w	r9, r9
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c1b2:	2e09      	cmp	r6, #9
 800c1b4:	d818      	bhi.n	800c1e8 <_strtoul_l.isra.0+0x98>
 800c1b6:	4634      	mov	r4, r6
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	dd24      	ble.n	800c206 <_strtoul_l.isra.0+0xb6>
 800c1bc:	2d00      	cmp	r5, #0
 800c1be:	db1f      	blt.n	800c200 <_strtoul_l.isra.0+0xb0>
 800c1c0:	4287      	cmp	r7, r0
 800c1c2:	d31d      	bcc.n	800c200 <_strtoul_l.isra.0+0xb0>
 800c1c4:	d101      	bne.n	800c1ca <_strtoul_l.isra.0+0x7a>
 800c1c6:	45a1      	cmp	r9, r4
 800c1c8:	db1a      	blt.n	800c200 <_strtoul_l.isra.0+0xb0>
 800c1ca:	fb00 4003 	mla	r0, r0, r3, r4
 800c1ce:	2501      	movs	r5, #1
 800c1d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c1d4:	e7eb      	b.n	800c1ae <_strtoul_l.isra.0+0x5e>
 800c1d6:	2c2b      	cmp	r4, #43	; 0x2b
 800c1d8:	bf08      	it	eq
 800c1da:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c1de:	46a8      	mov	r8, r5
 800c1e0:	bf08      	it	eq
 800c1e2:	f100 0c02 	addeq.w	ip, r0, #2
 800c1e6:	e7c7      	b.n	800c178 <_strtoul_l.isra.0+0x28>
 800c1e8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c1ec:	2e19      	cmp	r6, #25
 800c1ee:	d801      	bhi.n	800c1f4 <_strtoul_l.isra.0+0xa4>
 800c1f0:	3c37      	subs	r4, #55	; 0x37
 800c1f2:	e7e1      	b.n	800c1b8 <_strtoul_l.isra.0+0x68>
 800c1f4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c1f8:	2e19      	cmp	r6, #25
 800c1fa:	d804      	bhi.n	800c206 <_strtoul_l.isra.0+0xb6>
 800c1fc:	3c57      	subs	r4, #87	; 0x57
 800c1fe:	e7db      	b.n	800c1b8 <_strtoul_l.isra.0+0x68>
 800c200:	f04f 35ff 	mov.w	r5, #4294967295
 800c204:	e7e4      	b.n	800c1d0 <_strtoul_l.isra.0+0x80>
 800c206:	2d00      	cmp	r5, #0
 800c208:	da07      	bge.n	800c21a <_strtoul_l.isra.0+0xca>
 800c20a:	2322      	movs	r3, #34	; 0x22
 800c20c:	f8ce 3000 	str.w	r3, [lr]
 800c210:	f04f 30ff 	mov.w	r0, #4294967295
 800c214:	b942      	cbnz	r2, 800c228 <_strtoul_l.isra.0+0xd8>
 800c216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c21a:	f1b8 0f00 	cmp.w	r8, #0
 800c21e:	d000      	beq.n	800c222 <_strtoul_l.isra.0+0xd2>
 800c220:	4240      	negs	r0, r0
 800c222:	2a00      	cmp	r2, #0
 800c224:	d0f7      	beq.n	800c216 <_strtoul_l.isra.0+0xc6>
 800c226:	b10d      	cbz	r5, 800c22c <_strtoul_l.isra.0+0xdc>
 800c228:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c22c:	6011      	str	r1, [r2, #0]
 800c22e:	e7f2      	b.n	800c216 <_strtoul_l.isra.0+0xc6>
 800c230:	2430      	movs	r4, #48	; 0x30
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1b1      	bne.n	800c19a <_strtoul_l.isra.0+0x4a>
 800c236:	2308      	movs	r3, #8
 800c238:	e7af      	b.n	800c19a <_strtoul_l.isra.0+0x4a>
 800c23a:	2c30      	cmp	r4, #48	; 0x30
 800c23c:	d0a2      	beq.n	800c184 <_strtoul_l.isra.0+0x34>
 800c23e:	230a      	movs	r3, #10
 800c240:	e7ab      	b.n	800c19a <_strtoul_l.isra.0+0x4a>
 800c242:	bf00      	nop
 800c244:	0800ce21 	.word	0x0800ce21

0800c248 <_strtoul_r>:
 800c248:	f7ff bf82 	b.w	800c150 <_strtoul_l.isra.0>

0800c24c <__submore>:
 800c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c250:	460c      	mov	r4, r1
 800c252:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c258:	4299      	cmp	r1, r3
 800c25a:	d11d      	bne.n	800c298 <__submore+0x4c>
 800c25c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c260:	f7ff fa2a 	bl	800b6b8 <_malloc_r>
 800c264:	b918      	cbnz	r0, 800c26e <__submore+0x22>
 800c266:	f04f 30ff 	mov.w	r0, #4294967295
 800c26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c272:	63a3      	str	r3, [r4, #56]	; 0x38
 800c274:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c278:	6360      	str	r0, [r4, #52]	; 0x34
 800c27a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c27e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c282:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c286:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c28a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c28e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c292:	6020      	str	r0, [r4, #0]
 800c294:	2000      	movs	r0, #0
 800c296:	e7e8      	b.n	800c26a <__submore+0x1e>
 800c298:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c29a:	0077      	lsls	r7, r6, #1
 800c29c:	463a      	mov	r2, r7
 800c29e:	f000 fa2d 	bl	800c6fc <_realloc_r>
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d0de      	beq.n	800c266 <__submore+0x1a>
 800c2a8:	eb00 0806 	add.w	r8, r0, r6
 800c2ac:	4601      	mov	r1, r0
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	f7fe fcd9 	bl	800ac68 <memcpy>
 800c2b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c2ba:	f8c4 8000 	str.w	r8, [r4]
 800c2be:	e7e9      	b.n	800c294 <__submore+0x48>

0800c2c0 <__ascii_wctomb>:
 800c2c0:	b149      	cbz	r1, 800c2d6 <__ascii_wctomb+0x16>
 800c2c2:	2aff      	cmp	r2, #255	; 0xff
 800c2c4:	bf85      	ittet	hi
 800c2c6:	238a      	movhi	r3, #138	; 0x8a
 800c2c8:	6003      	strhi	r3, [r0, #0]
 800c2ca:	700a      	strbls	r2, [r1, #0]
 800c2cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c2d0:	bf98      	it	ls
 800c2d2:	2001      	movls	r0, #1
 800c2d4:	4770      	bx	lr
 800c2d6:	4608      	mov	r0, r1
 800c2d8:	4770      	bx	lr
	...

0800c2dc <__assert_func>:
 800c2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2de:	4614      	mov	r4, r2
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4b09      	ldr	r3, [pc, #36]	; (800c308 <__assert_func+0x2c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	68d8      	ldr	r0, [r3, #12]
 800c2ea:	b14c      	cbz	r4, 800c300 <__assert_func+0x24>
 800c2ec:	4b07      	ldr	r3, [pc, #28]	; (800c30c <__assert_func+0x30>)
 800c2ee:	9100      	str	r1, [sp, #0]
 800c2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2f4:	4906      	ldr	r1, [pc, #24]	; (800c310 <__assert_func+0x34>)
 800c2f6:	462b      	mov	r3, r5
 800c2f8:	f000 f9a6 	bl	800c648 <fiprintf>
 800c2fc:	f000 fc3e 	bl	800cb7c <abort>
 800c300:	4b04      	ldr	r3, [pc, #16]	; (800c314 <__assert_func+0x38>)
 800c302:	461c      	mov	r4, r3
 800c304:	e7f3      	b.n	800c2ee <__assert_func+0x12>
 800c306:	bf00      	nop
 800c308:	20000070 	.word	0x20000070
 800c30c:	0800d1c0 	.word	0x0800d1c0
 800c310:	0800d1cd 	.word	0x0800d1cd
 800c314:	0800d1fb 	.word	0x0800d1fb

0800c318 <__sflush_r>:
 800c318:	898a      	ldrh	r2, [r1, #12]
 800c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	4605      	mov	r5, r0
 800c320:	0710      	lsls	r0, r2, #28
 800c322:	460c      	mov	r4, r1
 800c324:	d458      	bmi.n	800c3d8 <__sflush_r+0xc0>
 800c326:	684b      	ldr	r3, [r1, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dc05      	bgt.n	800c338 <__sflush_r+0x20>
 800c32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dc02      	bgt.n	800c338 <__sflush_r+0x20>
 800c332:	2000      	movs	r0, #0
 800c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c33a:	2e00      	cmp	r6, #0
 800c33c:	d0f9      	beq.n	800c332 <__sflush_r+0x1a>
 800c33e:	2300      	movs	r3, #0
 800c340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c344:	682f      	ldr	r7, [r5, #0]
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	d032      	beq.n	800c3b0 <__sflush_r+0x98>
 800c34a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	075a      	lsls	r2, r3, #29
 800c350:	d505      	bpl.n	800c35e <__sflush_r+0x46>
 800c352:	6863      	ldr	r3, [r4, #4]
 800c354:	1ac0      	subs	r0, r0, r3
 800c356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c358:	b10b      	cbz	r3, 800c35e <__sflush_r+0x46>
 800c35a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c35c:	1ac0      	subs	r0, r0, r3
 800c35e:	2300      	movs	r3, #0
 800c360:	4602      	mov	r2, r0
 800c362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c364:	6a21      	ldr	r1, [r4, #32]
 800c366:	4628      	mov	r0, r5
 800c368:	47b0      	blx	r6
 800c36a:	1c43      	adds	r3, r0, #1
 800c36c:	89a3      	ldrh	r3, [r4, #12]
 800c36e:	d106      	bne.n	800c37e <__sflush_r+0x66>
 800c370:	6829      	ldr	r1, [r5, #0]
 800c372:	291d      	cmp	r1, #29
 800c374:	d82c      	bhi.n	800c3d0 <__sflush_r+0xb8>
 800c376:	4a2a      	ldr	r2, [pc, #168]	; (800c420 <__sflush_r+0x108>)
 800c378:	40ca      	lsrs	r2, r1
 800c37a:	07d6      	lsls	r6, r2, #31
 800c37c:	d528      	bpl.n	800c3d0 <__sflush_r+0xb8>
 800c37e:	2200      	movs	r2, #0
 800c380:	6062      	str	r2, [r4, #4]
 800c382:	04d9      	lsls	r1, r3, #19
 800c384:	6922      	ldr	r2, [r4, #16]
 800c386:	6022      	str	r2, [r4, #0]
 800c388:	d504      	bpl.n	800c394 <__sflush_r+0x7c>
 800c38a:	1c42      	adds	r2, r0, #1
 800c38c:	d101      	bne.n	800c392 <__sflush_r+0x7a>
 800c38e:	682b      	ldr	r3, [r5, #0]
 800c390:	b903      	cbnz	r3, 800c394 <__sflush_r+0x7c>
 800c392:	6560      	str	r0, [r4, #84]	; 0x54
 800c394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c396:	602f      	str	r7, [r5, #0]
 800c398:	2900      	cmp	r1, #0
 800c39a:	d0ca      	beq.n	800c332 <__sflush_r+0x1a>
 800c39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3a0:	4299      	cmp	r1, r3
 800c3a2:	d002      	beq.n	800c3aa <__sflush_r+0x92>
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	f7ff f937 	bl	800b618 <_free_r>
 800c3aa:	2000      	movs	r0, #0
 800c3ac:	6360      	str	r0, [r4, #52]	; 0x34
 800c3ae:	e7c1      	b.n	800c334 <__sflush_r+0x1c>
 800c3b0:	6a21      	ldr	r1, [r4, #32]
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	47b0      	blx	r6
 800c3b8:	1c41      	adds	r1, r0, #1
 800c3ba:	d1c7      	bne.n	800c34c <__sflush_r+0x34>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d0c4      	beq.n	800c34c <__sflush_r+0x34>
 800c3c2:	2b1d      	cmp	r3, #29
 800c3c4:	d001      	beq.n	800c3ca <__sflush_r+0xb2>
 800c3c6:	2b16      	cmp	r3, #22
 800c3c8:	d101      	bne.n	800c3ce <__sflush_r+0xb6>
 800c3ca:	602f      	str	r7, [r5, #0]
 800c3cc:	e7b1      	b.n	800c332 <__sflush_r+0x1a>
 800c3ce:	89a3      	ldrh	r3, [r4, #12]
 800c3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	e7ad      	b.n	800c334 <__sflush_r+0x1c>
 800c3d8:	690f      	ldr	r7, [r1, #16]
 800c3da:	2f00      	cmp	r7, #0
 800c3dc:	d0a9      	beq.n	800c332 <__sflush_r+0x1a>
 800c3de:	0793      	lsls	r3, r2, #30
 800c3e0:	680e      	ldr	r6, [r1, #0]
 800c3e2:	bf08      	it	eq
 800c3e4:	694b      	ldreq	r3, [r1, #20]
 800c3e6:	600f      	str	r7, [r1, #0]
 800c3e8:	bf18      	it	ne
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	eba6 0807 	sub.w	r8, r6, r7
 800c3f0:	608b      	str	r3, [r1, #8]
 800c3f2:	f1b8 0f00 	cmp.w	r8, #0
 800c3f6:	dd9c      	ble.n	800c332 <__sflush_r+0x1a>
 800c3f8:	6a21      	ldr	r1, [r4, #32]
 800c3fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3fc:	4643      	mov	r3, r8
 800c3fe:	463a      	mov	r2, r7
 800c400:	4628      	mov	r0, r5
 800c402:	47b0      	blx	r6
 800c404:	2800      	cmp	r0, #0
 800c406:	dc06      	bgt.n	800c416 <__sflush_r+0xfe>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	e78e      	b.n	800c334 <__sflush_r+0x1c>
 800c416:	4407      	add	r7, r0
 800c418:	eba8 0800 	sub.w	r8, r8, r0
 800c41c:	e7e9      	b.n	800c3f2 <__sflush_r+0xda>
 800c41e:	bf00      	nop
 800c420:	20400001 	.word	0x20400001

0800c424 <_fflush_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	690b      	ldr	r3, [r1, #16]
 800c428:	4605      	mov	r5, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	b913      	cbnz	r3, 800c434 <_fflush_r+0x10>
 800c42e:	2500      	movs	r5, #0
 800c430:	4628      	mov	r0, r5
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	b118      	cbz	r0, 800c43e <_fflush_r+0x1a>
 800c436:	6983      	ldr	r3, [r0, #24]
 800c438:	b90b      	cbnz	r3, 800c43e <_fflush_r+0x1a>
 800c43a:	f000 f887 	bl	800c54c <__sinit>
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <_fflush_r+0x6c>)
 800c440:	429c      	cmp	r4, r3
 800c442:	d11b      	bne.n	800c47c <_fflush_r+0x58>
 800c444:	686c      	ldr	r4, [r5, #4]
 800c446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d0ef      	beq.n	800c42e <_fflush_r+0xa>
 800c44e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c450:	07d0      	lsls	r0, r2, #31
 800c452:	d404      	bmi.n	800c45e <_fflush_r+0x3a>
 800c454:	0599      	lsls	r1, r3, #22
 800c456:	d402      	bmi.n	800c45e <_fflush_r+0x3a>
 800c458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c45a:	f000 f927 	bl	800c6ac <__retarget_lock_acquire_recursive>
 800c45e:	4628      	mov	r0, r5
 800c460:	4621      	mov	r1, r4
 800c462:	f7ff ff59 	bl	800c318 <__sflush_r>
 800c466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c468:	07da      	lsls	r2, r3, #31
 800c46a:	4605      	mov	r5, r0
 800c46c:	d4e0      	bmi.n	800c430 <_fflush_r+0xc>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	059b      	lsls	r3, r3, #22
 800c472:	d4dd      	bmi.n	800c430 <_fflush_r+0xc>
 800c474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c476:	f000 f91a 	bl	800c6ae <__retarget_lock_release_recursive>
 800c47a:	e7d9      	b.n	800c430 <_fflush_r+0xc>
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_fflush_r+0x70>)
 800c47e:	429c      	cmp	r4, r3
 800c480:	d101      	bne.n	800c486 <_fflush_r+0x62>
 800c482:	68ac      	ldr	r4, [r5, #8]
 800c484:	e7df      	b.n	800c446 <_fflush_r+0x22>
 800c486:	4b04      	ldr	r3, [pc, #16]	; (800c498 <_fflush_r+0x74>)
 800c488:	429c      	cmp	r4, r3
 800c48a:	bf08      	it	eq
 800c48c:	68ec      	ldreq	r4, [r5, #12]
 800c48e:	e7da      	b.n	800c446 <_fflush_r+0x22>
 800c490:	0800d21c 	.word	0x0800d21c
 800c494:	0800d23c 	.word	0x0800d23c
 800c498:	0800d1fc 	.word	0x0800d1fc

0800c49c <std>:
 800c49c:	2300      	movs	r3, #0
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4aa:	6083      	str	r3, [r0, #8]
 800c4ac:	8181      	strh	r1, [r0, #12]
 800c4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c4b0:	81c2      	strh	r2, [r0, #14]
 800c4b2:	6183      	str	r3, [r0, #24]
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	2208      	movs	r2, #8
 800c4b8:	305c      	adds	r0, #92	; 0x5c
 800c4ba:	f7fb fbad 	bl	8007c18 <memset>
 800c4be:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <std+0x38>)
 800c4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <std+0x3c>)
 800c4c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4c6:	4b05      	ldr	r3, [pc, #20]	; (800c4dc <std+0x40>)
 800c4c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <std+0x44>)
 800c4cc:	6224      	str	r4, [r4, #32]
 800c4ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c4d0:	bd10      	pop	{r4, pc}
 800c4d2:	bf00      	nop
 800c4d4:	080089c1 	.word	0x080089c1
 800c4d8:	080089e7 	.word	0x080089e7
 800c4dc:	08008a1f 	.word	0x08008a1f
 800c4e0:	08008a43 	.word	0x08008a43

0800c4e4 <_cleanup_r>:
 800c4e4:	4901      	ldr	r1, [pc, #4]	; (800c4ec <_cleanup_r+0x8>)
 800c4e6:	f000 b8c1 	b.w	800c66c <_fwalk_reent>
 800c4ea:	bf00      	nop
 800c4ec:	0800c425 	.word	0x0800c425

0800c4f0 <__sfmoreglue>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	1e4a      	subs	r2, r1, #1
 800c4f4:	2568      	movs	r5, #104	; 0x68
 800c4f6:	4355      	muls	r5, r2
 800c4f8:	460e      	mov	r6, r1
 800c4fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4fe:	f7ff f8db 	bl	800b6b8 <_malloc_r>
 800c502:	4604      	mov	r4, r0
 800c504:	b140      	cbz	r0, 800c518 <__sfmoreglue+0x28>
 800c506:	2100      	movs	r1, #0
 800c508:	e9c0 1600 	strd	r1, r6, [r0]
 800c50c:	300c      	adds	r0, #12
 800c50e:	60a0      	str	r0, [r4, #8]
 800c510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c514:	f7fb fb80 	bl	8007c18 <memset>
 800c518:	4620      	mov	r0, r4
 800c51a:	bd70      	pop	{r4, r5, r6, pc}

0800c51c <__sfp_lock_acquire>:
 800c51c:	4801      	ldr	r0, [pc, #4]	; (800c524 <__sfp_lock_acquire+0x8>)
 800c51e:	f000 b8c5 	b.w	800c6ac <__retarget_lock_acquire_recursive>
 800c522:	bf00      	nop
 800c524:	20000858 	.word	0x20000858

0800c528 <__sfp_lock_release>:
 800c528:	4801      	ldr	r0, [pc, #4]	; (800c530 <__sfp_lock_release+0x8>)
 800c52a:	f000 b8c0 	b.w	800c6ae <__retarget_lock_release_recursive>
 800c52e:	bf00      	nop
 800c530:	20000858 	.word	0x20000858

0800c534 <__sinit_lock_acquire>:
 800c534:	4801      	ldr	r0, [pc, #4]	; (800c53c <__sinit_lock_acquire+0x8>)
 800c536:	f000 b8b9 	b.w	800c6ac <__retarget_lock_acquire_recursive>
 800c53a:	bf00      	nop
 800c53c:	20000853 	.word	0x20000853

0800c540 <__sinit_lock_release>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__sinit_lock_release+0x8>)
 800c542:	f000 b8b4 	b.w	800c6ae <__retarget_lock_release_recursive>
 800c546:	bf00      	nop
 800c548:	20000853 	.word	0x20000853

0800c54c <__sinit>:
 800c54c:	b510      	push	{r4, lr}
 800c54e:	4604      	mov	r4, r0
 800c550:	f7ff fff0 	bl	800c534 <__sinit_lock_acquire>
 800c554:	69a3      	ldr	r3, [r4, #24]
 800c556:	b11b      	cbz	r3, 800c560 <__sinit+0x14>
 800c558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c55c:	f7ff bff0 	b.w	800c540 <__sinit_lock_release>
 800c560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c564:	6523      	str	r3, [r4, #80]	; 0x50
 800c566:	4b13      	ldr	r3, [pc, #76]	; (800c5b4 <__sinit+0x68>)
 800c568:	4a13      	ldr	r2, [pc, #76]	; (800c5b8 <__sinit+0x6c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c56e:	42a3      	cmp	r3, r4
 800c570:	bf04      	itt	eq
 800c572:	2301      	moveq	r3, #1
 800c574:	61a3      	streq	r3, [r4, #24]
 800c576:	4620      	mov	r0, r4
 800c578:	f000 f820 	bl	800c5bc <__sfp>
 800c57c:	6060      	str	r0, [r4, #4]
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 f81c 	bl	800c5bc <__sfp>
 800c584:	60a0      	str	r0, [r4, #8]
 800c586:	4620      	mov	r0, r4
 800c588:	f000 f818 	bl	800c5bc <__sfp>
 800c58c:	2200      	movs	r2, #0
 800c58e:	60e0      	str	r0, [r4, #12]
 800c590:	2104      	movs	r1, #4
 800c592:	6860      	ldr	r0, [r4, #4]
 800c594:	f7ff ff82 	bl	800c49c <std>
 800c598:	68a0      	ldr	r0, [r4, #8]
 800c59a:	2201      	movs	r2, #1
 800c59c:	2109      	movs	r1, #9
 800c59e:	f7ff ff7d 	bl	800c49c <std>
 800c5a2:	68e0      	ldr	r0, [r4, #12]
 800c5a4:	2202      	movs	r2, #2
 800c5a6:	2112      	movs	r1, #18
 800c5a8:	f7ff ff78 	bl	800c49c <std>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	61a3      	str	r3, [r4, #24]
 800c5b0:	e7d2      	b.n	800c558 <__sinit+0xc>
 800c5b2:	bf00      	nop
 800c5b4:	0800cd94 	.word	0x0800cd94
 800c5b8:	0800c4e5 	.word	0x0800c4e5

0800c5bc <__sfp>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	4607      	mov	r7, r0
 800c5c0:	f7ff ffac 	bl	800c51c <__sfp_lock_acquire>
 800c5c4:	4b1e      	ldr	r3, [pc, #120]	; (800c640 <__sfp+0x84>)
 800c5c6:	681e      	ldr	r6, [r3, #0]
 800c5c8:	69b3      	ldr	r3, [r6, #24]
 800c5ca:	b913      	cbnz	r3, 800c5d2 <__sfp+0x16>
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7ff ffbd 	bl	800c54c <__sinit>
 800c5d2:	3648      	adds	r6, #72	; 0x48
 800c5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	d503      	bpl.n	800c5e4 <__sfp+0x28>
 800c5dc:	6833      	ldr	r3, [r6, #0]
 800c5de:	b30b      	cbz	r3, 800c624 <__sfp+0x68>
 800c5e0:	6836      	ldr	r6, [r6, #0]
 800c5e2:	e7f7      	b.n	800c5d4 <__sfp+0x18>
 800c5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5e8:	b9d5      	cbnz	r5, 800c620 <__sfp+0x64>
 800c5ea:	4b16      	ldr	r3, [pc, #88]	; (800c644 <__sfp+0x88>)
 800c5ec:	60e3      	str	r3, [r4, #12]
 800c5ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5f2:	6665      	str	r5, [r4, #100]	; 0x64
 800c5f4:	f000 f859 	bl	800c6aa <__retarget_lock_init_recursive>
 800c5f8:	f7ff ff96 	bl	800c528 <__sfp_lock_release>
 800c5fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c604:	6025      	str	r5, [r4, #0]
 800c606:	61a5      	str	r5, [r4, #24]
 800c608:	2208      	movs	r2, #8
 800c60a:	4629      	mov	r1, r5
 800c60c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c610:	f7fb fb02 	bl	8007c18 <memset>
 800c614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c61c:	4620      	mov	r0, r4
 800c61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c620:	3468      	adds	r4, #104	; 0x68
 800c622:	e7d9      	b.n	800c5d8 <__sfp+0x1c>
 800c624:	2104      	movs	r1, #4
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff ff62 	bl	800c4f0 <__sfmoreglue>
 800c62c:	4604      	mov	r4, r0
 800c62e:	6030      	str	r0, [r6, #0]
 800c630:	2800      	cmp	r0, #0
 800c632:	d1d5      	bne.n	800c5e0 <__sfp+0x24>
 800c634:	f7ff ff78 	bl	800c528 <__sfp_lock_release>
 800c638:	230c      	movs	r3, #12
 800c63a:	603b      	str	r3, [r7, #0]
 800c63c:	e7ee      	b.n	800c61c <__sfp+0x60>
 800c63e:	bf00      	nop
 800c640:	0800cd94 	.word	0x0800cd94
 800c644:	ffff0001 	.word	0xffff0001

0800c648 <fiprintf>:
 800c648:	b40e      	push	{r1, r2, r3}
 800c64a:	b503      	push	{r0, r1, lr}
 800c64c:	4601      	mov	r1, r0
 800c64e:	ab03      	add	r3, sp, #12
 800c650:	4805      	ldr	r0, [pc, #20]	; (800c668 <fiprintf+0x20>)
 800c652:	f853 2b04 	ldr.w	r2, [r3], #4
 800c656:	6800      	ldr	r0, [r0, #0]
 800c658:	9301      	str	r3, [sp, #4]
 800c65a:	f000 f89f 	bl	800c79c <_vfiprintf_r>
 800c65e:	b002      	add	sp, #8
 800c660:	f85d eb04 	ldr.w	lr, [sp], #4
 800c664:	b003      	add	sp, #12
 800c666:	4770      	bx	lr
 800c668:	20000070 	.word	0x20000070

0800c66c <_fwalk_reent>:
 800c66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c670:	4606      	mov	r6, r0
 800c672:	4688      	mov	r8, r1
 800c674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c678:	2700      	movs	r7, #0
 800c67a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c67e:	f1b9 0901 	subs.w	r9, r9, #1
 800c682:	d505      	bpl.n	800c690 <_fwalk_reent+0x24>
 800c684:	6824      	ldr	r4, [r4, #0]
 800c686:	2c00      	cmp	r4, #0
 800c688:	d1f7      	bne.n	800c67a <_fwalk_reent+0xe>
 800c68a:	4638      	mov	r0, r7
 800c68c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c690:	89ab      	ldrh	r3, [r5, #12]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d907      	bls.n	800c6a6 <_fwalk_reent+0x3a>
 800c696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c69a:	3301      	adds	r3, #1
 800c69c:	d003      	beq.n	800c6a6 <_fwalk_reent+0x3a>
 800c69e:	4629      	mov	r1, r5
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	47c0      	blx	r8
 800c6a4:	4307      	orrs	r7, r0
 800c6a6:	3568      	adds	r5, #104	; 0x68
 800c6a8:	e7e9      	b.n	800c67e <_fwalk_reent+0x12>

0800c6aa <__retarget_lock_init_recursive>:
 800c6aa:	4770      	bx	lr

0800c6ac <__retarget_lock_acquire_recursive>:
 800c6ac:	4770      	bx	lr

0800c6ae <__retarget_lock_release_recursive>:
 800c6ae:	4770      	bx	lr

0800c6b0 <memmove>:
 800c6b0:	4288      	cmp	r0, r1
 800c6b2:	b510      	push	{r4, lr}
 800c6b4:	eb01 0402 	add.w	r4, r1, r2
 800c6b8:	d902      	bls.n	800c6c0 <memmove+0x10>
 800c6ba:	4284      	cmp	r4, r0
 800c6bc:	4623      	mov	r3, r4
 800c6be:	d807      	bhi.n	800c6d0 <memmove+0x20>
 800c6c0:	1e43      	subs	r3, r0, #1
 800c6c2:	42a1      	cmp	r1, r4
 800c6c4:	d008      	beq.n	800c6d8 <memmove+0x28>
 800c6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ce:	e7f8      	b.n	800c6c2 <memmove+0x12>
 800c6d0:	4402      	add	r2, r0
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	428a      	cmp	r2, r1
 800c6d6:	d100      	bne.n	800c6da <memmove+0x2a>
 800c6d8:	bd10      	pop	{r4, pc}
 800c6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6e2:	e7f7      	b.n	800c6d4 <memmove+0x24>

0800c6e4 <__malloc_lock>:
 800c6e4:	4801      	ldr	r0, [pc, #4]	; (800c6ec <__malloc_lock+0x8>)
 800c6e6:	f7ff bfe1 	b.w	800c6ac <__retarget_lock_acquire_recursive>
 800c6ea:	bf00      	nop
 800c6ec:	20000854 	.word	0x20000854

0800c6f0 <__malloc_unlock>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__malloc_unlock+0x8>)
 800c6f2:	f7ff bfdc 	b.w	800c6ae <__retarget_lock_release_recursive>
 800c6f6:	bf00      	nop
 800c6f8:	20000854 	.word	0x20000854

0800c6fc <_realloc_r>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	4607      	mov	r7, r0
 800c700:	4614      	mov	r4, r2
 800c702:	460e      	mov	r6, r1
 800c704:	b921      	cbnz	r1, 800c710 <_realloc_r+0x14>
 800c706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c70a:	4611      	mov	r1, r2
 800c70c:	f7fe bfd4 	b.w	800b6b8 <_malloc_r>
 800c710:	b922      	cbnz	r2, 800c71c <_realloc_r+0x20>
 800c712:	f7fe ff81 	bl	800b618 <_free_r>
 800c716:	4625      	mov	r5, r4
 800c718:	4628      	mov	r0, r5
 800c71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c71c:	f000 fa9a 	bl	800cc54 <_malloc_usable_size_r>
 800c720:	42a0      	cmp	r0, r4
 800c722:	d20f      	bcs.n	800c744 <_realloc_r+0x48>
 800c724:	4621      	mov	r1, r4
 800c726:	4638      	mov	r0, r7
 800c728:	f7fe ffc6 	bl	800b6b8 <_malloc_r>
 800c72c:	4605      	mov	r5, r0
 800c72e:	2800      	cmp	r0, #0
 800c730:	d0f2      	beq.n	800c718 <_realloc_r+0x1c>
 800c732:	4631      	mov	r1, r6
 800c734:	4622      	mov	r2, r4
 800c736:	f7fe fa97 	bl	800ac68 <memcpy>
 800c73a:	4631      	mov	r1, r6
 800c73c:	4638      	mov	r0, r7
 800c73e:	f7fe ff6b 	bl	800b618 <_free_r>
 800c742:	e7e9      	b.n	800c718 <_realloc_r+0x1c>
 800c744:	4635      	mov	r5, r6
 800c746:	e7e7      	b.n	800c718 <_realloc_r+0x1c>

0800c748 <__sfputc_r>:
 800c748:	6893      	ldr	r3, [r2, #8]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	b410      	push	{r4}
 800c750:	6093      	str	r3, [r2, #8]
 800c752:	da08      	bge.n	800c766 <__sfputc_r+0x1e>
 800c754:	6994      	ldr	r4, [r2, #24]
 800c756:	42a3      	cmp	r3, r4
 800c758:	db01      	blt.n	800c75e <__sfputc_r+0x16>
 800c75a:	290a      	cmp	r1, #10
 800c75c:	d103      	bne.n	800c766 <__sfputc_r+0x1e>
 800c75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c762:	f000 b94b 	b.w	800c9fc <__swbuf_r>
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	1c58      	adds	r0, r3, #1
 800c76a:	6010      	str	r0, [r2, #0]
 800c76c:	7019      	strb	r1, [r3, #0]
 800c76e:	4608      	mov	r0, r1
 800c770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <__sfputs_r>:
 800c776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c778:	4606      	mov	r6, r0
 800c77a:	460f      	mov	r7, r1
 800c77c:	4614      	mov	r4, r2
 800c77e:	18d5      	adds	r5, r2, r3
 800c780:	42ac      	cmp	r4, r5
 800c782:	d101      	bne.n	800c788 <__sfputs_r+0x12>
 800c784:	2000      	movs	r0, #0
 800c786:	e007      	b.n	800c798 <__sfputs_r+0x22>
 800c788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78c:	463a      	mov	r2, r7
 800c78e:	4630      	mov	r0, r6
 800c790:	f7ff ffda 	bl	800c748 <__sfputc_r>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d1f3      	bne.n	800c780 <__sfputs_r+0xa>
 800c798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c79c <_vfiprintf_r>:
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	460d      	mov	r5, r1
 800c7a2:	b09d      	sub	sp, #116	; 0x74
 800c7a4:	4614      	mov	r4, r2
 800c7a6:	4698      	mov	r8, r3
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	b118      	cbz	r0, 800c7b4 <_vfiprintf_r+0x18>
 800c7ac:	6983      	ldr	r3, [r0, #24]
 800c7ae:	b90b      	cbnz	r3, 800c7b4 <_vfiprintf_r+0x18>
 800c7b0:	f7ff fecc 	bl	800c54c <__sinit>
 800c7b4:	4b89      	ldr	r3, [pc, #548]	; (800c9dc <_vfiprintf_r+0x240>)
 800c7b6:	429d      	cmp	r5, r3
 800c7b8:	d11b      	bne.n	800c7f2 <_vfiprintf_r+0x56>
 800c7ba:	6875      	ldr	r5, [r6, #4]
 800c7bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7be:	07d9      	lsls	r1, r3, #31
 800c7c0:	d405      	bmi.n	800c7ce <_vfiprintf_r+0x32>
 800c7c2:	89ab      	ldrh	r3, [r5, #12]
 800c7c4:	059a      	lsls	r2, r3, #22
 800c7c6:	d402      	bmi.n	800c7ce <_vfiprintf_r+0x32>
 800c7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ca:	f7ff ff6f 	bl	800c6ac <__retarget_lock_acquire_recursive>
 800c7ce:	89ab      	ldrh	r3, [r5, #12]
 800c7d0:	071b      	lsls	r3, r3, #28
 800c7d2:	d501      	bpl.n	800c7d8 <_vfiprintf_r+0x3c>
 800c7d4:	692b      	ldr	r3, [r5, #16]
 800c7d6:	b9eb      	cbnz	r3, 800c814 <_vfiprintf_r+0x78>
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f000 f960 	bl	800caa0 <__swsetup_r>
 800c7e0:	b1c0      	cbz	r0, 800c814 <_vfiprintf_r+0x78>
 800c7e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7e4:	07dc      	lsls	r4, r3, #31
 800c7e6:	d50e      	bpl.n	800c806 <_vfiprintf_r+0x6a>
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	b01d      	add	sp, #116	; 0x74
 800c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f2:	4b7b      	ldr	r3, [pc, #492]	; (800c9e0 <_vfiprintf_r+0x244>)
 800c7f4:	429d      	cmp	r5, r3
 800c7f6:	d101      	bne.n	800c7fc <_vfiprintf_r+0x60>
 800c7f8:	68b5      	ldr	r5, [r6, #8]
 800c7fa:	e7df      	b.n	800c7bc <_vfiprintf_r+0x20>
 800c7fc:	4b79      	ldr	r3, [pc, #484]	; (800c9e4 <_vfiprintf_r+0x248>)
 800c7fe:	429d      	cmp	r5, r3
 800c800:	bf08      	it	eq
 800c802:	68f5      	ldreq	r5, [r6, #12]
 800c804:	e7da      	b.n	800c7bc <_vfiprintf_r+0x20>
 800c806:	89ab      	ldrh	r3, [r5, #12]
 800c808:	0598      	lsls	r0, r3, #22
 800c80a:	d4ed      	bmi.n	800c7e8 <_vfiprintf_r+0x4c>
 800c80c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c80e:	f7ff ff4e 	bl	800c6ae <__retarget_lock_release_recursive>
 800c812:	e7e9      	b.n	800c7e8 <_vfiprintf_r+0x4c>
 800c814:	2300      	movs	r3, #0
 800c816:	9309      	str	r3, [sp, #36]	; 0x24
 800c818:	2320      	movs	r3, #32
 800c81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c81e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c822:	2330      	movs	r3, #48	; 0x30
 800c824:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9e8 <_vfiprintf_r+0x24c>
 800c828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c82c:	f04f 0901 	mov.w	r9, #1
 800c830:	4623      	mov	r3, r4
 800c832:	469a      	mov	sl, r3
 800c834:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c838:	b10a      	cbz	r2, 800c83e <_vfiprintf_r+0xa2>
 800c83a:	2a25      	cmp	r2, #37	; 0x25
 800c83c:	d1f9      	bne.n	800c832 <_vfiprintf_r+0x96>
 800c83e:	ebba 0b04 	subs.w	fp, sl, r4
 800c842:	d00b      	beq.n	800c85c <_vfiprintf_r+0xc0>
 800c844:	465b      	mov	r3, fp
 800c846:	4622      	mov	r2, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff ff93 	bl	800c776 <__sfputs_r>
 800c850:	3001      	adds	r0, #1
 800c852:	f000 80aa 	beq.w	800c9aa <_vfiprintf_r+0x20e>
 800c856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c858:	445a      	add	r2, fp
 800c85a:	9209      	str	r2, [sp, #36]	; 0x24
 800c85c:	f89a 3000 	ldrb.w	r3, [sl]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f000 80a2 	beq.w	800c9aa <_vfiprintf_r+0x20e>
 800c866:	2300      	movs	r3, #0
 800c868:	f04f 32ff 	mov.w	r2, #4294967295
 800c86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c870:	f10a 0a01 	add.w	sl, sl, #1
 800c874:	9304      	str	r3, [sp, #16]
 800c876:	9307      	str	r3, [sp, #28]
 800c878:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c87c:	931a      	str	r3, [sp, #104]	; 0x68
 800c87e:	4654      	mov	r4, sl
 800c880:	2205      	movs	r2, #5
 800c882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c886:	4858      	ldr	r0, [pc, #352]	; (800c9e8 <_vfiprintf_r+0x24c>)
 800c888:	f7f3 fcca 	bl	8000220 <memchr>
 800c88c:	9a04      	ldr	r2, [sp, #16]
 800c88e:	b9d8      	cbnz	r0, 800c8c8 <_vfiprintf_r+0x12c>
 800c890:	06d1      	lsls	r1, r2, #27
 800c892:	bf44      	itt	mi
 800c894:	2320      	movmi	r3, #32
 800c896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c89a:	0713      	lsls	r3, r2, #28
 800c89c:	bf44      	itt	mi
 800c89e:	232b      	movmi	r3, #43	; 0x2b
 800c8a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8aa:	d015      	beq.n	800c8d8 <_vfiprintf_r+0x13c>
 800c8ac:	9a07      	ldr	r2, [sp, #28]
 800c8ae:	4654      	mov	r4, sl
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	f04f 0c0a 	mov.w	ip, #10
 800c8b6:	4621      	mov	r1, r4
 800c8b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8bc:	3b30      	subs	r3, #48	; 0x30
 800c8be:	2b09      	cmp	r3, #9
 800c8c0:	d94e      	bls.n	800c960 <_vfiprintf_r+0x1c4>
 800c8c2:	b1b0      	cbz	r0, 800c8f2 <_vfiprintf_r+0x156>
 800c8c4:	9207      	str	r2, [sp, #28]
 800c8c6:	e014      	b.n	800c8f2 <_vfiprintf_r+0x156>
 800c8c8:	eba0 0308 	sub.w	r3, r0, r8
 800c8cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	9304      	str	r3, [sp, #16]
 800c8d4:	46a2      	mov	sl, r4
 800c8d6:	e7d2      	b.n	800c87e <_vfiprintf_r+0xe2>
 800c8d8:	9b03      	ldr	r3, [sp, #12]
 800c8da:	1d19      	adds	r1, r3, #4
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	9103      	str	r1, [sp, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	bfbb      	ittet	lt
 800c8e4:	425b      	neglt	r3, r3
 800c8e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c8ea:	9307      	strge	r3, [sp, #28]
 800c8ec:	9307      	strlt	r3, [sp, #28]
 800c8ee:	bfb8      	it	lt
 800c8f0:	9204      	strlt	r2, [sp, #16]
 800c8f2:	7823      	ldrb	r3, [r4, #0]
 800c8f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c8f6:	d10c      	bne.n	800c912 <_vfiprintf_r+0x176>
 800c8f8:	7863      	ldrb	r3, [r4, #1]
 800c8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fc:	d135      	bne.n	800c96a <_vfiprintf_r+0x1ce>
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	1d1a      	adds	r2, r3, #4
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	9203      	str	r2, [sp, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	bfb8      	it	lt
 800c90a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c90e:	3402      	adds	r4, #2
 800c910:	9305      	str	r3, [sp, #20]
 800c912:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9f8 <_vfiprintf_r+0x25c>
 800c916:	7821      	ldrb	r1, [r4, #0]
 800c918:	2203      	movs	r2, #3
 800c91a:	4650      	mov	r0, sl
 800c91c:	f7f3 fc80 	bl	8000220 <memchr>
 800c920:	b140      	cbz	r0, 800c934 <_vfiprintf_r+0x198>
 800c922:	2340      	movs	r3, #64	; 0x40
 800c924:	eba0 000a 	sub.w	r0, r0, sl
 800c928:	fa03 f000 	lsl.w	r0, r3, r0
 800c92c:	9b04      	ldr	r3, [sp, #16]
 800c92e:	4303      	orrs	r3, r0
 800c930:	3401      	adds	r4, #1
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c938:	482c      	ldr	r0, [pc, #176]	; (800c9ec <_vfiprintf_r+0x250>)
 800c93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c93e:	2206      	movs	r2, #6
 800c940:	f7f3 fc6e 	bl	8000220 <memchr>
 800c944:	2800      	cmp	r0, #0
 800c946:	d03f      	beq.n	800c9c8 <_vfiprintf_r+0x22c>
 800c948:	4b29      	ldr	r3, [pc, #164]	; (800c9f0 <_vfiprintf_r+0x254>)
 800c94a:	bb1b      	cbnz	r3, 800c994 <_vfiprintf_r+0x1f8>
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	3307      	adds	r3, #7
 800c950:	f023 0307 	bic.w	r3, r3, #7
 800c954:	3308      	adds	r3, #8
 800c956:	9303      	str	r3, [sp, #12]
 800c958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c95a:	443b      	add	r3, r7
 800c95c:	9309      	str	r3, [sp, #36]	; 0x24
 800c95e:	e767      	b.n	800c830 <_vfiprintf_r+0x94>
 800c960:	fb0c 3202 	mla	r2, ip, r2, r3
 800c964:	460c      	mov	r4, r1
 800c966:	2001      	movs	r0, #1
 800c968:	e7a5      	b.n	800c8b6 <_vfiprintf_r+0x11a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	3401      	adds	r4, #1
 800c96e:	9305      	str	r3, [sp, #20]
 800c970:	4619      	mov	r1, r3
 800c972:	f04f 0c0a 	mov.w	ip, #10
 800c976:	4620      	mov	r0, r4
 800c978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c97c:	3a30      	subs	r2, #48	; 0x30
 800c97e:	2a09      	cmp	r2, #9
 800c980:	d903      	bls.n	800c98a <_vfiprintf_r+0x1ee>
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0c5      	beq.n	800c912 <_vfiprintf_r+0x176>
 800c986:	9105      	str	r1, [sp, #20]
 800c988:	e7c3      	b.n	800c912 <_vfiprintf_r+0x176>
 800c98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c98e:	4604      	mov	r4, r0
 800c990:	2301      	movs	r3, #1
 800c992:	e7f0      	b.n	800c976 <_vfiprintf_r+0x1da>
 800c994:	ab03      	add	r3, sp, #12
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	462a      	mov	r2, r5
 800c99a:	4b16      	ldr	r3, [pc, #88]	; (800c9f4 <_vfiprintf_r+0x258>)
 800c99c:	a904      	add	r1, sp, #16
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7fb f9e2 	bl	8007d68 <_printf_float>
 800c9a4:	4607      	mov	r7, r0
 800c9a6:	1c78      	adds	r0, r7, #1
 800c9a8:	d1d6      	bne.n	800c958 <_vfiprintf_r+0x1bc>
 800c9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ac:	07d9      	lsls	r1, r3, #31
 800c9ae:	d405      	bmi.n	800c9bc <_vfiprintf_r+0x220>
 800c9b0:	89ab      	ldrh	r3, [r5, #12]
 800c9b2:	059a      	lsls	r2, r3, #22
 800c9b4:	d402      	bmi.n	800c9bc <_vfiprintf_r+0x220>
 800c9b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9b8:	f7ff fe79 	bl	800c6ae <__retarget_lock_release_recursive>
 800c9bc:	89ab      	ldrh	r3, [r5, #12]
 800c9be:	065b      	lsls	r3, r3, #25
 800c9c0:	f53f af12 	bmi.w	800c7e8 <_vfiprintf_r+0x4c>
 800c9c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9c6:	e711      	b.n	800c7ec <_vfiprintf_r+0x50>
 800c9c8:	ab03      	add	r3, sp, #12
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	462a      	mov	r2, r5
 800c9ce:	4b09      	ldr	r3, [pc, #36]	; (800c9f4 <_vfiprintf_r+0x258>)
 800c9d0:	a904      	add	r1, sp, #16
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7fb fc6c 	bl	80082b0 <_printf_i>
 800c9d8:	e7e4      	b.n	800c9a4 <_vfiprintf_r+0x208>
 800c9da:	bf00      	nop
 800c9dc:	0800d21c 	.word	0x0800d21c
 800c9e0:	0800d23c 	.word	0x0800d23c
 800c9e4:	0800d1fc 	.word	0x0800d1fc
 800c9e8:	0800d194 	.word	0x0800d194
 800c9ec:	0800d19e 	.word	0x0800d19e
 800c9f0:	08007d69 	.word	0x08007d69
 800c9f4:	0800c777 	.word	0x0800c777
 800c9f8:	0800d19a 	.word	0x0800d19a

0800c9fc <__swbuf_r>:
 800c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fe:	460e      	mov	r6, r1
 800ca00:	4614      	mov	r4, r2
 800ca02:	4605      	mov	r5, r0
 800ca04:	b118      	cbz	r0, 800ca0e <__swbuf_r+0x12>
 800ca06:	6983      	ldr	r3, [r0, #24]
 800ca08:	b90b      	cbnz	r3, 800ca0e <__swbuf_r+0x12>
 800ca0a:	f7ff fd9f 	bl	800c54c <__sinit>
 800ca0e:	4b21      	ldr	r3, [pc, #132]	; (800ca94 <__swbuf_r+0x98>)
 800ca10:	429c      	cmp	r4, r3
 800ca12:	d12b      	bne.n	800ca6c <__swbuf_r+0x70>
 800ca14:	686c      	ldr	r4, [r5, #4]
 800ca16:	69a3      	ldr	r3, [r4, #24]
 800ca18:	60a3      	str	r3, [r4, #8]
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	071a      	lsls	r2, r3, #28
 800ca1e:	d52f      	bpl.n	800ca80 <__swbuf_r+0x84>
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	b36b      	cbz	r3, 800ca80 <__swbuf_r+0x84>
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	6820      	ldr	r0, [r4, #0]
 800ca28:	1ac0      	subs	r0, r0, r3
 800ca2a:	6963      	ldr	r3, [r4, #20]
 800ca2c:	b2f6      	uxtb	r6, r6
 800ca2e:	4283      	cmp	r3, r0
 800ca30:	4637      	mov	r7, r6
 800ca32:	dc04      	bgt.n	800ca3e <__swbuf_r+0x42>
 800ca34:	4621      	mov	r1, r4
 800ca36:	4628      	mov	r0, r5
 800ca38:	f7ff fcf4 	bl	800c424 <_fflush_r>
 800ca3c:	bb30      	cbnz	r0, 800ca8c <__swbuf_r+0x90>
 800ca3e:	68a3      	ldr	r3, [r4, #8]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	60a3      	str	r3, [r4, #8]
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	6022      	str	r2, [r4, #0]
 800ca4a:	701e      	strb	r6, [r3, #0]
 800ca4c:	6963      	ldr	r3, [r4, #20]
 800ca4e:	3001      	adds	r0, #1
 800ca50:	4283      	cmp	r3, r0
 800ca52:	d004      	beq.n	800ca5e <__swbuf_r+0x62>
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	07db      	lsls	r3, r3, #31
 800ca58:	d506      	bpl.n	800ca68 <__swbuf_r+0x6c>
 800ca5a:	2e0a      	cmp	r6, #10
 800ca5c:	d104      	bne.n	800ca68 <__swbuf_r+0x6c>
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4628      	mov	r0, r5
 800ca62:	f7ff fcdf 	bl	800c424 <_fflush_r>
 800ca66:	b988      	cbnz	r0, 800ca8c <__swbuf_r+0x90>
 800ca68:	4638      	mov	r0, r7
 800ca6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	; (800ca98 <__swbuf_r+0x9c>)
 800ca6e:	429c      	cmp	r4, r3
 800ca70:	d101      	bne.n	800ca76 <__swbuf_r+0x7a>
 800ca72:	68ac      	ldr	r4, [r5, #8]
 800ca74:	e7cf      	b.n	800ca16 <__swbuf_r+0x1a>
 800ca76:	4b09      	ldr	r3, [pc, #36]	; (800ca9c <__swbuf_r+0xa0>)
 800ca78:	429c      	cmp	r4, r3
 800ca7a:	bf08      	it	eq
 800ca7c:	68ec      	ldreq	r4, [r5, #12]
 800ca7e:	e7ca      	b.n	800ca16 <__swbuf_r+0x1a>
 800ca80:	4621      	mov	r1, r4
 800ca82:	4628      	mov	r0, r5
 800ca84:	f000 f80c 	bl	800caa0 <__swsetup_r>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d0cb      	beq.n	800ca24 <__swbuf_r+0x28>
 800ca8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ca90:	e7ea      	b.n	800ca68 <__swbuf_r+0x6c>
 800ca92:	bf00      	nop
 800ca94:	0800d21c 	.word	0x0800d21c
 800ca98:	0800d23c 	.word	0x0800d23c
 800ca9c:	0800d1fc 	.word	0x0800d1fc

0800caa0 <__swsetup_r>:
 800caa0:	4b32      	ldr	r3, [pc, #200]	; (800cb6c <__swsetup_r+0xcc>)
 800caa2:	b570      	push	{r4, r5, r6, lr}
 800caa4:	681d      	ldr	r5, [r3, #0]
 800caa6:	4606      	mov	r6, r0
 800caa8:	460c      	mov	r4, r1
 800caaa:	b125      	cbz	r5, 800cab6 <__swsetup_r+0x16>
 800caac:	69ab      	ldr	r3, [r5, #24]
 800caae:	b913      	cbnz	r3, 800cab6 <__swsetup_r+0x16>
 800cab0:	4628      	mov	r0, r5
 800cab2:	f7ff fd4b 	bl	800c54c <__sinit>
 800cab6:	4b2e      	ldr	r3, [pc, #184]	; (800cb70 <__swsetup_r+0xd0>)
 800cab8:	429c      	cmp	r4, r3
 800caba:	d10f      	bne.n	800cadc <__swsetup_r+0x3c>
 800cabc:	686c      	ldr	r4, [r5, #4]
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cac4:	0719      	lsls	r1, r3, #28
 800cac6:	d42c      	bmi.n	800cb22 <__swsetup_r+0x82>
 800cac8:	06dd      	lsls	r5, r3, #27
 800caca:	d411      	bmi.n	800caf0 <__swsetup_r+0x50>
 800cacc:	2309      	movs	r3, #9
 800cace:	6033      	str	r3, [r6, #0]
 800cad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cad4:	81a3      	strh	r3, [r4, #12]
 800cad6:	f04f 30ff 	mov.w	r0, #4294967295
 800cada:	e03e      	b.n	800cb5a <__swsetup_r+0xba>
 800cadc:	4b25      	ldr	r3, [pc, #148]	; (800cb74 <__swsetup_r+0xd4>)
 800cade:	429c      	cmp	r4, r3
 800cae0:	d101      	bne.n	800cae6 <__swsetup_r+0x46>
 800cae2:	68ac      	ldr	r4, [r5, #8]
 800cae4:	e7eb      	b.n	800cabe <__swsetup_r+0x1e>
 800cae6:	4b24      	ldr	r3, [pc, #144]	; (800cb78 <__swsetup_r+0xd8>)
 800cae8:	429c      	cmp	r4, r3
 800caea:	bf08      	it	eq
 800caec:	68ec      	ldreq	r4, [r5, #12]
 800caee:	e7e6      	b.n	800cabe <__swsetup_r+0x1e>
 800caf0:	0758      	lsls	r0, r3, #29
 800caf2:	d512      	bpl.n	800cb1a <__swsetup_r+0x7a>
 800caf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caf6:	b141      	cbz	r1, 800cb0a <__swsetup_r+0x6a>
 800caf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cafc:	4299      	cmp	r1, r3
 800cafe:	d002      	beq.n	800cb06 <__swsetup_r+0x66>
 800cb00:	4630      	mov	r0, r6
 800cb02:	f7fe fd89 	bl	800b618 <_free_r>
 800cb06:	2300      	movs	r3, #0
 800cb08:	6363      	str	r3, [r4, #52]	; 0x34
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	2300      	movs	r3, #0
 800cb14:	6063      	str	r3, [r4, #4]
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	f043 0308 	orr.w	r3, r3, #8
 800cb20:	81a3      	strh	r3, [r4, #12]
 800cb22:	6923      	ldr	r3, [r4, #16]
 800cb24:	b94b      	cbnz	r3, 800cb3a <__swsetup_r+0x9a>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb30:	d003      	beq.n	800cb3a <__swsetup_r+0x9a>
 800cb32:	4621      	mov	r1, r4
 800cb34:	4630      	mov	r0, r6
 800cb36:	f000 f84d 	bl	800cbd4 <__smakebuf_r>
 800cb3a:	89a0      	ldrh	r0, [r4, #12]
 800cb3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb40:	f010 0301 	ands.w	r3, r0, #1
 800cb44:	d00a      	beq.n	800cb5c <__swsetup_r+0xbc>
 800cb46:	2300      	movs	r3, #0
 800cb48:	60a3      	str	r3, [r4, #8]
 800cb4a:	6963      	ldr	r3, [r4, #20]
 800cb4c:	425b      	negs	r3, r3
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	6923      	ldr	r3, [r4, #16]
 800cb52:	b943      	cbnz	r3, 800cb66 <__swsetup_r+0xc6>
 800cb54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb58:	d1ba      	bne.n	800cad0 <__swsetup_r+0x30>
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
 800cb5c:	0781      	lsls	r1, r0, #30
 800cb5e:	bf58      	it	pl
 800cb60:	6963      	ldrpl	r3, [r4, #20]
 800cb62:	60a3      	str	r3, [r4, #8]
 800cb64:	e7f4      	b.n	800cb50 <__swsetup_r+0xb0>
 800cb66:	2000      	movs	r0, #0
 800cb68:	e7f7      	b.n	800cb5a <__swsetup_r+0xba>
 800cb6a:	bf00      	nop
 800cb6c:	20000070 	.word	0x20000070
 800cb70:	0800d21c 	.word	0x0800d21c
 800cb74:	0800d23c 	.word	0x0800d23c
 800cb78:	0800d1fc 	.word	0x0800d1fc

0800cb7c <abort>:
 800cb7c:	b508      	push	{r3, lr}
 800cb7e:	2006      	movs	r0, #6
 800cb80:	f000 f898 	bl	800ccb4 <raise>
 800cb84:	2001      	movs	r0, #1
 800cb86:	f7f5 fa11 	bl	8001fac <_exit>

0800cb8a <__swhatbuf_r>:
 800cb8a:	b570      	push	{r4, r5, r6, lr}
 800cb8c:	460e      	mov	r6, r1
 800cb8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb92:	2900      	cmp	r1, #0
 800cb94:	b096      	sub	sp, #88	; 0x58
 800cb96:	4614      	mov	r4, r2
 800cb98:	461d      	mov	r5, r3
 800cb9a:	da07      	bge.n	800cbac <__swhatbuf_r+0x22>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	602b      	str	r3, [r5, #0]
 800cba0:	89b3      	ldrh	r3, [r6, #12]
 800cba2:	061a      	lsls	r2, r3, #24
 800cba4:	d410      	bmi.n	800cbc8 <__swhatbuf_r+0x3e>
 800cba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbaa:	e00e      	b.n	800cbca <__swhatbuf_r+0x40>
 800cbac:	466a      	mov	r2, sp
 800cbae:	f000 f89d 	bl	800ccec <_fstat_r>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	dbf2      	blt.n	800cb9c <__swhatbuf_r+0x12>
 800cbb6:	9a01      	ldr	r2, [sp, #4]
 800cbb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbc0:	425a      	negs	r2, r3
 800cbc2:	415a      	adcs	r2, r3
 800cbc4:	602a      	str	r2, [r5, #0]
 800cbc6:	e7ee      	b.n	800cba6 <__swhatbuf_r+0x1c>
 800cbc8:	2340      	movs	r3, #64	; 0x40
 800cbca:	2000      	movs	r0, #0
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	b016      	add	sp, #88	; 0x58
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbd4 <__smakebuf_r>:
 800cbd4:	898b      	ldrh	r3, [r1, #12]
 800cbd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbd8:	079d      	lsls	r5, r3, #30
 800cbda:	4606      	mov	r6, r0
 800cbdc:	460c      	mov	r4, r1
 800cbde:	d507      	bpl.n	800cbf0 <__smakebuf_r+0x1c>
 800cbe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbe4:	6023      	str	r3, [r4, #0]
 800cbe6:	6123      	str	r3, [r4, #16]
 800cbe8:	2301      	movs	r3, #1
 800cbea:	6163      	str	r3, [r4, #20]
 800cbec:	b002      	add	sp, #8
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	ab01      	add	r3, sp, #4
 800cbf2:	466a      	mov	r2, sp
 800cbf4:	f7ff ffc9 	bl	800cb8a <__swhatbuf_r>
 800cbf8:	9900      	ldr	r1, [sp, #0]
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f7fe fd5b 	bl	800b6b8 <_malloc_r>
 800cc02:	b948      	cbnz	r0, 800cc18 <__smakebuf_r+0x44>
 800cc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc08:	059a      	lsls	r2, r3, #22
 800cc0a:	d4ef      	bmi.n	800cbec <__smakebuf_r+0x18>
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
 800cc10:	f043 0302 	orr.w	r3, r3, #2
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	e7e3      	b.n	800cbe0 <__smakebuf_r+0xc>
 800cc18:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <__smakebuf_r+0x7c>)
 800cc1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc1c:	89a3      	ldrh	r3, [r4, #12]
 800cc1e:	6020      	str	r0, [r4, #0]
 800cc20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	9b00      	ldr	r3, [sp, #0]
 800cc28:	6163      	str	r3, [r4, #20]
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	6120      	str	r0, [r4, #16]
 800cc2e:	b15b      	cbz	r3, 800cc48 <__smakebuf_r+0x74>
 800cc30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc34:	4630      	mov	r0, r6
 800cc36:	f000 f86b 	bl	800cd10 <_isatty_r>
 800cc3a:	b128      	cbz	r0, 800cc48 <__smakebuf_r+0x74>
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	f023 0303 	bic.w	r3, r3, #3
 800cc42:	f043 0301 	orr.w	r3, r3, #1
 800cc46:	81a3      	strh	r3, [r4, #12]
 800cc48:	89a0      	ldrh	r0, [r4, #12]
 800cc4a:	4305      	orrs	r5, r0
 800cc4c:	81a5      	strh	r5, [r4, #12]
 800cc4e:	e7cd      	b.n	800cbec <__smakebuf_r+0x18>
 800cc50:	0800c4e5 	.word	0x0800c4e5

0800cc54 <_malloc_usable_size_r>:
 800cc54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc58:	1f18      	subs	r0, r3, #4
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfbc      	itt	lt
 800cc5e:	580b      	ldrlt	r3, [r1, r0]
 800cc60:	18c0      	addlt	r0, r0, r3
 800cc62:	4770      	bx	lr

0800cc64 <_raise_r>:
 800cc64:	291f      	cmp	r1, #31
 800cc66:	b538      	push	{r3, r4, r5, lr}
 800cc68:	4604      	mov	r4, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	d904      	bls.n	800cc78 <_raise_r+0x14>
 800cc6e:	2316      	movs	r3, #22
 800cc70:	6003      	str	r3, [r0, #0]
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc7a:	b112      	cbz	r2, 800cc82 <_raise_r+0x1e>
 800cc7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc80:	b94b      	cbnz	r3, 800cc96 <_raise_r+0x32>
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 f830 	bl	800cce8 <_getpid_r>
 800cc88:	462a      	mov	r2, r5
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc92:	f000 b817 	b.w	800ccc4 <_kill_r>
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d00a      	beq.n	800ccb0 <_raise_r+0x4c>
 800cc9a:	1c59      	adds	r1, r3, #1
 800cc9c:	d103      	bne.n	800cca6 <_raise_r+0x42>
 800cc9e:	2316      	movs	r3, #22
 800cca0:	6003      	str	r3, [r0, #0]
 800cca2:	2001      	movs	r0, #1
 800cca4:	e7e7      	b.n	800cc76 <_raise_r+0x12>
 800cca6:	2400      	movs	r4, #0
 800cca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccac:	4628      	mov	r0, r5
 800ccae:	4798      	blx	r3
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e7e0      	b.n	800cc76 <_raise_r+0x12>

0800ccb4 <raise>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <raise+0xc>)
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	f7ff bfd3 	b.w	800cc64 <_raise_r>
 800ccbe:	bf00      	nop
 800ccc0:	20000070 	.word	0x20000070

0800ccc4 <_kill_r>:
 800ccc4:	b538      	push	{r3, r4, r5, lr}
 800ccc6:	4d07      	ldr	r5, [pc, #28]	; (800cce4 <_kill_r+0x20>)
 800ccc8:	2300      	movs	r3, #0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4608      	mov	r0, r1
 800ccce:	4611      	mov	r1, r2
 800ccd0:	602b      	str	r3, [r5, #0]
 800ccd2:	f7f5 f95b 	bl	8001f8c <_kill>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	d102      	bne.n	800cce0 <_kill_r+0x1c>
 800ccda:	682b      	ldr	r3, [r5, #0]
 800ccdc:	b103      	cbz	r3, 800cce0 <_kill_r+0x1c>
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	bd38      	pop	{r3, r4, r5, pc}
 800cce2:	bf00      	nop
 800cce4:	2000084c 	.word	0x2000084c

0800cce8 <_getpid_r>:
 800cce8:	f7f5 b948 	b.w	8001f7c <_getpid>

0800ccec <_fstat_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d07      	ldr	r5, [pc, #28]	; (800cd0c <_fstat_r+0x20>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	f7f5 f9a6 	bl	800204a <_fstat>
 800ccfe:	1c43      	adds	r3, r0, #1
 800cd00:	d102      	bne.n	800cd08 <_fstat_r+0x1c>
 800cd02:	682b      	ldr	r3, [r5, #0]
 800cd04:	b103      	cbz	r3, 800cd08 <_fstat_r+0x1c>
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	bd38      	pop	{r3, r4, r5, pc}
 800cd0a:	bf00      	nop
 800cd0c:	2000084c 	.word	0x2000084c

0800cd10 <_isatty_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	4d06      	ldr	r5, [pc, #24]	; (800cd2c <_isatty_r+0x1c>)
 800cd14:	2300      	movs	r3, #0
 800cd16:	4604      	mov	r4, r0
 800cd18:	4608      	mov	r0, r1
 800cd1a:	602b      	str	r3, [r5, #0]
 800cd1c:	f7f5 f9a5 	bl	800206a <_isatty>
 800cd20:	1c43      	adds	r3, r0, #1
 800cd22:	d102      	bne.n	800cd2a <_isatty_r+0x1a>
 800cd24:	682b      	ldr	r3, [r5, #0]
 800cd26:	b103      	cbz	r3, 800cd2a <_isatty_r+0x1a>
 800cd28:	6023      	str	r3, [r4, #0]
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}
 800cd2c:	2000084c 	.word	0x2000084c

0800cd30 <_init>:
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd32:	bf00      	nop
 800cd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd36:	bc08      	pop	{r3}
 800cd38:	469e      	mov	lr, r3
 800cd3a:	4770      	bx	lr

0800cd3c <_fini>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr
